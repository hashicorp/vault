<Hds::Button @text="Generate policy" @color="tertiary" @icon="shield-check" {{on "click" this.openFlyout}} />
{{#if this.showFlyout}}

  <Hds::Flyout @size="large" id="policy-builder" @onClose={{fn (mut this.showFlyout) false}} as |M|>
    <M.Header @icon="wand" @tagline="Policy builder for {{this.context}}">
      Policy Wizard
    </M.Header>
    <M.Body>

      {{! CREATE OR EDIT A POLICY  }}
      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <Hds::Text::Display class="has-bottom-margin-xxs">Create or edit a policy</Hds::Text::Display>
        <Hds::Form::Radio::Group @layout="horizontal" {{on "change" this.selectPolicy}} class="has-bottom-margin-m" as |G|>
          <G.HelperText>Choose to create a new policy or edit existing one</G.HelperText>
          <G.RadioField checked={{eq this.policyAction "create"}} @value="create" as |F|>
            <F.Label>Create a new policy</F.Label>
          </G.RadioField>
          <G.RadioField checked={{eq this.policyAction "edit"}} @value="edit" as |F|>
            <F.Label>Edit an existing policy</F.Label>
          </G.RadioField>
        </Hds::Form::Radio::Group>

        {{#if (eq this.policyAction "create")}}
          <Hds::Form::TextInput::Field class="field" as |F|>
            <F.Label>Policy name</F.Label>
          </Hds::Form::TextInput::Field>
          <Hds::Reveal class="is-fullwidth has-top-margin-xxs" @text="Add a description">
            <Hds::Form::TextInput::Field class="field" as |F|>
              <F.Label>Description</F.Label>
            </Hds::Form::TextInput::Field>
          </Hds::Reveal>
        {{else if (eq this.policyAction "edit")}}
          <Hds::Form::Select::Field class="field" as |F|>
            <F.Label>Select a policy</F.Label>
            <F.HelperText>The configured permissions will be added to the selected policy.</F.HelperText>
            <F.Options>
              <option value=""></option>
              {{#each this.existingPolicies as |policy|}}
                <option selected={{eq this.policyName policy}} value={{policy}}>
                  {{policy}}
                </option>
              {{/each}}
            </F.Options>
          </Hds::Form::Select::Field>
        {{/if}}
      </Hds::Card::Container>

      {{! POLICY PATHS }}
      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <div class="is-flex-between">
          <Hds::Text::Display class="has-bottom-margin-xxs">Policy stanza</Hds::Text::Display>
          <Hds::Form::Toggle::Field
            name="toggle-view"
            {{on "change" (fn (mut this.showAdvanced) (not this.showAdvanced))}}
            as |F|
          >
            <F.Label>Preview policy</F.Label>
          </Hds::Form::Toggle::Field>
        </div>

        {{#if this.showAdvanced}}
          {{! POLICY SAMPLE }}
          <div class="has-padding-m has-top-margin-m has-bottom-margin-m">
            <Hds::CodeBlock
              @value={{this.policySnippet}}
              @language="yaml"
              @hasCopyButton={{true}}
              @hasLineNumbers={{false}}
            />
          </div>
        {{else}}
          {{! PATH CAPABILITIES CARD }}
          {{#each this.capabilities as |capability|}}
            <Hds::Card::Container @background="neutral-secondary" class="has-padding-m has-top-margin-m has-bottom-margin-m">
              <Hds::Button
                @text="Remove path"
                @icon="trash"
                @isIconOnly={{true}}
                @color="critical"
                class="is-pulled-right"
                {{on "click" (fn this.deletePath capability.path)}}
              />
              <div class="is-flex-between has-bottom-margin-xxs">
                <Hds::Form::TextInput::Field
                  @value={{capability.path}}
                  class="field"
                  {{on "change" capability.setPath}}
                  as |F|
                >
                  <F.Label class="has-top-margin-m">API path:</F.Label>
                </Hds::Form::TextInput::Field>
              </div>

              <Hds::Form::Checkbox::Group class="field" @layout="horizontal" @name="PATH NAME" as |G|>
                <G.Legend class="has-top-padding-m">Capabilities</G.Legend>
                {{#each this.permissions as |p|}}
                  <G.CheckboxField @value={{p}} {{on "change" capability.setPermissions}} as |F|>
                    <F.Label>{{p}}</F.Label>
                  </G.CheckboxField>
                {{/each}}
              </Hds::Form::Checkbox::Group>
            </Hds::Card::Container>
          {{/each}}
        {{/if}}

        <Hds::Button @icon="plus" @text="Add new path" @size="small" @color="secondary" {{on "click" this.addPath}} />
      </Hds::Card::Container>

      {{! POLICY ASSIGNMENT }}

      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <Hds::Text::Display>Apply policy via</Hds::Text::Display>
        <Hds::Tabs as |T|>
          <T.Tab Tab data-test-tab-example-policy>
            UI
          </T.Tab>
          <T.Tab data-test-tab-your-policy>
            CLI
          </T.Tab>
          <T.Tab Tab data-test-tab-example-policy>
            TFVP
          </T.Tab>

          <T.Panel class="has-top-padding-m">
            <Hds::Button @text="Apply policy" @color="secondary" @icon="wand" @isFullWidth={{true}} />
          </T.Panel>
          <T.Panel>
            <Hds::CodeBlock @value={{this.cli}} @language="ruby" @hasCopyButton={{true}} />
          </T.Panel>
          <T.Panel class="has-top-padding-m">
            <Hds::CodeBlock @value={{this.tfvp}} @language="ruby" @hasCopyButton={{true}} />
          </T.Panel>
        </Hds::Tabs>
      </Hds::Card::Container>
    </M.Body>
  </Hds::Flyout>
{{/if}}