<Hds::Button
  @text="Generate policy"
  @color="tertiary"
  @icon="shield-check"
  {{on "click" this.openFlyout}}
  class="policy-wizard"
/>

{{#if this.showFlyout}}
  <Hds::Flyout @size="large" @onClose={{fn (mut this.showFlyout) false}} as |M|>
    <M.Header class="policy-wizard" @icon="wand">
      Policy Wizard
    </M.Header>
    <M.Body>

      {{! CREATE OR EDIT A POLICY  }}
      <Hds::Card::Container class="has-padding-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <Hds::Text::Display class="has-bottom-margin-xxs">Create or edit a policy</Hds::Text::Display>
        <Hds::Form::Radio::Group
          @layout="horizontal"
          @name="policyAction"
          {{on "input" this.handlePolicySelection}}
          class="has-bottom-margin-m"
          as |G|
        >
          <G.HelperText>Choose to create a new policy or edit existing one</G.HelperText>
          <G.RadioField checked={{eq this.policyAction "create"}} @value="create" as |F|>
            <F.Label>Create a new policy</F.Label>
          </G.RadioField>
          <G.RadioField checked={{eq this.policyAction "edit"}} @value="edit" as |F|>
            <F.Label>Edit an existing policy</F.Label>
          </G.RadioField>
        </Hds::Form::Radio::Group>

        {{#if (eq this.policyAction "create")}}
          <Hds::Form::TextInput::Field
            class="field"
            name="name"
            autocomplete="off"
            {{on "input" this.handlePolicySelection}}
            as |F|
          >
            <F.Label>Policy name</F.Label>
          </Hds::Form::TextInput::Field>
        {{else if (eq this.policyAction "edit")}}
          <Hds::Form::Select::Field class="field" name="policyName" {{on "input" this.handlePolicySelection}} as |F|>
            <F.Label>Select a policy</F.Label>
            <F.HelperText>The configured permissions will be added to the selected policy.</F.HelperText>
            <F.Options>
              <option value=""></option>
              {{#each this.existingPolicies as |policy|}}
                <option selected={{eq this.policyName policy}} value={{policy}}>
                  {{policy}}
                </option>
              {{/each}}
            </F.Options>
          </Hds::Form::Select::Field>
        {{/if}}
      </Hds::Card::Container>

      {{! POLICY PATHS }}
      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <div class="is-flex-between">
          <Hds::Text::Display class="has-bottom-margin-xxs">Policy stanza</Hds::Text::Display>
          <Hds::Form::Toggle::Field {{on "input" (fn (mut this.showPreview) (not this.showPreview))}} as |F|>
            <F.Label>Preview policy</F.Label>
          </Hds::Form::Toggle::Field>
        </div>

        {{! POLICY SAMPLE }}
        {{#if this.showPreview}}
          <div class="has-padding-m has-top-margin-m has-bottom-margin-m">
            <Hds::CodeBlock
              @value={{this.policySnippet}}
              @language="hcl"
              @hasCopyButton={{true}}
              @hasLineNumbers={{false}}
            />
          </div>
        {{else}}
          {{! PATH CAPABILITIES CARD }}
          {{#each this.policyStanzas as |stanza|}}
            <Hds::Card::Container @background="neutral-secondary" class="has-padding-s has-top-margin-m has-bottom-margin-m">
              <Hds::Button
                @text="Remove path"
                @icon="trash"
                @isIconOnly={{true}}
                @color="critical"
                class="is-pulled-right"
                {{on "click" (fn this.deletePath stanza.path)}}
              />
              <div class="is-flex-between has-bottom-margin-xxs">
                <Hds::Form::TextInput::Field @value={{stanza.path}} class="field" {{on "input" stanza.setPath}} as |F|>
                  <F.Label class="has-top-margin-m">API path:</F.Label>
                </Hds::Form::TextInput::Field>
              </div>

              <Hds::Form::Checkbox::Group class="field" @layout="horizontal" @name="PATH NAME" as |G|>
                <G.Legend class="has-top-padding-m">Capabilities</G.Legend>
                {{#each this.permissions as |p|}}
                  <G.CheckboxField
                    checked={{includes p stanza.permissions}}
                    @value={{p}}
                    {{on "input" stanza.setPermissions}}
                    as |F|
                  >
                    <F.Label>{{p}}</F.Label>
                  </G.CheckboxField>
                {{/each}}
              </Hds::Form::Checkbox::Group>
            </Hds::Card::Container>
          {{/each}}
          <Hds::Button @icon="plus" @text="Add new path" @size="small" @color="secondary" {{on "click" this.addPath}} />
        {{/if}}

      </Hds::Card::Container>

      {{! POLICY ASSIGNMENT }}
      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <Hds::Text::Display @tag="p" class="has-bottom-margin-xxs">Assign policy</Hds::Text::Display>
        <Hds::Text::Body @tag="p" class="has-bottom-padding-s">Select who this policy should be applied to.</Hds::Text::Body>
        {{#each-in this.identityOptions as |type options|}}
          <Hds::Form::SuperSelect::Multiple::Field
            @onChange={{fn this.handleAssignment type}}
            @selected={{get this.selectedAssignments type}}
            @options={{options}}
            @searchEnabled={{true}}
            @searchField="name"
            class="field"
            as |F|
          >
            <F.Label>{{get (this.displayText type) "title"}}</F.Label>
            <F.HelperText>{{get (this.displayText type) "description"}}</F.HelperText>
            <F.Options>
              {{#let F.options as |option|}}
                {{option.name}}
              {{/let}}
            </F.Options>
          </Hds::Form::SuperSelect::Multiple::Field>
        {{/each-in}}

      </Hds::Card::Container>

      <Hds::Card::Container class="has-padding-m has-top-margin-m has-bottom-margin-m" @level="base" @hasBorder={{true}}>
        <Hds::Text::Display>Apply policy via</Hds::Text::Display>
        <Hds::Tabs as |T|>
          <T.Tab>
            UI
          </T.Tab>
          <T.Tab>
            CLI
          </T.Tab>
          <T.Tab>
            TFVP
          </T.Tab>

          <T.Panel class="has-top-padding-m">
            <Hds::Text::Body @tag="p" class="has-bottom-padding-s">Click "Apply policy" to assigned
              {{this.policyAction}}
              the policy and assign it to the selected
              {{this.assignmentText}}.
            </Hds::Text::Body>
            <Hds::Button @text="Apply policy" @icon="wand" @isFullWidth={{true}} {{on "click" this.applyPolicy}} />
          </T.Panel>
          <T.Panel>
            <Hds::CodeBlock @value={{this.cliSnippet}} @language="ruby" @hasCopyButton={{true}} />
          </T.Panel>
          <T.Panel class="has-top-padding-m">
            <Hds::CodeBlock @value={{this.tfvpSnippet}} @language="hcl" @hasCopyButton={{true}} />
          </T.Panel>
        </Hds::Tabs>
      </Hds::Card::Container>
    </M.Body>
  </Hds::Flyout>
{{/if}}