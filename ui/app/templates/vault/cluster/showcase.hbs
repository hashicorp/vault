{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: BUSL-1.1
~}}

<div class="shw-page-wrapper">

  <h1>Vault Components Showcase</h1>

  <hr />

  <h2>Form Components</h2>

  <h3>FormFieldLabel</h3>

  <pre>Only Label</pre>
  <FormFieldLabel @label="This is the label" />

  <pre>Label with HelpText</pre>
  <FormFieldLabel @label="This is the label" @helpText="This is the help text" />

  <pre>Only SubText</pre>
  <FormFieldLabel @subText="This is the subtext" />

  <pre>SubText with DocLink</pre>
  <FormFieldLabel @subText="This is the subtext" @docLink="#" />

  <pre>Label + SubText</pre>
  <FormFieldLabel @label="This is the label" @subText="This is the subtext" />

  <pre>Label with HelpText + SubText with DocLink</pre>
  <FormFieldLabel @label="This is the label" @helpText="This is the help text" @subText="This is the subtext" @docLink="#" />

  <hr />

  <h3>FormField</h3>

  {{#let
    (array
      (hash editType="boolean" variants=(array "base" "with label" "with helpText + subText + docLink" "checked" "disabled"))
      (hash
        editType="checkboxList"
        variants=(array "base" "with label" "with helpText + subText + docLink" "with validation error")
      )
      (hash
        editType="dateTimeLocal"
        variants=(array "base" "with label" "with helpText + subText + docLink" "with value" "with validation error")
      )
      (hash editType="file" variants=(array "base" "with label" "with helpText + subText + docLink" "with validation error"))
      (hash
        editType="input"
        attrType="string"
        variants=(array
          "base"
          "with label"
          "with helpText + subText + docLink"
          "with placeholder"
          "with value"
          "with character limit"
          "with validation error"
          "readonly"
          "disabled"
        )
      )
      (hash
        editType="json"
        attrType="string"
        variants=(array "base" "with label" "with helpText" "with value" "with value + restore")
      )
      (hash
        editType="kv"
        variants=(array
          "base"
          "with label"
          "with label as section header"
          "with helpText + subText"
          "with key/value placeholders"
          "single row"
          "with value"
          "with validation error"
          "with whitespace in key"
        )
      )
      (hash editType="mountAccessor" variants=(array "base" "with label" "with helpText" "with value"))
      (hash editType="object" attrType="object" variants=(array "base" "with label" "with helpText" "with value"))
      (hash
        editType="optionalText"
        variants=(array
          "base" "with label" "with subText + docLink" "with default subText" "with value" "with value + subText + docLink"
        )
      )
      (hash
        editType="password"
        attrType="string"
        variants=(array "base" "with label" "with helpText + subText + docLink" "with value")
      )
      (hash
        editType="radio"
        variants=(array
          "base" "with label" "with helpText + subText + docLink" "with item subText" "with item helpText" "disabled"
        )
      )
      (hash editType="regex" variants=(array "base" "with label" "with helpText + subText + docLink" "with value"))
      (hash
        editType="searchSelect"
        variants=(array "base" "with label" "with label as section header" "with helpText + subText" "with value")
      )
      (hash
        editType="select"
        variants=(array "base" "with label" "with helpText + subText" "with no default" "with value" "with validation error")
      )
      (hash editType="stringArray" variants=(array "base" "with label" "with helpText + subText" "with value"))
      (hash editType="sensitive" variants=(array "base" "with label" "with value" "with copy"))
      (hash
        editType="textarea"
        attrType="string"
        variants=(array "base" "with label" "with helpText + subText + docLink" "with value" "with validation error")
      )
      (hash
        editType="ttl"
        variants=(array
          "base"
          "with helpText"
          "with custom helper texts"
          "with value"
          "with value 0s"
          "with value 1h"
          "with validation error"
          "with hidden toggle"
        )
      )
      (hash editType="yield" variants=(array "yielded content"))
    )
    as |FormFieldTypes|
  }}
    {{#each FormFieldTypes as |FormFieldType index|}}
      {{#unless (eq index 0)}}
        <hr level="2" />
      {{/unless}}
      {{#let FormFieldType.editType FormFieldType.attrType FormFieldType.variants as |editType attrType variants|}}
        <h4>Type "{{editType}}"</h4>
        {{#each variants as |variant|}}
          {{#let
            (fn this.dynamicFormFieldOptionsModels editType)
            (fn this.dynamicFormFieldOptionsPossibleValues editType variant)
            (fn this.dynamicFormFieldOptionsFieldValue editType)
            as |dynamicFormFieldOptionsModels dynamicFormFieldOptionsPossibleValues dynamicFormFieldOptionsFieldValue|
          }}
            <pre>{{capitalize variant}}</pre>
            <FormField
              data-test-field={{true}}
              @attr={{(hash
                name=(if
                  (or (eq editType "input") (eq editType "optionalText") (eq editType "radio") (eq editType "regex"))
                  (concat editType "-" variant)
                  editType
                )
                type=attrType
                options=(hash
                  editType=editType
                  label=(unless (eq variant "base") (concat "This is the label of the '" editType "' type of field"))
                  isSectionHeader=(if (eq variant "with label as section header") true)
                  helpText=(if
                    (or
                      (eq variant "with helpText")
                      (eq variant "with helpText + subText")
                      (eq variant "with helpText + subText + docLink")
                      (eq variant "with subText + docLink")
                      (eq variant "with value + subText + docLink")
                    )
                    "This is the help text"
                  )
                  subText=(if
                    (or
                      (eq variant "with subText")
                      (eq variant "with helpText + subText")
                      (eq variant "with helpText + subText + docLink")
                      (eq variant "with subText + docLink")
                      (eq variant "with value + subText + docLink")
                    )
                    "This is the subtext"
                  )
                  defaultSubText=(if
                    (and (eq editType "optionalText") (eq variant "with default subText")) "This is the default subtext"
                  )
                  docLink=(if
                    (or (eq variant "with helpText + subText + docLink") (eq variant "with value + subText + docLink")) "/#"
                  )
                  example=(if (and (eq editType "json") (eq variant "with value + restore")) this.jsonExample)
                  noCopy=(if (and (eq editType "sensitive") (eq variant "with copy")) false true)
                  hideToggle=(if (and (eq editType "ttl") (eq variant "with hidden toggle")) true false)
                  helperTextDisabled=(if
                    (and (eq editType "ttl") (eq variant "with custom helper text")) "Disabled state custom helper text"
                  )
                  helperTextEnabled=(if
                    (and (eq editType "ttl") (eq variant "with custom helper text")) "Enabled state custom helper text"
                  )
                  readOnly=(if (eq variant "readonly") true false)
                  editDisabled=(if (eq variant "disabled") "Enabled state custom helper text")
                  noDefault=(if (and (eq editType "select") (eq variant "with no default")) true false)
                  placeholder=(if (and (eq editType "input") (eq variant "with placeholder")) "This is the placeholder text")
                  keyPlaceholder=(if (and (eq editType "kv") (eq variant "with key/value placeholders")) "Key placeholder")
                  valuePlaceholder=(if
                    (and (eq editType "kv") (eq variant "with key/value placeholders")) "Value placeholder"
                  )
                  isSingleRow=(if (and (eq editType "kv") (eq variant "single row")) true false)
                  characterLimit=(if (and (eq editType "input") (eq variant "with character limit")) 10)
                  models=(dynamicFormFieldOptionsModels)
                  possibleValues=(dynamicFormFieldOptionsPossibleValues)
                  fieldValue=(dynamicFormFieldOptionsFieldValue)
                  sensitive=(if (eq editType "sensitive") true false)
                )
              )}}
              @disabled={{if (eq variant "disabled") true false}}
              @mode={{if (eq variant "readonly") "edit"}}
              @model={{this.dynamicFormFieldModel editType variant}}
              @modelValidations={{this.dynamicFormFieldModelValidations editType variant}}
            >
              {{#if (eq editType "yield")}}
                <span>This is yielded content</span>
              {{/if}}
            </FormField>
          {{/let}}
        {{/each}}
      {{/let}}
    {{/each}}
  {{/let}}

  <hr />

  <h3>FormError</h3>

  <pre>Yielded text</pre>
  <FormError>This is the error text</FormError>

  <hr />

  <h3>FormSaveButtons</h3>

  <pre>Save</pre>
  <FormSaveButtons @saveButtonText="Save" />

  <pre>Save / Loading state (isSaving=true)</pre>
  <FormSaveButtons @saveButtonText="Save" @isSaving={{true}} />

  <pre>Save + Cancel (onCancel)</pre>
  <FormSaveButtons @saveButtonText="Save" @cancelButtonText="Cancel" @onCancel={{this.noop}} />

  <pre>Save + Cancel (cancelLinkParams)</pre>
  <FormSaveButtons @saveButtonText="Save" @cancelButtonText="Cancel" @cancelLinkParams={{array "vault.cluster.storage"}} />

  <pre>Save (isSaving=true / saveButtonText="Loading") + Cancel</pre>
  <FormSaveButtons @saveButtonText="Save" @isSaving={{true}} @cancelButtonText="Cancel" @onCancel={{this.noop}} />

  <pre>Without top border (includeBox=false)</pre>
  <FormSaveButtons @saveButtonText="Save" @cancelButtonText="Cancel" @onCancel={{this.noop}} @includeBox={{false}} />

  <hr />

  <h3>ReadonlyFormField</h3>

  {{#let
    (array
      (hash
        attrType="text"
        variants=(array "base" "with label" "with helpText + subText" "with value" "with value + helpText + subText")
      )
      (hash
        attrType="password"
        variants=(array "base" "with label" "with helpText + subText" "with value" "with value + helpText + subText")
      )
      (hash
        attrType="date"
        variants=(array "base" "with label" "with helpText + subText" "with value" "with value + helpText + subText")
      )
      (hash
        attrType="select"
        variants=(array "base" "with label" "with helpText + subText" "with value" "with value + helpText + subText")
      )
    )
    as |ReadonlyFormFieldTypes|
  }}
    {{#each ReadonlyFormFieldTypes as |ReadonlyFormFieldType index|}}
      {{#unless (eq index 0)}}
        <hr level="2" />
      {{/unless}}
      {{#let ReadonlyFormFieldType.attrType ReadonlyFormFieldType.variants as |attrType variants|}}
        <h4>Input type="{{attrType}}"</h4>
        {{#each variants as |variant|}}
          <pre>{{capitalize variant}}</pre>
          <ReadonlyFormField
            @value={{this.dynamicReadonlyFormFieldValue attrType variant}}
            @attr={{(hash
              name=(concat attrType "-" variant)
              type=attrType
              options=(hash
                label=(unless (eq variant "base") (concat "This is the label of the readonly '" attrType "' type of field"))
                helpText=(if
                  (or
                    (eq variant "with helpText")
                    (eq variant "with helpText + subText")
                    (eq variant "with value + helpText + subText")
                  )
                  "This is the help text"
                )
                subText=(if
                  (or
                    (eq variant "with subText")
                    (eq variant "with helpText + subText")
                    (eq variant "with value + helpText + subText")
                  )
                  "This is the subtext"
                )
                possibleValues=(if (eq attrType "select") (array "a" "b" "c"))
              )
            )}}
          />
        {{/each}}
      {{/let}}
    {{/each}}
  {{/let}}

  <hr />

  <h3>FormFieldGroups</h3>

  <p>TODO</p>

  <hr />

  <h3>FormFieldGroupsLoop</h3>

  <p>TODO</p>

  <hr />

  <h3>FormFieldGroupFromModel</h3>

  <p>TODO</p>

  <hr />

  <h3>AutocompleteInput</h3>

  {{#let (array "base" "with label" "with subText" "with placeholder" "with value") as |variants index|}}
    {{#each variants as |variant|}}
      {{#unless (eq index 0)}}
        <hr level="2" />
      {{/unless}}
      <pre>{{capitalize variant}}</pre>
      <AutocompleteInput
        @label={{unless (eq variant "base") "This is the label of the 'AutocompleteInput' type of input"}}
        @subText={{if (or (eq variant "with subText") (eq variant "with value + subText")) "Type '$' to see autocomplete"}}
        @placeholder={{if (eq variant "with placeholder") "This is the placeholder text"}}
        @value={{if (eq variant "with value") "Lorem"}}
        @optionsTrigger="$"
        @options={{(array
          (hash label="Lorem" value="lorem") (hash label="Ipsum" value="ipsum") (hash label="Dolor" value="dolor")
        )}}
        @onChange={{this.noop}}
      />
    {{/each}}
  {{/let}}

  <hr />

  <h3>CommandInput</h3>

  <p>Not used in the codebase</p>

  <hr />

  <h3>EnableInput</h3>

  <blockquote>EnableInput components render a disabled input with a hardcoded masked value beside an "Edit" button to
    "enable" the input. Clicking "Edit" hides the disabled input and renders the yielded component. This way any data
    management is handled by the parent. These are useful for editing inputs of sensitive values not returned by the API. The
    extra click ensures the user is intentionally editing the field.</blockquote>

  <pre>With generic input / with Input placeholder (@label)</pre>
  <div {{style width="fit-content"}}>
    <EnableInput @label="This is the label">
      <Input @type="text" @value="This input is yielded" />
    </EnableInput>
  </div>

  <pre>With generic input / with ReadonlyFormField placeholder (@attr)</pre>
  <div {{style width="fit-content"}}>
    <EnableInput
      @attr={{(hash
        name="EnableInputWithReadonlyFormField"
        type="text"
        options=(hash label="This is the label" helpText="This is the help text" subText="This is the subtext")
      )}}
    >
      <Input @type="text" @value="This input is yielded" />
    </EnableInput>
  </div>

  <hr />

  <h3>FilterInput</h3>

  <pre>Base</pre>
  <FilterInput />

  <pre>With value</pre>
  <FilterInput value="Lorem ipsum" />

  <pre>With icon hidden</pre>
  <FilterInput value="Lorem ipsum" @hideIcon={{true}} />

  <hr />

  <h3>InputSearch</h3>

  <blockquote>This component renders an input that fires a callback on "keyup" containing the input's value</blockquote>

  <pre>Base</pre>
  <InputSearch @id="input-search-base" />

  <pre>With label</pre>
  <InputSearch @id="input-search-with-label" @label="This is the label" />

  <pre>With subText</pre>
  <InputSearch @id="input-search-with-subtext" @label="This is the label" @subText="This is the subtext" />

  <pre>With placeholder</pre>
  <InputSearch @id="input-search-with-placeholder" @label="This is the label" @placeholder="This is the placeholder" />

  <pre>With value</pre>
  <InputSearch @id="input-search-with-value" @label="This is the label" @initialValue="Lorem ipsum" />

  <hr />

  <h3>KvSuggestionInput</h3>

  <p>TODO</p>

  <hr />

  <h3>MaskedInput</h3>

  <p>TODO</p>

  <hr />

  <h3>NavigateInput</h3>

  <p>TODO</p>

  <hr />

  <h3>ObjectListInput</h3>

  <p>TODO</p>

  <hr />

  <h3>Select</h3>

  {{#let (array "base" "with label" "with no default" "with selected value" "inline" "full width") as |variants index|}}
    {{#each variants as |variant|}}
      {{#unless (eq index 0)}}
        <hr level="2" />
      {{/unless}}
      <pre>{{capitalize variant}}</pre>
      <Select
        @label={{unless (eq variant "base") "This is the label of the 'Select'"}}
        @selectedValue={{if (eq variant "with selected value") 123456}}
        @labelAttribute="label"
        @valueAttribute="value"
        @options={{(array
          (hash label="Lorem ipsum" value="lorem")
          (hash label="123456" value=123456)
          (hash label="Disabled option" value="disabled" isDisabled=true)
        )}}
        @isInline={{if (eq variant "inline") true false}}
        @isFullwidth={{if (eq variant "full width") true false}}
        @onChange={{this.noop}}
      />
    {{/each}}
  {{/let}}

  <hr />

  <h3>TextFile</h3>

  {{#let
    (array "base" "base / upload only" "with label" "with helpText + subText + docLink" "with validation error")
    as |variants index|
  }}
    {{#each variants as |variant|}}
      {{#unless (eq index 0)}}
        <hr level="2" />
      {{/unless}}
      <pre>{{capitalize variant}}</pre>
      <TextFile
        @uploadOnly={{if (eq variant "base / upload only") true false}}
        @label={{if (not (or (eq variant "base") (eq variant "base / upload only"))) "This is the label of the 'Select'"}}
        @helpText={{if (eq variant "with helpText + subText + docLink") "This is the helptext"}}
        @subText={{if (eq variant "with helpText + subText + docLink") "This is the subtext"}}
        @docLink={{if (eq variant "with helpText + subText + docLink") "/#"}}
        @validationError={{if (eq variant "with validation error") "This is the validation error message"}}
      />
    {{/each}}
  {{/let}}

</div>