/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliasCreateRequest,
  AliasUpdateByIdRequest,
  EntitiesCreateDuplicatesRequest,
  EntityAliasCreateDuplicatesRequest,
  EntityAliasesCreateDuplicatesRequest,
  EntityBatchDeleteRequest,
  EntityCreateAliasRequest,
  EntityCreateRequest,
  EntityLookUpRequest,
  EntityMergeRequest,
  EntityUpdateAliasByIdRequest,
  EntityUpdateByIdRequest,
  EntityUpdateByNameRequest,
  GroupCreateAliasRequest,
  GroupCreateRequest,
  GroupLookUpRequest,
  GroupUpdateAliasByIdRequest,
  GroupUpdateByIdRequest,
  GroupUpdateByNameRequest,
  GroupsCreateDuplicatesRequest,
  MfaAdminDestroyTotpSecretRequest,
  MfaAdminGenerateTotpSecretRequest,
  MfaCreateDuoMethodRequest,
  MfaCreateOktaMethodRequest,
  MfaCreatePingIdMethodRequest,
  MfaCreateTotpMethodRequest,
  MfaGenerateTotpSecretRequest,
  MfaUpdateDuoMethodRequest,
  MfaUpdateOktaMethodRequest,
  MfaUpdatePingIdMethodRequest,
  MfaUpdateTotpMethodRequest,
  MfaWriteLoginEnforcementRequest,
  OidcConfigureRequest,
  OidcIntrospectRequest,
  OidcProviderAuthorizeWithParametersRequest,
  OidcProviderTokenRequest,
  OidcRotateKeyRequest,
  OidcWriteAssignmentRequest,
  OidcWriteClientRequest,
  OidcWriteKeyRequest,
  OidcWriteProviderRequest,
  OidcWriteRoleRequest,
  OidcWriteScopeRequest,
  PersonaCreateRequest,
  PersonaUpdateByIdRequest,
  StandardListResponse,
} from '../models/index';
import {
    AliasCreateRequestFromJSON,
    AliasCreateRequestToJSON,
    AliasUpdateByIdRequestFromJSON,
    AliasUpdateByIdRequestToJSON,
    EntitiesCreateDuplicatesRequestFromJSON,
    EntitiesCreateDuplicatesRequestToJSON,
    EntityAliasCreateDuplicatesRequestFromJSON,
    EntityAliasCreateDuplicatesRequestToJSON,
    EntityAliasesCreateDuplicatesRequestFromJSON,
    EntityAliasesCreateDuplicatesRequestToJSON,
    EntityBatchDeleteRequestFromJSON,
    EntityBatchDeleteRequestToJSON,
    EntityCreateAliasRequestFromJSON,
    EntityCreateAliasRequestToJSON,
    EntityCreateRequestFromJSON,
    EntityCreateRequestToJSON,
    EntityLookUpRequestFromJSON,
    EntityLookUpRequestToJSON,
    EntityMergeRequestFromJSON,
    EntityMergeRequestToJSON,
    EntityUpdateAliasByIdRequestFromJSON,
    EntityUpdateAliasByIdRequestToJSON,
    EntityUpdateByIdRequestFromJSON,
    EntityUpdateByIdRequestToJSON,
    EntityUpdateByNameRequestFromJSON,
    EntityUpdateByNameRequestToJSON,
    GroupCreateAliasRequestFromJSON,
    GroupCreateAliasRequestToJSON,
    GroupCreateRequestFromJSON,
    GroupCreateRequestToJSON,
    GroupLookUpRequestFromJSON,
    GroupLookUpRequestToJSON,
    GroupUpdateAliasByIdRequestFromJSON,
    GroupUpdateAliasByIdRequestToJSON,
    GroupUpdateByIdRequestFromJSON,
    GroupUpdateByIdRequestToJSON,
    GroupUpdateByNameRequestFromJSON,
    GroupUpdateByNameRequestToJSON,
    GroupsCreateDuplicatesRequestFromJSON,
    GroupsCreateDuplicatesRequestToJSON,
    MfaAdminDestroyTotpSecretRequestFromJSON,
    MfaAdminDestroyTotpSecretRequestToJSON,
    MfaAdminGenerateTotpSecretRequestFromJSON,
    MfaAdminGenerateTotpSecretRequestToJSON,
    MfaCreateDuoMethodRequestFromJSON,
    MfaCreateDuoMethodRequestToJSON,
    MfaCreateOktaMethodRequestFromJSON,
    MfaCreateOktaMethodRequestToJSON,
    MfaCreatePingIdMethodRequestFromJSON,
    MfaCreatePingIdMethodRequestToJSON,
    MfaCreateTotpMethodRequestFromJSON,
    MfaCreateTotpMethodRequestToJSON,
    MfaGenerateTotpSecretRequestFromJSON,
    MfaGenerateTotpSecretRequestToJSON,
    MfaUpdateDuoMethodRequestFromJSON,
    MfaUpdateDuoMethodRequestToJSON,
    MfaUpdateOktaMethodRequestFromJSON,
    MfaUpdateOktaMethodRequestToJSON,
    MfaUpdatePingIdMethodRequestFromJSON,
    MfaUpdatePingIdMethodRequestToJSON,
    MfaUpdateTotpMethodRequestFromJSON,
    MfaUpdateTotpMethodRequestToJSON,
    MfaWriteLoginEnforcementRequestFromJSON,
    MfaWriteLoginEnforcementRequestToJSON,
    OidcConfigureRequestFromJSON,
    OidcConfigureRequestToJSON,
    OidcIntrospectRequestFromJSON,
    OidcIntrospectRequestToJSON,
    OidcProviderAuthorizeWithParametersRequestFromJSON,
    OidcProviderAuthorizeWithParametersRequestToJSON,
    OidcProviderTokenRequestFromJSON,
    OidcProviderTokenRequestToJSON,
    OidcRotateKeyRequestFromJSON,
    OidcRotateKeyRequestToJSON,
    OidcWriteAssignmentRequestFromJSON,
    OidcWriteAssignmentRequestToJSON,
    OidcWriteClientRequestFromJSON,
    OidcWriteClientRequestToJSON,
    OidcWriteKeyRequestFromJSON,
    OidcWriteKeyRequestToJSON,
    OidcWriteProviderRequestFromJSON,
    OidcWriteProviderRequestToJSON,
    OidcWriteRoleRequestFromJSON,
    OidcWriteRoleRequestToJSON,
    OidcWriteScopeRequestFromJSON,
    OidcWriteScopeRequestToJSON,
    PersonaCreateRequestFromJSON,
    PersonaCreateRequestToJSON,
    PersonaUpdateByIdRequestFromJSON,
    PersonaUpdateByIdRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
} from '../models/index';

export interface AliasCreateOperationRequest {
    aliasCreateRequest: AliasCreateRequest;
}

export interface AliasDeleteByIdRequest {
    id: string;
}

export interface AliasListByIdRequest {
    list: AliasListByIdListEnum;
}

export interface AliasReadByIdRequest {
    id: string;
}

export interface AliasUpdateByIdOperationRequest {
    id: string;
    aliasUpdateByIdRequest: AliasUpdateByIdRequest;
}

export interface EntitiesCreateDuplicatesOperationRequest {
    entitiesCreateDuplicatesRequest: EntitiesCreateDuplicatesRequest;
}

export interface EntityAliasCreateDuplicatesOperationRequest {
    entityAliasCreateDuplicatesRequest: EntityAliasCreateDuplicatesRequest;
}

export interface EntityAliasesCreateDuplicatesOperationRequest {
    entityAliasesCreateDuplicatesRequest: EntityAliasesCreateDuplicatesRequest;
}

export interface EntityBatchDeleteOperationRequest {
    entityBatchDeleteRequest: EntityBatchDeleteRequest;
}

export interface EntityCreateOperationRequest {
    entityCreateRequest: EntityCreateRequest;
}

export interface EntityCreateAliasOperationRequest {
    entityCreateAliasRequest: EntityCreateAliasRequest;
}

export interface EntityDeleteAliasByIdRequest {
    id: string;
}

export interface EntityDeleteByIdRequest {
    id: string;
}

export interface EntityDeleteByNameRequest {
    name: string;
}

export interface EntityListAliasesByIdRequest {
    list: EntityListAliasesByIdListEnum;
}

export interface EntityListByIdRequest {
    list: EntityListByIdListEnum;
}

export interface EntityListByNameRequest {
    list: EntityListByNameListEnum;
}

export interface EntityListFromStorageRequest {
    list: EntityListFromStorageListEnum;
}

export interface EntityLookUpOperationRequest {
    entityLookUpRequest: EntityLookUpRequest;
}

export interface EntityMergeOperationRequest {
    entityMergeRequest: EntityMergeRequest;
}

export interface EntityReadAliasByIdRequest {
    id: string;
}

export interface EntityReadByIdRequest {
    id: string;
}

export interface EntityReadByNameRequest {
    name: string;
}

export interface EntityUpdateAliasByIdOperationRequest {
    id: string;
    entityUpdateAliasByIdRequest: EntityUpdateAliasByIdRequest;
}

export interface EntityUpdateByIdOperationRequest {
    id: string;
    entityUpdateByIdRequest: EntityUpdateByIdRequest;
}

export interface EntityUpdateByNameOperationRequest {
    name: string;
    entityUpdateByNameRequest: EntityUpdateByNameRequest;
}

export interface GroupCreateOperationRequest {
    groupCreateRequest: GroupCreateRequest;
}

export interface GroupCreateAliasOperationRequest {
    groupCreateAliasRequest: GroupCreateAliasRequest;
}

export interface GroupDeleteAliasByIdRequest {
    id: string;
}

export interface GroupDeleteByIdRequest {
    id: string;
}

export interface GroupDeleteByNameRequest {
    name: string;
}

export interface GroupListAliasesByIdRequest {
    list: GroupListAliasesByIdListEnum;
}

export interface GroupListByIdRequest {
    list: GroupListByIdListEnum;
}

export interface GroupListByNameRequest {
    list: GroupListByNameListEnum;
}

export interface GroupListFromStorageRequest {
    list: GroupListFromStorageListEnum;
}

export interface GroupLookUpOperationRequest {
    groupLookUpRequest: GroupLookUpRequest;
}

export interface GroupReadAliasByIdRequest {
    id: string;
}

export interface GroupReadByIdRequest {
    id: string;
}

export interface GroupReadByNameRequest {
    name: string;
}

export interface GroupUpdateAliasByIdOperationRequest {
    id: string;
    groupUpdateAliasByIdRequest: GroupUpdateAliasByIdRequest;
}

export interface GroupUpdateByIdOperationRequest {
    id: string;
    groupUpdateByIdRequest: GroupUpdateByIdRequest;
}

export interface GroupUpdateByNameOperationRequest {
    name: string;
    groupUpdateByNameRequest: GroupUpdateByNameRequest;
}

export interface GroupsCreateDuplicatesOperationRequest {
    groupsCreateDuplicatesRequest: GroupsCreateDuplicatesRequest;
}

export interface MfaAdminDestroyTotpSecretOperationRequest {
    mfaAdminDestroyTotpSecretRequest: MfaAdminDestroyTotpSecretRequest;
}

export interface MfaAdminGenerateTotpSecretOperationRequest {
    mfaAdminGenerateTotpSecretRequest: MfaAdminGenerateTotpSecretRequest;
}

export interface MfaCreateDuoMethodOperationRequest {
    mfaCreateDuoMethodRequest: MfaCreateDuoMethodRequest;
}

export interface MfaCreateOktaMethodOperationRequest {
    mfaCreateOktaMethodRequest: MfaCreateOktaMethodRequest;
}

export interface MfaCreatePingIdMethodOperationRequest {
    mfaCreatePingIdMethodRequest: MfaCreatePingIdMethodRequest;
}

export interface MfaCreateTotpMethodOperationRequest {
    mfaCreateTotpMethodRequest: MfaCreateTotpMethodRequest;
}

export interface MfaDeleteDuoMethodRequest {
    methodId: string;
}

export interface MfaDeleteLoginEnforcementRequest {
    name: string;
}

export interface MfaDeleteOktaMethodRequest {
    methodId: string;
}

export interface MfaDeletePingIdMethodRequest {
    methodId: string;
}

export interface MfaDeleteTotpMethodRequest {
    methodId: string;
}

export interface MfaGenerateTotpSecretOperationRequest {
    mfaGenerateTotpSecretRequest: MfaGenerateTotpSecretRequest;
}

export interface MfaListDuoMethodsRequest {
    list: MfaListDuoMethodsListEnum;
}

export interface MfaListLoginEnforcementsRequest {
    list: MfaListLoginEnforcementsListEnum;
}

export interface MfaListMethodsRequest {
    list: MfaListMethodsListEnum;
}

export interface MfaListOktaMethodsRequest {
    list: MfaListOktaMethodsListEnum;
}

export interface MfaListPingIdMethodsRequest {
    list: MfaListPingIdMethodsListEnum;
}

export interface MfaListTotpMethodsRequest {
    list: MfaListTotpMethodsListEnum;
}

export interface MfaReadDuoMethodRequest {
    methodId: string;
}

export interface MfaReadLoginEnforcementRequest {
    name: string;
}

export interface MfaReadMethodRequest {
    methodId: string;
}

export interface MfaReadOktaMethodRequest {
    methodId: string;
}

export interface MfaReadPingIdMethodRequest {
    methodId: string;
}

export interface MfaReadTotpMethodRequest {
    methodId: string;
}

export interface MfaUpdateDuoMethodOperationRequest {
    methodId: string;
    mfaUpdateDuoMethodRequest: MfaUpdateDuoMethodRequest;
}

export interface MfaUpdateOktaMethodOperationRequest {
    methodId: string;
    mfaUpdateOktaMethodRequest: MfaUpdateOktaMethodRequest;
}

export interface MfaUpdatePingIdMethodOperationRequest {
    methodId: string;
    mfaUpdatePingIdMethodRequest: MfaUpdatePingIdMethodRequest;
}

export interface MfaUpdateTotpMethodOperationRequest {
    methodId: string;
    mfaUpdateTotpMethodRequest: MfaUpdateTotpMethodRequest;
}

export interface MfaWriteLoginEnforcementOperationRequest {
    name: string;
    mfaWriteLoginEnforcementRequest: MfaWriteLoginEnforcementRequest;
}

export interface OidcConfigureOperationRequest {
    oidcConfigureRequest: OidcConfigureRequest;
}

export interface OidcDeleteAssignmentRequest {
    name: string;
}

export interface OidcDeleteClientRequest {
    name: string;
}

export interface OidcDeleteKeyRequest {
    name: string;
}

export interface OidcDeleteProviderRequest {
    name: string;
}

export interface OidcDeleteRoleRequest {
    name: string;
}

export interface OidcDeleteScopeRequest {
    name: string;
}

export interface OidcGenerateTokenRequest {
    name: string;
}

export interface OidcIntrospectOperationRequest {
    oidcIntrospectRequest: OidcIntrospectRequest;
}

export interface OidcListAssignmentsRequest {
    list: OidcListAssignmentsListEnum;
}

export interface OidcListClientsRequest {
    list: OidcListClientsListEnum;
}

export interface OidcListKeysRequest {
    list: OidcListKeysListEnum;
}

export interface OidcListProvidersRequest {
    list: OidcListProvidersListEnum;
    allowedClientId?: string;
}

export interface OidcListRolesRequest {
    list: OidcListRolesListEnum;
}

export interface OidcListScopesRequest {
    list: OidcListScopesListEnum;
}

export interface OidcProviderAuthorizeRequest {
    name: string;
    clientId?: string;
    codeChallenge?: string;
    codeChallengeMethod?: string;
    maxAge?: number;
    nonce?: string;
    redirectUri?: string;
    responseType?: string;
    scope?: string;
    state?: string;
}

export interface OidcProviderAuthorizeWithParametersOperationRequest {
    name: string;
    oidcProviderAuthorizeWithParametersRequest: OidcProviderAuthorizeWithParametersRequest;
}

export interface OidcProviderTokenOperationRequest {
    name: string;
    oidcProviderTokenRequest: OidcProviderTokenRequest;
}

export interface OidcProviderUserInfoRequest {
    name: string;
}

export interface OidcProviderUserInfo2Request {
    name: string;
}

export interface OidcReadAssignmentRequest {
    name: string;
}

export interface OidcReadClientRequest {
    name: string;
}

export interface OidcReadKeyRequest {
    name: string;
}

export interface OidcReadOidcChildWellKnownKeysRequest {
    child: string;
}

export interface OidcReadOidcChildWellKnownOpenidConfigurationRequest {
    child: string;
}

export interface OidcReadProviderRequest {
    name: string;
}

export interface OidcReadProviderOpenIdConfigurationRequest {
    name: string;
}

export interface OidcReadProviderPublicKeysRequest {
    name: string;
}

export interface OidcReadRoleRequest {
    name: string;
}

export interface OidcReadScopeRequest {
    name: string;
}

export interface OidcRotateKeyOperationRequest {
    name: string;
    oidcRotateKeyRequest: OidcRotateKeyRequest;
}

export interface OidcWriteAssignmentOperationRequest {
    name: string;
    oidcWriteAssignmentRequest: OidcWriteAssignmentRequest;
}

export interface OidcWriteClientOperationRequest {
    name: string;
    oidcWriteClientRequest: OidcWriteClientRequest;
}

export interface OidcWriteKeyOperationRequest {
    name: string;
    oidcWriteKeyRequest: OidcWriteKeyRequest;
}

export interface OidcWriteProviderOperationRequest {
    name: string;
    oidcWriteProviderRequest: OidcWriteProviderRequest;
}

export interface OidcWriteRoleOperationRequest {
    name: string;
    oidcWriteRoleRequest: OidcWriteRoleRequest;
}

export interface OidcWriteScopeOperationRequest {
    name: string;
    oidcWriteScopeRequest: OidcWriteScopeRequest;
}

export interface PersonaCreateOperationRequest {
    personaCreateRequest: PersonaCreateRequest;
}

export interface PersonaDeleteByIdRequest {
    id: string;
}

export interface PersonaListByIdRequest {
    list: PersonaListByIdListEnum;
}

export interface PersonaReadByIdRequest {
    id: string;
}

export interface PersonaUpdateByIdOperationRequest {
    id: string;
    personaUpdateByIdRequest: PersonaUpdateByIdRequest;
}

/**
 * 
 */
export class IdentityApi extends runtime.BaseAPI {

    /**
     * Create a new alias.
     */
    async aliasCreateRaw(requestParameters: AliasCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aliasCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'aliasCreateRequest',
                'Required parameter "aliasCreateRequest" was null or undefined when calling aliasCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliasCreateRequestToJSON(requestParameters['aliasCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async aliasCreate(requestParameters: AliasCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliasCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aliasDeleteByIdRaw(requestParameters: AliasDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasDeleteById(requestParameters: AliasDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliasDeleteByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all the alias IDs.
     */
    async aliasListByIdRaw(requestParameters: AliasListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliasListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async aliasListById(requestParameters: AliasListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliasListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliasReadByIdRaw(requestParameters: AliasReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasReadById(requestParameters: AliasReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliasReadByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aliasUpdateByIdRaw(requestParameters: AliasUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasUpdateById().'
            );
        }

        if (requestParameters['aliasUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'aliasUpdateByIdRequest',
                'Required parameter "aliasUpdateByIdRequest" was null or undefined when calling aliasUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliasUpdateByIdRequestToJSON(requestParameters['aliasUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasUpdateById(requestParameters: AliasUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliasUpdateByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entitiesCreateDuplicatesRaw(requestParameters: EntitiesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entitiesCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'entitiesCreateDuplicatesRequest',
                'Required parameter "entitiesCreateDuplicatesRequest" was null or undefined when calling entitiesCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/entities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitiesCreateDuplicatesRequestToJSON(requestParameters['entitiesCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entitiesCreateDuplicates(requestParameters: EntitiesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entitiesCreateDuplicatesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityAliasCreateDuplicatesRaw(requestParameters: EntityAliasCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityAliasCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'entityAliasCreateDuplicatesRequest',
                'Required parameter "entityAliasCreateDuplicatesRequest" was null or undefined when calling entityAliasCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/local-entity-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityAliasCreateDuplicatesRequestToJSON(requestParameters['entityAliasCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityAliasCreateDuplicates(requestParameters: EntityAliasCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityAliasCreateDuplicatesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityAliasesCreateDuplicatesRaw(requestParameters: EntityAliasesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityAliasesCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'entityAliasesCreateDuplicatesRequest',
                'Required parameter "entityAliasesCreateDuplicatesRequest" was null or undefined when calling entityAliasesCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/entity-aliases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityAliasesCreateDuplicatesRequestToJSON(requestParameters['entityAliasesCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityAliasesCreateDuplicates(requestParameters: EntityAliasesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityAliasesCreateDuplicatesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityBatchDeleteRaw(requestParameters: EntityBatchDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityBatchDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'entityBatchDeleteRequest',
                'Required parameter "entityBatchDeleteRequest" was null or undefined when calling entityBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/batch-delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityBatchDeleteRequestToJSON(requestParameters['entityBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityBatchDelete(requestParameters: EntityBatchDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityCreateRaw(requestParameters: EntityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'entityCreateRequest',
                'Required parameter "entityCreateRequest" was null or undefined when calling entityCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityCreateRequestToJSON(requestParameters['entityCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityCreate(requestParameters: EntityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new alias.
     */
    async entityCreateAliasRaw(requestParameters: EntityCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityCreateAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'entityCreateAliasRequest',
                'Required parameter "entityCreateAliasRequest" was null or undefined when calling entityCreateAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityCreateAliasRequestToJSON(requestParameters['entityCreateAliasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async entityCreateAlias(requestParameters: EntityCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityCreateAliasRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityDeleteAliasByIdRaw(requestParameters: EntityDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityDeleteAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteAliasById(requestParameters: EntityDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityDeleteAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityDeleteByIdRaw(requestParameters: EntityDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteById(requestParameters: EntityDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityDeleteByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityDeleteByNameRaw(requestParameters: EntityDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityDeleteByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteByName(requestParameters: EntityDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityDeleteByNameRaw(requestParameters, initOverrides);
    }

    /**
     * List all the alias IDs.
     */
    async entityListAliasesByIdRaw(requestParameters: EntityListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListAliasesById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async entityListAliasesById(requestParameters: EntityListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListAliasesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListByIdRaw(requestParameters: EntityListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListById(requestParameters: EntityListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListByNameRaw(requestParameters: EntityListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListByName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListByName(requestParameters: EntityListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListFromStorageRaw(requestParameters: EntityListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListFromStorage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/from-storage/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListFromStorage(requestParameters: EntityListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListFromStorageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query entities based on various properties.
     */
    async entityLookUpRaw(requestParameters: EntityLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'entityLookUpRequest',
                'Required parameter "entityLookUpRequest" was null or undefined when calling entityLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/lookup/entity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityLookUpRequestToJSON(requestParameters['entityLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query entities based on various properties.
     */
    async entityLookUp(requestParameters: EntityLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityLookUpRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityMergeRaw(requestParameters: EntityMergeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityMergeRequest'] == null) {
            throw new runtime.RequiredError(
                'entityMergeRequest',
                'Required parameter "entityMergeRequest" was null or undefined when calling entityMerge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityMergeRequestToJSON(requestParameters['entityMergeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityMerge(requestParameters: EntityMergeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityMergeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityReadAliasByIdRaw(requestParameters: EntityReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityReadAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadAliasById(requestParameters: EntityReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityReadAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityReadByIdRaw(requestParameters: EntityReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadById(requestParameters: EntityReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityReadByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityReadByNameRaw(requestParameters: EntityReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityReadByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadByName(requestParameters: EntityReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityReadByNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityUpdateAliasByIdRaw(requestParameters: EntityUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityUpdateAliasById().'
            );
        }

        if (requestParameters['entityUpdateAliasByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'entityUpdateAliasByIdRequest',
                'Required parameter "entityUpdateAliasByIdRequest" was null or undefined when calling entityUpdateAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateAliasByIdRequestToJSON(requestParameters['entityUpdateAliasByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateAliasById(requestParameters: EntityUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityUpdateAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityUpdateByIdRaw(requestParameters: EntityUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityUpdateById().'
            );
        }

        if (requestParameters['entityUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'entityUpdateByIdRequest',
                'Required parameter "entityUpdateByIdRequest" was null or undefined when calling entityUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateByIdRequestToJSON(requestParameters['entityUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateById(requestParameters: EntityUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityUpdateByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async entityUpdateByNameRaw(requestParameters: EntityUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityUpdateByName().'
            );
        }

        if (requestParameters['entityUpdateByNameRequest'] == null) {
            throw new runtime.RequiredError(
                'entityUpdateByNameRequest',
                'Required parameter "entityUpdateByNameRequest" was null or undefined when calling entityUpdateByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateByNameRequestToJSON(requestParameters['entityUpdateByNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateByName(requestParameters: EntityUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.entityUpdateByNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupCreateRaw(requestParameters: GroupCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'groupCreateRequest',
                'Required parameter "groupCreateRequest" was null or undefined when calling groupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreateRequestToJSON(requestParameters['groupCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupCreate(requestParameters: GroupCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new group alias, or updates an existing one.
     */
    async groupCreateAliasRaw(requestParameters: GroupCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupCreateAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'groupCreateAliasRequest',
                'Required parameter "groupCreateAliasRequest" was null or undefined when calling groupCreateAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreateAliasRequestToJSON(requestParameters['groupCreateAliasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new group alias, or updates an existing one.
     */
    async groupCreateAlias(requestParameters: GroupCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupCreateAliasRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupDeleteAliasByIdRaw(requestParameters: GroupDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupDeleteAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteAliasById(requestParameters: GroupDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupDeleteAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupDeleteByIdRaw(requestParameters: GroupDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteById(requestParameters: GroupDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupDeleteByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupDeleteByNameRaw(requestParameters: GroupDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupDeleteByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteByName(requestParameters: GroupDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupDeleteByNameRaw(requestParameters, initOverrides);
    }

    /**
     * List all the group alias IDs.
     */
    async groupListAliasesByIdRaw(requestParameters: GroupListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListAliasesById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the group alias IDs.
     */
    async groupListAliasesById(requestParameters: GroupListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListAliasesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the group IDs.
     */
    async groupListByIdRaw(requestParameters: GroupListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the group IDs.
     */
    async groupListById(requestParameters: GroupListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupListByNameRaw(requestParameters: GroupListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListByName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async groupListByName(requestParameters: GroupListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupListFromStorageRaw(requestParameters: GroupListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListFromStorage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/from-storage/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async groupListFromStorage(requestParameters: GroupListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListFromStorageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query groups based on various properties.
     */
    async groupLookUpRaw(requestParameters: GroupLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'groupLookUpRequest',
                'Required parameter "groupLookUpRequest" was null or undefined when calling groupLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/lookup/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupLookUpRequestToJSON(requestParameters['groupLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query groups based on various properties.
     */
    async groupLookUp(requestParameters: GroupLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupLookUpRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupReadAliasByIdRaw(requestParameters: GroupReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupReadAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadAliasById(requestParameters: GroupReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupReadAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupReadByIdRaw(requestParameters: GroupReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadById(requestParameters: GroupReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupReadByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupReadByNameRaw(requestParameters: GroupReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupReadByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadByName(requestParameters: GroupReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupReadByNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupUpdateAliasByIdRaw(requestParameters: GroupUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupUpdateAliasById().'
            );
        }

        if (requestParameters['groupUpdateAliasByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'groupUpdateAliasByIdRequest',
                'Required parameter "groupUpdateAliasByIdRequest" was null or undefined when calling groupUpdateAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateAliasByIdRequestToJSON(requestParameters['groupUpdateAliasByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateAliasById(requestParameters: GroupUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupUpdateAliasByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupUpdateByIdRaw(requestParameters: GroupUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupUpdateById().'
            );
        }

        if (requestParameters['groupUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'groupUpdateByIdRequest',
                'Required parameter "groupUpdateByIdRequest" was null or undefined when calling groupUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateByIdRequestToJSON(requestParameters['groupUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateById(requestParameters: GroupUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupUpdateByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupUpdateByNameRaw(requestParameters: GroupUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupUpdateByName().'
            );
        }

        if (requestParameters['groupUpdateByNameRequest'] == null) {
            throw new runtime.RequiredError(
                'groupUpdateByNameRequest',
                'Required parameter "groupUpdateByNameRequest" was null or undefined when calling groupUpdateByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateByNameRequestToJSON(requestParameters['groupUpdateByNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateByName(requestParameters: GroupUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupUpdateByNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupsCreateDuplicatesRaw(requestParameters: GroupsCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupsCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsCreateDuplicatesRequest',
                'Required parameter "groupsCreateDuplicatesRequest" was null or undefined when calling groupsCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsCreateDuplicatesRequestToJSON(requestParameters['groupsCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupsCreateDuplicates(requestParameters: GroupsCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsCreateDuplicatesRaw(requestParameters, initOverrides);
    }

    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    async mfaAdminDestroyTotpSecretRaw(requestParameters: MfaAdminDestroyTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaAdminDestroyTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaAdminDestroyTotpSecretRequest',
                'Required parameter "mfaAdminDestroyTotpSecretRequest" was null or undefined when calling mfaAdminDestroyTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/admin-destroy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaAdminDestroyTotpSecretRequestToJSON(requestParameters['mfaAdminDestroyTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    async mfaAdminDestroyTotpSecret(requestParameters: MfaAdminDestroyTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaAdminDestroyTotpSecretRaw(requestParameters, initOverrides);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaAdminGenerateTotpSecretRaw(requestParameters: MfaAdminGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaAdminGenerateTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaAdminGenerateTotpSecretRequest',
                'Required parameter "mfaAdminGenerateTotpSecretRequest" was null or undefined when calling mfaAdminGenerateTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/admin-generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaAdminGenerateTotpSecretRequestToJSON(requestParameters['mfaAdminGenerateTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaAdminGenerateTotpSecret(requestParameters: MfaAdminGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaAdminGenerateTotpSecretRaw(requestParameters, initOverrides);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateDuoMethodRaw(requestParameters: MfaCreateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaCreateDuoMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaCreateDuoMethodRequest',
                'Required parameter "mfaCreateDuoMethodRequest" was null or undefined when calling mfaCreateDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/duo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateDuoMethodRequestToJSON(requestParameters['mfaCreateDuoMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateDuoMethod(requestParameters: MfaCreateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaCreateDuoMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateOktaMethodRaw(requestParameters: MfaCreateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaCreateOktaMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaCreateOktaMethodRequest',
                'Required parameter "mfaCreateOktaMethodRequest" was null or undefined when calling mfaCreateOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/okta`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateOktaMethodRequestToJSON(requestParameters['mfaCreateOktaMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateOktaMethod(requestParameters: MfaCreateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaCreateOktaMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreatePingIdMethodRaw(requestParameters: MfaCreatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaCreatePingIdMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaCreatePingIdMethodRequest',
                'Required parameter "mfaCreatePingIdMethodRequest" was null or undefined when calling mfaCreatePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/pingid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreatePingIdMethodRequestToJSON(requestParameters['mfaCreatePingIdMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreatePingIdMethod(requestParameters: MfaCreatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaCreatePingIdMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateTotpMethodRaw(requestParameters: MfaCreateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaCreateTotpMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaCreateTotpMethodRequest',
                'Required parameter "mfaCreateTotpMethodRequest" was null or undefined when calling mfaCreateTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateTotpMethodRequestToJSON(requestParameters['mfaCreateTotpMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateTotpMethod(requestParameters: MfaCreateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaCreateTotpMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteDuoMethodRaw(requestParameters: MfaDeleteDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaDeleteDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteDuoMethod(requestParameters: MfaDeleteDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaDeleteDuoMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a login enforcement
     */
    async mfaDeleteLoginEnforcementRaw(requestParameters: MfaDeleteLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaDeleteLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a login enforcement
     */
    async mfaDeleteLoginEnforcement(requestParameters: MfaDeleteLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaDeleteLoginEnforcementRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteOktaMethodRaw(requestParameters: MfaDeleteOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaDeleteOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteOktaMethod(requestParameters: MfaDeleteOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaDeleteOktaMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeletePingIdMethodRaw(requestParameters: MfaDeletePingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaDeletePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeletePingIdMethod(requestParameters: MfaDeletePingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaDeletePingIdMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteTotpMethodRaw(requestParameters: MfaDeleteTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaDeleteTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteTotpMethod(requestParameters: MfaDeleteTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaDeleteTotpMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaGenerateTotpSecretRaw(requestParameters: MfaGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mfaGenerateTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaGenerateTotpSecretRequest',
                'Required parameter "mfaGenerateTotpSecretRequest" was null or undefined when calling mfaGenerateTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaGenerateTotpSecretRequestToJSON(requestParameters['mfaGenerateTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaGenerateTotpSecret(requestParameters: MfaGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaGenerateTotpSecretRaw(requestParameters, initOverrides);
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListDuoMethodsRaw(requestParameters: MfaListDuoMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListDuoMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListDuoMethods(requestParameters: MfaListDuoMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListDuoMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List login enforcements
     */
    async mfaListLoginEnforcementsRaw(requestParameters: MfaListLoginEnforcementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListLoginEnforcements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List login enforcements
     */
    async mfaListLoginEnforcements(requestParameters: MfaListLoginEnforcementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListLoginEnforcementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for all MFA methods
     */
    async mfaListMethodsRaw(requestParameters: MfaListMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for all MFA methods
     */
    async mfaListMethods(requestParameters: MfaListMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListOktaMethodsRaw(requestParameters: MfaListOktaMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListOktaMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListOktaMethods(requestParameters: MfaListOktaMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListOktaMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListPingIdMethodsRaw(requestParameters: MfaListPingIdMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListPingIdMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListPingIdMethods(requestParameters: MfaListPingIdMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListPingIdMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListTotpMethodsRaw(requestParameters: MfaListTotpMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListTotpMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListTotpMethods(requestParameters: MfaListTotpMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListTotpMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadDuoMethodRaw(requestParameters: MfaReadDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaReadDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadDuoMethod(requestParameters: MfaReadDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadDuoMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current login enforcement
     */
    async mfaReadLoginEnforcementRaw(requestParameters: MfaReadLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaReadLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current login enforcement
     */
    async mfaReadLoginEnforcement(requestParameters: MfaReadLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadLoginEnforcementRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    async mfaReadMethodRaw(requestParameters: MfaReadMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaReadMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    async mfaReadMethod(requestParameters: MfaReadMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadOktaMethodRaw(requestParameters: MfaReadOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaReadOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadOktaMethod(requestParameters: MfaReadOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadOktaMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadPingIdMethodRaw(requestParameters: MfaReadPingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaReadPingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadPingIdMethod(requestParameters: MfaReadPingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadPingIdMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadTotpMethodRaw(requestParameters: MfaReadTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaReadTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadTotpMethod(requestParameters: MfaReadTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaReadTotpMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateDuoMethodRaw(requestParameters: MfaUpdateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaUpdateDuoMethod().'
            );
        }

        if (requestParameters['mfaUpdateDuoMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaUpdateDuoMethodRequest',
                'Required parameter "mfaUpdateDuoMethodRequest" was null or undefined when calling mfaUpdateDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateDuoMethodRequestToJSON(requestParameters['mfaUpdateDuoMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateDuoMethod(requestParameters: MfaUpdateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaUpdateDuoMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateOktaMethodRaw(requestParameters: MfaUpdateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaUpdateOktaMethod().'
            );
        }

        if (requestParameters['mfaUpdateOktaMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaUpdateOktaMethodRequest',
                'Required parameter "mfaUpdateOktaMethodRequest" was null or undefined when calling mfaUpdateOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateOktaMethodRequestToJSON(requestParameters['mfaUpdateOktaMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateOktaMethod(requestParameters: MfaUpdateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaUpdateOktaMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdatePingIdMethodRaw(requestParameters: MfaUpdatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaUpdatePingIdMethod().'
            );
        }

        if (requestParameters['mfaUpdatePingIdMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaUpdatePingIdMethodRequest',
                'Required parameter "mfaUpdatePingIdMethodRequest" was null or undefined when calling mfaUpdatePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdatePingIdMethodRequestToJSON(requestParameters['mfaUpdatePingIdMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdatePingIdMethod(requestParameters: MfaUpdatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaUpdatePingIdMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateTotpMethodRaw(requestParameters: MfaUpdateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['methodId'] == null) {
            throw new runtime.RequiredError(
                'methodId',
                'Required parameter "methodId" was null or undefined when calling mfaUpdateTotpMethod().'
            );
        }

        if (requestParameters['mfaUpdateTotpMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaUpdateTotpMethodRequest',
                'Required parameter "mfaUpdateTotpMethodRequest" was null or undefined when calling mfaUpdateTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateTotpMethodRequestToJSON(requestParameters['mfaUpdateTotpMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateTotpMethod(requestParameters: MfaUpdateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaUpdateTotpMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Create or update a login enforcement
     */
    async mfaWriteLoginEnforcementRaw(requestParameters: MfaWriteLoginEnforcementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaWriteLoginEnforcement().'
            );
        }

        if (requestParameters['mfaWriteLoginEnforcementRequest'] == null) {
            throw new runtime.RequiredError(
                'mfaWriteLoginEnforcementRequest',
                'Required parameter "mfaWriteLoginEnforcementRequest" was null or undefined when calling mfaWriteLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaWriteLoginEnforcementRequestToJSON(requestParameters['mfaWriteLoginEnforcementRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update a login enforcement
     */
    async mfaWriteLoginEnforcement(requestParameters: MfaWriteLoginEnforcementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mfaWriteLoginEnforcementRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcConfigureRaw(requestParameters: OidcConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oidcConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcConfigureRequest',
                'Required parameter "oidcConfigureRequest" was null or undefined when calling oidcConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcConfigureRequestToJSON(requestParameters['oidcConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcConfigure(requestParameters: OidcConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcDeleteAssignmentRaw(requestParameters: OidcDeleteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteAssignment(requestParameters: OidcDeleteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcDeleteClientRaw(requestParameters: OidcDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteClient(requestParameters: OidcDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteClientRaw(requestParameters, initOverrides);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcDeleteKeyRaw(requestParameters: OidcDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcDeleteKey(requestParameters: OidcDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcDeleteProviderRaw(requestParameters: OidcDeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteProvider(requestParameters: OidcDeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteProviderRaw(requestParameters, initOverrides);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcDeleteRoleRaw(requestParameters: OidcDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcDeleteRole(requestParameters: OidcDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcDeleteScopeRaw(requestParameters: OidcDeleteScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteScope(requestParameters: OidcDeleteScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcDeleteScopeRaw(requestParameters, initOverrides);
    }

    /**
     * Generate an OIDC token
     */
    async oidcGenerateTokenRaw(requestParameters: OidcGenerateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcGenerateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/token/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an OIDC token
     */
    async oidcGenerateToken(requestParameters: OidcGenerateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcGenerateTokenRaw(requestParameters, initOverrides);
    }

    /**
     * Verify the authenticity of an OIDC token
     */
    async oidcIntrospectRaw(requestParameters: OidcIntrospectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oidcIntrospectRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcIntrospectRequest',
                'Required parameter "oidcIntrospectRequest" was null or undefined when calling oidcIntrospect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcIntrospectRequestToJSON(requestParameters['oidcIntrospectRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the authenticity of an OIDC token
     */
    async oidcIntrospect(requestParameters: OidcIntrospectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcIntrospectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcListAssignmentsRaw(requestParameters: OidcListAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListAssignments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListAssignments(requestParameters: OidcListAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListClientsRaw(requestParameters: OidcListClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListClients().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListClients(requestParameters: OidcListClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List OIDC keys
     */
    async oidcListKeysRaw(requestParameters: OidcListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List OIDC keys
     */
    async oidcListKeys(requestParameters: OidcListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListProvidersRaw(requestParameters: OidcListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['allowedClientId'] != null) {
            queryParameters['allowed_client_id'] = requestParameters['allowedClientId'];
        }

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListProviders(requestParameters: OidcListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List configured OIDC roles
     */
    async oidcListRolesRaw(requestParameters: OidcListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List configured OIDC roles
     */
    async oidcListRoles(requestParameters: OidcListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListScopesRaw(requestParameters: OidcListScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListScopes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListScopes(requestParameters: OidcListScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListScopesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderAuthorizeRaw(requestParameters: OidcProviderAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderAuthorize().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['codeChallenge'] != null) {
            queryParameters['code_challenge'] = requestParameters['codeChallenge'];
        }

        if (requestParameters['codeChallengeMethod'] != null) {
            queryParameters['code_challenge_method'] = requestParameters['codeChallengeMethod'];
        }

        if (requestParameters['maxAge'] != null) {
            queryParameters['max_age'] = requestParameters['maxAge'];
        }

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderAuthorize(requestParameters: OidcProviderAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcProviderAuthorizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcProviderAuthorizeWithParametersRaw(requestParameters: OidcProviderAuthorizeWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderAuthorizeWithParameters().'
            );
        }

        if (requestParameters['oidcProviderAuthorizeWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcProviderAuthorizeWithParametersRequest',
                'Required parameter "oidcProviderAuthorizeWithParametersRequest" was null or undefined when calling oidcProviderAuthorizeWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcProviderAuthorizeWithParametersRequestToJSON(requestParameters['oidcProviderAuthorizeWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderAuthorizeWithParameters(requestParameters: OidcProviderAuthorizeWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcProviderAuthorizeWithParametersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcProviderTokenRaw(requestParameters: OidcProviderTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderToken().'
            );
        }

        if (requestParameters['oidcProviderTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcProviderTokenRequest',
                'Required parameter "oidcProviderTokenRequest" was null or undefined when calling oidcProviderToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcProviderTokenRequestToJSON(requestParameters['oidcProviderTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderToken(requestParameters: OidcProviderTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcProviderTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcProviderUserInfoRaw(requestParameters: OidcProviderUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderUserInfo(requestParameters: OidcProviderUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcProviderUserInfoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcProviderUserInfo2Raw(requestParameters: OidcProviderUserInfo2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderUserInfo2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderUserInfo2(requestParameters: OidcProviderUserInfo2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcProviderUserInfo2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadAssignmentRaw(requestParameters: OidcReadAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadAssignment(requestParameters: OidcReadAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadClientRaw(requestParameters: OidcReadClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadClient(requestParameters: OidcReadClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadClientRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadConfigurationRaw(initOverrides);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcReadKeyRaw(requestParameters: OidcReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcReadKey(requestParameters: OidcReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadOidcChildWellKnownKeysRaw(requestParameters: OidcReadOidcChildWellKnownKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['child'] == null) {
            throw new runtime.RequiredError(
                'child',
                'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/{child}/.well-known/keys`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadOidcChildWellKnownKeys(requestParameters: OidcReadOidcChildWellKnownKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadOidcChildWellKnownKeysRaw(requestParameters, initOverrides);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOidcChildWellKnownOpenidConfigurationRaw(requestParameters: OidcReadOidcChildWellKnownOpenidConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['child'] == null) {
            throw new runtime.RequiredError(
                'child',
                'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownOpenidConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/{child}/.well-known/openid-configuration`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOidcChildWellKnownOpenidConfiguration(requestParameters: OidcReadOidcChildWellKnownOpenidConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadOidcChildWellKnownOpenidConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOpenIdConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOpenIdConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadOpenIdConfigurationRaw(initOverrides);
    }

    /**
     */
    async oidcReadProviderRaw(requestParameters: OidcReadProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProvider(requestParameters: OidcReadProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadProviderOpenIdConfigurationRaw(requestParameters: OidcReadProviderOpenIdConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProviderOpenIdConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/.well-known/openid-configuration`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProviderOpenIdConfiguration(requestParameters: OidcReadProviderOpenIdConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadProviderOpenIdConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadProviderPublicKeysRaw(requestParameters: OidcReadProviderPublicKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProviderPublicKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/.well-known/keys`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProviderPublicKeys(requestParameters: OidcReadProviderPublicKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadProviderPublicKeysRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadPublicKeysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/.well-known/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadPublicKeys(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadPublicKeysRaw(initOverrides);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcReadRoleRaw(requestParameters: OidcReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcReadRole(requestParameters: OidcReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcReadScopeRaw(requestParameters: OidcReadScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadScope(requestParameters: OidcReadScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcReadScopeRaw(requestParameters, initOverrides);
    }

    /**
     * Rotate a named OIDC key.
     */
    async oidcRotateKeyRaw(requestParameters: OidcRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcRotateKey().'
            );
        }

        if (requestParameters['oidcRotateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcRotateKeyRequest',
                'Required parameter "oidcRotateKeyRequest" was null or undefined when calling oidcRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/key/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcRotateKeyRequestToJSON(requestParameters['oidcRotateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate a named OIDC key.
     */
    async oidcRotateKey(requestParameters: OidcRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcRotateKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcWriteAssignmentRaw(requestParameters: OidcWriteAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteAssignment().'
            );
        }

        if (requestParameters['oidcWriteAssignmentRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteAssignmentRequest',
                'Required parameter "oidcWriteAssignmentRequest" was null or undefined when calling oidcWriteAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteAssignmentRequestToJSON(requestParameters['oidcWriteAssignmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteAssignment(requestParameters: OidcWriteAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcWriteClientRaw(requestParameters: OidcWriteClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteClient().'
            );
        }

        if (requestParameters['oidcWriteClientRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteClientRequest',
                'Required parameter "oidcWriteClientRequest" was null or undefined when calling oidcWriteClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteClientRequestToJSON(requestParameters['oidcWriteClientRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteClient(requestParameters: OidcWriteClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteClientRaw(requestParameters, initOverrides);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcWriteKeyRaw(requestParameters: OidcWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteKey().'
            );
        }

        if (requestParameters['oidcWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteKeyRequest',
                'Required parameter "oidcWriteKeyRequest" was null or undefined when calling oidcWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteKeyRequestToJSON(requestParameters['oidcWriteKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcWriteKey(requestParameters: OidcWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcWriteProviderRaw(requestParameters: OidcWriteProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteProvider().'
            );
        }

        if (requestParameters['oidcWriteProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteProviderRequest',
                'Required parameter "oidcWriteProviderRequest" was null or undefined when calling oidcWriteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteProviderRequestToJSON(requestParameters['oidcWriteProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteProvider(requestParameters: OidcWriteProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteProviderRaw(requestParameters, initOverrides);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcWriteRoleRaw(requestParameters: OidcWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteRole().'
            );
        }

        if (requestParameters['oidcWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteRoleRequest',
                'Required parameter "oidcWriteRoleRequest" was null or undefined when calling oidcWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteRoleRequestToJSON(requestParameters['oidcWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcWriteRole(requestParameters: OidcWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oidcWriteScopeRaw(requestParameters: OidcWriteScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteScope().'
            );
        }

        if (requestParameters['oidcWriteScopeRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcWriteScopeRequest',
                'Required parameter "oidcWriteScopeRequest" was null or undefined when calling oidcWriteScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteScopeRequestToJSON(requestParameters['oidcWriteScopeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteScope(requestParameters: OidcWriteScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcWriteScopeRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new alias.
     */
    async personaCreateRaw(requestParameters: PersonaCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['personaCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'personaCreateRequest',
                'Required parameter "personaCreateRequest" was null or undefined when calling personaCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/persona`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonaCreateRequestToJSON(requestParameters['personaCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async personaCreate(requestParameters: PersonaCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personaCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personaDeleteByIdRaw(requestParameters: PersonaDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaDeleteById(requestParameters: PersonaDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personaDeleteByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all the alias IDs.
     */
    async personaListByIdRaw(requestParameters: PersonaListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling personaListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async personaListById(requestParameters: PersonaListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.personaListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personaReadByIdRaw(requestParameters: PersonaReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaReadById(requestParameters: PersonaReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personaReadByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personaUpdateByIdRaw(requestParameters: PersonaUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaUpdateById().'
            );
        }

        if (requestParameters['personaUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'personaUpdateByIdRequest',
                'Required parameter "personaUpdateByIdRequest" was null or undefined when calling personaUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonaUpdateByIdRequestToJSON(requestParameters['personaUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaUpdateById(requestParameters: PersonaUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personaUpdateByIdRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AliasListByIdListEnum = {
    True: 'true'
} as const;
export type AliasListByIdListEnum = typeof AliasListByIdListEnum[keyof typeof AliasListByIdListEnum];
/**
 * @export
 */
export const EntityListAliasesByIdListEnum = {
    True: 'true'
} as const;
export type EntityListAliasesByIdListEnum = typeof EntityListAliasesByIdListEnum[keyof typeof EntityListAliasesByIdListEnum];
/**
 * @export
 */
export const EntityListByIdListEnum = {
    True: 'true'
} as const;
export type EntityListByIdListEnum = typeof EntityListByIdListEnum[keyof typeof EntityListByIdListEnum];
/**
 * @export
 */
export const EntityListByNameListEnum = {
    True: 'true'
} as const;
export type EntityListByNameListEnum = typeof EntityListByNameListEnum[keyof typeof EntityListByNameListEnum];
/**
 * @export
 */
export const EntityListFromStorageListEnum = {
    True: 'true'
} as const;
export type EntityListFromStorageListEnum = typeof EntityListFromStorageListEnum[keyof typeof EntityListFromStorageListEnum];
/**
 * @export
 */
export const GroupListAliasesByIdListEnum = {
    True: 'true'
} as const;
export type GroupListAliasesByIdListEnum = typeof GroupListAliasesByIdListEnum[keyof typeof GroupListAliasesByIdListEnum];
/**
 * @export
 */
export const GroupListByIdListEnum = {
    True: 'true'
} as const;
export type GroupListByIdListEnum = typeof GroupListByIdListEnum[keyof typeof GroupListByIdListEnum];
/**
 * @export
 */
export const GroupListByNameListEnum = {
    True: 'true'
} as const;
export type GroupListByNameListEnum = typeof GroupListByNameListEnum[keyof typeof GroupListByNameListEnum];
/**
 * @export
 */
export const GroupListFromStorageListEnum = {
    True: 'true'
} as const;
export type GroupListFromStorageListEnum = typeof GroupListFromStorageListEnum[keyof typeof GroupListFromStorageListEnum];
/**
 * @export
 */
export const MfaListDuoMethodsListEnum = {
    True: 'true'
} as const;
export type MfaListDuoMethodsListEnum = typeof MfaListDuoMethodsListEnum[keyof typeof MfaListDuoMethodsListEnum];
/**
 * @export
 */
export const MfaListLoginEnforcementsListEnum = {
    True: 'true'
} as const;
export type MfaListLoginEnforcementsListEnum = typeof MfaListLoginEnforcementsListEnum[keyof typeof MfaListLoginEnforcementsListEnum];
/**
 * @export
 */
export const MfaListMethodsListEnum = {
    True: 'true'
} as const;
export type MfaListMethodsListEnum = typeof MfaListMethodsListEnum[keyof typeof MfaListMethodsListEnum];
/**
 * @export
 */
export const MfaListOktaMethodsListEnum = {
    True: 'true'
} as const;
export type MfaListOktaMethodsListEnum = typeof MfaListOktaMethodsListEnum[keyof typeof MfaListOktaMethodsListEnum];
/**
 * @export
 */
export const MfaListPingIdMethodsListEnum = {
    True: 'true'
} as const;
export type MfaListPingIdMethodsListEnum = typeof MfaListPingIdMethodsListEnum[keyof typeof MfaListPingIdMethodsListEnum];
/**
 * @export
 */
export const MfaListTotpMethodsListEnum = {
    True: 'true'
} as const;
export type MfaListTotpMethodsListEnum = typeof MfaListTotpMethodsListEnum[keyof typeof MfaListTotpMethodsListEnum];
/**
 * @export
 */
export const OidcListAssignmentsListEnum = {
    True: 'true'
} as const;
export type OidcListAssignmentsListEnum = typeof OidcListAssignmentsListEnum[keyof typeof OidcListAssignmentsListEnum];
/**
 * @export
 */
export const OidcListClientsListEnum = {
    True: 'true'
} as const;
export type OidcListClientsListEnum = typeof OidcListClientsListEnum[keyof typeof OidcListClientsListEnum];
/**
 * @export
 */
export const OidcListKeysListEnum = {
    True: 'true'
} as const;
export type OidcListKeysListEnum = typeof OidcListKeysListEnum[keyof typeof OidcListKeysListEnum];
/**
 * @export
 */
export const OidcListProvidersListEnum = {
    True: 'true'
} as const;
export type OidcListProvidersListEnum = typeof OidcListProvidersListEnum[keyof typeof OidcListProvidersListEnum];
/**
 * @export
 */
export const OidcListRolesListEnum = {
    True: 'true'
} as const;
export type OidcListRolesListEnum = typeof OidcListRolesListEnum[keyof typeof OidcListRolesListEnum];
/**
 * @export
 */
export const OidcListScopesListEnum = {
    True: 'true'
} as const;
export type OidcListScopesListEnum = typeof OidcListScopesListEnum[keyof typeof OidcListScopesListEnum];
/**
 * @export
 */
export const PersonaListByIdListEnum = {
    True: 'true'
} as const;
export type PersonaListByIdListEnum = typeof PersonaListByIdListEnum[keyof typeof PersonaListByIdListEnum];
