/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliCloudLoginRequest,
  AliCloudWriteAuthRoleRequest,
  AppRoleDestroySecretIdByAccessorRequest,
  AppRoleDestroySecretIdRequest,
  AppRoleLoginRequest,
  AppRoleLookUpSecretIdByAccessorRequest,
  AppRoleLookUpSecretIdByAccessorResponse,
  AppRoleLookUpSecretIdRequest,
  AppRoleLookUpSecretIdResponse,
  AppRoleReadBindSecretIdResponse,
  AppRoleReadBoundCidrListResponse,
  AppRoleReadLocalSecretIdsResponse,
  AppRoleReadPeriodResponse,
  AppRoleReadPoliciesResponse,
  AppRoleReadRoleIdResponse,
  AppRoleReadRoleResponse,
  AppRoleReadSecretIdBoundCidrsResponse,
  AppRoleReadSecretIdNumUsesResponse,
  AppRoleReadSecretIdTtlResponse,
  AppRoleReadTokenBoundCidrsResponse,
  AppRoleReadTokenMaxTtlResponse,
  AppRoleReadTokenNumUsesResponse,
  AppRoleReadTokenTtlResponse,
  AppRoleWriteBindSecretIdRequest,
  AppRoleWriteBoundCidrListRequest,
  AppRoleWriteCustomSecretIdRequest,
  AppRoleWriteCustomSecretIdResponse,
  AppRoleWritePeriodRequest,
  AppRoleWritePoliciesRequest,
  AppRoleWriteRoleIdRequest,
  AppRoleWriteRoleRequest,
  AppRoleWriteSecretIdBoundCidrsRequest,
  AppRoleWriteSecretIdNumUsesRequest,
  AppRoleWriteSecretIdRequest,
  AppRoleWriteSecretIdResponse,
  AppRoleWriteSecretIdTtlRequest,
  AppRoleWriteTokenBoundCidrsRequest,
  AppRoleWriteTokenMaxTtlRequest,
  AppRoleWriteTokenNumUsesRequest,
  AppRoleWriteTokenTtlRequest,
  AwsConfigureCertificateRequest,
  AwsConfigureClientRequest,
  AwsConfigureIdentityAccessListTidyOperationRequest,
  AwsConfigureIdentityIntegrationRequest,
  AwsConfigureIdentityWhitelistTidyOperationRequest,
  AwsConfigureRoleTagBlacklistTidyOperationRequest,
  AwsConfigureRoleTagDenyListTidyOperationRequest,
  AwsLoginRequest,
  AwsTidyIdentityAccessListRequest,
  AwsTidyIdentityWhitelistRequest,
  AwsTidyRoleTagBlacklistRequest,
  AwsTidyRoleTagDenyListRequest,
  AwsWriteAuthRoleRequest,
  AwsWriteRoleTagRequest,
  AwsWriteStsRoleRequest,
  AzureConfigureAuthRequest,
  AzureLoginRequest,
  AzureWriteAuthRoleRequest,
  CertConfigureRequest,
  CertLoginRequest,
  CertWriteCertificateRequest,
  CertWriteCrlRequest,
  CloudFoundryConfigureRequest,
  CloudFoundryLoginRequest,
  CloudFoundryWriteRoleRequest,
  GithubConfigureRequest,
  GithubLoginRequest,
  GithubWriteTeamMappingRequest,
  GithubWriteUserMappingRequest,
  GoogleCloudConfigureAuthRequest,
  GoogleCloudEditLabelsForRoleRequest,
  GoogleCloudEditServiceAccountsForRoleRequest,
  GoogleCloudLoginRequest,
  GoogleCloudWriteRoleRequest,
  JwtConfigureRequest,
  JwtLoginRequest,
  JwtOidcCallbackFormPostRequest,
  JwtOidcRequestAuthorizationUrlRequest,
  JwtWriteRoleRequest,
  KerberosConfigureLdapRequest,
  KerberosConfigureRequest,
  KerberosLoginRequest,
  KerberosWriteGroupRequest,
  KubernetesConfigureAuthRequest,
  KubernetesLoginRequest,
  KubernetesWriteAuthRoleRequest,
  LdapConfigureAuthRequest,
  LdapLoginRequest,
  LdapWriteGroupRequest,
  LdapWriteUserRequest,
  OciConfigureRequest,
  OciLoginRequest,
  OciWriteRoleRequest,
  OktaConfigureRequest,
  OktaLoginRequest,
  OktaWriteGroupRequest,
  OktaWriteUserRequest,
  RadiusConfigureRequest,
  RadiusLoginRequest,
  RadiusLoginWithUsernameRequest,
  RadiusWriteUserRequest,
  StandardListResponse,
  TokenCreateAgainstRoleRequest,
  TokenCreateOrphanRequest,
  TokenCreateRequest,
  TokenLookUpAccessorRequest,
  TokenLookUpRequest,
  TokenLookUpSelf2Request,
  TokenRenewAccessorRequest,
  TokenRenewRequest,
  TokenRenewSelfRequest,
  TokenRevokeAccessorRequest,
  TokenRevokeOrphanRequest,
  TokenRevokeRequest,
  TokenWriteRoleRequest,
  UserpassLoginRequest,
  UserpassResetPasswordRequest,
  UserpassUpdatePoliciesRequest,
  UserpassWriteUserRequest,
} from '../models/index';
import {
    AliCloudLoginRequestFromJSON,
    AliCloudLoginRequestToJSON,
    AliCloudWriteAuthRoleRequestFromJSON,
    AliCloudWriteAuthRoleRequestToJSON,
    AppRoleDestroySecretIdByAccessorRequestFromJSON,
    AppRoleDestroySecretIdByAccessorRequestToJSON,
    AppRoleDestroySecretIdRequestFromJSON,
    AppRoleDestroySecretIdRequestToJSON,
    AppRoleLoginRequestFromJSON,
    AppRoleLoginRequestToJSON,
    AppRoleLookUpSecretIdByAccessorRequestFromJSON,
    AppRoleLookUpSecretIdByAccessorRequestToJSON,
    AppRoleLookUpSecretIdByAccessorResponseFromJSON,
    AppRoleLookUpSecretIdByAccessorResponseToJSON,
    AppRoleLookUpSecretIdRequestFromJSON,
    AppRoleLookUpSecretIdRequestToJSON,
    AppRoleLookUpSecretIdResponseFromJSON,
    AppRoleLookUpSecretIdResponseToJSON,
    AppRoleReadBindSecretIdResponseFromJSON,
    AppRoleReadBindSecretIdResponseToJSON,
    AppRoleReadBoundCidrListResponseFromJSON,
    AppRoleReadBoundCidrListResponseToJSON,
    AppRoleReadLocalSecretIdsResponseFromJSON,
    AppRoleReadLocalSecretIdsResponseToJSON,
    AppRoleReadPeriodResponseFromJSON,
    AppRoleReadPeriodResponseToJSON,
    AppRoleReadPoliciesResponseFromJSON,
    AppRoleReadPoliciesResponseToJSON,
    AppRoleReadRoleIdResponseFromJSON,
    AppRoleReadRoleIdResponseToJSON,
    AppRoleReadRoleResponseFromJSON,
    AppRoleReadRoleResponseToJSON,
    AppRoleReadSecretIdBoundCidrsResponseFromJSON,
    AppRoleReadSecretIdBoundCidrsResponseToJSON,
    AppRoleReadSecretIdNumUsesResponseFromJSON,
    AppRoleReadSecretIdNumUsesResponseToJSON,
    AppRoleReadSecretIdTtlResponseFromJSON,
    AppRoleReadSecretIdTtlResponseToJSON,
    AppRoleReadTokenBoundCidrsResponseFromJSON,
    AppRoleReadTokenBoundCidrsResponseToJSON,
    AppRoleReadTokenMaxTtlResponseFromJSON,
    AppRoleReadTokenMaxTtlResponseToJSON,
    AppRoleReadTokenNumUsesResponseFromJSON,
    AppRoleReadTokenNumUsesResponseToJSON,
    AppRoleReadTokenTtlResponseFromJSON,
    AppRoleReadTokenTtlResponseToJSON,
    AppRoleWriteBindSecretIdRequestFromJSON,
    AppRoleWriteBindSecretIdRequestToJSON,
    AppRoleWriteBoundCidrListRequestFromJSON,
    AppRoleWriteBoundCidrListRequestToJSON,
    AppRoleWriteCustomSecretIdRequestFromJSON,
    AppRoleWriteCustomSecretIdRequestToJSON,
    AppRoleWriteCustomSecretIdResponseFromJSON,
    AppRoleWriteCustomSecretIdResponseToJSON,
    AppRoleWritePeriodRequestFromJSON,
    AppRoleWritePeriodRequestToJSON,
    AppRoleWritePoliciesRequestFromJSON,
    AppRoleWritePoliciesRequestToJSON,
    AppRoleWriteRoleIdRequestFromJSON,
    AppRoleWriteRoleIdRequestToJSON,
    AppRoleWriteRoleRequestFromJSON,
    AppRoleWriteRoleRequestToJSON,
    AppRoleWriteSecretIdBoundCidrsRequestFromJSON,
    AppRoleWriteSecretIdBoundCidrsRequestToJSON,
    AppRoleWriteSecretIdNumUsesRequestFromJSON,
    AppRoleWriteSecretIdNumUsesRequestToJSON,
    AppRoleWriteSecretIdRequestFromJSON,
    AppRoleWriteSecretIdRequestToJSON,
    AppRoleWriteSecretIdResponseFromJSON,
    AppRoleWriteSecretIdResponseToJSON,
    AppRoleWriteSecretIdTtlRequestFromJSON,
    AppRoleWriteSecretIdTtlRequestToJSON,
    AppRoleWriteTokenBoundCidrsRequestFromJSON,
    AppRoleWriteTokenBoundCidrsRequestToJSON,
    AppRoleWriteTokenMaxTtlRequestFromJSON,
    AppRoleWriteTokenMaxTtlRequestToJSON,
    AppRoleWriteTokenNumUsesRequestFromJSON,
    AppRoleWriteTokenNumUsesRequestToJSON,
    AppRoleWriteTokenTtlRequestFromJSON,
    AppRoleWriteTokenTtlRequestToJSON,
    AwsConfigureCertificateRequestFromJSON,
    AwsConfigureCertificateRequestToJSON,
    AwsConfigureClientRequestFromJSON,
    AwsConfigureClientRequestToJSON,
    AwsConfigureIdentityAccessListTidyOperationRequestFromJSON,
    AwsConfigureIdentityAccessListTidyOperationRequestToJSON,
    AwsConfigureIdentityIntegrationRequestFromJSON,
    AwsConfigureIdentityIntegrationRequestToJSON,
    AwsConfigureIdentityWhitelistTidyOperationRequestFromJSON,
    AwsConfigureIdentityWhitelistTidyOperationRequestToJSON,
    AwsConfigureRoleTagBlacklistTidyOperationRequestFromJSON,
    AwsConfigureRoleTagBlacklistTidyOperationRequestToJSON,
    AwsConfigureRoleTagDenyListTidyOperationRequestFromJSON,
    AwsConfigureRoleTagDenyListTidyOperationRequestToJSON,
    AwsLoginRequestFromJSON,
    AwsLoginRequestToJSON,
    AwsTidyIdentityAccessListRequestFromJSON,
    AwsTidyIdentityAccessListRequestToJSON,
    AwsTidyIdentityWhitelistRequestFromJSON,
    AwsTidyIdentityWhitelistRequestToJSON,
    AwsTidyRoleTagBlacklistRequestFromJSON,
    AwsTidyRoleTagBlacklistRequestToJSON,
    AwsTidyRoleTagDenyListRequestFromJSON,
    AwsTidyRoleTagDenyListRequestToJSON,
    AwsWriteAuthRoleRequestFromJSON,
    AwsWriteAuthRoleRequestToJSON,
    AwsWriteRoleTagRequestFromJSON,
    AwsWriteRoleTagRequestToJSON,
    AwsWriteStsRoleRequestFromJSON,
    AwsWriteStsRoleRequestToJSON,
    AzureConfigureAuthRequestFromJSON,
    AzureConfigureAuthRequestToJSON,
    AzureLoginRequestFromJSON,
    AzureLoginRequestToJSON,
    AzureWriteAuthRoleRequestFromJSON,
    AzureWriteAuthRoleRequestToJSON,
    CertConfigureRequestFromJSON,
    CertConfigureRequestToJSON,
    CertLoginRequestFromJSON,
    CertLoginRequestToJSON,
    CertWriteCertificateRequestFromJSON,
    CertWriteCertificateRequestToJSON,
    CertWriteCrlRequestFromJSON,
    CertWriteCrlRequestToJSON,
    CloudFoundryConfigureRequestFromJSON,
    CloudFoundryConfigureRequestToJSON,
    CloudFoundryLoginRequestFromJSON,
    CloudFoundryLoginRequestToJSON,
    CloudFoundryWriteRoleRequestFromJSON,
    CloudFoundryWriteRoleRequestToJSON,
    GithubConfigureRequestFromJSON,
    GithubConfigureRequestToJSON,
    GithubLoginRequestFromJSON,
    GithubLoginRequestToJSON,
    GithubWriteTeamMappingRequestFromJSON,
    GithubWriteTeamMappingRequestToJSON,
    GithubWriteUserMappingRequestFromJSON,
    GithubWriteUserMappingRequestToJSON,
    GoogleCloudConfigureAuthRequestFromJSON,
    GoogleCloudConfigureAuthRequestToJSON,
    GoogleCloudEditLabelsForRoleRequestFromJSON,
    GoogleCloudEditLabelsForRoleRequestToJSON,
    GoogleCloudEditServiceAccountsForRoleRequestFromJSON,
    GoogleCloudEditServiceAccountsForRoleRequestToJSON,
    GoogleCloudLoginRequestFromJSON,
    GoogleCloudLoginRequestToJSON,
    GoogleCloudWriteRoleRequestFromJSON,
    GoogleCloudWriteRoleRequestToJSON,
    JwtConfigureRequestFromJSON,
    JwtConfigureRequestToJSON,
    JwtLoginRequestFromJSON,
    JwtLoginRequestToJSON,
    JwtOidcCallbackFormPostRequestFromJSON,
    JwtOidcCallbackFormPostRequestToJSON,
    JwtOidcRequestAuthorizationUrlRequestFromJSON,
    JwtOidcRequestAuthorizationUrlRequestToJSON,
    JwtWriteRoleRequestFromJSON,
    JwtWriteRoleRequestToJSON,
    KerberosConfigureLdapRequestFromJSON,
    KerberosConfigureLdapRequestToJSON,
    KerberosConfigureRequestFromJSON,
    KerberosConfigureRequestToJSON,
    KerberosLoginRequestFromJSON,
    KerberosLoginRequestToJSON,
    KerberosWriteGroupRequestFromJSON,
    KerberosWriteGroupRequestToJSON,
    KubernetesConfigureAuthRequestFromJSON,
    KubernetesConfigureAuthRequestToJSON,
    KubernetesLoginRequestFromJSON,
    KubernetesLoginRequestToJSON,
    KubernetesWriteAuthRoleRequestFromJSON,
    KubernetesWriteAuthRoleRequestToJSON,
    LdapConfigureAuthRequestFromJSON,
    LdapConfigureAuthRequestToJSON,
    LdapLoginRequestFromJSON,
    LdapLoginRequestToJSON,
    LdapWriteGroupRequestFromJSON,
    LdapWriteGroupRequestToJSON,
    LdapWriteUserRequestFromJSON,
    LdapWriteUserRequestToJSON,
    OciConfigureRequestFromJSON,
    OciConfigureRequestToJSON,
    OciLoginRequestFromJSON,
    OciLoginRequestToJSON,
    OciWriteRoleRequestFromJSON,
    OciWriteRoleRequestToJSON,
    OktaConfigureRequestFromJSON,
    OktaConfigureRequestToJSON,
    OktaLoginRequestFromJSON,
    OktaLoginRequestToJSON,
    OktaWriteGroupRequestFromJSON,
    OktaWriteGroupRequestToJSON,
    OktaWriteUserRequestFromJSON,
    OktaWriteUserRequestToJSON,
    RadiusConfigureRequestFromJSON,
    RadiusConfigureRequestToJSON,
    RadiusLoginRequestFromJSON,
    RadiusLoginRequestToJSON,
    RadiusLoginWithUsernameRequestFromJSON,
    RadiusLoginWithUsernameRequestToJSON,
    RadiusWriteUserRequestFromJSON,
    RadiusWriteUserRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    TokenCreateAgainstRoleRequestFromJSON,
    TokenCreateAgainstRoleRequestToJSON,
    TokenCreateOrphanRequestFromJSON,
    TokenCreateOrphanRequestToJSON,
    TokenCreateRequestFromJSON,
    TokenCreateRequestToJSON,
    TokenLookUpAccessorRequestFromJSON,
    TokenLookUpAccessorRequestToJSON,
    TokenLookUpRequestFromJSON,
    TokenLookUpRequestToJSON,
    TokenLookUpSelf2RequestFromJSON,
    TokenLookUpSelf2RequestToJSON,
    TokenRenewAccessorRequestFromJSON,
    TokenRenewAccessorRequestToJSON,
    TokenRenewRequestFromJSON,
    TokenRenewRequestToJSON,
    TokenRenewSelfRequestFromJSON,
    TokenRenewSelfRequestToJSON,
    TokenRevokeAccessorRequestFromJSON,
    TokenRevokeAccessorRequestToJSON,
    TokenRevokeOrphanRequestFromJSON,
    TokenRevokeOrphanRequestToJSON,
    TokenRevokeRequestFromJSON,
    TokenRevokeRequestToJSON,
    TokenWriteRoleRequestFromJSON,
    TokenWriteRoleRequestToJSON,
    UserpassLoginRequestFromJSON,
    UserpassLoginRequestToJSON,
    UserpassResetPasswordRequestFromJSON,
    UserpassResetPasswordRequestToJSON,
    UserpassUpdatePoliciesRequestFromJSON,
    UserpassUpdatePoliciesRequestToJSON,
    UserpassWriteUserRequestFromJSON,
    UserpassWriteUserRequestToJSON,
} from '../models/index';

export interface AliCloudDeleteAuthRoleRequest {
    role: string;
    alicloudMountPath: string;
}

export interface AliCloudListAuthRolesRequest {
    alicloudMountPath: string;
    list: AliCloudListAuthRolesListEnum;
}

export interface AliCloudListAuthRoles2Request {
    alicloudMountPath: string;
    list: AliCloudListAuthRoles2ListEnum;
}

export interface AliCloudLoginOperationRequest {
    alicloudMountPath: string;
    aliCloudLoginRequest: AliCloudLoginRequest;
}

export interface AliCloudReadAuthRoleRequest {
    role: string;
    alicloudMountPath: string;
}

export interface AliCloudWriteAuthRoleOperationRequest {
    role: string;
    alicloudMountPath: string;
    aliCloudWriteAuthRoleRequest: AliCloudWriteAuthRoleRequest;
}

export interface AppRoleDeleteBindSecretIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteBoundCidrListRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeletePeriodRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeletePoliciesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteRoleRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteSecretIdBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteSecretIdNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteSecretIdTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteTokenBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteTokenMaxTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteTokenNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDeleteTokenTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleDestroySecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleDestroySecretIdRequest: AppRoleDestroySecretIdRequest;
}

export interface AppRoleDestroySecretId2Request {
    roleName: string;
    approleMountPath: string;
    secretId?: string;
}

export interface AppRoleDestroySecretIdByAccessorOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleDestroySecretIdByAccessorRequest: AppRoleDestroySecretIdByAccessorRequest;
}

export interface AppRoleDestroySecretIdByAccessor2Request {
    roleName: string;
    approleMountPath: string;
    secretIdAccessor?: string;
}

export interface AppRoleListRolesRequest {
    approleMountPath: string;
    list: AppRoleListRolesListEnum;
}

export interface AppRoleListSecretIdsRequest {
    roleName: string;
    approleMountPath: string;
    list: AppRoleListSecretIdsListEnum;
}

export interface AppRoleLoginOperationRequest {
    approleMountPath: string;
    appRoleLoginRequest: AppRoleLoginRequest;
}

export interface AppRoleLookUpSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleLookUpSecretIdRequest: AppRoleLookUpSecretIdRequest;
}

export interface AppRoleLookUpSecretIdByAccessorOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleLookUpSecretIdByAccessorRequest: AppRoleLookUpSecretIdByAccessorRequest;
}

export interface AppRoleReadBindSecretIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadBoundCidrListRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadLocalSecretIdsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadPeriodRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadPoliciesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadRoleRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadRoleIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadSecretIdBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadSecretIdNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadSecretIdTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadTokenBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadTokenMaxTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadTokenNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleReadTokenTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AppRoleTidySecretIdRequest {
    approleMountPath: string;
}

export interface AppRoleWriteBindSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteBindSecretIdRequest: AppRoleWriteBindSecretIdRequest;
}

export interface AppRoleWriteBoundCidrListOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteBoundCidrListRequest: AppRoleWriteBoundCidrListRequest;
}

export interface AppRoleWriteCustomSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteCustomSecretIdRequest: AppRoleWriteCustomSecretIdRequest;
}

export interface AppRoleWritePeriodOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWritePeriodRequest: AppRoleWritePeriodRequest;
}

export interface AppRoleWritePoliciesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWritePoliciesRequest: AppRoleWritePoliciesRequest;
}

export interface AppRoleWriteRoleOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteRoleRequest: AppRoleWriteRoleRequest;
}

export interface AppRoleWriteRoleIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteRoleIdRequest: AppRoleWriteRoleIdRequest;
}

export interface AppRoleWriteSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdRequest: AppRoleWriteSecretIdRequest;
}

export interface AppRoleWriteSecretIdBoundCidrsOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdBoundCidrsRequest: AppRoleWriteSecretIdBoundCidrsRequest;
}

export interface AppRoleWriteSecretIdNumUsesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdNumUsesRequest: AppRoleWriteSecretIdNumUsesRequest;
}

export interface AppRoleWriteSecretIdTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdTtlRequest: AppRoleWriteSecretIdTtlRequest;
}

export interface AppRoleWriteTokenBoundCidrsOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenBoundCidrsRequest: AppRoleWriteTokenBoundCidrsRequest;
}

export interface AppRoleWriteTokenMaxTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenMaxTtlRequest: AppRoleWriteTokenMaxTtlRequest;
}

export interface AppRoleWriteTokenNumUsesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenNumUsesRequest: AppRoleWriteTokenNumUsesRequest;
}

export interface AppRoleWriteTokenTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenTtlRequest: AppRoleWriteTokenTtlRequest;
}

export interface AwsConfigureCertificateOperationRequest {
    certName: string;
    awsMountPath: string;
    awsConfigureCertificateRequest: AwsConfigureCertificateRequest;
}

export interface AwsConfigureClientOperationRequest {
    awsMountPath: string;
    awsConfigureClientRequest: AwsConfigureClientRequest;
}

export interface AwsConfigureIdentityAccessListTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityAccessListTidyOperationRequest: AwsConfigureIdentityAccessListTidyOperationRequest;
}

export interface AwsConfigureIdentityIntegrationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityIntegrationRequest: AwsConfigureIdentityIntegrationRequest;
}

export interface AwsConfigureIdentityWhitelistTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityWhitelistTidyOperationRequest: AwsConfigureIdentityWhitelistTidyOperationRequest;
}

export interface AwsConfigureRoleTagBlacklistTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureRoleTagBlacklistTidyOperationRequest: AwsConfigureRoleTagBlacklistTidyOperationRequest;
}

export interface AwsConfigureRoleTagDenyListTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureRoleTagDenyListTidyOperationRequest: AwsConfigureRoleTagDenyListTidyOperationRequest;
}

export interface AwsDeleteAuthRoleRequest {
    role: string;
    awsMountPath: string;
}

export interface AwsDeleteCertificateConfigurationRequest {
    certName: string;
    awsMountPath: string;
}

export interface AwsDeleteClientConfigurationRequest {
    awsMountPath: string;
}

export interface AwsDeleteIdentityAccessListRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AwsDeleteIdentityAccessListTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsDeleteIdentityWhitelistRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AwsDeleteIdentityWhitelistTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsDeleteRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsDeleteRoleTagBlacklistTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsDeleteRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsDeleteRoleTagDenyListTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsDeleteStsRoleRequest {
    accountId: string;
    awsMountPath: string;
}

export interface AwsListAuthRolesRequest {
    awsMountPath: string;
    list: AwsListAuthRolesListEnum;
}

export interface AwsListAuthRoles2Request {
    awsMountPath: string;
    list: AwsListAuthRoles2ListEnum;
}

export interface AwsListCertificateConfigurationsRequest {
    awsMountPath: string;
    list: AwsListCertificateConfigurationsListEnum;
}

export interface AwsListIdentityAccessListRequest {
    awsMountPath: string;
    list: AwsListIdentityAccessListListEnum;
}

export interface AwsListIdentityWhitelistRequest {
    awsMountPath: string;
    list: AwsListIdentityWhitelistListEnum;
}

export interface AwsListRoleTagBlacklistsRequest {
    awsMountPath: string;
    list: AwsListRoleTagBlacklistsListEnum;
}

export interface AwsListRoleTagDenyListsRequest {
    awsMountPath: string;
    list: AwsListRoleTagDenyListsListEnum;
}

export interface AwsListStsRoleRelationshipsRequest {
    awsMountPath: string;
    list: AwsListStsRoleRelationshipsListEnum;
}

export interface AwsLoginOperationRequest {
    awsMountPath: string;
    awsLoginRequest: AwsLoginRequest;
}

export interface AwsReadAuthRoleRequest {
    role: string;
    awsMountPath: string;
}

export interface AwsReadCertificateConfigurationRequest {
    certName: string;
    awsMountPath: string;
}

export interface AwsReadClientConfigurationRequest {
    awsMountPath: string;
}

export interface AwsReadIdentityAccessListRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AwsReadIdentityAccessListTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsReadIdentityIntegrationConfigurationRequest {
    awsMountPath: string;
}

export interface AwsReadIdentityWhitelistRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AwsReadIdentityWhitelistTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsReadRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsReadRoleTagBlacklistTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsReadRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsReadRoleTagDenyListTidySettingsRequest {
    awsMountPath: string;
}

export interface AwsReadStsRoleRequest {
    accountId: string;
    awsMountPath: string;
}

export interface AwsRotateRootCredentialsRequest {
    awsMountPath: string;
}

export interface AwsTidyIdentityAccessListOperationRequest {
    awsMountPath: string;
    awsTidyIdentityAccessListRequest: AwsTidyIdentityAccessListRequest;
}

export interface AwsTidyIdentityWhitelistOperationRequest {
    awsMountPath: string;
    awsTidyIdentityWhitelistRequest: AwsTidyIdentityWhitelistRequest;
}

export interface AwsTidyRoleTagBlacklistOperationRequest {
    awsMountPath: string;
    awsTidyRoleTagBlacklistRequest: AwsTidyRoleTagBlacklistRequest;
}

export interface AwsTidyRoleTagDenyListOperationRequest {
    awsMountPath: string;
    awsTidyRoleTagDenyListRequest: AwsTidyRoleTagDenyListRequest;
}

export interface AwsWriteAuthRoleOperationRequest {
    role: string;
    awsMountPath: string;
    awsWriteAuthRoleRequest: AwsWriteAuthRoleRequest;
}

export interface AwsWriteRoleTagOperationRequest {
    role: string;
    awsMountPath: string;
    awsWriteRoleTagRequest: AwsWriteRoleTagRequest;
}

export interface AwsWriteRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsWriteRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AwsWriteStsRoleOperationRequest {
    accountId: string;
    awsMountPath: string;
    awsWriteStsRoleRequest: AwsWriteStsRoleRequest;
}

export interface AzureConfigureAuthOperationRequest {
    azureMountPath: string;
    azureConfigureAuthRequest: AzureConfigureAuthRequest;
}

export interface AzureDeleteAuthConfigurationRequest {
    azureMountPath: string;
}

export interface AzureDeleteAuthRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AzureListAuthRolesRequest {
    azureMountPath: string;
    list: AzureListAuthRolesListEnum;
}

export interface AzureLoginOperationRequest {
    azureMountPath: string;
    azureLoginRequest: AzureLoginRequest;
}

export interface AzureReadAuthConfigurationRequest {
    azureMountPath: string;
}

export interface AzureReadAuthRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AzureRotateRootCredentialsRequest {
    azureMountPath: string;
}

export interface AzureWriteAuthRoleOperationRequest {
    name: string;
    azureMountPath: string;
    azureWriteAuthRoleRequest: AzureWriteAuthRoleRequest;
}

export interface CertConfigureOperationRequest {
    certMountPath: string;
    certConfigureRequest: CertConfigureRequest;
}

export interface CertDeleteCertificateRequest {
    name: string;
    certMountPath: string;
}

export interface CertDeleteCrlRequest {
    name: string;
    certMountPath: string;
}

export interface CertListCertificatesRequest {
    certMountPath: string;
    list: CertListCertificatesListEnum;
}

export interface CertListCrlsRequest {
    certMountPath: string;
    list: CertListCrlsListEnum;
}

export interface CertLoginOperationRequest {
    certMountPath: string;
    certLoginRequest: CertLoginRequest;
}

export interface CertReadCertificateRequest {
    name: string;
    certMountPath: string;
}

export interface CertReadConfigurationRequest {
    certMountPath: string;
}

export interface CertReadCrlRequest {
    name: string;
    certMountPath: string;
}

export interface CertWriteCertificateOperationRequest {
    name: string;
    certMountPath: string;
    certWriteCertificateRequest: CertWriteCertificateRequest;
}

export interface CertWriteCrlOperationRequest {
    name: string;
    certMountPath: string;
    certWriteCrlRequest: CertWriteCrlRequest;
}

export interface CloudFoundryConfigureOperationRequest {
    cfMountPath: string;
    cloudFoundryConfigureRequest: CloudFoundryConfigureRequest;
}

export interface CloudFoundryDeleteConfigurationRequest {
    cfMountPath: string;
}

export interface CloudFoundryDeleteRoleRequest {
    role: string;
    cfMountPath: string;
}

export interface CloudFoundryListRolesRequest {
    cfMountPath: string;
    list: CloudFoundryListRolesListEnum;
}

export interface CloudFoundryLoginOperationRequest {
    cfMountPath: string;
    cloudFoundryLoginRequest: CloudFoundryLoginRequest;
}

export interface CloudFoundryReadConfigurationRequest {
    cfMountPath: string;
}

export interface CloudFoundryReadRoleRequest {
    role: string;
    cfMountPath: string;
}

export interface CloudFoundryWriteRoleOperationRequest {
    role: string;
    cfMountPath: string;
    cloudFoundryWriteRoleRequest: CloudFoundryWriteRoleRequest;
}

export interface GithubConfigureOperationRequest {
    githubMountPath: string;
    githubConfigureRequest: GithubConfigureRequest;
}

export interface GithubDeleteTeamMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface GithubDeleteUserMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface GithubListTeamsRequest {
    githubMountPath: string;
    list: GithubListTeamsListEnum;
}

export interface GithubListTeams2Request {
    githubMountPath: string;
}

export interface GithubListUsersRequest {
    githubMountPath: string;
    list: GithubListUsersListEnum;
}

export interface GithubListUsers2Request {
    githubMountPath: string;
}

export interface GithubLoginOperationRequest {
    githubMountPath: string;
    githubLoginRequest: GithubLoginRequest;
}

export interface GithubReadConfigurationRequest {
    githubMountPath: string;
}

export interface GithubReadTeamMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface GithubReadUserMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface GithubWriteTeamMappingOperationRequest {
    key: string;
    githubMountPath: string;
    githubWriteTeamMappingRequest: GithubWriteTeamMappingRequest;
}

export interface GithubWriteUserMappingOperationRequest {
    key: string;
    githubMountPath: string;
    githubWriteUserMappingRequest: GithubWriteUserMappingRequest;
}

export interface GoogleCloudConfigureAuthOperationRequest {
    gcpMountPath: string;
    googleCloudConfigureAuthRequest: GoogleCloudConfigureAuthRequest;
}

export interface GoogleCloudDeleteRoleRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudEditLabelsForRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudEditLabelsForRoleRequest: GoogleCloudEditLabelsForRoleRequest;
}

export interface GoogleCloudEditServiceAccountsForRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudEditServiceAccountsForRoleRequest: GoogleCloudEditServiceAccountsForRoleRequest;
}

export interface GoogleCloudListRolesRequest {
    gcpMountPath: string;
    list: GoogleCloudListRolesListEnum;
}

export interface GoogleCloudListRoles2Request {
    gcpMountPath: string;
    list: GoogleCloudListRoles2ListEnum;
}

export interface GoogleCloudLoginOperationRequest {
    gcpMountPath: string;
    googleCloudLoginRequest: GoogleCloudLoginRequest;
}

export interface GoogleCloudReadAuthConfigurationRequest {
    gcpMountPath: string;
}

export interface GoogleCloudReadRoleRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudWriteRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteRoleRequest: GoogleCloudWriteRoleRequest;
}

export interface JwtConfigureOperationRequest {
    jwtMountPath: string;
    jwtConfigureRequest: JwtConfigureRequest;
}

export interface JwtDeleteRoleRequest {
    name: string;
    jwtMountPath: string;
}

export interface JwtListRolesRequest {
    jwtMountPath: string;
    list: JwtListRolesListEnum;
}

export interface JwtLoginOperationRequest {
    jwtMountPath: string;
    jwtLoginRequest: JwtLoginRequest;
}

export interface JwtOidcCallbackRequest {
    jwtMountPath: string;
    clientNonce?: string;
    code?: string;
    state?: string;
}

export interface JwtOidcCallbackFormPostOperationRequest {
    jwtMountPath: string;
    jwtOidcCallbackFormPostRequest: JwtOidcCallbackFormPostRequest;
}

export interface JwtOidcRequestAuthorizationUrlOperationRequest {
    jwtMountPath: string;
    jwtOidcRequestAuthorizationUrlRequest: JwtOidcRequestAuthorizationUrlRequest;
}

export interface JwtReadConfigurationRequest {
    jwtMountPath: string;
}

export interface JwtReadRoleRequest {
    name: string;
    jwtMountPath: string;
}

export interface JwtWriteRoleOperationRequest {
    name: string;
    jwtMountPath: string;
    jwtWriteRoleRequest: JwtWriteRoleRequest;
}

export interface KerberosConfigureOperationRequest {
    kerberosMountPath: string;
    kerberosConfigureRequest: KerberosConfigureRequest;
}

export interface KerberosConfigureLdapOperationRequest {
    kerberosMountPath: string;
    kerberosConfigureLdapRequest: KerberosConfigureLdapRequest;
}

export interface KerberosDeleteGroupRequest {
    name: string;
    kerberosMountPath: string;
}

export interface KerberosListGroupsRequest {
    kerberosMountPath: string;
    list: KerberosListGroupsListEnum;
}

export interface KerberosLoginOperationRequest {
    kerberosMountPath: string;
    kerberosLoginRequest: KerberosLoginRequest;
}

export interface KerberosLogin2Request {
    kerberosMountPath: string;
}

export interface KerberosReadConfigurationRequest {
    kerberosMountPath: string;
}

export interface KerberosReadGroupRequest {
    name: string;
    kerberosMountPath: string;
}

export interface KerberosReadLdapConfigurationRequest {
    kerberosMountPath: string;
}

export interface KerberosWriteGroupOperationRequest {
    name: string;
    kerberosMountPath: string;
    kerberosWriteGroupRequest: KerberosWriteGroupRequest;
}

export interface KubernetesConfigureAuthOperationRequest {
    kubernetesMountPath: string;
    kubernetesConfigureAuthRequest: KubernetesConfigureAuthRequest;
}

export interface KubernetesDeleteAuthRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface KubernetesListAuthRolesRequest {
    kubernetesMountPath: string;
    list: KubernetesListAuthRolesListEnum;
}

export interface KubernetesLoginOperationRequest {
    kubernetesMountPath: string;
    kubernetesLoginRequest: KubernetesLoginRequest;
}

export interface KubernetesReadAuthConfigurationRequest {
    kubernetesMountPath: string;
}

export interface KubernetesReadAuthRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface KubernetesWriteAuthRoleOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesWriteAuthRoleRequest: KubernetesWriteAuthRoleRequest;
}

export interface LdapConfigureAuthOperationRequest {
    ldapMountPath: string;
    ldapConfigureAuthRequest: LdapConfigureAuthRequest;
}

export interface LdapDeleteGroupRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapDeleteUserRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapListGroupsRequest {
    ldapMountPath: string;
    list: LdapListGroupsListEnum;
}

export interface LdapListUsersRequest {
    ldapMountPath: string;
    list: LdapListUsersListEnum;
}

export interface LdapLoginOperationRequest {
    username: string;
    ldapMountPath: string;
    ldapLoginRequest: LdapLoginRequest;
}

export interface LdapReadAuthConfigurationRequest {
    ldapMountPath: string;
}

export interface LdapReadGroupRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapReadUserRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapRotateRootCredentialsRequest {
    ldapMountPath: string;
}

export interface LdapWriteGroupOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteGroupRequest: LdapWriteGroupRequest;
}

export interface LdapWriteUserOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteUserRequest: LdapWriteUserRequest;
}

export interface OciConfigureOperationRequest {
    ociMountPath: string;
    ociConfigureRequest: OciConfigureRequest;
}

export interface OciDeleteConfigurationRequest {
    ociMountPath: string;
}

export interface OciDeleteRoleRequest {
    role: string;
    ociMountPath: string;
}

export interface OciListRolesRequest {
    ociMountPath: string;
    list: OciListRolesListEnum;
}

export interface OciLoginOperationRequest {
    role: string;
    ociMountPath: string;
    ociLoginRequest: OciLoginRequest;
}

export interface OciReadConfigurationRequest {
    ociMountPath: string;
}

export interface OciReadRoleRequest {
    role: string;
    ociMountPath: string;
}

export interface OciWriteRoleOperationRequest {
    role: string;
    ociMountPath: string;
    ociWriteRoleRequest: OciWriteRoleRequest;
}

export interface OktaConfigureOperationRequest {
    oktaMountPath: string;
    oktaConfigureRequest: OktaConfigureRequest;
}

export interface OktaDeleteGroupRequest {
    name: string;
    oktaMountPath: string;
}

export interface OktaDeleteUserRequest {
    name: string;
    oktaMountPath: string;
}

export interface OktaListGroupsRequest {
    oktaMountPath: string;
    list: OktaListGroupsListEnum;
}

export interface OktaListUsersRequest {
    oktaMountPath: string;
    list: OktaListUsersListEnum;
}

export interface OktaLoginOperationRequest {
    username: string;
    oktaMountPath: string;
    oktaLoginRequest: OktaLoginRequest;
}

export interface OktaReadConfigurationRequest {
    oktaMountPath: string;
}

export interface OktaReadGroupRequest {
    name: string;
    oktaMountPath: string;
}

export interface OktaReadUserRequest {
    name: string;
    oktaMountPath: string;
}

export interface OktaVerifyRequest {
    nonce: string;
    oktaMountPath: string;
}

export interface OktaWriteGroupOperationRequest {
    name: string;
    oktaMountPath: string;
    oktaWriteGroupRequest: OktaWriteGroupRequest;
}

export interface OktaWriteUserOperationRequest {
    name: string;
    oktaMountPath: string;
    oktaWriteUserRequest: OktaWriteUserRequest;
}

export interface RadiusConfigureOperationRequest {
    radiusMountPath: string;
    radiusConfigureRequest: RadiusConfigureRequest;
}

export interface RadiusDeleteUserRequest {
    name: string;
    radiusMountPath: string;
}

export interface RadiusListUsersRequest {
    radiusMountPath: string;
    list: RadiusListUsersListEnum;
}

export interface RadiusLoginOperationRequest {
    radiusMountPath: string;
    radiusLoginRequest: RadiusLoginRequest;
}

export interface RadiusLoginWithUsernameOperationRequest {
    urlusername: string;
    radiusMountPath: string;
    radiusLoginWithUsernameRequest: RadiusLoginWithUsernameRequest;
}

export interface RadiusReadConfigurationRequest {
    radiusMountPath: string;
}

export interface RadiusReadUserRequest {
    name: string;
    radiusMountPath: string;
}

export interface RadiusWriteUserOperationRequest {
    name: string;
    radiusMountPath: string;
    radiusWriteUserRequest: RadiusWriteUserRequest;
}

export interface TokenCreateOperationRequest {
    tokenCreateRequest: TokenCreateRequest;
}

export interface TokenCreateAgainstRoleOperationRequest {
    roleName: string;
    tokenCreateAgainstRoleRequest: TokenCreateAgainstRoleRequest;
}

export interface TokenCreateOrphanOperationRequest {
    tokenCreateOrphanRequest: TokenCreateOrphanRequest;
}

export interface TokenDeleteRoleRequest {
    roleName: string;
}

export interface TokenListAccessorsRequest {
    list: TokenListAccessorsListEnum;
}

export interface TokenListRolesRequest {
    list: TokenListRolesListEnum;
}

export interface TokenLookUpOperationRequest {
    tokenLookUpRequest: TokenLookUpRequest;
}

export interface TokenLookUp2Request {
    token?: string;
}

export interface TokenLookUpAccessorOperationRequest {
    tokenLookUpAccessorRequest: TokenLookUpAccessorRequest;
}

export interface TokenLookUpSelf2OperationRequest {
    tokenLookUpSelf2Request: TokenLookUpSelf2Request;
}

export interface TokenReadRoleRequest {
    roleName: string;
}

export interface TokenRenewOperationRequest {
    tokenRenewRequest: TokenRenewRequest;
}

export interface TokenRenewAccessorOperationRequest {
    tokenRenewAccessorRequest: TokenRenewAccessorRequest;
}

export interface TokenRenewSelfOperationRequest {
    tokenRenewSelfRequest: TokenRenewSelfRequest;
}

export interface TokenRevokeOperationRequest {
    tokenRevokeRequest: TokenRevokeRequest;
}

export interface TokenRevokeAccessorOperationRequest {
    tokenRevokeAccessorRequest: TokenRevokeAccessorRequest;
}

export interface TokenRevokeOrphanOperationRequest {
    tokenRevokeOrphanRequest: TokenRevokeOrphanRequest;
}

export interface TokenWriteRoleOperationRequest {
    roleName: string;
    tokenWriteRoleRequest: TokenWriteRoleRequest;
}

export interface UserpassDeleteUserRequest {
    username: string;
    userpassMountPath: string;
}

export interface UserpassListUsersRequest {
    userpassMountPath: string;
    list: UserpassListUsersListEnum;
}

export interface UserpassLoginOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassLoginRequest: UserpassLoginRequest;
}

export interface UserpassReadUserRequest {
    username: string;
    userpassMountPath: string;
}

export interface UserpassResetPasswordOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassResetPasswordRequest: UserpassResetPasswordRequest;
}

export interface UserpassUpdatePoliciesOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassUpdatePoliciesRequest: UserpassUpdatePoliciesRequest;
}

export interface UserpassWriteUserOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassWriteUserRequest: UserpassWriteUserRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudDeleteAuthRoleRaw(requestParameters: AliCloudDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudDeleteAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudDeleteAuthRole(requestParameters: AliCloudDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudDeleteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRolesRaw(requestParameters: AliCloudListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles(requestParameters: AliCloudListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListAuthRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles2Raw(requestParameters: AliCloudListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListAuthRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListAuthRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/roles/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles2(requestParameters: AliCloudListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListAuthRoles2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates an RAM entity with Vault.
     */
    async aliCloudLoginRaw(requestParameters: AliCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudLogin().'
            );
        }

        if (requestParameters['aliCloudLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudLoginRequest',
                'Required parameter "aliCloudLoginRequest" was null or undefined when calling aliCloudLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/login`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudLoginRequestToJSON(requestParameters['aliCloudLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates an RAM entity with Vault.
     */
    async aliCloudLogin(requestParameters: AliCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudReadAuthRoleRaw(requestParameters: AliCloudReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudReadAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudReadAuthRole(requestParameters: AliCloudReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudReadAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudWriteAuthRoleRaw(requestParameters: AliCloudWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        if (requestParameters['aliCloudWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudWriteAuthRoleRequest',
                'Required parameter "aliCloudWriteAuthRoleRequest" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudWriteAuthRoleRequestToJSON(requestParameters['aliCloudWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudWriteAuthRole(requestParameters: AliCloudWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudWriteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteBindSecretIdRaw(requestParameters: AppRoleDeleteBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteBindSecretId(requestParameters: AppRoleDeleteBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteBindSecretIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteBoundCidrListRaw(requestParameters: AppRoleDeleteBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteBoundCidrList(requestParameters: AppRoleDeleteBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteBoundCidrListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeletePeriodRaw(requestParameters: AppRoleDeletePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeletePeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeletePeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeletePeriod(requestParameters: AppRoleDeletePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeletePeriodRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeletePoliciesRaw(requestParameters: AppRoleDeletePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeletePolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeletePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeletePolicies(requestParameters: AppRoleDeletePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeletePoliciesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteRoleRaw(requestParameters: AppRoleDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteRole(requestParameters: AppRoleDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteSecretIdBoundCidrsRaw(requestParameters: AppRoleDeleteSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdBoundCidrs(requestParameters: AppRoleDeleteSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteSecretIdBoundCidrsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteSecretIdNumUsesRaw(requestParameters: AppRoleDeleteSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdNumUses(requestParameters: AppRoleDeleteSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteSecretIdNumUsesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteSecretIdTtlRaw(requestParameters: AppRoleDeleteSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdTtl(requestParameters: AppRoleDeleteSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteSecretIdTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteTokenBoundCidrsRaw(requestParameters: AppRoleDeleteTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenBoundCidrs(requestParameters: AppRoleDeleteTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteTokenBoundCidrsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteTokenMaxTtlRaw(requestParameters: AppRoleDeleteTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenMaxTtl(requestParameters: AppRoleDeleteTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteTokenMaxTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteTokenNumUsesRaw(requestParameters: AppRoleDeleteTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenNumUses(requestParameters: AppRoleDeleteTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteTokenNumUsesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDeleteTokenTtlRaw(requestParameters: AppRoleDeleteTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenTtl(requestParameters: AppRoleDeleteTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDeleteTokenTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDestroySecretIdRaw(requestParameters: AppRoleDestroySecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        if (requestParameters['appRoleDestroySecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleDestroySecretIdRequest',
                'Required parameter "appRoleDestroySecretIdRequest" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleDestroySecretIdRequestToJSON(requestParameters['appRoleDestroySecretIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretId(requestParameters: AppRoleDestroySecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDestroySecretIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDestroySecretId2Raw(requestParameters: AppRoleDestroySecretId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretId2().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretId2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['secretId'] != null) {
            queryParameters['secret_id'] = requestParameters['secretId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretId2(requestParameters: AppRoleDestroySecretId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDestroySecretId2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessorRaw(requestParameters: AppRoleDestroySecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        if (requestParameters['appRoleDestroySecretIdByAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleDestroySecretIdByAccessorRequest',
                'Required parameter "appRoleDestroySecretIdByAccessorRequest" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleDestroySecretIdByAccessorRequestToJSON(requestParameters['appRoleDestroySecretIdByAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor(requestParameters: AppRoleDestroySecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDestroySecretIdByAccessorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor2Raw(requestParameters: AppRoleDestroySecretIdByAccessor2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretIdByAccessor2().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretIdByAccessor2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['secretIdAccessor'] != null) {
            queryParameters['secret_id_accessor'] = requestParameters['secretIdAccessor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor2(requestParameters: AppRoleDestroySecretIdByAccessor2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleDestroySecretIdByAccessor2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleListRolesRaw(requestParameters: AppRoleListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling appRoleListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleListRoles(requestParameters: AppRoleListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.appRoleListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleListSecretIdsRaw(requestParameters: AppRoleListSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleListSecretIds(requestParameters: AppRoleListSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.appRoleListSecretIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleLoginRaw(requestParameters: AppRoleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLogin().'
            );
        }

        if (requestParameters['appRoleLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLoginRequest',
                'Required parameter "appRoleLoginRequest" was null or undefined when calling appRoleLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/login`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLoginRequestToJSON(requestParameters['appRoleLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleLogin(requestParameters: AppRoleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleLookUpSecretIdRaw(requestParameters: AppRoleLookUpSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleLookUpSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        if (requestParameters['appRoleLookUpSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLookUpSecretIdRequest',
                'Required parameter "appRoleLookUpSecretIdRequest" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/lookup`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLookUpSecretIdRequestToJSON(requestParameters['appRoleLookUpSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleLookUpSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleLookUpSecretId(requestParameters: AppRoleLookUpSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleLookUpSecretIdResponse> {
        const response = await this.appRoleLookUpSecretIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleLookUpSecretIdByAccessorRaw(requestParameters: AppRoleLookUpSecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleLookUpSecretIdByAccessorResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        if (requestParameters['appRoleLookUpSecretIdByAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLookUpSecretIdByAccessorRequest',
                'Required parameter "appRoleLookUpSecretIdByAccessorRequest" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/lookup`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLookUpSecretIdByAccessorRequestToJSON(requestParameters['appRoleLookUpSecretIdByAccessorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleLookUpSecretIdByAccessorResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleLookUpSecretIdByAccessor(requestParameters: AppRoleLookUpSecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleLookUpSecretIdByAccessorResponse> {
        const response = await this.appRoleLookUpSecretIdByAccessorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadBindSecretIdRaw(requestParameters: AppRoleReadBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadBindSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadBindSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadBindSecretId(requestParameters: AppRoleReadBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadBindSecretIdResponse> {
        const response = await this.appRoleReadBindSecretIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadBoundCidrListRaw(requestParameters: AppRoleReadBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadBoundCidrListResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadBoundCidrListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadBoundCidrList(requestParameters: AppRoleReadBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadBoundCidrListResponse> {
        const response = await this.appRoleReadBoundCidrListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadLocalSecretIdsRaw(requestParameters: AppRoleReadLocalSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadLocalSecretIdsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadLocalSecretIds().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadLocalSecretIds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/local-secret-ids`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadLocalSecretIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadLocalSecretIds(requestParameters: AppRoleReadLocalSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadLocalSecretIdsResponse> {
        const response = await this.appRoleReadLocalSecretIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadPeriodRaw(requestParameters: AppRoleReadPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadPeriodResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadPeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadPeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadPeriodResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadPeriod(requestParameters: AppRoleReadPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadPeriodResponse> {
        const response = await this.appRoleReadPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadPoliciesRaw(requestParameters: AppRoleReadPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadPoliciesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadPolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadPolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadPolicies(requestParameters: AppRoleReadPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadPoliciesResponse> {
        const response = await this.appRoleReadPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadRoleRaw(requestParameters: AppRoleReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadRoleResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadRole(requestParameters: AppRoleReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadRoleResponse> {
        const response = await this.appRoleReadRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadRoleIdRaw(requestParameters: AppRoleReadRoleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadRoleIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadRoleId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadRoleId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/role-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadRoleIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadRoleId(requestParameters: AppRoleReadRoleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadRoleIdResponse> {
        const response = await this.appRoleReadRoleIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdBoundCidrsRaw(requestParameters: AppRoleReadSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdBoundCidrsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdBoundCidrsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdBoundCidrs(requestParameters: AppRoleReadSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdBoundCidrsResponse> {
        const response = await this.appRoleReadSecretIdBoundCidrsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdNumUsesRaw(requestParameters: AppRoleReadSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdNumUsesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdNumUsesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdNumUses(requestParameters: AppRoleReadSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdNumUsesResponse> {
        const response = await this.appRoleReadSecretIdNumUsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdTtlRaw(requestParameters: AppRoleReadSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdTtl(requestParameters: AppRoleReadSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdTtlResponse> {
        const response = await this.appRoleReadSecretIdTtlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenBoundCidrsRaw(requestParameters: AppRoleReadTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenBoundCidrsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenBoundCidrsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenBoundCidrs(requestParameters: AppRoleReadTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenBoundCidrsResponse> {
        const response = await this.appRoleReadTokenBoundCidrsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenMaxTtlRaw(requestParameters: AppRoleReadTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenMaxTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenMaxTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenMaxTtl(requestParameters: AppRoleReadTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenMaxTtlResponse> {
        const response = await this.appRoleReadTokenMaxTtlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenNumUsesRaw(requestParameters: AppRoleReadTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenNumUsesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenNumUsesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenNumUses(requestParameters: AppRoleReadTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenNumUsesResponse> {
        const response = await this.appRoleReadTokenNumUsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenTtlRaw(requestParameters: AppRoleReadTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenTtl(requestParameters: AppRoleReadTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenTtlResponse> {
        const response = await this.appRoleReadTokenTtlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleTidySecretIdRaw(requestParameters: AppRoleTidySecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleTidySecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/tidy/secret-id`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleTidySecretId(requestParameters: AppRoleTidySecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleTidySecretIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteBindSecretIdRaw(requestParameters: AppRoleWriteBindSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        if (requestParameters['appRoleWriteBindSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteBindSecretIdRequest',
                'Required parameter "appRoleWriteBindSecretIdRequest" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteBindSecretIdRequestToJSON(requestParameters['appRoleWriteBindSecretIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteBindSecretId(requestParameters: AppRoleWriteBindSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteBindSecretIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteBoundCidrListRaw(requestParameters: AppRoleWriteBoundCidrListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        if (requestParameters['appRoleWriteBoundCidrListRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteBoundCidrListRequest',
                'Required parameter "appRoleWriteBoundCidrListRequest" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteBoundCidrListRequestToJSON(requestParameters['appRoleWriteBoundCidrListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteBoundCidrList(requestParameters: AppRoleWriteBoundCidrListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteBoundCidrListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteCustomSecretIdRaw(requestParameters: AppRoleWriteCustomSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleWriteCustomSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        if (requestParameters['appRoleWriteCustomSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteCustomSecretIdRequest',
                'Required parameter "appRoleWriteCustomSecretIdRequest" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/custom-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteCustomSecretIdRequestToJSON(requestParameters['appRoleWriteCustomSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleWriteCustomSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleWriteCustomSecretId(requestParameters: AppRoleWriteCustomSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleWriteCustomSecretIdResponse> {
        const response = await this.appRoleWriteCustomSecretIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWritePeriodRaw(requestParameters: AppRoleWritePeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        if (requestParameters['appRoleWritePeriodRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWritePeriodRequest',
                'Required parameter "appRoleWritePeriodRequest" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWritePeriodRequestToJSON(requestParameters['appRoleWritePeriodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWritePeriod(requestParameters: AppRoleWritePeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWritePeriodRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWritePoliciesRaw(requestParameters: AppRoleWritePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        if (requestParameters['appRoleWritePoliciesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWritePoliciesRequest',
                'Required parameter "appRoleWritePoliciesRequest" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWritePoliciesRequestToJSON(requestParameters['appRoleWritePoliciesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWritePolicies(requestParameters: AppRoleWritePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWritePoliciesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteRoleRaw(requestParameters: AppRoleWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteRole().'
            );
        }

        if (requestParameters['appRoleWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteRoleRequest',
                'Required parameter "appRoleWriteRoleRequest" was null or undefined when calling appRoleWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteRoleRequestToJSON(requestParameters['appRoleWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteRole(requestParameters: AppRoleWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteRoleIdRaw(requestParameters: AppRoleWriteRoleIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        if (requestParameters['appRoleWriteRoleIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteRoleIdRequest',
                'Required parameter "appRoleWriteRoleIdRequest" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/role-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteRoleIdRequestToJSON(requestParameters['appRoleWriteRoleIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteRoleId(requestParameters: AppRoleWriteRoleIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteRoleIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteSecretIdRaw(requestParameters: AppRoleWriteSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleWriteSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdRequest',
                'Required parameter "appRoleWriteSecretIdRequest" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdRequestToJSON(requestParameters['appRoleWriteSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleWriteSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleWriteSecretId(requestParameters: AppRoleWriteSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleWriteSecretIdResponse> {
        const response = await this.appRoleWriteSecretIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteSecretIdBoundCidrsRaw(requestParameters: AppRoleWriteSecretIdBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdBoundCidrsRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdBoundCidrsRequest',
                'Required parameter "appRoleWriteSecretIdBoundCidrsRequest" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdBoundCidrsRequestToJSON(requestParameters['appRoleWriteSecretIdBoundCidrsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdBoundCidrs(requestParameters: AppRoleWriteSecretIdBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteSecretIdBoundCidrsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteSecretIdNumUsesRaw(requestParameters: AppRoleWriteSecretIdNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdNumUsesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdNumUsesRequest',
                'Required parameter "appRoleWriteSecretIdNumUsesRequest" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdNumUsesRequestToJSON(requestParameters['appRoleWriteSecretIdNumUsesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdNumUses(requestParameters: AppRoleWriteSecretIdNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteSecretIdNumUsesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteSecretIdTtlRaw(requestParameters: AppRoleWriteSecretIdTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdTtlRequest',
                'Required parameter "appRoleWriteSecretIdTtlRequest" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdTtlRequestToJSON(requestParameters['appRoleWriteSecretIdTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdTtl(requestParameters: AppRoleWriteSecretIdTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteSecretIdTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteTokenBoundCidrsRaw(requestParameters: AppRoleWriteTokenBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        if (requestParameters['appRoleWriteTokenBoundCidrsRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenBoundCidrsRequest',
                'Required parameter "appRoleWriteTokenBoundCidrsRequest" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenBoundCidrsRequestToJSON(requestParameters['appRoleWriteTokenBoundCidrsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenBoundCidrs(requestParameters: AppRoleWriteTokenBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteTokenBoundCidrsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteTokenMaxTtlRaw(requestParameters: AppRoleWriteTokenMaxTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        if (requestParameters['appRoleWriteTokenMaxTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenMaxTtlRequest',
                'Required parameter "appRoleWriteTokenMaxTtlRequest" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenMaxTtlRequestToJSON(requestParameters['appRoleWriteTokenMaxTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenMaxTtl(requestParameters: AppRoleWriteTokenMaxTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteTokenMaxTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteTokenNumUsesRaw(requestParameters: AppRoleWriteTokenNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        if (requestParameters['appRoleWriteTokenNumUsesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenNumUsesRequest',
                'Required parameter "appRoleWriteTokenNumUsesRequest" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenNumUsesRequestToJSON(requestParameters['appRoleWriteTokenNumUsesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenNumUses(requestParameters: AppRoleWriteTokenNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteTokenNumUsesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appRoleWriteTokenTtlRaw(requestParameters: AppRoleWriteTokenTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        if (requestParameters['appRoleWriteTokenTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenTtlRequest',
                'Required parameter "appRoleWriteTokenTtlRequest" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenTtlRequestToJSON(requestParameters['appRoleWriteTokenTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenTtl(requestParameters: AppRoleWriteTokenTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appRoleWriteTokenTtlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureCertificateRaw(requestParameters: AwsConfigureCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        if (requestParameters['awsConfigureCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureCertificateRequest',
                'Required parameter "awsConfigureCertificateRequest" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureCertificateRequestToJSON(requestParameters['awsConfigureCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureCertificate(requestParameters: AwsConfigureCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureCertificateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureClientRaw(requestParameters: AwsConfigureClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureClient().'
            );
        }

        if (requestParameters['awsConfigureClientRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureClientRequest',
                'Required parameter "awsConfigureClientRequest" was null or undefined when calling awsConfigureClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureClientRequestToJSON(requestParameters['awsConfigureClientRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureClient(requestParameters: AwsConfigureClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureClientRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureIdentityAccessListTidyOperationRaw(requestParameters: AwsConfigureIdentityAccessListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityAccessListTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureIdentityAccessListTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityAccessListTidyOperationRequest',
                'Required parameter "awsConfigureIdentityAccessListTidyOperationRequest" was null or undefined when calling awsConfigureIdentityAccessListTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityAccessListTidyOperationRequestToJSON(requestParameters['awsConfigureIdentityAccessListTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityAccessListTidyOperation(requestParameters: AwsConfigureIdentityAccessListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureIdentityAccessListTidyOperationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureIdentityIntegrationRaw(requestParameters: AwsConfigureIdentityIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityIntegration().'
            );
        }

        if (requestParameters['awsConfigureIdentityIntegrationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityIntegrationRequest',
                'Required parameter "awsConfigureIdentityIntegrationRequest" was null or undefined when calling awsConfigureIdentityIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/identity`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityIntegrationRequestToJSON(requestParameters['awsConfigureIdentityIntegrationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityIntegration(requestParameters: AwsConfigureIdentityIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureIdentityIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureIdentityWhitelistTidyOperationRaw(requestParameters: AwsConfigureIdentityWhitelistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityWhitelistTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureIdentityWhitelistTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityWhitelistTidyOperationRequest',
                'Required parameter "awsConfigureIdentityWhitelistTidyOperationRequest" was null or undefined when calling awsConfigureIdentityWhitelistTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityWhitelistTidyOperationRequestToJSON(requestParameters['awsConfigureIdentityWhitelistTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityWhitelistTidyOperation(requestParameters: AwsConfigureIdentityWhitelistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureIdentityWhitelistTidyOperationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureRoleTagBlacklistTidyOperationRaw(requestParameters: AwsConfigureRoleTagBlacklistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRoleTagBlacklistTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureRoleTagBlacklistTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRoleTagBlacklistTidyOperationRequest',
                'Required parameter "awsConfigureRoleTagBlacklistTidyOperationRequest" was null or undefined when calling awsConfigureRoleTagBlacklistTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRoleTagBlacklistTidyOperationRequestToJSON(requestParameters['awsConfigureRoleTagBlacklistTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRoleTagBlacklistTidyOperation(requestParameters: AwsConfigureRoleTagBlacklistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureRoleTagBlacklistTidyOperationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureRoleTagDenyListTidyOperationRaw(requestParameters: AwsConfigureRoleTagDenyListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRoleTagDenyListTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureRoleTagDenyListTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRoleTagDenyListTidyOperationRequest',
                'Required parameter "awsConfigureRoleTagDenyListTidyOperationRequest" was null or undefined when calling awsConfigureRoleTagDenyListTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRoleTagDenyListTidyOperationRequestToJSON(requestParameters['awsConfigureRoleTagDenyListTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRoleTagDenyListTidyOperation(requestParameters: AwsConfigureRoleTagDenyListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureRoleTagDenyListTidyOperationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteAuthRoleRaw(requestParameters: AwsDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsDeleteAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteAuthRole(requestParameters: AwsDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteCertificateConfigurationRaw(requestParameters: AwsDeleteCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsDeleteCertificateConfiguration().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteCertificateConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteCertificateConfiguration(requestParameters: AwsDeleteCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteCertificateConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteClientConfigurationRaw(requestParameters: AwsDeleteClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteClientConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteClientConfiguration(requestParameters: AwsDeleteClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteClientConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteIdentityAccessListRaw(requestParameters: AwsDeleteIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsDeleteIdentityAccessList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityAccessList(requestParameters: AwsDeleteIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteIdentityAccessListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteIdentityAccessListTidySettingsRaw(requestParameters: AwsDeleteIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityAccessListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityAccessListTidySettings(requestParameters: AwsDeleteIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteIdentityAccessListTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteIdentityWhitelistRaw(requestParameters: AwsDeleteIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsDeleteIdentityWhitelist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityWhitelist(requestParameters: AwsDeleteIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteIdentityWhitelistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteIdentityWhitelistTidySettingsRaw(requestParameters: AwsDeleteIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityWhitelistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityWhitelistTidySettings(requestParameters: AwsDeleteIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteIdentityWhitelistTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteRoleTagBlacklistRaw(requestParameters: AwsDeleteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsDeleteRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagBlacklist(requestParameters: AwsDeleteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteRoleTagBlacklistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteRoleTagBlacklistTidySettingsRaw(requestParameters: AwsDeleteRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagBlacklistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagBlacklistTidySettings(requestParameters: AwsDeleteRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteRoleTagBlacklistTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteRoleTagDenyListRaw(requestParameters: AwsDeleteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsDeleteRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagDenyList(requestParameters: AwsDeleteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteRoleTagDenyListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteRoleTagDenyListTidySettingsRaw(requestParameters: AwsDeleteRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagDenyListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagDenyListTidySettings(requestParameters: AwsDeleteRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteRoleTagDenyListTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteStsRoleRaw(requestParameters: AwsDeleteStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsDeleteStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteStsRole(requestParameters: AwsDeleteStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteStsRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsListAuthRolesRaw(requestParameters: AwsListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListAuthRoles(requestParameters: AwsListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListAuthRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListAuthRoles2Raw(requestParameters: AwsListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListAuthRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListAuthRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListAuthRoles2(requestParameters: AwsListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListAuthRoles2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListCertificateConfigurationsRaw(requestParameters: AwsListCertificateConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListCertificateConfigurations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListCertificateConfigurations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificates/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListCertificateConfigurations(requestParameters: AwsListCertificateConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListCertificateConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListIdentityAccessListRaw(requestParameters: AwsListIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListIdentityAccessList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListIdentityAccessList(requestParameters: AwsListIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListIdentityAccessListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListIdentityWhitelistRaw(requestParameters: AwsListIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListIdentityWhitelist().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListIdentityWhitelist(requestParameters: AwsListIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListIdentityWhitelistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListRoleTagBlacklistsRaw(requestParameters: AwsListRoleTagBlacklistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoleTagBlacklists().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoleTagBlacklists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListRoleTagBlacklists(requestParameters: AwsListRoleTagBlacklistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRoleTagBlacklistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListRoleTagDenyListsRaw(requestParameters: AwsListRoleTagDenyListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoleTagDenyLists().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoleTagDenyLists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListRoleTagDenyLists(requestParameters: AwsListRoleTagDenyListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRoleTagDenyListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListStsRoleRelationshipsRaw(requestParameters: AwsListStsRoleRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListStsRoleRelationships().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListStsRoleRelationships().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListStsRoleRelationships(requestParameters: AwsListStsRoleRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListStsRoleRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsLoginRaw(requestParameters: AwsLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsLogin().'
            );
        }

        if (requestParameters['awsLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'awsLoginRequest',
                'Required parameter "awsLoginRequest" was null or undefined when calling awsLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/login`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsLoginRequestToJSON(requestParameters['awsLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsLogin(requestParameters: AwsLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadAuthRoleRaw(requestParameters: AwsReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsReadAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadAuthRole(requestParameters: AwsReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadCertificateConfigurationRaw(requestParameters: AwsReadCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsReadCertificateConfiguration().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadCertificateConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadCertificateConfiguration(requestParameters: AwsReadCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadCertificateConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadClientConfigurationRaw(requestParameters: AwsReadClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadClientConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadClientConfiguration(requestParameters: AwsReadClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadClientConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadIdentityAccessListRaw(requestParameters: AwsReadIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsReadIdentityAccessList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityAccessList(requestParameters: AwsReadIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadIdentityAccessListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadIdentityAccessListTidySettingsRaw(requestParameters: AwsReadIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityAccessListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityAccessListTidySettings(requestParameters: AwsReadIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadIdentityAccessListTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadIdentityIntegrationConfigurationRaw(requestParameters: AwsReadIdentityIntegrationConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityIntegrationConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/identity`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityIntegrationConfiguration(requestParameters: AwsReadIdentityIntegrationConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadIdentityIntegrationConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadIdentityWhitelistRaw(requestParameters: AwsReadIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsReadIdentityWhitelist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityWhitelist(requestParameters: AwsReadIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadIdentityWhitelistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadIdentityWhitelistTidySettingsRaw(requestParameters: AwsReadIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityWhitelistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityWhitelistTidySettings(requestParameters: AwsReadIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadIdentityWhitelistTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadRoleTagBlacklistRaw(requestParameters: AwsReadRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsReadRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagBlacklist(requestParameters: AwsReadRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRoleTagBlacklistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadRoleTagBlacklistTidySettingsRaw(requestParameters: AwsReadRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagBlacklistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagBlacklistTidySettings(requestParameters: AwsReadRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRoleTagBlacklistTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadRoleTagDenyListRaw(requestParameters: AwsReadRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsReadRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagDenyList(requestParameters: AwsReadRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRoleTagDenyListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadRoleTagDenyListTidySettingsRaw(requestParameters: AwsReadRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagDenyListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagDenyListTidySettings(requestParameters: AwsReadRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRoleTagDenyListTidySettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadStsRoleRaw(requestParameters: AwsReadStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsReadStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadStsRole(requestParameters: AwsReadStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadStsRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsRotateRootCredentialsRaw(requestParameters: AwsRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsRotateRootCredentials(requestParameters: AwsRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsTidyIdentityAccessListRaw(requestParameters: AwsTidyIdentityAccessListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyIdentityAccessList().'
            );
        }

        if (requestParameters['awsTidyIdentityAccessListRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyIdentityAccessListRequest',
                'Required parameter "awsTidyIdentityAccessListRequest" was null or undefined when calling awsTidyIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyIdentityAccessListRequestToJSON(requestParameters['awsTidyIdentityAccessListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyIdentityAccessList(requestParameters: AwsTidyIdentityAccessListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsTidyIdentityAccessListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsTidyIdentityWhitelistRaw(requestParameters: AwsTidyIdentityWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyIdentityWhitelist().'
            );
        }

        if (requestParameters['awsTidyIdentityWhitelistRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyIdentityWhitelistRequest',
                'Required parameter "awsTidyIdentityWhitelistRequest" was null or undefined when calling awsTidyIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyIdentityWhitelistRequestToJSON(requestParameters['awsTidyIdentityWhitelistRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyIdentityWhitelist(requestParameters: AwsTidyIdentityWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsTidyIdentityWhitelistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsTidyRoleTagBlacklistRaw(requestParameters: AwsTidyRoleTagBlacklistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsTidyRoleTagBlacklistRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyRoleTagBlacklistRequest',
                'Required parameter "awsTidyRoleTagBlacklistRequest" was null or undefined when calling awsTidyRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyRoleTagBlacklistRequestToJSON(requestParameters['awsTidyRoleTagBlacklistRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyRoleTagBlacklist(requestParameters: AwsTidyRoleTagBlacklistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsTidyRoleTagBlacklistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsTidyRoleTagDenyListRaw(requestParameters: AwsTidyRoleTagDenyListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyRoleTagDenyList().'
            );
        }

        if (requestParameters['awsTidyRoleTagDenyListRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyRoleTagDenyListRequest',
                'Required parameter "awsTidyRoleTagDenyListRequest" was null or undefined when calling awsTidyRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyRoleTagDenyListRequestToJSON(requestParameters['awsTidyRoleTagDenyListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyRoleTagDenyList(requestParameters: AwsTidyRoleTagDenyListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsTidyRoleTagDenyListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteAuthRoleRaw(requestParameters: AwsWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        if (requestParameters['awsWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteAuthRoleRequest',
                'Required parameter "awsWriteAuthRoleRequest" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteAuthRoleRequestToJSON(requestParameters['awsWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteAuthRole(requestParameters: AwsWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteRoleTagRaw(requestParameters: AwsWriteRoleTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        if (requestParameters['awsWriteRoleTagRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteRoleTagRequest',
                'Required parameter "awsWriteRoleTagRequest" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}/tag`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteRoleTagRequestToJSON(requestParameters['awsWriteRoleTagRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTag(requestParameters: AwsWriteRoleTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteRoleTagRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteRoleTagBlacklistRaw(requestParameters: AwsWriteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsWriteRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTagBlacklist(requestParameters: AwsWriteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteRoleTagBlacklistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteRoleTagDenyListRaw(requestParameters: AwsWriteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsWriteRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTagDenyList(requestParameters: AwsWriteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteRoleTagDenyListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteStsRoleRaw(requestParameters: AwsWriteStsRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsWriteStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteStsRole().'
            );
        }

        if (requestParameters['awsWriteStsRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteStsRoleRequest',
                'Required parameter "awsWriteStsRoleRequest" was null or undefined when calling awsWriteStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteStsRoleRequestToJSON(requestParameters['awsWriteStsRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteStsRole(requestParameters: AwsWriteStsRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteStsRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureConfigureAuthRaw(requestParameters: AzureConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureConfigureAuth().'
            );
        }

        if (requestParameters['azureConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'azureConfigureAuthRequest',
                'Required parameter "azureConfigureAuthRequest" was null or undefined when calling azureConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureConfigureAuthRequestToJSON(requestParameters['azureConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureConfigureAuth(requestParameters: AzureConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureConfigureAuthRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureDeleteAuthConfigurationRaw(requestParameters: AzureDeleteAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteAuthConfiguration(requestParameters: AzureDeleteAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureDeleteAuthConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureDeleteAuthRoleRaw(requestParameters: AzureDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureDeleteAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteAuthRole(requestParameters: AzureDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureDeleteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureListAuthRolesRaw(requestParameters: AzureListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling azureListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async azureListAuthRoles(requestParameters: AzureListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.azureListAuthRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureLoginRaw(requestParameters: AzureLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureLogin().'
            );
        }

        if (requestParameters['azureLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'azureLoginRequest',
                'Required parameter "azureLoginRequest" was null or undefined when calling azureLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/login`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureLoginRequestToJSON(requestParameters['azureLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureLogin(requestParameters: AzureLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureReadAuthConfigurationRaw(requestParameters: AzureReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadAuthConfiguration(requestParameters: AzureReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureReadAuthConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureReadAuthRoleRaw(requestParameters: AzureReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureReadAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadAuthRole(requestParameters: AzureReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureReadAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureRotateRootCredentialsRaw(requestParameters: AzureRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRotateRootCredentials(requestParameters: AzureRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureWriteAuthRoleRaw(requestParameters: AzureWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        if (requestParameters['azureWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'azureWriteAuthRoleRequest',
                'Required parameter "azureWriteAuthRoleRequest" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureWriteAuthRoleRequestToJSON(requestParameters['azureWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureWriteAuthRole(requestParameters: AzureWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureWriteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certConfigureRaw(requestParameters: CertConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certConfigure().'
            );
        }

        if (requestParameters['certConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'certConfigureRequest',
                'Required parameter "certConfigureRequest" was null or undefined when calling certConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/config`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertConfigureRequestToJSON(requestParameters['certConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certConfigure(requestParameters: CertConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certDeleteCertificateRaw(requestParameters: CertDeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certDeleteCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certDeleteCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certDeleteCertificate(requestParameters: CertDeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certDeleteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certDeleteCrlRaw(requestParameters: CertDeleteCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certDeleteCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certDeleteCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certDeleteCrl(requestParameters: CertDeleteCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certDeleteCrlRaw(requestParameters, initOverrides);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certListCertificatesRaw(requestParameters: CertListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certListCertificates().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling certListCertificates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certListCertificates(requestParameters: CertListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.certListCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certListCrlsRaw(requestParameters: CertListCrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certListCrls().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling certListCrls().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async certListCrls(requestParameters: CertListCrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.certListCrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certLoginRaw(requestParameters: CertLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certLogin().'
            );
        }

        if (requestParameters['certLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'certLoginRequest',
                'Required parameter "certLoginRequest" was null or undefined when calling certLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/login`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertLoginRequestToJSON(requestParameters['certLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certLogin(requestParameters: CertLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certReadCertificateRaw(requestParameters: CertReadCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certReadCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certReadCertificate(requestParameters: CertReadCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certReadCertificateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certReadConfigurationRaw(requestParameters: CertReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/config`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certReadConfiguration(requestParameters: CertReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certReadCrlRaw(requestParameters: CertReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certReadCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certReadCrl(requestParameters: CertReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certReadCrlRaw(requestParameters, initOverrides);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certWriteCertificateRaw(requestParameters: CertWriteCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certWriteCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certWriteCertificate().'
            );
        }

        if (requestParameters['certWriteCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'certWriteCertificateRequest',
                'Required parameter "certWriteCertificateRequest" was null or undefined when calling certWriteCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertWriteCertificateRequestToJSON(requestParameters['certWriteCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certWriteCertificate(requestParameters: CertWriteCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certWriteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certWriteCrlRaw(requestParameters: CertWriteCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certWriteCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certWriteCrl().'
            );
        }

        if (requestParameters['certWriteCrlRequest'] == null) {
            throw new runtime.RequiredError(
                'certWriteCrlRequest',
                'Required parameter "certWriteCrlRequest" was null or undefined when calling certWriteCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertWriteCrlRequestToJSON(requestParameters['certWriteCrlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certWriteCrl(requestParameters: CertWriteCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certWriteCrlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryConfigureRaw(requestParameters: CloudFoundryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryConfigure().'
            );
        }

        if (requestParameters['cloudFoundryConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryConfigureRequest',
                'Required parameter "cloudFoundryConfigureRequest" was null or undefined when calling cloudFoundryConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryConfigureRequestToJSON(requestParameters['cloudFoundryConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryConfigure(requestParameters: CloudFoundryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryDeleteConfigurationRaw(requestParameters: CloudFoundryDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryDeleteConfiguration(requestParameters: CloudFoundryDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryDeleteRoleRaw(requestParameters: CloudFoundryDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryDeleteRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryDeleteRole(requestParameters: CloudFoundryDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryListRolesRaw(requestParameters: CloudFoundryListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling cloudFoundryListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async cloudFoundryListRoles(requestParameters: CloudFoundryListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.cloudFoundryListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryLoginRaw(requestParameters: CloudFoundryLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryLogin().'
            );
        }

        if (requestParameters['cloudFoundryLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryLoginRequest',
                'Required parameter "cloudFoundryLoginRequest" was null or undefined when calling cloudFoundryLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/login`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryLoginRequestToJSON(requestParameters['cloudFoundryLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryLogin(requestParameters: CloudFoundryLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryReadConfigurationRaw(requestParameters: CloudFoundryReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryReadConfiguration(requestParameters: CloudFoundryReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryReadRoleRaw(requestParameters: CloudFoundryReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryReadRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryReadRole(requestParameters: CloudFoundryReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloudFoundryWriteRoleRaw(requestParameters: CloudFoundryWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        if (requestParameters['cloudFoundryWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryWriteRoleRequest',
                'Required parameter "cloudFoundryWriteRoleRequest" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryWriteRoleRequestToJSON(requestParameters['cloudFoundryWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryWriteRole(requestParameters: CloudFoundryWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cloudFoundryWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubConfigureRaw(requestParameters: GithubConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubConfigure().'
            );
        }

        if (requestParameters['githubConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'githubConfigureRequest',
                'Required parameter "githubConfigureRequest" was null or undefined when calling githubConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/config`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubConfigureRequestToJSON(requestParameters['githubConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubConfigure(requestParameters: GithubConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubDeleteTeamMappingRaw(requestParameters: GithubDeleteTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubDeleteTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubDeleteTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubDeleteTeamMapping(requestParameters: GithubDeleteTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubDeleteTeamMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubDeleteUserMappingRaw(requestParameters: GithubDeleteUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubDeleteUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubDeleteUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubDeleteUserMapping(requestParameters: GithubDeleteUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubDeleteUserMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Read mappings for teams
     */
    async githubListTeamsRaw(requestParameters: GithubListTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListTeams().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling githubListTeams().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams(requestParameters: GithubListTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.githubListTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams2Raw(requestParameters: GithubListTeams2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListTeams2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams2(requestParameters: GithubListTeams2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubListTeams2Raw(requestParameters, initOverrides);
    }

    /**
     * Read mappings for users
     */
    async githubListUsersRaw(requestParameters: GithubListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling githubListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Read mappings for users
     */
    async githubListUsers(requestParameters: GithubListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.githubListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for users
     */
    async githubListUsers2Raw(requestParameters: GithubListUsers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListUsers2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read mappings for users
     */
    async githubListUsers2(requestParameters: GithubListUsers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubListUsers2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async githubLoginRaw(requestParameters: GithubLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubLogin().'
            );
        }

        if (requestParameters['githubLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'githubLoginRequest',
                'Required parameter "githubLoginRequest" was null or undefined when calling githubLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/login`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubLoginRequestToJSON(requestParameters['githubLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubLogin(requestParameters: GithubLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubReadConfigurationRaw(requestParameters: GithubReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/config`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubReadConfiguration(requestParameters: GithubReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubReadTeamMappingRaw(requestParameters: GithubReadTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubReadTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubReadTeamMapping(requestParameters: GithubReadTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubReadTeamMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubReadUserMappingRaw(requestParameters: GithubReadUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubReadUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubReadUserMapping(requestParameters: GithubReadUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubReadUserMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubWriteTeamMappingRaw(requestParameters: GithubWriteTeamMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        if (requestParameters['githubWriteTeamMappingRequest'] == null) {
            throw new runtime.RequiredError(
                'githubWriteTeamMappingRequest',
                'Required parameter "githubWriteTeamMappingRequest" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubWriteTeamMappingRequestToJSON(requestParameters['githubWriteTeamMappingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubWriteTeamMapping(requestParameters: GithubWriteTeamMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubWriteTeamMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubWriteUserMappingRaw(requestParameters: GithubWriteUserMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        if (requestParameters['githubWriteUserMappingRequest'] == null) {
            throw new runtime.RequiredError(
                'githubWriteUserMappingRequest',
                'Required parameter "githubWriteUserMappingRequest" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubWriteUserMappingRequestToJSON(requestParameters['githubWriteUserMappingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubWriteUserMapping(requestParameters: GithubWriteUserMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubWriteUserMappingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudConfigureAuthRaw(requestParameters: GoogleCloudConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudConfigureAuth().'
            );
        }

        if (requestParameters['googleCloudConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudConfigureAuthRequest',
                'Required parameter "googleCloudConfigureAuthRequest" was null or undefined when calling googleCloudConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudConfigureAuthRequestToJSON(requestParameters['googleCloudConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudConfigureAuth(requestParameters: GoogleCloudConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudConfigureAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudDeleteRoleRaw(requestParameters: GoogleCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudDeleteRole(requestParameters: GoogleCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove labels for an existing \'gce\' role
     */
    async googleCloudEditLabelsForRoleRaw(requestParameters: GoogleCloudEditLabelsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        if (requestParameters['googleCloudEditLabelsForRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudEditLabelsForRoleRequest',
                'Required parameter "googleCloudEditLabelsForRoleRequest" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}/labels`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudEditLabelsForRoleRequestToJSON(requestParameters['googleCloudEditLabelsForRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove labels for an existing \'gce\' role
     */
    async googleCloudEditLabelsForRole(requestParameters: GoogleCloudEditLabelsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudEditLabelsForRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Add or remove service accounts for an existing `iam` role
     */
    async googleCloudEditServiceAccountsForRoleRaw(requestParameters: GoogleCloudEditServiceAccountsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        if (requestParameters['googleCloudEditServiceAccountsForRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudEditServiceAccountsForRoleRequest',
                'Required parameter "googleCloudEditServiceAccountsForRoleRequest" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}/service-accounts`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudEditServiceAccountsForRoleRequestToJSON(requestParameters['googleCloudEditServiceAccountsForRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove service accounts for an existing `iam` role
     */
    async googleCloudEditServiceAccountsForRole(requestParameters: GoogleCloudEditServiceAccountsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudEditServiceAccountsForRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRolesRaw(requestParameters: GoogleCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles(requestParameters: GoogleCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles2Raw(requestParameters: GoogleCloudListRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/roles/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles2(requestParameters: GoogleCloudListRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRoles2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudLoginRaw(requestParameters: GoogleCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudLogin().'
            );
        }

        if (requestParameters['googleCloudLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudLoginRequest',
                'Required parameter "googleCloudLoginRequest" was null or undefined when calling googleCloudLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/login`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudLoginRequestToJSON(requestParameters['googleCloudLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudLogin(requestParameters: GoogleCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudReadAuthConfigurationRaw(requestParameters: GoogleCloudReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadAuthConfiguration(requestParameters: GoogleCloudReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadAuthConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudReadRoleRaw(requestParameters: GoogleCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudReadRole(requestParameters: GoogleCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudWriteRoleRaw(requestParameters: GoogleCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        if (requestParameters['googleCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteRoleRequest',
                'Required parameter "googleCloudWriteRoleRequest" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteRoleRequestToJSON(requestParameters['googleCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudWriteRole(requestParameters: GoogleCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
     * Configure the JWT authentication backend.
     */
    async jwtConfigureRaw(requestParameters: JwtConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtConfigure().'
            );
        }

        if (requestParameters['jwtConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtConfigureRequest',
                'Required parameter "jwtConfigureRequest" was null or undefined when calling jwtConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/config`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtConfigureRequestToJSON(requestParameters['jwtConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
     * Configure the JWT authentication backend.
     */
    async jwtConfigure(requestParameters: JwtConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an existing role.
     */
    async jwtDeleteRoleRaw(requestParameters: JwtDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtDeleteRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing role.
     */
    async jwtDeleteRole(requestParameters: JwtDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * The list will contain the names of the roles.
     * Lists all the roles registered with the backend.
     */
    async jwtListRolesRaw(requestParameters: JwtListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling jwtListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * The list will contain the names of the roles.
     * Lists all the roles registered with the backend.
     */
    async jwtListRoles(requestParameters: JwtListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.jwtListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates to Vault using a JWT (or OIDC) token.
     */
    async jwtLoginRaw(requestParameters: JwtLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtLogin().'
            );
        }

        if (requestParameters['jwtLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtLoginRequest',
                'Required parameter "jwtLoginRequest" was null or undefined when calling jwtLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/login`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtLoginRequestToJSON(requestParameters['jwtLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates to Vault using a JWT (or OIDC) token.
     */
    async jwtLogin(requestParameters: JwtLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Callback endpoint to complete an OIDC login.
     */
    async jwtOidcCallbackRaw(requestParameters: JwtOidcCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientNonce'] != null) {
            queryParameters['client_nonce'] = requestParameters['clientNonce'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/callback`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Callback endpoint to complete an OIDC login.
     */
    async jwtOidcCallback(requestParameters: JwtOidcCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtOidcCallbackRaw(requestParameters, initOverrides);
    }

    /**
     * Callback endpoint to handle form_posts.
     */
    async jwtOidcCallbackFormPostRaw(requestParameters: JwtOidcCallbackFormPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcCallbackFormPost().'
            );
        }

        if (requestParameters['jwtOidcCallbackFormPostRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtOidcCallbackFormPostRequest',
                'Required parameter "jwtOidcCallbackFormPostRequest" was null or undefined when calling jwtOidcCallbackFormPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/callback`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtOidcCallbackFormPostRequestToJSON(requestParameters['jwtOidcCallbackFormPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Callback endpoint to handle form_posts.
     */
    async jwtOidcCallbackFormPost(requestParameters: JwtOidcCallbackFormPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtOidcCallbackFormPostRaw(requestParameters, initOverrides);
    }

    /**
     * Request an authorization URL to start an OIDC login flow.
     */
    async jwtOidcRequestAuthorizationUrlRaw(requestParameters: JwtOidcRequestAuthorizationUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcRequestAuthorizationUrl().'
            );
        }

        if (requestParameters['jwtOidcRequestAuthorizationUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtOidcRequestAuthorizationUrlRequest',
                'Required parameter "jwtOidcRequestAuthorizationUrlRequest" was null or undefined when calling jwtOidcRequestAuthorizationUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/auth_url`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtOidcRequestAuthorizationUrlRequestToJSON(requestParameters['jwtOidcRequestAuthorizationUrlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request an authorization URL to start an OIDC login flow.
     */
    async jwtOidcRequestAuthorizationUrl(requestParameters: JwtOidcRequestAuthorizationUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtOidcRequestAuthorizationUrlRaw(requestParameters, initOverrides);
    }

    /**
     * Read the current JWT authentication backend configuration.
     */
    async jwtReadConfigurationRaw(requestParameters: JwtReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/config`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current JWT authentication backend configuration.
     */
    async jwtReadConfiguration(requestParameters: JwtReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Read an existing role.
     */
    async jwtReadRoleRaw(requestParameters: JwtReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtReadRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read an existing role.
     */
    async jwtReadRole(requestParameters: JwtReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
     * Register an role with the backend.
     */
    async jwtWriteRoleRaw(requestParameters: JwtWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtWriteRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtWriteRole().'
            );
        }

        if (requestParameters['jwtWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtWriteRoleRequest',
                'Required parameter "jwtWriteRoleRequest" was null or undefined when calling jwtWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtWriteRoleRequestToJSON(requestParameters['jwtWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
     * Register an role with the backend.
     */
    async jwtWriteRole(requestParameters: JwtWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jwtWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosConfigureRaw(requestParameters: KerberosConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosConfigure().'
            );
        }

        if (requestParameters['kerberosConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosConfigureRequest',
                'Required parameter "kerberosConfigureRequest" was null or undefined when calling kerberosConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosConfigureRequestToJSON(requestParameters['kerberosConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosConfigure(requestParameters: KerberosConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosConfigureLdapRaw(requestParameters: KerberosConfigureLdapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosConfigureLdap().'
            );
        }

        if (requestParameters['kerberosConfigureLdapRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosConfigureLdapRequest',
                'Required parameter "kerberosConfigureLdapRequest" was null or undefined when calling kerberosConfigureLdap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config/ldap`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosConfigureLdapRequestToJSON(requestParameters['kerberosConfigureLdapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosConfigureLdap(requestParameters: KerberosConfigureLdapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosConfigureLdapRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosDeleteGroupRaw(requestParameters: KerberosDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosDeleteGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosDeleteGroup(requestParameters: KerberosDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosDeleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosListGroupsRaw(requestParameters: KerberosListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kerberosListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kerberosListGroups(requestParameters: KerberosListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kerberosListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosLoginRaw(requestParameters: KerberosLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosLogin().'
            );
        }

        if (requestParameters['kerberosLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosLoginRequest',
                'Required parameter "kerberosLoginRequest" was null or undefined when calling kerberosLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/login`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosLoginRequestToJSON(requestParameters['kerberosLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosLogin(requestParameters: KerberosLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosLogin2Raw(requestParameters: KerberosLogin2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosLogin2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/login`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosLogin2(requestParameters: KerberosLogin2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosLogin2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosReadConfigurationRaw(requestParameters: KerberosReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadConfiguration(requestParameters: KerberosReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosReadGroupRaw(requestParameters: KerberosReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosReadGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadGroup(requestParameters: KerberosReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosReadGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosReadLdapConfigurationRaw(requestParameters: KerberosReadLdapConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadLdapConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config/ldap`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadLdapConfiguration(requestParameters: KerberosReadLdapConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosReadLdapConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kerberosWriteGroupRaw(requestParameters: KerberosWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        if (requestParameters['kerberosWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosWriteGroupRequest',
                'Required parameter "kerberosWriteGroupRequest" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosWriteGroupRequestToJSON(requestParameters['kerberosWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosWriteGroup(requestParameters: KerberosWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kerberosWriteGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesConfigureAuthRaw(requestParameters: KubernetesConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesConfigureAuth().'
            );
        }

        if (requestParameters['kubernetesConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesConfigureAuthRequest',
                'Required parameter "kubernetesConfigureAuthRequest" was null or undefined when calling kubernetesConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesConfigureAuthRequestToJSON(requestParameters['kubernetesConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesConfigureAuth(requestParameters: KubernetesConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesConfigureAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesDeleteAuthRoleRaw(requestParameters: KubernetesDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesDeleteAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesDeleteAuthRole(requestParameters: KubernetesDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesDeleteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all the roles registered with the backend.
     */
    async kubernetesListAuthRolesRaw(requestParameters: KubernetesListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kubernetesListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles registered with the backend.
     */
    async kubernetesListAuthRoles(requestParameters: KubernetesListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kubernetesListAuthRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates Kubernetes service accounts with Vault.
     */
    async kubernetesLoginRaw(requestParameters: KubernetesLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesLogin().'
            );
        }

        if (requestParameters['kubernetesLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesLoginRequest',
                'Required parameter "kubernetesLoginRequest" was null or undefined when calling kubernetesLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/login`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesLoginRequestToJSON(requestParameters['kubernetesLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates Kubernetes service accounts with Vault.
     */
    async kubernetesLogin(requestParameters: KubernetesLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesReadAuthConfigurationRaw(requestParameters: KubernetesReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadAuthConfiguration(requestParameters: KubernetesReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesReadAuthConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesReadAuthRoleRaw(requestParameters: KubernetesReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesReadAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesReadAuthRole(requestParameters: KubernetesReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesReadAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesWriteAuthRoleRaw(requestParameters: KubernetesWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        if (requestParameters['kubernetesWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesWriteAuthRoleRequest',
                'Required parameter "kubernetesWriteAuthRoleRequest" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesWriteAuthRoleRequestToJSON(requestParameters['kubernetesWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesWriteAuthRole(requestParameters: KubernetesWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesWriteAuthRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapConfigureAuthRaw(requestParameters: LdapConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapConfigureAuth().'
            );
        }

        if (requestParameters['ldapConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapConfigureAuthRequest',
                'Required parameter "ldapConfigureAuthRequest" was null or undefined when calling ldapConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapConfigureAuthRequestToJSON(requestParameters['ldapConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapConfigureAuth(requestParameters: LdapConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapConfigureAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapDeleteGroupRaw(requestParameters: LdapDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapDeleteGroup(requestParameters: LdapDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapDeleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapDeleteUserRaw(requestParameters: LdapDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapDeleteUser(requestParameters: LdapDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapListGroupsRaw(requestParameters: LdapListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapListGroups(requestParameters: LdapListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapListUsersRaw(requestParameters: LdapListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapListUsers(requestParameters: LdapListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async ldapLoginRaw(requestParameters: LdapLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling ldapLogin().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLogin().'
            );
        }

        if (requestParameters['ldapLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLoginRequest',
                'Required parameter "ldapLoginRequest" was null or undefined when calling ldapLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLoginRequestToJSON(requestParameters['ldapLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async ldapLogin(requestParameters: LdapLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapReadAuthConfigurationRaw(requestParameters: LdapReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadAuthConfiguration(requestParameters: LdapReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadAuthConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapReadGroupRaw(requestParameters: LdapReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapReadGroup(requestParameters: LdapReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapReadUserRaw(requestParameters: LdapReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapReadUser(requestParameters: LdapReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapRotateRootCredentialsRaw(requestParameters: LdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateRootCredentials(requestParameters: LdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapWriteGroupRaw(requestParameters: LdapWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteGroup().'
            );
        }

        if (requestParameters['ldapWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteGroupRequest',
                'Required parameter "ldapWriteGroupRequest" was null or undefined when calling ldapWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteGroupRequestToJSON(requestParameters['ldapWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapWriteGroup(requestParameters: LdapWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapWriteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapWriteUserRaw(requestParameters: LdapWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteUser().'
            );
        }

        if (requestParameters['ldapWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteUserRequest',
                'Required parameter "ldapWriteUserRequest" was null or undefined when calling ldapWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteUserRequestToJSON(requestParameters['ldapWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapWriteUser(requestParameters: LdapWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapWriteUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ociConfigureRaw(requestParameters: OciConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociConfigure().'
            );
        }

        if (requestParameters['ociConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ociConfigureRequest',
                'Required parameter "ociConfigureRequest" was null or undefined when calling ociConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciConfigureRequestToJSON(requestParameters['ociConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociConfigure(requestParameters: OciConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ociDeleteConfigurationRaw(requestParameters: OciDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociDeleteConfiguration(requestParameters: OciDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociDeleteRoleRaw(requestParameters: OciDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociDeleteRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociDeleteRole(requestParameters: OciDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async ociListRolesRaw(requestParameters: OciListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ociListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async ociListRoles(requestParameters: OciListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ociListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates to Vault using OCI credentials
     */
    async ociLoginRaw(requestParameters: OciLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociLogin().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociLogin().'
            );
        }

        if (requestParameters['ociLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ociLoginRequest',
                'Required parameter "ociLoginRequest" was null or undefined when calling ociLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/login/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciLoginRequestToJSON(requestParameters['ociLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates to Vault using OCI credentials
     */
    async ociLogin(requestParameters: OciLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ociReadConfigurationRaw(requestParameters: OciReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociReadConfiguration(requestParameters: OciReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociReadRoleRaw(requestParameters: OciReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociReadRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociReadRole(requestParameters: OciReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociWriteRoleRaw(requestParameters: OciWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociWriteRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociWriteRole().'
            );
        }

        if (requestParameters['ociWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ociWriteRoleRequest',
                'Required parameter "ociWriteRoleRequest" was null or undefined when calling ociWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciWriteRoleRequestToJSON(requestParameters['ociWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociWriteRole(requestParameters: OciWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ociWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oktaConfigureRaw(requestParameters: OktaConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaConfigure().'
            );
        }

        if (requestParameters['oktaConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaConfigureRequest',
                'Required parameter "oktaConfigureRequest" was null or undefined when calling oktaConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/config`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaConfigureRequestToJSON(requestParameters['oktaConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaConfigure(requestParameters: OktaConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaDeleteGroupRaw(requestParameters: OktaDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaDeleteGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaDeleteGroup(requestParameters: OktaDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaDeleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaDeleteUserRaw(requestParameters: OktaDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaDeleteUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaDeleteUser(requestParameters: OktaDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaListGroupsRaw(requestParameters: OktaListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oktaListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaListGroups(requestParameters: OktaListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oktaListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaListUsersRaw(requestParameters: OktaListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oktaListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaListUsers(requestParameters: OktaListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oktaListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async oktaLoginRaw(requestParameters: OktaLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling oktaLogin().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaLogin().'
            );
        }

        if (requestParameters['oktaLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaLoginRequest',
                'Required parameter "oktaLoginRequest" was null or undefined when calling oktaLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaLoginRequestToJSON(requestParameters['oktaLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async oktaLogin(requestParameters: OktaLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oktaReadConfigurationRaw(requestParameters: OktaReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/config`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaReadConfiguration(requestParameters: OktaReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaReadGroupRaw(requestParameters: OktaReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaReadGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaReadGroup(requestParameters: OktaReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaReadGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaReadUserRaw(requestParameters: OktaReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaReadUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaReadUser(requestParameters: OktaReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaReadUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oktaVerifyRaw(requestParameters: OktaVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling oktaVerify().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/verify/{nonce}`.replace(`{${"nonce"}}`, encodeURIComponent(String(requestParameters['nonce']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaVerify(requestParameters: OktaVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaVerifyRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaWriteGroupRaw(requestParameters: OktaWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaWriteGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaWriteGroup().'
            );
        }

        if (requestParameters['oktaWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaWriteGroupRequest',
                'Required parameter "oktaWriteGroupRequest" was null or undefined when calling oktaWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaWriteGroupRequestToJSON(requestParameters['oktaWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaWriteGroup(requestParameters: OktaWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaWriteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaWriteUserRaw(requestParameters: OktaWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaWriteUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaWriteUser().'
            );
        }

        if (requestParameters['oktaWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaWriteUserRequest',
                'Required parameter "oktaWriteUserRequest" was null or undefined when calling oktaWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaWriteUserRequestToJSON(requestParameters['oktaWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaWriteUser(requestParameters: OktaWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oktaWriteUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async radiusConfigureRaw(requestParameters: RadiusConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusConfigure().'
            );
        }

        if (requestParameters['radiusConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusConfigureRequest',
                'Required parameter "radiusConfigureRequest" was null or undefined when calling radiusConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/config`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusConfigureRequestToJSON(requestParameters['radiusConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async radiusConfigure(requestParameters: RadiusConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusDeleteUserRaw(requestParameters: RadiusDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusDeleteUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusDeleteUser(requestParameters: RadiusDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusListUsersRaw(requestParameters: RadiusListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling radiusListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusListUsers(requestParameters: RadiusListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.radiusListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginRaw(requestParameters: RadiusLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusLogin().'
            );
        }

        if (requestParameters['radiusLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusLoginRequest',
                'Required parameter "radiusLoginRequest" was null or undefined when calling radiusLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/login`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusLoginRequestToJSON(requestParameters['radiusLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async radiusLogin(requestParameters: RadiusLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginWithUsernameRaw(requestParameters: RadiusLoginWithUsernameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['urlusername'] == null) {
            throw new runtime.RequiredError(
                'urlusername',
                'Required parameter "urlusername" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        if (requestParameters['radiusLoginWithUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusLoginWithUsernameRequest',
                'Required parameter "radiusLoginWithUsernameRequest" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/login/{urlusername}`.replace(`{${"urlusername"}}`, encodeURIComponent(String(requestParameters['urlusername']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusLoginWithUsernameRequestToJSON(requestParameters['radiusLoginWithUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginWithUsername(requestParameters: RadiusLoginWithUsernameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusLoginWithUsernameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async radiusReadConfigurationRaw(requestParameters: RadiusReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/config`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async radiusReadConfiguration(requestParameters: RadiusReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusReadUserRaw(requestParameters: RadiusReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusReadUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusReadUser(requestParameters: RadiusReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusReadUserRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusWriteUserRaw(requestParameters: RadiusWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusWriteUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusWriteUser().'
            );
        }

        if (requestParameters['radiusWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusWriteUserRequest',
                'Required parameter "radiusWriteUserRequest" was null or undefined when calling radiusWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusWriteUserRequestToJSON(requestParameters['radiusWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusWriteUser(requestParameters: RadiusWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.radiusWriteUserRaw(requestParameters, initOverrides);
    }

    /**
     * The token create path is used to create new tokens.
     */
    async tokenCreateRaw(requestParameters: TokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateRequest',
                'Required parameter "tokenCreateRequest" was null or undefined when calling tokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateRequestToJSON(requestParameters['tokenCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The token create path is used to create new tokens.
     */
    async tokenCreate(requestParameters: TokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This token create path is used to create new tokens adhering to the given role.
     */
    async tokenCreateAgainstRoleRaw(requestParameters: TokenCreateAgainstRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenCreateAgainstRole().'
            );
        }

        if (requestParameters['tokenCreateAgainstRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateAgainstRoleRequest',
                'Required parameter "tokenCreateAgainstRoleRequest" was null or undefined when calling tokenCreateAgainstRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateAgainstRoleRequestToJSON(requestParameters['tokenCreateAgainstRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This token create path is used to create new tokens adhering to the given role.
     */
    async tokenCreateAgainstRole(requestParameters: TokenCreateAgainstRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenCreateAgainstRoleRaw(requestParameters, initOverrides);
    }

    /**
     * The token create path is used to create new orphan tokens.
     */
    async tokenCreateOrphanRaw(requestParameters: TokenCreateOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenCreateOrphanRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateOrphanRequest',
                'Required parameter "tokenCreateOrphanRequest" was null or undefined when calling tokenCreateOrphan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create-orphan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateOrphanRequestToJSON(requestParameters['tokenCreateOrphanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The token create path is used to create new orphan tokens.
     */
    async tokenCreateOrphan(requestParameters: TokenCreateOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenCreateOrphanRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tokenDeleteRoleRaw(requestParameters: TokenDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenDeleteRole(requestParameters: TokenDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires \'sudo\' capability in addition to \'list\'.
     */
    async tokenListAccessorsRaw(requestParameters: TokenListAccessorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling tokenListAccessors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/accessors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires \'sudo\' capability in addition to \'list\'.
     */
    async tokenListAccessors(requestParameters: TokenListAccessorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.tokenListAccessorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists configured roles.
     */
    async tokenListRolesRaw(requestParameters: TokenListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling tokenListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists configured roles.
     */
    async tokenListRoles(requestParameters: TokenListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.tokenListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenLookUpRaw(requestParameters: TokenLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpRequest',
                'Required parameter "tokenLookUpRequest" was null or undefined when calling tokenLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpRequestToJSON(requestParameters['tokenLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUp(requestParameters: TokenLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenLookUpRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tokenLookUp2Raw(requestParameters: TokenLookUp2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUp2(requestParameters: TokenLookUp2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenLookUp2Raw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenLookUpAccessorRaw(requestParameters: TokenLookUpAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenLookUpAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpAccessorRequest',
                'Required parameter "tokenLookUpAccessorRequest" was null or undefined when calling tokenLookUpAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpAccessorRequestToJSON(requestParameters['tokenLookUpAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenLookUpAccessor(requestParameters: TokenLookUpAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenLookUpAccessorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tokenLookUpSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/lookup-self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUpSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenLookUpSelfRaw(initOverrides);
    }

    /**
     */
    async tokenLookUpSelf2Raw(requestParameters: TokenLookUpSelf2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenLookUpSelf2Request'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpSelf2Request',
                'Required parameter "tokenLookUpSelf2Request" was null or undefined when calling tokenLookUpSelf2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpSelf2RequestToJSON(requestParameters['tokenLookUpSelf2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUpSelf2(requestParameters: TokenLookUpSelf2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenLookUpSelf2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async tokenReadRoleRaw(requestParameters: TokenReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenReadRole(requestParameters: TokenReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will renew the given token and prevent expiration.
     */
    async tokenRenewRaw(requestParameters: TokenRenewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRenewRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewRequest',
                'Required parameter "tokenRenewRequest" was null or undefined when calling tokenRenew().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewRequestToJSON(requestParameters['tokenRenewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew the given token and prevent expiration.
     */
    async tokenRenew(requestParameters: TokenRenewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRenewRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenRenewAccessorRaw(requestParameters: TokenRenewAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRenewAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewAccessorRequest',
                'Required parameter "tokenRenewAccessorRequest" was null or undefined when calling tokenRenewAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewAccessorRequestToJSON(requestParameters['tokenRenewAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenRenewAccessor(requestParameters: TokenRenewAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRenewAccessorRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will renew the token used to call it and prevent expiration.
     */
    async tokenRenewSelfRaw(requestParameters: TokenRenewSelfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRenewSelfRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewSelfRequest',
                'Required parameter "tokenRenewSelfRequest" was null or undefined when calling tokenRenewSelf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewSelfRequestToJSON(requestParameters['tokenRenewSelfRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew the token used to call it and prevent expiration.
     */
    async tokenRenewSelf(requestParameters: TokenRenewSelfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRenewSelfRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will delete the given token and all of its child tokens.
     */
    async tokenRevokeRaw(requestParameters: TokenRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRevokeRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeRequest',
                'Required parameter "tokenRevokeRequest" was null or undefined when calling tokenRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeRequestToJSON(requestParameters['tokenRevokeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the given token and all of its child tokens.
     */
    async tokenRevoke(requestParameters: TokenRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRevokeRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will delete the token associated with the accessor and all of its child tokens.
     */
    async tokenRevokeAccessorRaw(requestParameters: TokenRevokeAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRevokeAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeAccessorRequest',
                'Required parameter "tokenRevokeAccessorRequest" was null or undefined when calling tokenRevokeAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeAccessorRequestToJSON(requestParameters['tokenRevokeAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token associated with the accessor and all of its child tokens.
     */
    async tokenRevokeAccessor(requestParameters: TokenRevokeAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRevokeAccessorRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will delete the token and orphan its child tokens.
     */
    async tokenRevokeOrphanRaw(requestParameters: TokenRevokeOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenRevokeOrphanRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeOrphanRequest',
                'Required parameter "tokenRevokeOrphanRequest" was null or undefined when calling tokenRevokeOrphan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke-orphan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeOrphanRequestToJSON(requestParameters['tokenRevokeOrphanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token and orphan its child tokens.
     */
    async tokenRevokeOrphan(requestParameters: TokenRevokeOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRevokeOrphanRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint will delete the token used to call it and all of its child tokens.
     */
    async tokenRevokeSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/revoke-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token used to call it and all of its child tokens.
     */
    async tokenRevokeSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenRevokeSelfRaw(initOverrides);
    }

    /**
     * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
     */
    async tokenTidyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/tidy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
     */
    async tokenTidy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenTidyRaw(initOverrides);
    }

    /**
     */
    async tokenWriteRoleRaw(requestParameters: TokenWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenWriteRole().'
            );
        }

        if (requestParameters['tokenWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenWriteRoleRequest',
                'Required parameter "tokenWriteRoleRequest" was null or undefined when calling tokenWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenWriteRoleRequestToJSON(requestParameters['tokenWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenWriteRole(requestParameters: TokenWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassDeleteUserRaw(requestParameters: UserpassDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassDeleteUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassDeleteUser(requestParameters: UserpassDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassListUsersRaw(requestParameters: UserpassListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling userpassListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/`.replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassListUsers(requestParameters: UserpassListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.userpassListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async userpassLoginRaw(requestParameters: UserpassLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassLogin().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassLogin().'
            );
        }

        if (requestParameters['userpassLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassLoginRequest',
                'Required parameter "userpassLoginRequest" was null or undefined when calling userpassLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassLoginRequestToJSON(requestParameters['userpassLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async userpassLogin(requestParameters: UserpassLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassReadUserRaw(requestParameters: UserpassReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassReadUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassReadUser(requestParameters: UserpassReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassReadUserRaw(requestParameters, initOverrides);
    }

    /**
     * Reset user\'s password.
     */
    async userpassResetPasswordRaw(requestParameters: UserpassResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassResetPassword().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassResetPassword().'
            );
        }

        if (requestParameters['userpassResetPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassResetPasswordRequest',
                'Required parameter "userpassResetPasswordRequest" was null or undefined when calling userpassResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}/password`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassResetPasswordRequestToJSON(requestParameters['userpassResetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset user\'s password.
     */
    async userpassResetPassword(requestParameters: UserpassResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassResetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Update the policies associated with the username.
     */
    async userpassUpdatePoliciesRaw(requestParameters: UserpassUpdatePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        if (requestParameters['userpassUpdatePoliciesRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassUpdatePoliciesRequest',
                'Required parameter "userpassUpdatePoliciesRequest" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}/policies`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassUpdatePoliciesRequestToJSON(requestParameters['userpassUpdatePoliciesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the policies associated with the username.
     */
    async userpassUpdatePolicies(requestParameters: UserpassUpdatePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassUpdatePoliciesRaw(requestParameters, initOverrides);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassWriteUserRaw(requestParameters: UserpassWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassWriteUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassWriteUser().'
            );
        }

        if (requestParameters['userpassWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassWriteUserRequest',
                'Required parameter "userpassWriteUserRequest" was null or undefined when calling userpassWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassWriteUserRequestToJSON(requestParameters['userpassWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassWriteUser(requestParameters: UserpassWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassWriteUserRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AliCloudListAuthRolesListEnum = {
    True: 'true'
} as const;
export type AliCloudListAuthRolesListEnum = typeof AliCloudListAuthRolesListEnum[keyof typeof AliCloudListAuthRolesListEnum];
/**
 * @export
 */
export const AliCloudListAuthRoles2ListEnum = {
    True: 'true'
} as const;
export type AliCloudListAuthRoles2ListEnum = typeof AliCloudListAuthRoles2ListEnum[keyof typeof AliCloudListAuthRoles2ListEnum];
/**
 * @export
 */
export const AppRoleListRolesListEnum = {
    True: 'true'
} as const;
export type AppRoleListRolesListEnum = typeof AppRoleListRolesListEnum[keyof typeof AppRoleListRolesListEnum];
/**
 * @export
 */
export const AppRoleListSecretIdsListEnum = {
    True: 'true'
} as const;
export type AppRoleListSecretIdsListEnum = typeof AppRoleListSecretIdsListEnum[keyof typeof AppRoleListSecretIdsListEnum];
/**
 * @export
 */
export const AwsListAuthRolesListEnum = {
    True: 'true'
} as const;
export type AwsListAuthRolesListEnum = typeof AwsListAuthRolesListEnum[keyof typeof AwsListAuthRolesListEnum];
/**
 * @export
 */
export const AwsListAuthRoles2ListEnum = {
    True: 'true'
} as const;
export type AwsListAuthRoles2ListEnum = typeof AwsListAuthRoles2ListEnum[keyof typeof AwsListAuthRoles2ListEnum];
/**
 * @export
 */
export const AwsListCertificateConfigurationsListEnum = {
    True: 'true'
} as const;
export type AwsListCertificateConfigurationsListEnum = typeof AwsListCertificateConfigurationsListEnum[keyof typeof AwsListCertificateConfigurationsListEnum];
/**
 * @export
 */
export const AwsListIdentityAccessListListEnum = {
    True: 'true'
} as const;
export type AwsListIdentityAccessListListEnum = typeof AwsListIdentityAccessListListEnum[keyof typeof AwsListIdentityAccessListListEnum];
/**
 * @export
 */
export const AwsListIdentityWhitelistListEnum = {
    True: 'true'
} as const;
export type AwsListIdentityWhitelistListEnum = typeof AwsListIdentityWhitelistListEnum[keyof typeof AwsListIdentityWhitelistListEnum];
/**
 * @export
 */
export const AwsListRoleTagBlacklistsListEnum = {
    True: 'true'
} as const;
export type AwsListRoleTagBlacklistsListEnum = typeof AwsListRoleTagBlacklistsListEnum[keyof typeof AwsListRoleTagBlacklistsListEnum];
/**
 * @export
 */
export const AwsListRoleTagDenyListsListEnum = {
    True: 'true'
} as const;
export type AwsListRoleTagDenyListsListEnum = typeof AwsListRoleTagDenyListsListEnum[keyof typeof AwsListRoleTagDenyListsListEnum];
/**
 * @export
 */
export const AwsListStsRoleRelationshipsListEnum = {
    True: 'true'
} as const;
export type AwsListStsRoleRelationshipsListEnum = typeof AwsListStsRoleRelationshipsListEnum[keyof typeof AwsListStsRoleRelationshipsListEnum];
/**
 * @export
 */
export const AzureListAuthRolesListEnum = {
    True: 'true'
} as const;
export type AzureListAuthRolesListEnum = typeof AzureListAuthRolesListEnum[keyof typeof AzureListAuthRolesListEnum];
/**
 * @export
 */
export const CertListCertificatesListEnum = {
    True: 'true'
} as const;
export type CertListCertificatesListEnum = typeof CertListCertificatesListEnum[keyof typeof CertListCertificatesListEnum];
/**
 * @export
 */
export const CertListCrlsListEnum = {
    True: 'true'
} as const;
export type CertListCrlsListEnum = typeof CertListCrlsListEnum[keyof typeof CertListCrlsListEnum];
/**
 * @export
 */
export const CloudFoundryListRolesListEnum = {
    True: 'true'
} as const;
export type CloudFoundryListRolesListEnum = typeof CloudFoundryListRolesListEnum[keyof typeof CloudFoundryListRolesListEnum];
/**
 * @export
 */
export const GithubListTeamsListEnum = {
    True: 'true'
} as const;
export type GithubListTeamsListEnum = typeof GithubListTeamsListEnum[keyof typeof GithubListTeamsListEnum];
/**
 * @export
 */
export const GithubListUsersListEnum = {
    True: 'true'
} as const;
export type GithubListUsersListEnum = typeof GithubListUsersListEnum[keyof typeof GithubListUsersListEnum];
/**
 * @export
 */
export const GoogleCloudListRolesListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListRolesListEnum = typeof GoogleCloudListRolesListEnum[keyof typeof GoogleCloudListRolesListEnum];
/**
 * @export
 */
export const GoogleCloudListRoles2ListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListRoles2ListEnum = typeof GoogleCloudListRoles2ListEnum[keyof typeof GoogleCloudListRoles2ListEnum];
/**
 * @export
 */
export const JwtListRolesListEnum = {
    True: 'true'
} as const;
export type JwtListRolesListEnum = typeof JwtListRolesListEnum[keyof typeof JwtListRolesListEnum];
/**
 * @export
 */
export const KerberosListGroupsListEnum = {
    True: 'true'
} as const;
export type KerberosListGroupsListEnum = typeof KerberosListGroupsListEnum[keyof typeof KerberosListGroupsListEnum];
/**
 * @export
 */
export const KubernetesListAuthRolesListEnum = {
    True: 'true'
} as const;
export type KubernetesListAuthRolesListEnum = typeof KubernetesListAuthRolesListEnum[keyof typeof KubernetesListAuthRolesListEnum];
/**
 * @export
 */
export const LdapListGroupsListEnum = {
    True: 'true'
} as const;
export type LdapListGroupsListEnum = typeof LdapListGroupsListEnum[keyof typeof LdapListGroupsListEnum];
/**
 * @export
 */
export const LdapListUsersListEnum = {
    True: 'true'
} as const;
export type LdapListUsersListEnum = typeof LdapListUsersListEnum[keyof typeof LdapListUsersListEnum];
/**
 * @export
 */
export const OciListRolesListEnum = {
    True: 'true'
} as const;
export type OciListRolesListEnum = typeof OciListRolesListEnum[keyof typeof OciListRolesListEnum];
/**
 * @export
 */
export const OktaListGroupsListEnum = {
    True: 'true'
} as const;
export type OktaListGroupsListEnum = typeof OktaListGroupsListEnum[keyof typeof OktaListGroupsListEnum];
/**
 * @export
 */
export const OktaListUsersListEnum = {
    True: 'true'
} as const;
export type OktaListUsersListEnum = typeof OktaListUsersListEnum[keyof typeof OktaListUsersListEnum];
/**
 * @export
 */
export const RadiusListUsersListEnum = {
    True: 'true'
} as const;
export type RadiusListUsersListEnum = typeof RadiusListUsersListEnum[keyof typeof RadiusListUsersListEnum];
/**
 * @export
 */
export const TokenListAccessorsListEnum = {
    True: 'true'
} as const;
export type TokenListAccessorsListEnum = typeof TokenListAccessorsListEnum[keyof typeof TokenListAccessorsListEnum];
/**
 * @export
 */
export const TokenListRolesListEnum = {
    True: 'true'
} as const;
export type TokenListRolesListEnum = typeof TokenListRolesListEnum[keyof typeof TokenListRolesListEnum];
/**
 * @export
 */
export const UserpassListUsersListEnum = {
    True: 'true'
} as const;
export type UserpassListUsersListEnum = typeof UserpassListUsersListEnum[keyof typeof UserpassListUsersListEnum];
