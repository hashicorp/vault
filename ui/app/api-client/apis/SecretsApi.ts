/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliCloudConfigureRequest,
  AliCloudWriteRoleRequest,
  AwsConfigureLeaseRequest,
  AwsConfigureRootIamCredentialsRequest,
  AwsGenerateCredentialsWithParametersRequest,
  AwsGenerateStsCredentialsWithParametersRequest,
  AwsReadStaticCredsNameResponse,
  AwsReadStaticRolesNameResponse,
  AwsWriteRoleRequest,
  AwsWriteStaticRolesNameRequest,
  AwsWriteStaticRolesNameResponse,
  AzureConfigureRequest,
  AzureWriteRoleRequest,
  ConsulConfigureAccessRequest,
  ConsulWriteRoleRequest,
  DatabaseConfigureConnectionRequest,
  DatabaseWriteRoleRequest,
  DatabaseWriteStaticRoleRequest,
  GoogleCloudConfigureRequest,
  GoogleCloudGenerateRolesetKey3Request,
  GoogleCloudGenerateRolesetKeyRequest,
  GoogleCloudGenerateStaticAccountKeyRequest,
  GoogleCloudKmsConfigureKeyRequest,
  GoogleCloudKmsConfigureRequest,
  GoogleCloudKmsDecryptRequest,
  GoogleCloudKmsEncryptRequest,
  GoogleCloudKmsReencryptRequest,
  GoogleCloudKmsRegisterKeyRequest,
  GoogleCloudKmsSignRequest,
  GoogleCloudKmsVerifyRequest,
  GoogleCloudKmsWriteKeyRequest,
  GoogleCloudWriteImpersonatedAccountRequest,
  GoogleCloudWriteRolesetRequest,
  GoogleCloudWriteStaticAccountRequest,
  KubernetesConfigureRequest,
  KubernetesGenerateCredentialsRequest,
  KubernetesWriteRoleRequest,
  KvV2ConfigureRequest,
  KvV2DeleteVersionsRequest,
  KvV2DestroyVersionsRequest,
  KvV2ReadConfigurationResponse,
  KvV2ReadMetadataResponse,
  KvV2ReadResponse,
  KvV2ReadSubkeysResponse,
  KvV2UndeleteVersionsRequest,
  KvV2WriteMetadataRequest,
  KvV2WriteRequest,
  KvV2WriteResponse,
  LdapConfigureRequest,
  LdapLibraryCheckInRequest,
  LdapLibraryCheckOutRequest,
  LdapLibraryConfigureRequest,
  LdapLibraryForceCheckInRequest,
  LdapRotateStaticRoleRequest,
  LdapWriteDynamicRoleRequest,
  LdapWriteStaticRoleRequest,
  MongoDbAtlasConfigureRequest,
  MongoDbAtlasWriteRoleRequest,
  NomadConfigureAccessRequest,
  NomadConfigureLeaseRequest,
  NomadWriteRoleRequest,
  PkiConfigureAcmeRequest,
  PkiConfigureAutoTidyRequest,
  PkiConfigureAutoTidyResponse,
  PkiConfigureCaRequest,
  PkiConfigureCaResponse,
  PkiConfigureClusterRequest,
  PkiConfigureClusterResponse,
  PkiConfigureCrlRequest,
  PkiConfigureCrlResponse,
  PkiConfigureIssuersRequest,
  PkiConfigureIssuersResponse,
  PkiConfigureKeysRequest,
  PkiConfigureKeysResponse,
  PkiConfigureUrlsRequest,
  PkiConfigureUrlsResponse,
  PkiCrossSignIntermediateRequest,
  PkiCrossSignIntermediateResponse,
  PkiGenerateEabKeyForIssuerAndRoleResponse,
  PkiGenerateEabKeyForIssuerResponse,
  PkiGenerateEabKeyForRoleResponse,
  PkiGenerateEabKeyResponse,
  PkiGenerateExportedKeyRequest,
  PkiGenerateExportedKeyResponse,
  PkiGenerateIntermediateRequest,
  PkiGenerateIntermediateResponse,
  PkiGenerateInternalKeyRequest,
  PkiGenerateInternalKeyResponse,
  PkiGenerateKmsKeyRequest,
  PkiGenerateKmsKeyResponse,
  PkiGenerateRootRequest,
  PkiGenerateRootResponse,
  PkiImportKeyRequest,
  PkiImportKeyResponse,
  PkiIssueWithRoleRequest,
  PkiIssueWithRoleResponse,
  PkiIssuerIssueWithRoleRequest,
  PkiIssuerIssueWithRoleResponse,
  PkiIssuerReadCrlDeltaDerResponse,
  PkiIssuerReadCrlDeltaPemResponse,
  PkiIssuerReadCrlDeltaResponse,
  PkiIssuerReadCrlDerResponse,
  PkiIssuerReadCrlPemResponse,
  PkiIssuerReadCrlResponse,
  PkiIssuerResignCrlsRequest,
  PkiIssuerResignCrlsResponse,
  PkiIssuerSignIntermediateRequest,
  PkiIssuerSignIntermediateResponse,
  PkiIssuerSignRevocationListRequest,
  PkiIssuerSignRevocationListResponse,
  PkiIssuerSignSelfIssuedRequest,
  PkiIssuerSignSelfIssuedResponse,
  PkiIssuerSignVerbatimRequest,
  PkiIssuerSignVerbatimResponse,
  PkiIssuerSignVerbatimWithRoleRequest,
  PkiIssuerSignVerbatimWithRoleResponse,
  PkiIssuerSignWithRoleRequest,
  PkiIssuerSignWithRoleResponse,
  PkiIssuersGenerateIntermediateRequest,
  PkiIssuersGenerateIntermediateResponse,
  PkiIssuersGenerateRootRequest,
  PkiIssuersGenerateRootResponse,
  PkiIssuersImportBundleRequest,
  PkiIssuersImportBundleResponse,
  PkiIssuersImportCertRequest,
  PkiIssuersImportCertResponse,
  PkiListEabKeysResponse,
  PkiListIssuersResponse,
  PkiListKeysResponse,
  PkiReadAutoTidyConfigurationResponse,
  PkiReadCaChainPemResponse,
  PkiReadCaDerResponse,
  PkiReadCaPemResponse,
  PkiReadCertCaChainResponse,
  PkiReadCertCrlResponse,
  PkiReadCertDeltaCrlResponse,
  PkiReadCertRawDerResponse,
  PkiReadCertRawPemResponse,
  PkiReadCertResponse,
  PkiReadClusterConfigurationResponse,
  PkiReadCrlConfigurationResponse,
  PkiReadCrlDeltaPemResponse,
  PkiReadCrlDeltaResponse,
  PkiReadCrlDerResponse,
  PkiReadCrlPemResponse,
  PkiReadIssuerDerResponse,
  PkiReadIssuerJsonResponse,
  PkiReadIssuerPemResponse,
  PkiReadIssuerResponse,
  PkiReadIssuersConfigurationResponse,
  PkiReadKeyResponse,
  PkiReadKeysConfigurationResponse,
  PkiReadRoleResponse,
  PkiReadUrlsConfigurationResponse,
  PkiReplaceRootRequest,
  PkiReplaceRootResponse,
  PkiRevokeIssuerResponse,
  PkiRevokeRequest,
  PkiRevokeResponse,
  PkiRevokeWithKeyRequest,
  PkiRevokeWithKeyResponse,
  PkiRootSignIntermediateRequest,
  PkiRootSignIntermediateResponse,
  PkiRootSignSelfIssuedRequest,
  PkiRootSignSelfIssuedResponse,
  PkiRotateCrlResponse,
  PkiRotateDeltaCrlResponse,
  PkiRotateRootRequest,
  PkiRotateRootResponse,
  PkiSetSignedIntermediateRequest,
  PkiSetSignedIntermediateResponse,
  PkiSignVerbatimRequest,
  PkiSignVerbatimResponse,
  PkiSignVerbatimWithRoleRequest,
  PkiSignVerbatimWithRoleResponse,
  PkiSignWithRoleRequest,
  PkiSignWithRoleResponse,
  PkiTidyCancelResponse,
  PkiTidyRequest,
  PkiTidyStatusResponse,
  PkiWriteAcmeAccountKidRequest,
  PkiWriteAcmeAuthorizationAuthIdRequest,
  PkiWriteAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteAcmeKeyIdRequest,
  PkiWriteAcmeNewAccountRequest,
  PkiWriteAcmeNewOrderRequest,
  PkiWriteAcmeOrderOrderIdCertRequest,
  PkiWriteAcmeOrderOrderIdFinalizeRequest,
  PkiWriteAcmeOrderOrderIdRequest,
  PkiWriteAcmeOrdersRequest,
  PkiWriteAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest,
  PkiWriteIssuerRequest,
  PkiWriteIssuerResponse,
  PkiWriteKeyRequest,
  PkiWriteKeyResponse,
  PkiWriteRoleRequest,
  PkiWriteRoleResponse,
  PkiWriteRolesRoleAcmeAccountKidRequest,
  PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteRolesRoleAcmeNewAccountRequest,
  PkiWriteRolesRoleAcmeNewOrderRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteRolesRoleAcmeOrdersRequest,
  PkiWriteRolesRoleAcmeRevokeCertRequest,
  RabbitMqConfigureConnectionRequest,
  RabbitMqConfigureLeaseRequest,
  RabbitMqWriteRoleRequest,
  SshConfigureCaRequest,
  SshConfigureZeroAddressRequest,
  SshGenerateCredentialsRequest,
  SshIssueCertificateRequest,
  SshListRolesByIpRequest,
  SshSignCertificateRequest,
  SshVerifyOtpRequest,
  SshWriteRoleRequest,
  StandardListResponse,
  TerraformCloudConfigureRequest,
  TerraformCloudWriteRoleRequest,
  TotpCreateKeyRequest,
  TotpValidateCodeRequest,
  TransitConfigureCacheRequest,
  TransitConfigureKeyRequest,
  TransitConfigureKeysRequest,
  TransitCreateKeyRequest,
  TransitDecryptRequest,
  TransitEncryptRequest,
  TransitGenerateCsrForKeyRequest,
  TransitGenerateDataKeyRequest,
  TransitGenerateHmacRequest,
  TransitGenerateHmacWithAlgorithmRequest,
  TransitGenerateRandomRequest,
  TransitGenerateRandomWithBytesRequest,
  TransitGenerateRandomWithSourceAndBytesRequest,
  TransitGenerateRandomWithSourceRequest,
  TransitHashRequest,
  TransitHashWithAlgorithmRequest,
  TransitImportKeyRequest,
  TransitImportKeyVersionRequest,
  TransitRestoreAndRenameKeyRequest,
  TransitRestoreKeyRequest,
  TransitRewrapRequest,
  TransitRotateKeyRequest,
  TransitSetCertificateForKeyRequest,
  TransitSignRequest,
  TransitSignWithAlgorithmRequest,
  TransitTrimKeyRequest,
  TransitVerifyRequest,
  TransitVerifyWithAlgorithmRequest,
} from '../models/index';
import {
    AliCloudConfigureRequestFromJSON,
    AliCloudConfigureRequestToJSON,
    AliCloudWriteRoleRequestFromJSON,
    AliCloudWriteRoleRequestToJSON,
    AwsConfigureLeaseRequestFromJSON,
    AwsConfigureLeaseRequestToJSON,
    AwsConfigureRootIamCredentialsRequestFromJSON,
    AwsConfigureRootIamCredentialsRequestToJSON,
    AwsGenerateCredentialsWithParametersRequestFromJSON,
    AwsGenerateCredentialsWithParametersRequestToJSON,
    AwsGenerateStsCredentialsWithParametersRequestFromJSON,
    AwsGenerateStsCredentialsWithParametersRequestToJSON,
    AwsReadStaticCredsNameResponseFromJSON,
    AwsReadStaticCredsNameResponseToJSON,
    AwsReadStaticRolesNameResponseFromJSON,
    AwsReadStaticRolesNameResponseToJSON,
    AwsWriteRoleRequestFromJSON,
    AwsWriteRoleRequestToJSON,
    AwsWriteStaticRolesNameRequestFromJSON,
    AwsWriteStaticRolesNameRequestToJSON,
    AwsWriteStaticRolesNameResponseFromJSON,
    AwsWriteStaticRolesNameResponseToJSON,
    AzureConfigureRequestFromJSON,
    AzureConfigureRequestToJSON,
    AzureWriteRoleRequestFromJSON,
    AzureWriteRoleRequestToJSON,
    ConsulConfigureAccessRequestFromJSON,
    ConsulConfigureAccessRequestToJSON,
    ConsulWriteRoleRequestFromJSON,
    ConsulWriteRoleRequestToJSON,
    DatabaseConfigureConnectionRequestFromJSON,
    DatabaseConfigureConnectionRequestToJSON,
    DatabaseWriteRoleRequestFromJSON,
    DatabaseWriteRoleRequestToJSON,
    DatabaseWriteStaticRoleRequestFromJSON,
    DatabaseWriteStaticRoleRequestToJSON,
    GoogleCloudConfigureRequestFromJSON,
    GoogleCloudConfigureRequestToJSON,
    GoogleCloudGenerateRolesetKey3RequestFromJSON,
    GoogleCloudGenerateRolesetKey3RequestToJSON,
    GoogleCloudGenerateRolesetKeyRequestFromJSON,
    GoogleCloudGenerateRolesetKeyRequestToJSON,
    GoogleCloudGenerateStaticAccountKeyRequestFromJSON,
    GoogleCloudGenerateStaticAccountKeyRequestToJSON,
    GoogleCloudKmsConfigureKeyRequestFromJSON,
    GoogleCloudKmsConfigureKeyRequestToJSON,
    GoogleCloudKmsConfigureRequestFromJSON,
    GoogleCloudKmsConfigureRequestToJSON,
    GoogleCloudKmsDecryptRequestFromJSON,
    GoogleCloudKmsDecryptRequestToJSON,
    GoogleCloudKmsEncryptRequestFromJSON,
    GoogleCloudKmsEncryptRequestToJSON,
    GoogleCloudKmsReencryptRequestFromJSON,
    GoogleCloudKmsReencryptRequestToJSON,
    GoogleCloudKmsRegisterKeyRequestFromJSON,
    GoogleCloudKmsRegisterKeyRequestToJSON,
    GoogleCloudKmsSignRequestFromJSON,
    GoogleCloudKmsSignRequestToJSON,
    GoogleCloudKmsVerifyRequestFromJSON,
    GoogleCloudKmsVerifyRequestToJSON,
    GoogleCloudKmsWriteKeyRequestFromJSON,
    GoogleCloudKmsWriteKeyRequestToJSON,
    GoogleCloudWriteImpersonatedAccountRequestFromJSON,
    GoogleCloudWriteImpersonatedAccountRequestToJSON,
    GoogleCloudWriteRolesetRequestFromJSON,
    GoogleCloudWriteRolesetRequestToJSON,
    GoogleCloudWriteStaticAccountRequestFromJSON,
    GoogleCloudWriteStaticAccountRequestToJSON,
    KubernetesConfigureRequestFromJSON,
    KubernetesConfigureRequestToJSON,
    KubernetesGenerateCredentialsRequestFromJSON,
    KubernetesGenerateCredentialsRequestToJSON,
    KubernetesWriteRoleRequestFromJSON,
    KubernetesWriteRoleRequestToJSON,
    KvV2ConfigureRequestFromJSON,
    KvV2ConfigureRequestToJSON,
    KvV2DeleteVersionsRequestFromJSON,
    KvV2DeleteVersionsRequestToJSON,
    KvV2DestroyVersionsRequestFromJSON,
    KvV2DestroyVersionsRequestToJSON,
    KvV2ReadConfigurationResponseFromJSON,
    KvV2ReadConfigurationResponseToJSON,
    KvV2ReadMetadataResponseFromJSON,
    KvV2ReadMetadataResponseToJSON,
    KvV2ReadResponseFromJSON,
    KvV2ReadResponseToJSON,
    KvV2ReadSubkeysResponseFromJSON,
    KvV2ReadSubkeysResponseToJSON,
    KvV2UndeleteVersionsRequestFromJSON,
    KvV2UndeleteVersionsRequestToJSON,
    KvV2WriteMetadataRequestFromJSON,
    KvV2WriteMetadataRequestToJSON,
    KvV2WriteRequestFromJSON,
    KvV2WriteRequestToJSON,
    KvV2WriteResponseFromJSON,
    KvV2WriteResponseToJSON,
    LdapConfigureRequestFromJSON,
    LdapConfigureRequestToJSON,
    LdapLibraryCheckInRequestFromJSON,
    LdapLibraryCheckInRequestToJSON,
    LdapLibraryCheckOutRequestFromJSON,
    LdapLibraryCheckOutRequestToJSON,
    LdapLibraryConfigureRequestFromJSON,
    LdapLibraryConfigureRequestToJSON,
    LdapLibraryForceCheckInRequestFromJSON,
    LdapLibraryForceCheckInRequestToJSON,
    LdapRotateStaticRoleRequestFromJSON,
    LdapRotateStaticRoleRequestToJSON,
    LdapWriteDynamicRoleRequestFromJSON,
    LdapWriteDynamicRoleRequestToJSON,
    LdapWriteStaticRoleRequestFromJSON,
    LdapWriteStaticRoleRequestToJSON,
    MongoDbAtlasConfigureRequestFromJSON,
    MongoDbAtlasConfigureRequestToJSON,
    MongoDbAtlasWriteRoleRequestFromJSON,
    MongoDbAtlasWriteRoleRequestToJSON,
    NomadConfigureAccessRequestFromJSON,
    NomadConfigureAccessRequestToJSON,
    NomadConfigureLeaseRequestFromJSON,
    NomadConfigureLeaseRequestToJSON,
    NomadWriteRoleRequestFromJSON,
    NomadWriteRoleRequestToJSON,
    PkiConfigureAcmeRequestFromJSON,
    PkiConfigureAcmeRequestToJSON,
    PkiConfigureAutoTidyRequestFromJSON,
    PkiConfigureAutoTidyRequestToJSON,
    PkiConfigureAutoTidyResponseFromJSON,
    PkiConfigureAutoTidyResponseToJSON,
    PkiConfigureCaRequestFromJSON,
    PkiConfigureCaRequestToJSON,
    PkiConfigureCaResponseFromJSON,
    PkiConfigureCaResponseToJSON,
    PkiConfigureClusterRequestFromJSON,
    PkiConfigureClusterRequestToJSON,
    PkiConfigureClusterResponseFromJSON,
    PkiConfigureClusterResponseToJSON,
    PkiConfigureCrlRequestFromJSON,
    PkiConfigureCrlRequestToJSON,
    PkiConfigureCrlResponseFromJSON,
    PkiConfigureCrlResponseToJSON,
    PkiConfigureIssuersRequestFromJSON,
    PkiConfigureIssuersRequestToJSON,
    PkiConfigureIssuersResponseFromJSON,
    PkiConfigureIssuersResponseToJSON,
    PkiConfigureKeysRequestFromJSON,
    PkiConfigureKeysRequestToJSON,
    PkiConfigureKeysResponseFromJSON,
    PkiConfigureKeysResponseToJSON,
    PkiConfigureUrlsRequestFromJSON,
    PkiConfigureUrlsRequestToJSON,
    PkiConfigureUrlsResponseFromJSON,
    PkiConfigureUrlsResponseToJSON,
    PkiCrossSignIntermediateRequestFromJSON,
    PkiCrossSignIntermediateRequestToJSON,
    PkiCrossSignIntermediateResponseFromJSON,
    PkiCrossSignIntermediateResponseToJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseToJSON,
    PkiGenerateEabKeyForIssuerResponseFromJSON,
    PkiGenerateEabKeyForIssuerResponseToJSON,
    PkiGenerateEabKeyForRoleResponseFromJSON,
    PkiGenerateEabKeyForRoleResponseToJSON,
    PkiGenerateEabKeyResponseFromJSON,
    PkiGenerateEabKeyResponseToJSON,
    PkiGenerateExportedKeyRequestFromJSON,
    PkiGenerateExportedKeyRequestToJSON,
    PkiGenerateExportedKeyResponseFromJSON,
    PkiGenerateExportedKeyResponseToJSON,
    PkiGenerateIntermediateRequestFromJSON,
    PkiGenerateIntermediateRequestToJSON,
    PkiGenerateIntermediateResponseFromJSON,
    PkiGenerateIntermediateResponseToJSON,
    PkiGenerateInternalKeyRequestFromJSON,
    PkiGenerateInternalKeyRequestToJSON,
    PkiGenerateInternalKeyResponseFromJSON,
    PkiGenerateInternalKeyResponseToJSON,
    PkiGenerateKmsKeyRequestFromJSON,
    PkiGenerateKmsKeyRequestToJSON,
    PkiGenerateKmsKeyResponseFromJSON,
    PkiGenerateKmsKeyResponseToJSON,
    PkiGenerateRootRequestFromJSON,
    PkiGenerateRootRequestToJSON,
    PkiGenerateRootResponseFromJSON,
    PkiGenerateRootResponseToJSON,
    PkiImportKeyRequestFromJSON,
    PkiImportKeyRequestToJSON,
    PkiImportKeyResponseFromJSON,
    PkiImportKeyResponseToJSON,
    PkiIssueWithRoleRequestFromJSON,
    PkiIssueWithRoleRequestToJSON,
    PkiIssueWithRoleResponseFromJSON,
    PkiIssueWithRoleResponseToJSON,
    PkiIssuerIssueWithRoleRequestFromJSON,
    PkiIssuerIssueWithRoleRequestToJSON,
    PkiIssuerIssueWithRoleResponseFromJSON,
    PkiIssuerIssueWithRoleResponseToJSON,
    PkiIssuerReadCrlDeltaDerResponseFromJSON,
    PkiIssuerReadCrlDeltaDerResponseToJSON,
    PkiIssuerReadCrlDeltaPemResponseFromJSON,
    PkiIssuerReadCrlDeltaPemResponseToJSON,
    PkiIssuerReadCrlDeltaResponseFromJSON,
    PkiIssuerReadCrlDeltaResponseToJSON,
    PkiIssuerReadCrlDerResponseFromJSON,
    PkiIssuerReadCrlDerResponseToJSON,
    PkiIssuerReadCrlPemResponseFromJSON,
    PkiIssuerReadCrlPemResponseToJSON,
    PkiIssuerReadCrlResponseFromJSON,
    PkiIssuerReadCrlResponseToJSON,
    PkiIssuerResignCrlsRequestFromJSON,
    PkiIssuerResignCrlsRequestToJSON,
    PkiIssuerResignCrlsResponseFromJSON,
    PkiIssuerResignCrlsResponseToJSON,
    PkiIssuerSignIntermediateRequestFromJSON,
    PkiIssuerSignIntermediateRequestToJSON,
    PkiIssuerSignIntermediateResponseFromJSON,
    PkiIssuerSignIntermediateResponseToJSON,
    PkiIssuerSignRevocationListRequestFromJSON,
    PkiIssuerSignRevocationListRequestToJSON,
    PkiIssuerSignRevocationListResponseFromJSON,
    PkiIssuerSignRevocationListResponseToJSON,
    PkiIssuerSignSelfIssuedRequestFromJSON,
    PkiIssuerSignSelfIssuedRequestToJSON,
    PkiIssuerSignSelfIssuedResponseFromJSON,
    PkiIssuerSignSelfIssuedResponseToJSON,
    PkiIssuerSignVerbatimRequestFromJSON,
    PkiIssuerSignVerbatimRequestToJSON,
    PkiIssuerSignVerbatimResponseFromJSON,
    PkiIssuerSignVerbatimResponseToJSON,
    PkiIssuerSignVerbatimWithRoleRequestFromJSON,
    PkiIssuerSignVerbatimWithRoleRequestToJSON,
    PkiIssuerSignVerbatimWithRoleResponseFromJSON,
    PkiIssuerSignVerbatimWithRoleResponseToJSON,
    PkiIssuerSignWithRoleRequestFromJSON,
    PkiIssuerSignWithRoleRequestToJSON,
    PkiIssuerSignWithRoleResponseFromJSON,
    PkiIssuerSignWithRoleResponseToJSON,
    PkiIssuersGenerateIntermediateRequestFromJSON,
    PkiIssuersGenerateIntermediateRequestToJSON,
    PkiIssuersGenerateIntermediateResponseFromJSON,
    PkiIssuersGenerateIntermediateResponseToJSON,
    PkiIssuersGenerateRootRequestFromJSON,
    PkiIssuersGenerateRootRequestToJSON,
    PkiIssuersGenerateRootResponseFromJSON,
    PkiIssuersGenerateRootResponseToJSON,
    PkiIssuersImportBundleRequestFromJSON,
    PkiIssuersImportBundleRequestToJSON,
    PkiIssuersImportBundleResponseFromJSON,
    PkiIssuersImportBundleResponseToJSON,
    PkiIssuersImportCertRequestFromJSON,
    PkiIssuersImportCertRequestToJSON,
    PkiIssuersImportCertResponseFromJSON,
    PkiIssuersImportCertResponseToJSON,
    PkiListEabKeysResponseFromJSON,
    PkiListEabKeysResponseToJSON,
    PkiListIssuersResponseFromJSON,
    PkiListIssuersResponseToJSON,
    PkiListKeysResponseFromJSON,
    PkiListKeysResponseToJSON,
    PkiReadAutoTidyConfigurationResponseFromJSON,
    PkiReadAutoTidyConfigurationResponseToJSON,
    PkiReadCaChainPemResponseFromJSON,
    PkiReadCaChainPemResponseToJSON,
    PkiReadCaDerResponseFromJSON,
    PkiReadCaDerResponseToJSON,
    PkiReadCaPemResponseFromJSON,
    PkiReadCaPemResponseToJSON,
    PkiReadCertCaChainResponseFromJSON,
    PkiReadCertCaChainResponseToJSON,
    PkiReadCertCrlResponseFromJSON,
    PkiReadCertCrlResponseToJSON,
    PkiReadCertDeltaCrlResponseFromJSON,
    PkiReadCertDeltaCrlResponseToJSON,
    PkiReadCertRawDerResponseFromJSON,
    PkiReadCertRawDerResponseToJSON,
    PkiReadCertRawPemResponseFromJSON,
    PkiReadCertRawPemResponseToJSON,
    PkiReadCertResponseFromJSON,
    PkiReadCertResponseToJSON,
    PkiReadClusterConfigurationResponseFromJSON,
    PkiReadClusterConfigurationResponseToJSON,
    PkiReadCrlConfigurationResponseFromJSON,
    PkiReadCrlConfigurationResponseToJSON,
    PkiReadCrlDeltaPemResponseFromJSON,
    PkiReadCrlDeltaPemResponseToJSON,
    PkiReadCrlDeltaResponseFromJSON,
    PkiReadCrlDeltaResponseToJSON,
    PkiReadCrlDerResponseFromJSON,
    PkiReadCrlDerResponseToJSON,
    PkiReadCrlPemResponseFromJSON,
    PkiReadCrlPemResponseToJSON,
    PkiReadIssuerDerResponseFromJSON,
    PkiReadIssuerDerResponseToJSON,
    PkiReadIssuerJsonResponseFromJSON,
    PkiReadIssuerJsonResponseToJSON,
    PkiReadIssuerPemResponseFromJSON,
    PkiReadIssuerPemResponseToJSON,
    PkiReadIssuerResponseFromJSON,
    PkiReadIssuerResponseToJSON,
    PkiReadIssuersConfigurationResponseFromJSON,
    PkiReadIssuersConfigurationResponseToJSON,
    PkiReadKeyResponseFromJSON,
    PkiReadKeyResponseToJSON,
    PkiReadKeysConfigurationResponseFromJSON,
    PkiReadKeysConfigurationResponseToJSON,
    PkiReadRoleResponseFromJSON,
    PkiReadRoleResponseToJSON,
    PkiReadUrlsConfigurationResponseFromJSON,
    PkiReadUrlsConfigurationResponseToJSON,
    PkiReplaceRootRequestFromJSON,
    PkiReplaceRootRequestToJSON,
    PkiReplaceRootResponseFromJSON,
    PkiReplaceRootResponseToJSON,
    PkiRevokeIssuerResponseFromJSON,
    PkiRevokeIssuerResponseToJSON,
    PkiRevokeRequestFromJSON,
    PkiRevokeRequestToJSON,
    PkiRevokeResponseFromJSON,
    PkiRevokeResponseToJSON,
    PkiRevokeWithKeyRequestFromJSON,
    PkiRevokeWithKeyRequestToJSON,
    PkiRevokeWithKeyResponseFromJSON,
    PkiRevokeWithKeyResponseToJSON,
    PkiRootSignIntermediateRequestFromJSON,
    PkiRootSignIntermediateRequestToJSON,
    PkiRootSignIntermediateResponseFromJSON,
    PkiRootSignIntermediateResponseToJSON,
    PkiRootSignSelfIssuedRequestFromJSON,
    PkiRootSignSelfIssuedRequestToJSON,
    PkiRootSignSelfIssuedResponseFromJSON,
    PkiRootSignSelfIssuedResponseToJSON,
    PkiRotateCrlResponseFromJSON,
    PkiRotateCrlResponseToJSON,
    PkiRotateDeltaCrlResponseFromJSON,
    PkiRotateDeltaCrlResponseToJSON,
    PkiRotateRootRequestFromJSON,
    PkiRotateRootRequestToJSON,
    PkiRotateRootResponseFromJSON,
    PkiRotateRootResponseToJSON,
    PkiSetSignedIntermediateRequestFromJSON,
    PkiSetSignedIntermediateRequestToJSON,
    PkiSetSignedIntermediateResponseFromJSON,
    PkiSetSignedIntermediateResponseToJSON,
    PkiSignVerbatimRequestFromJSON,
    PkiSignVerbatimRequestToJSON,
    PkiSignVerbatimResponseFromJSON,
    PkiSignVerbatimResponseToJSON,
    PkiSignVerbatimWithRoleRequestFromJSON,
    PkiSignVerbatimWithRoleRequestToJSON,
    PkiSignVerbatimWithRoleResponseFromJSON,
    PkiSignVerbatimWithRoleResponseToJSON,
    PkiSignWithRoleRequestFromJSON,
    PkiSignWithRoleRequestToJSON,
    PkiSignWithRoleResponseFromJSON,
    PkiSignWithRoleResponseToJSON,
    PkiTidyCancelResponseFromJSON,
    PkiTidyCancelResponseToJSON,
    PkiTidyRequestFromJSON,
    PkiTidyRequestToJSON,
    PkiTidyStatusResponseFromJSON,
    PkiTidyStatusResponseToJSON,
    PkiWriteAcmeAccountKidRequestFromJSON,
    PkiWriteAcmeAccountKidRequestToJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteAcmeKeyIdRequestFromJSON,
    PkiWriteAcmeKeyIdRequestToJSON,
    PkiWriteAcmeNewAccountRequestFromJSON,
    PkiWriteAcmeNewAccountRequestToJSON,
    PkiWriteAcmeNewOrderRequestFromJSON,
    PkiWriteAcmeNewOrderRequestToJSON,
    PkiWriteAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteAcmeOrderOrderIdRequestFromJSON,
    PkiWriteAcmeOrderOrderIdRequestToJSON,
    PkiWriteAcmeOrdersRequestFromJSON,
    PkiWriteAcmeOrdersRequestToJSON,
    PkiWriteAcmeRevokeCertRequestFromJSON,
    PkiWriteAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerRequestFromJSON,
    PkiWriteIssuerRequestToJSON,
    PkiWriteIssuerResponseFromJSON,
    PkiWriteIssuerResponseToJSON,
    PkiWriteKeyRequestFromJSON,
    PkiWriteKeyRequestToJSON,
    PkiWriteKeyResponseFromJSON,
    PkiWriteKeyResponseToJSON,
    PkiWriteRoleRequestFromJSON,
    PkiWriteRoleRequestToJSON,
    PkiWriteRoleResponseFromJSON,
    PkiWriteRoleResponseToJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestToJSON,
    RabbitMqConfigureConnectionRequestFromJSON,
    RabbitMqConfigureConnectionRequestToJSON,
    RabbitMqConfigureLeaseRequestFromJSON,
    RabbitMqConfigureLeaseRequestToJSON,
    RabbitMqWriteRoleRequestFromJSON,
    RabbitMqWriteRoleRequestToJSON,
    SshConfigureCaRequestFromJSON,
    SshConfigureCaRequestToJSON,
    SshConfigureZeroAddressRequestFromJSON,
    SshConfigureZeroAddressRequestToJSON,
    SshGenerateCredentialsRequestFromJSON,
    SshGenerateCredentialsRequestToJSON,
    SshIssueCertificateRequestFromJSON,
    SshIssueCertificateRequestToJSON,
    SshListRolesByIpRequestFromJSON,
    SshListRolesByIpRequestToJSON,
    SshSignCertificateRequestFromJSON,
    SshSignCertificateRequestToJSON,
    SshVerifyOtpRequestFromJSON,
    SshVerifyOtpRequestToJSON,
    SshWriteRoleRequestFromJSON,
    SshWriteRoleRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    TerraformCloudConfigureRequestFromJSON,
    TerraformCloudConfigureRequestToJSON,
    TerraformCloudWriteRoleRequestFromJSON,
    TerraformCloudWriteRoleRequestToJSON,
    TotpCreateKeyRequestFromJSON,
    TotpCreateKeyRequestToJSON,
    TotpValidateCodeRequestFromJSON,
    TotpValidateCodeRequestToJSON,
    TransitConfigureCacheRequestFromJSON,
    TransitConfigureCacheRequestToJSON,
    TransitConfigureKeyRequestFromJSON,
    TransitConfigureKeyRequestToJSON,
    TransitConfigureKeysRequestFromJSON,
    TransitConfigureKeysRequestToJSON,
    TransitCreateKeyRequestFromJSON,
    TransitCreateKeyRequestToJSON,
    TransitDecryptRequestFromJSON,
    TransitDecryptRequestToJSON,
    TransitEncryptRequestFromJSON,
    TransitEncryptRequestToJSON,
    TransitGenerateCsrForKeyRequestFromJSON,
    TransitGenerateCsrForKeyRequestToJSON,
    TransitGenerateDataKeyRequestFromJSON,
    TransitGenerateDataKeyRequestToJSON,
    TransitGenerateHmacRequestFromJSON,
    TransitGenerateHmacRequestToJSON,
    TransitGenerateHmacWithAlgorithmRequestFromJSON,
    TransitGenerateHmacWithAlgorithmRequestToJSON,
    TransitGenerateRandomRequestFromJSON,
    TransitGenerateRandomRequestToJSON,
    TransitGenerateRandomWithBytesRequestFromJSON,
    TransitGenerateRandomWithBytesRequestToJSON,
    TransitGenerateRandomWithSourceAndBytesRequestFromJSON,
    TransitGenerateRandomWithSourceAndBytesRequestToJSON,
    TransitGenerateRandomWithSourceRequestFromJSON,
    TransitGenerateRandomWithSourceRequestToJSON,
    TransitHashRequestFromJSON,
    TransitHashRequestToJSON,
    TransitHashWithAlgorithmRequestFromJSON,
    TransitHashWithAlgorithmRequestToJSON,
    TransitImportKeyRequestFromJSON,
    TransitImportKeyRequestToJSON,
    TransitImportKeyVersionRequestFromJSON,
    TransitImportKeyVersionRequestToJSON,
    TransitRestoreAndRenameKeyRequestFromJSON,
    TransitRestoreAndRenameKeyRequestToJSON,
    TransitRestoreKeyRequestFromJSON,
    TransitRestoreKeyRequestToJSON,
    TransitRewrapRequestFromJSON,
    TransitRewrapRequestToJSON,
    TransitRotateKeyRequestFromJSON,
    TransitRotateKeyRequestToJSON,
    TransitSetCertificateForKeyRequestFromJSON,
    TransitSetCertificateForKeyRequestToJSON,
    TransitSignRequestFromJSON,
    TransitSignRequestToJSON,
    TransitSignWithAlgorithmRequestFromJSON,
    TransitSignWithAlgorithmRequestToJSON,
    TransitTrimKeyRequestFromJSON,
    TransitTrimKeyRequestToJSON,
    TransitVerifyRequestFromJSON,
    TransitVerifyRequestToJSON,
    TransitVerifyWithAlgorithmRequestFromJSON,
    TransitVerifyWithAlgorithmRequestToJSON,
} from '../models/index';

export interface AliCloudConfigureOperationRequest {
    alicloudMountPath: string;
    aliCloudConfigureRequest: AliCloudConfigureRequest;
}

export interface AliCloudDeleteConfigurationRequest {
    alicloudMountPath: string;
}

export interface AliCloudDeleteRoleRequest {
    name: string;
    alicloudMountPath: string;
}

export interface AliCloudGenerateCredentialsRequest {
    name: string;
    alicloudMountPath: string;
}

export interface AliCloudListRolesRequest {
    alicloudMountPath: string;
    list: AliCloudListRolesListEnum;
}

export interface AliCloudReadConfigurationRequest {
    alicloudMountPath: string;
}

export interface AliCloudReadRoleRequest {
    name: string;
    alicloudMountPath: string;
}

export interface AliCloudWriteRoleOperationRequest {
    name: string;
    alicloudMountPath: string;
    aliCloudWriteRoleRequest: AliCloudWriteRoleRequest;
}

export interface AwsConfigureLeaseOperationRequest {
    awsMountPath: string;
    awsConfigureLeaseRequest: AwsConfigureLeaseRequest;
}

export interface AwsConfigureRootIamCredentialsOperationRequest {
    awsMountPath: string;
    awsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest;
}

export interface AwsDeleteRoleRequest {
    name: string;
    awsMountPath: string;
}

export interface AwsDeleteStaticRolesNameRequest {
    name: string;
    awsMountPath: string;
}

export interface AwsGenerateCredentialsRequest {
    name: string;
    awsMountPath: string;
    roleArn?: string;
    roleSessionName?: string;
    ttl?: string;
}

export interface AwsGenerateCredentialsWithParametersOperationRequest {
    name: string;
    awsMountPath: string;
    awsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest;
}

export interface AwsGenerateStsCredentialsRequest {
    name: string;
    awsMountPath: string;
    roleArn?: string;
    roleSessionName?: string;
    ttl?: string;
}

export interface AwsGenerateStsCredentialsWithParametersOperationRequest {
    name: string;
    awsMountPath: string;
    awsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest;
}

export interface AwsListRolesRequest {
    awsMountPath: string;
    list: AwsListRolesListEnum;
}

export interface AwsReadLeaseConfigurationRequest {
    awsMountPath: string;
}

export interface AwsReadRoleRequest {
    name: string;
    awsMountPath: string;
}

export interface AwsReadRootIamCredentialsConfigurationRequest {
    awsMountPath: string;
}

export interface AwsReadStaticCredsNameRequest {
    name: string;
    awsMountPath: string;
}

export interface AwsReadStaticRolesNameRequest {
    name: string;
    awsMountPath: string;
}

export interface AwsRotateRootIamCredentialsRequest {
    awsMountPath: string;
}

export interface AwsWriteRoleOperationRequest {
    name: string;
    awsMountPath: string;
    awsWriteRoleRequest: AwsWriteRoleRequest;
}

export interface AwsWriteStaticRolesNameOperationRequest {
    name: string;
    awsMountPath: string;
    awsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest;
}

export interface AzureConfigureOperationRequest {
    azureMountPath: string;
    azureConfigureRequest: AzureConfigureRequest;
}

export interface AzureDeleteConfigurationRequest {
    azureMountPath: string;
}

export interface AzureDeleteRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AzureListRolesRequest {
    azureMountPath: string;
    list: AzureListRolesListEnum;
}

export interface AzureReadConfigurationRequest {
    azureMountPath: string;
}

export interface AzureReadRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AzureRequestServicePrincipalCredentialsRequest {
    role: string;
    azureMountPath: string;
}

export interface AzureRotateRootRequest {
    azureMountPath: string;
}

export interface AzureWriteRoleOperationRequest {
    name: string;
    azureMountPath: string;
    azureWriteRoleRequest: AzureWriteRoleRequest;
}

export interface ConsulConfigureAccessOperationRequest {
    consulMountPath: string;
    consulConfigureAccessRequest: ConsulConfigureAccessRequest;
}

export interface ConsulDeleteRoleRequest {
    name: string;
    consulMountPath: string;
}

export interface ConsulGenerateCredentialsRequest {
    role: string;
    consulMountPath: string;
}

export interface ConsulListRolesRequest {
    consulMountPath: string;
    list: ConsulListRolesListEnum;
}

export interface ConsulReadAccessConfigurationRequest {
    consulMountPath: string;
}

export interface ConsulReadRoleRequest {
    name: string;
    consulMountPath: string;
}

export interface ConsulWriteRoleOperationRequest {
    name: string;
    consulMountPath: string;
    consulWriteRoleRequest: ConsulWriteRoleRequest;
}

export interface CubbyholeDeleteRequest {
    path: string;
}

export interface CubbyholeListRequest {
    path: string;
    list: CubbyholeListListEnum;
}

export interface CubbyholeReadRequest {
    path: string;
}

export interface CubbyholeWriteRequest {
    path: string;
    requestBody: { [key: string]: any; };
}

export interface DatabaseConfigureConnectionOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest;
}

export interface DatabaseDeleteConnectionConfigurationRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseDeleteRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseDeleteStaticRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseGenerateCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseListConnectionsRequest {
    databaseMountPath: string;
    list: DatabaseListConnectionsListEnum;
}

export interface DatabaseListRolesRequest {
    databaseMountPath: string;
    list: DatabaseListRolesListEnum;
}

export interface DatabaseListStaticRolesRequest {
    databaseMountPath: string;
    list: DatabaseListStaticRolesListEnum;
}

export interface DatabaseReadConnectionConfigurationRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseReadRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseReadStaticRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseReadStaticRoleCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseReloadPluginRequest {
    pluginName: string;
    databaseMountPath: string;
}

export interface DatabaseResetConnectionRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseRotateRootCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseRotateStaticRoleCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface DatabaseWriteRoleOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseWriteRoleRequest: DatabaseWriteRoleRequest;
}

export interface DatabaseWriteStaticRoleOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest;
}

export interface GoogleCloudConfigureOperationRequest {
    gcpMountPath: string;
    googleCloudConfigureRequest: GoogleCloudConfigureRequest;
}

export interface GoogleCloudDeleteImpersonatedAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudDeleteRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudDeleteStaticAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateImpersonatedAccountAccessTokenRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateImpersonatedAccountAccessToken2Request {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateRolesetAccessTokenRequest {
    roleset: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateRolesetAccessToken2Request {
    roleset: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateRolesetAccessToken3Request {
    roleset: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateRolesetAccessToken4Request {
    roleset: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateRolesetKeyOperationRequest {
    roleset: string;
    gcpMountPath: string;
    googleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest;
}

export interface GoogleCloudGenerateRolesetKey2Request {
    roleset: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface GoogleCloudGenerateRolesetKey3OperationRequest {
    roleset: string;
    gcpMountPath: string;
    googleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request;
}

export interface GoogleCloudGenerateRolesetKey4Request {
    roleset: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface GoogleCloudGenerateStaticAccountAccessTokenRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateStaticAccountAccessToken2Request {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudGenerateStaticAccountKeyOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest;
}

export interface GoogleCloudGenerateStaticAccountKey2Request {
    name: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface GoogleCloudKmsConfigureOperationRequest {
    gcpkmsMountPath: string;
    googleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest;
}

export interface GoogleCloudKmsConfigureKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest;
}

export interface GoogleCloudKmsDecryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest;
}

export interface GoogleCloudKmsDeleteConfigurationRequest {
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsDeleteKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsDeregisterKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsDeregisterKey2Request {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsEncryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest;
}

export interface GoogleCloudKmsListKeysRequest {
    gcpkmsMountPath: string;
    list: GoogleCloudKmsListKeysListEnum;
}

export interface GoogleCloudKmsReadConfigurationRequest {
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsReadKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsReadKeyConfigurationRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsReencryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest;
}

export interface GoogleCloudKmsRegisterKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest;
}

export interface GoogleCloudKmsRetrievePublicKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsRotateKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsSignOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsSignRequest: GoogleCloudKmsSignRequest;
}

export interface GoogleCloudKmsTrimKeyVersionsRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsTrimKeyVersions2Request {
    key: string;
    gcpkmsMountPath: string;
}

export interface GoogleCloudKmsVerifyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest;
}

export interface GoogleCloudKmsWriteKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest;
}

export interface GoogleCloudListImpersonatedAccountsRequest {
    gcpMountPath: string;
    list: GoogleCloudListImpersonatedAccountsListEnum;
}

export interface GoogleCloudListImpersonatedAccounts2Request {
    gcpMountPath: string;
    list: GoogleCloudListImpersonatedAccounts2ListEnum;
}

export interface GoogleCloudListRolesetsRequest {
    gcpMountPath: string;
    list: GoogleCloudListRolesetsListEnum;
}

export interface GoogleCloudListRolesets2Request {
    gcpMountPath: string;
    list: GoogleCloudListRolesets2ListEnum;
}

export interface GoogleCloudListStaticAccountsRequest {
    gcpMountPath: string;
    list: GoogleCloudListStaticAccountsListEnum;
}

export interface GoogleCloudListStaticAccounts2Request {
    gcpMountPath: string;
    list: GoogleCloudListStaticAccounts2ListEnum;
}

export interface GoogleCloudReadConfigurationRequest {
    gcpMountPath: string;
}

export interface GoogleCloudReadImpersonatedAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudReadRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudReadStaticAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudRotateRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudRotateRolesetKeyRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudRotateRootCredentialsRequest {
    gcpMountPath: string;
}

export interface GoogleCloudRotateStaticAccountKeyRequest {
    name: string;
    gcpMountPath: string;
}

export interface GoogleCloudWriteImpersonatedAccountOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest;
}

export interface GoogleCloudWriteRolesetOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest;
}

export interface GoogleCloudWriteStaticAccountOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest;
}

export interface KubernetesCheckConfigurationRequest {
    kubernetesMountPath: string;
}

export interface KubernetesConfigureOperationRequest {
    kubernetesMountPath: string;
    kubernetesConfigureRequest: KubernetesConfigureRequest;
}

export interface KubernetesDeleteConfigurationRequest {
    kubernetesMountPath: string;
}

export interface KubernetesDeleteRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface KubernetesGenerateCredentialsOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest;
}

export interface KubernetesListRolesRequest {
    kubernetesMountPath: string;
    list: KubernetesListRolesListEnum;
}

export interface KubernetesReadConfigurationRequest {
    kubernetesMountPath: string;
}

export interface KubernetesReadRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface KubernetesWriteRoleOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesWriteRoleRequest: KubernetesWriteRoleRequest;
}

export interface KvV1DeleteRequest {
    path: string;
    kvV1MountPath: string;
}

export interface KvV1ListRequest {
    path: string;
    kvV1MountPath: string;
    list: KvV1ListListEnum;
}

export interface KvV1ReadRequest {
    path: string;
    kvV1MountPath: string;
}

export interface KvV1WriteRequest {
    path: string;
    kvV1MountPath: string;
    requestBody: { [key: string]: any; };
}

export interface KvV2ConfigureOperationRequest {
    kvV2MountPath: string;
    kvV2ConfigureRequest: KvV2ConfigureRequest;
}

export interface KvV2DeleteRequest {
    path: string;
    kvV2MountPath: string;
}

export interface KvV2DeleteMetadataAndAllVersionsRequest {
    path: string;
    kvV2MountPath: string;
}

export interface KvV2DeleteVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest;
}

export interface KvV2DestroyVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest;
}

export interface KvV2ListRequest {
    path: string;
    kvV2MountPath: string;
    list: KvV2ListListEnum;
}

export interface KvV2ReadRequest {
    path: string;
    kvV2MountPath: string;
}

export interface KvV2ReadConfigurationRequest {
    kvV2MountPath: string;
}

export interface KvV2ReadMetadataRequest {
    path: string;
    kvV2MountPath: string;
}

export interface KvV2ReadSubkeysRequest {
    path: string;
    kvV2MountPath: string;
}

export interface KvV2UndeleteVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest;
}

export interface KvV2WriteOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2WriteRequest: KvV2WriteRequest;
}

export interface KvV2WriteMetadataOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2WriteMetadataRequest: KvV2WriteMetadataRequest;
}

export interface LdapConfigureOperationRequest {
    ldapMountPath: string;
    ldapConfigureRequest: LdapConfigureRequest;
}

export interface LdapDeleteConfigurationRequest {
    ldapMountPath: string;
}

export interface LdapDeleteDynamicRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapDeleteStaticRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapLibraryCheckInOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryCheckInRequest: LdapLibraryCheckInRequest;
}

export interface LdapLibraryCheckOutOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryCheckOutRequest: LdapLibraryCheckOutRequest;
}

export interface LdapLibraryCheckStatusRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapLibraryConfigureOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryConfigureRequest: LdapLibraryConfigureRequest;
}

export interface LdapLibraryDeleteRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapLibraryForceCheckInOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest;
}

export interface LdapLibraryListRequest {
    ldapMountPath: string;
    list: LdapLibraryListListEnum;
}

export interface LdapLibraryListLibraryPathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapLibraryListLibraryPathListEnum;
}

export interface LdapLibraryListLibraryPath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapLibraryListLibraryPath0ListEnum;
}

export interface LdapLibraryReadRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapListDynamicRolesRequest {
    ldapMountPath: string;
    list: LdapListDynamicRolesListEnum;
}

export interface LdapListRolePathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapListRolePathListEnum;
}

export interface LdapListRolePath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapListRolePath0ListEnum;
}

export interface LdapListStaticRolePathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapListStaticRolePathListEnum;
}

export interface LdapListStaticRolePath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapListStaticRolePath0ListEnum;
}

export interface LdapListStaticRolesRequest {
    ldapMountPath: string;
    list: LdapListStaticRolesListEnum;
}

export interface LdapReadConfigurationRequest {
    ldapMountPath: string;
}

export interface LdapReadDynamicRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapReadStaticRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapRequestDynamicRoleCredentialsRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapRequestStaticRoleCredentialsRequest {
    name: string;
    ldapMountPath: string;
}

export interface LdapRotateRootCredentialsRequest {
    ldapMountPath: string;
}

export interface LdapRotateStaticRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapRotateStaticRoleRequest: LdapRotateStaticRoleRequest;
}

export interface LdapWriteDynamicRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest;
}

export interface LdapWriteStaticRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteStaticRoleRequest: LdapWriteStaticRoleRequest;
}

export interface MongoDbAtlasConfigureOperationRequest {
    mongodbatlasMountPath: string;
    mongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest;
}

export interface MongoDbAtlasDeleteRoleRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface MongoDbAtlasGenerateCredentialsRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface MongoDbAtlasGenerateCredentials2Request {
    name: string;
    mongodbatlasMountPath: string;
}

export interface MongoDbAtlasListRolesRequest {
    mongodbatlasMountPath: string;
    list: MongoDbAtlasListRolesListEnum;
}

export interface MongoDbAtlasReadConfigurationRequest {
    mongodbatlasMountPath: string;
}

export interface MongoDbAtlasReadRoleRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface MongoDbAtlasWriteRoleOperationRequest {
    name: string;
    mongodbatlasMountPath: string;
    mongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest;
}

export interface NomadConfigureAccessOperationRequest {
    nomadMountPath: string;
    nomadConfigureAccessRequest: NomadConfigureAccessRequest;
}

export interface NomadConfigureLeaseOperationRequest {
    nomadMountPath: string;
    nomadConfigureLeaseRequest: NomadConfigureLeaseRequest;
}

export interface NomadDeleteAccessConfigurationRequest {
    nomadMountPath: string;
}

export interface NomadDeleteLeaseConfigurationRequest {
    nomadMountPath: string;
}

export interface NomadDeleteRoleRequest {
    name: string;
    nomadMountPath: string;
}

export interface NomadGenerateCredentialsRequest {
    name: string;
    nomadMountPath: string;
}

export interface NomadListRolesRequest {
    nomadMountPath: string;
    list: NomadListRolesListEnum;
}

export interface NomadReadAccessConfigurationRequest {
    nomadMountPath: string;
}

export interface NomadReadLeaseConfigurationRequest {
    nomadMountPath: string;
}

export interface NomadReadRoleRequest {
    name: string;
    nomadMountPath: string;
}

export interface NomadWriteRoleOperationRequest {
    name: string;
    nomadMountPath: string;
    nomadWriteRoleRequest: NomadWriteRoleRequest;
}

export interface PkiConfigureAcmeOperationRequest {
    pkiMountPath: string;
    pkiConfigureAcmeRequest: PkiConfigureAcmeRequest;
}

export interface PkiConfigureAutoTidyOperationRequest {
    pkiMountPath: string;
    pkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest;
}

export interface PkiConfigureCaOperationRequest {
    pkiMountPath: string;
    pkiConfigureCaRequest: PkiConfigureCaRequest;
}

export interface PkiConfigureClusterOperationRequest {
    pkiMountPath: string;
    pkiConfigureClusterRequest: PkiConfigureClusterRequest;
}

export interface PkiConfigureCrlOperationRequest {
    pkiMountPath: string;
    pkiConfigureCrlRequest: PkiConfigureCrlRequest;
}

export interface PkiConfigureIssuersOperationRequest {
    pkiMountPath: string;
    pkiConfigureIssuersRequest: PkiConfigureIssuersRequest;
}

export interface PkiConfigureKeysOperationRequest {
    pkiMountPath: string;
    pkiConfigureKeysRequest: PkiConfigureKeysRequest;
}

export interface PkiConfigureUrlsOperationRequest {
    pkiMountPath: string;
    pkiConfigureUrlsRequest: PkiConfigureUrlsRequest;
}

export interface PkiCrossSignIntermediateOperationRequest {
    pkiMountPath: string;
    pkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest;
}

export interface PkiDeleteEabKeyRequest {
    keyId: string;
    pkiMountPath: string;
}

export interface PkiDeleteIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiDeleteKeyRequest {
    keyRef: string;
    pkiMountPath: string;
}

export interface PkiDeleteRoleRequest {
    name: string;
    pkiMountPath: string;
}

export interface PkiDeleteRootRequest {
    pkiMountPath: string;
}

export interface PkiGenerateEabKeyRequest {
    pkiMountPath: string;
}

export interface PkiGenerateEabKeyForIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiGenerateEabKeyForIssuerAndRoleRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface PkiGenerateEabKeyForRoleRequest {
    role: string;
    pkiMountPath: string;
}

export interface PkiGenerateExportedKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest;
}

export interface PkiGenerateIntermediateOperationRequest {
    exported: PkiGenerateIntermediateExportedEnum;
    pkiMountPath: string;
    pkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest;
}

export interface PkiGenerateInternalKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest;
}

export interface PkiGenerateKmsKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest;
}

export interface PkiGenerateRootOperationRequest {
    exported: PkiGenerateRootExportedEnum;
    pkiMountPath: string;
    pkiGenerateRootRequest: PkiGenerateRootRequest;
}

export interface PkiImportKeyOperationRequest {
    pkiMountPath: string;
    pkiImportKeyRequest: PkiImportKeyRequest;
}

export interface PkiIssueWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiIssueWithRoleRequest: PkiIssueWithRoleRequest;
}

export interface PkiIssuerIssueWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest;
}

export interface PkiIssuerReadCrlRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerReadCrlDeltaRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerReadCrlDeltaDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerReadCrlDeltaPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerReadCrlDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerReadCrlPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiIssuerResignCrlsOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest;
}

export interface PkiIssuerSignIntermediateOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest;
}

export interface PkiIssuerSignRevocationListOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest;
}

export interface PkiIssuerSignSelfIssuedOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest;
}

export interface PkiIssuerSignVerbatimOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest;
}

export interface PkiIssuerSignVerbatimWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest;
}

export interface PkiIssuerSignWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest;
}

export interface PkiIssuersGenerateIntermediateOperationRequest {
    exported: PkiIssuersGenerateIntermediateExportedEnum;
    pkiMountPath: string;
    pkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest;
}

export interface PkiIssuersGenerateRootOperationRequest {
    exported: PkiIssuersGenerateRootExportedEnum;
    pkiMountPath: string;
    pkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest;
}

export interface PkiIssuersImportBundleOperationRequest {
    pkiMountPath: string;
    pkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest;
}

export interface PkiIssuersImportCertOperationRequest {
    pkiMountPath: string;
    pkiIssuersImportCertRequest: PkiIssuersImportCertRequest;
}

export interface PkiListAcmeAccountKeysRequest {
    pkiMountPath: string;
    list: PkiListAcmeAccountKeysListEnum;
}

export interface PkiListCertsRequest {
    pkiMountPath: string;
    list: PkiListCertsListEnum;
}

export interface PkiListEabKeysRequest {
    pkiMountPath: string;
    list: PkiListEabKeysListEnum;
}

export interface PkiListIssuersRequest {
    pkiMountPath: string;
    list: PkiListIssuersListEnum;
}

export interface PkiListKeysRequest {
    pkiMountPath: string;
    list: PkiListKeysListEnum;
}

export interface PkiListRevokedCertsRequest {
    pkiMountPath: string;
    list: PkiListRevokedCertsListEnum;
}

export interface PkiListRolesRequest {
    pkiMountPath: string;
    list: PkiListRolesListEnum;
}

export interface PkiQueryOcspRequest {
    pkiMountPath: string;
}

export interface PkiQueryOcspWithGetReqRequest {
    req: string;
    pkiMountPath: string;
}

export interface PkiReadAcmeConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadAcmeDirectoryRequest {
    pkiMountPath: string;
}

export interface PkiReadAcmeKeyIdRequest {
    keyid: string;
    pkiMountPath: string;
}

export interface PkiReadAcmeNewNonceRequest {
    pkiMountPath: string;
}

export interface PkiReadAutoTidyConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadCaChainPemRequest {
    pkiMountPath: string;
}

export interface PkiReadCaDerRequest {
    pkiMountPath: string;
}

export interface PkiReadCaPemRequest {
    pkiMountPath: string;
}

export interface PkiReadCertRequest {
    serial: string;
    pkiMountPath: string;
}

export interface PkiReadCertCaChainRequest {
    pkiMountPath: string;
}

export interface PkiReadCertCrlRequest {
    pkiMountPath: string;
}

export interface PkiReadCertDeltaCrlRequest {
    pkiMountPath: string;
}

export interface PkiReadCertRawDerRequest {
    serial: string;
    pkiMountPath: string;
}

export interface PkiReadCertRawPemRequest {
    serial: string;
    pkiMountPath: string;
}

export interface PkiReadClusterConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadCrlConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadCrlDeltaRequest {
    pkiMountPath: string;
}

export interface PkiReadCrlDeltaPemRequest {
    pkiMountPath: string;
}

export interface PkiReadCrlDerRequest {
    pkiMountPath: string;
}

export interface PkiReadCrlPemRequest {
    pkiMountPath: string;
}

export interface PkiReadIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerIssuerRefAcmeDirectoryRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerIssuerRefAcmeNewNonceRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerJsonRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuerPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiReadIssuersConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadKeyRequest {
    keyRef: string;
    pkiMountPath: string;
}

export interface PkiReadKeysConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReadRoleRequest {
    name: string;
    pkiMountPath: string;
}

export interface PkiReadRolesRoleAcmeDirectoryRequest {
    role: string;
    pkiMountPath: string;
}

export interface PkiReadRolesRoleAcmeNewNonceRequest {
    role: string;
    pkiMountPath: string;
}

export interface PkiReadUrlsConfigurationRequest {
    pkiMountPath: string;
}

export interface PkiReplaceRootOperationRequest {
    pkiMountPath: string;
    pkiReplaceRootRequest: PkiReplaceRootRequest;
}

export interface PkiRevokeOperationRequest {
    pkiMountPath: string;
    pkiRevokeRequest: PkiRevokeRequest;
}

export interface PkiRevokeIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface PkiRevokeWithKeyOperationRequest {
    pkiMountPath: string;
    pkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest;
}

export interface PkiRootSignIntermediateOperationRequest {
    pkiMountPath: string;
    pkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest;
}

export interface PkiRootSignSelfIssuedOperationRequest {
    pkiMountPath: string;
    pkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest;
}

export interface PkiRotateCrlRequest {
    pkiMountPath: string;
}

export interface PkiRotateDeltaCrlRequest {
    pkiMountPath: string;
}

export interface PkiRotateRootOperationRequest {
    exported: PkiRotateRootExportedEnum;
    pkiMountPath: string;
    pkiRotateRootRequest: PkiRotateRootRequest;
}

export interface PkiSetSignedIntermediateOperationRequest {
    pkiMountPath: string;
    pkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest;
}

export interface PkiSignVerbatimOperationRequest {
    pkiMountPath: string;
    pkiSignVerbatimRequest: PkiSignVerbatimRequest;
}

export interface PkiSignVerbatimWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest;
}

export interface PkiSignWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiSignWithRoleRequest: PkiSignWithRoleRequest;
}

export interface PkiTidyOperationRequest {
    pkiMountPath: string;
    pkiTidyRequest: PkiTidyRequest;
}

export interface PkiTidyCancelRequest {
    pkiMountPath: string;
}

export interface PkiTidyStatusRequest {
    pkiMountPath: string;
}

export interface PkiWriteAcmeAccountKidOperationRequest {
    kid: string;
    pkiMountPath: string;
    pkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest;
}

export interface PkiWriteAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    pkiMountPath: string;
    pkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest;
}

export interface PkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    pkiMountPath: string;
    pkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface PkiWriteAcmeKeyIdOperationRequest {
    keyid: string;
    pkiMountPath: string;
    pkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest;
}

export interface PkiWriteAcmeNewAccountOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest;
}

export interface PkiWriteAcmeNewOrderOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest;
}

export interface PkiWriteAcmeOrderOrderIdOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest;
}

export interface PkiWriteAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest;
}

export interface PkiWriteAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest;
}

export interface PkiWriteAcmeOrdersOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest;
}

export interface PkiWriteAcmeRevokeCertOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest;
}

export interface PkiWriteIssuerOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerRequest: PkiWriteIssuerRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeOrdersOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest;
}

export interface PkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest;
}

export interface PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest;
}

export interface PkiWriteKeyOperationRequest {
    keyRef: string;
    pkiMountPath: string;
    pkiWriteKeyRequest: PkiWriteKeyRequest;
}

export interface PkiWriteRoleOperationRequest {
    name: string;
    pkiMountPath: string;
    pkiWriteRoleRequest: PkiWriteRoleRequest;
}

export interface PkiWriteRolesRoleAcmeAccountKidOperationRequest {
    kid: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest;
}

export interface PkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface PkiWriteRolesRoleAcmeNewAccountOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest;
}

export interface PkiWriteRolesRoleAcmeNewOrderOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest;
}

export interface PkiWriteRolesRoleAcmeOrderOrderIdOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest;
}

export interface PkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface PkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface PkiWriteRolesRoleAcmeOrdersOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest;
}

export interface PkiWriteRolesRoleAcmeRevokeCertOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest;
}

export interface RabbitMqConfigureConnectionOperationRequest {
    rabbitmqMountPath: string;
    rabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest;
}

export interface RabbitMqConfigureLeaseOperationRequest {
    rabbitmqMountPath: string;
    rabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest;
}

export interface RabbitMqDeleteRoleRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface RabbitMqListRolesRequest {
    rabbitmqMountPath: string;
    list: RabbitMqListRolesListEnum;
}

export interface RabbitMqReadLeaseConfigurationRequest {
    rabbitmqMountPath: string;
}

export interface RabbitMqReadRoleRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface RabbitMqRequestCredentialsRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface RabbitMqWriteRoleOperationRequest {
    name: string;
    rabbitmqMountPath: string;
    rabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest;
}

export interface SshConfigureCaOperationRequest {
    sshMountPath: string;
    sshConfigureCaRequest: SshConfigureCaRequest;
}

export interface SshConfigureZeroAddressOperationRequest {
    sshMountPath: string;
    sshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest;
}

export interface SshDeleteCaConfigurationRequest {
    sshMountPath: string;
}

export interface SshDeleteRoleRequest {
    role: string;
    sshMountPath: string;
}

export interface SshDeleteZeroAddressConfigurationRequest {
    sshMountPath: string;
}

export interface SshGenerateCredentialsOperationRequest {
    role: string;
    sshMountPath: string;
    sshGenerateCredentialsRequest: SshGenerateCredentialsRequest;
}

export interface SshIssueCertificateOperationRequest {
    role: string;
    sshMountPath: string;
    sshIssueCertificateRequest: SshIssueCertificateRequest;
}

export interface SshListRolesRequest {
    sshMountPath: string;
    list: SshListRolesListEnum;
}

export interface SshListRolesByIpOperationRequest {
    sshMountPath: string;
    sshListRolesByIpRequest: SshListRolesByIpRequest;
}

export interface SshReadCaConfigurationRequest {
    sshMountPath: string;
}

export interface SshReadPublicKeyRequest {
    sshMountPath: string;
}

export interface SshReadRoleRequest {
    role: string;
    sshMountPath: string;
}

export interface SshReadZeroAddressConfigurationRequest {
    sshMountPath: string;
}

export interface SshSignCertificateOperationRequest {
    role: string;
    sshMountPath: string;
    sshSignCertificateRequest: SshSignCertificateRequest;
}

export interface SshTidyDynamicHostKeysRequest {
    sshMountPath: string;
}

export interface SshVerifyOtpOperationRequest {
    sshMountPath: string;
    sshVerifyOtpRequest: SshVerifyOtpRequest;
}

export interface SshWriteRoleOperationRequest {
    role: string;
    sshMountPath: string;
    sshWriteRoleRequest: SshWriteRoleRequest;
}

export interface TerraformCloudConfigureOperationRequest {
    terraformMountPath: string;
    terraformCloudConfigureRequest: TerraformCloudConfigureRequest;
}

export interface TerraformCloudDeleteConfigurationRequest {
    terraformMountPath: string;
}

export interface TerraformCloudDeleteRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface TerraformCloudGenerateCredentialsRequest {
    name: string;
    terraformMountPath: string;
}

export interface TerraformCloudGenerateCredentials2Request {
    name: string;
    terraformMountPath: string;
}

export interface TerraformCloudListRolesRequest {
    terraformMountPath: string;
    list: TerraformCloudListRolesListEnum;
}

export interface TerraformCloudReadConfigurationRequest {
    terraformMountPath: string;
}

export interface TerraformCloudReadRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface TerraformCloudRotateRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface TerraformCloudWriteRoleOperationRequest {
    name: string;
    terraformMountPath: string;
    terraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest;
}

export interface TotpCreateKeyOperationRequest {
    name: string;
    totpMountPath: string;
    totpCreateKeyRequest: TotpCreateKeyRequest;
}

export interface TotpDeleteKeyRequest {
    name: string;
    totpMountPath: string;
}

export interface TotpGenerateCodeRequest {
    name: string;
    totpMountPath: string;
}

export interface TotpListKeysRequest {
    totpMountPath: string;
    list: TotpListKeysListEnum;
}

export interface TotpReadKeyRequest {
    name: string;
    totpMountPath: string;
}

export interface TotpValidateCodeOperationRequest {
    name: string;
    totpMountPath: string;
    totpValidateCodeRequest: TotpValidateCodeRequest;
}

export interface TransitBackUpKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface TransitByokKeyRequest {
    destination: string;
    source: string;
    transitMountPath: string;
}

export interface TransitByokKeyVersionRequest {
    destination: string;
    source: string;
    version: string;
    transitMountPath: string;
}

export interface TransitConfigureCacheOperationRequest {
    transitMountPath: string;
    transitConfigureCacheRequest: TransitConfigureCacheRequest;
}

export interface TransitConfigureKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitConfigureKeyRequest: TransitConfigureKeyRequest;
}

export interface TransitConfigureKeysOperationRequest {
    transitMountPath: string;
    transitConfigureKeysRequest: TransitConfigureKeysRequest;
}

export interface TransitCreateKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitCreateKeyRequest: TransitCreateKeyRequest;
}

export interface TransitDecryptOperationRequest {
    name: string;
    transitMountPath: string;
    transitDecryptRequest: TransitDecryptRequest;
}

export interface TransitDeleteKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface TransitEncryptOperationRequest {
    name: string;
    transitMountPath: string;
    transitEncryptRequest: TransitEncryptRequest;
}

export interface TransitExportKeyRequest {
    name: string;
    type: string;
    transitMountPath: string;
}

export interface TransitExportKeyVersionRequest {
    name: string;
    type: string;
    version: string;
    transitMountPath: string;
}

export interface TransitGenerateCsrForKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest;
}

export interface TransitGenerateDataKeyOperationRequest {
    name: string;
    plaintext: string;
    transitMountPath: string;
    transitGenerateDataKeyRequest: TransitGenerateDataKeyRequest;
}

export interface TransitGenerateHmacOperationRequest {
    name: string;
    transitMountPath: string;
    transitGenerateHmacRequest: TransitGenerateHmacRequest;
}

export interface TransitGenerateHmacWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest;
}

export interface TransitGenerateRandomOperationRequest {
    transitMountPath: string;
    transitGenerateRandomRequest: TransitGenerateRandomRequest;
}

export interface TransitGenerateRandomWithBytesOperationRequest {
    urlbytes: string;
    transitMountPath: string;
    transitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest;
}

export interface TransitGenerateRandomWithSourceOperationRequest {
    source: string;
    transitMountPath: string;
    transitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest;
}

export interface TransitGenerateRandomWithSourceAndBytesOperationRequest {
    source: string;
    urlbytes: string;
    transitMountPath: string;
    transitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest;
}

export interface TransitHashOperationRequest {
    transitMountPath: string;
    transitHashRequest: TransitHashRequest;
}

export interface TransitHashWithAlgorithmOperationRequest {
    urlalgorithm: string;
    transitMountPath: string;
    transitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest;
}

export interface TransitImportKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitImportKeyRequest: TransitImportKeyRequest;
}

export interface TransitImportKeyVersionOperationRequest {
    name: string;
    transitMountPath: string;
    transitImportKeyVersionRequest: TransitImportKeyVersionRequest;
}

export interface TransitListKeysRequest {
    transitMountPath: string;
    list: TransitListKeysListEnum;
}

export interface TransitReadCacheConfigurationRequest {
    transitMountPath: string;
}

export interface TransitReadKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface TransitReadKeysConfigurationRequest {
    transitMountPath: string;
}

export interface TransitReadWrappingKeyRequest {
    transitMountPath: string;
}

export interface TransitRestoreAndRenameKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest;
}

export interface TransitRestoreKeyOperationRequest {
    transitMountPath: string;
    transitRestoreKeyRequest: TransitRestoreKeyRequest;
}

export interface TransitRewrapOperationRequest {
    name: string;
    transitMountPath: string;
    transitRewrapRequest: TransitRewrapRequest;
}

export interface TransitRotateKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitRotateKeyRequest: TransitRotateKeyRequest;
}

export interface TransitSetCertificateForKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest;
}

export interface TransitSignOperationRequest {
    name: string;
    transitMountPath: string;
    transitSignRequest: TransitSignRequest;
}

export interface TransitSignWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest;
}

export interface TransitTrimKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitTrimKeyRequest: TransitTrimKeyRequest;
}

export interface TransitVerifyOperationRequest {
    name: string;
    transitMountPath: string;
    transitVerifyRequest: TransitVerifyRequest;
}

export interface TransitVerifyWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest;
}

/**
 * 
 */
export class SecretsApi extends runtime.BaseAPI {

    /**
     */
    async aliCloudConfigureRaw(requestParameters: AliCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudConfigure().'
            );
        }

        if (requestParameters['aliCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudConfigureRequest',
                'Required parameter "aliCloudConfigureRequest" was null or undefined when calling aliCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudConfigureRequestToJSON(requestParameters['aliCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudConfigure(requestParameters: AliCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aliCloudDeleteConfigurationRaw(requestParameters: AliCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudDeleteConfiguration(requestParameters: AliCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRoleRaw(requestParameters: AliCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRole(requestParameters: AliCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentialsRaw(requestParameters: AliCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentials(requestParameters: AliCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRolesRaw(requestParameters: AliCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRoles(requestParameters: AliCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliCloudReadConfigurationRaw(requestParameters: AliCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudReadConfiguration(requestParameters: AliCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRoleRaw(requestParameters: AliCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudReadRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRole(requestParameters: AliCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRoleRaw(requestParameters: AliCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['aliCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudWriteRoleRequest',
                'Required parameter "aliCloudWriteRoleRequest" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudWriteRoleRequestToJSON(requestParameters['aliCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRole(requestParameters: AliCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aliCloudWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureLeaseRaw(requestParameters: AwsConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureLease().'
            );
        }

        if (requestParameters['awsConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureLeaseRequest',
                'Required parameter "awsConfigureLeaseRequest" was null or undefined when calling awsConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureLeaseRequestToJSON(requestParameters['awsConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureLease(requestParameters: AwsConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureLeaseRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsConfigureRootIamCredentialsRaw(requestParameters: AwsConfigureRootIamCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        if (requestParameters['awsConfigureRootIamCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRootIamCredentialsRequest',
                'Required parameter "awsConfigureRootIamCredentialsRequest" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRootIamCredentialsRequestToJSON(requestParameters['awsConfigureRootIamCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRootIamCredentials(requestParameters: AwsConfigureRootIamCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsConfigureRootIamCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRoleRaw(requestParameters: AwsDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRole(requestParameters: AwsDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsDeleteStaticRolesNameRaw(requestParameters: AwsDeleteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteStaticRolesName(requestParameters: AwsDeleteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsDeleteStaticRolesNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsGenerateCredentialsRaw(requestParameters: AwsGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roleArn'] != null) {
            queryParameters['role_arn'] = requestParameters['roleArn'];
        }

        if (requestParameters['roleSessionName'] != null) {
            queryParameters['role_session_name'] = requestParameters['roleSessionName'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentials(requestParameters: AwsGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsGenerateCredentialsWithParametersRaw(requestParameters: AwsGenerateCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsGenerateCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'awsGenerateCredentialsWithParametersRequest',
                'Required parameter "awsGenerateCredentialsWithParametersRequest" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateCredentialsWithParametersRequestToJSON(requestParameters['awsGenerateCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentialsWithParameters(requestParameters: AwsGenerateCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsGenerateCredentialsWithParametersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsGenerateStsCredentialsRaw(requestParameters: AwsGenerateStsCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roleArn'] != null) {
            queryParameters['role_arn'] = requestParameters['roleArn'];
        }

        if (requestParameters['roleSessionName'] != null) {
            queryParameters['role_session_name'] = requestParameters['roleSessionName'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentials(requestParameters: AwsGenerateStsCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsGenerateStsCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsGenerateStsCredentialsWithParametersRaw(requestParameters: AwsGenerateStsCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsGenerateStsCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'awsGenerateStsCredentialsWithParametersRequest',
                'Required parameter "awsGenerateStsCredentialsWithParametersRequest" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateStsCredentialsWithParametersRequestToJSON(requestParameters['awsGenerateStsCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentialsWithParameters(requestParameters: AwsGenerateStsCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsGenerateStsCredentialsWithParametersRaw(requestParameters, initOverrides);
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRolesRaw(requestParameters: AwsListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRoles(requestParameters: AwsListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadLeaseConfigurationRaw(requestParameters: AwsReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadLeaseConfiguration(requestParameters: AwsReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadLeaseConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRoleRaw(requestParameters: AwsReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRole(requestParameters: AwsReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadRootIamCredentialsConfigurationRaw(requestParameters: AwsReadRootIamCredentialsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRootIamCredentialsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRootIamCredentialsConfiguration(requestParameters: AwsReadRootIamCredentialsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsReadRootIamCredentialsConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsReadStaticCredsNameRaw(requestParameters: AwsReadStaticCredsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticCredsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticCredsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticCredsName(requestParameters: AwsReadStaticCredsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticCredsNameResponse> {
        const response = await this.awsReadStaticCredsNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStaticRolesNameRaw(requestParameters: AwsReadStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticRolesName(requestParameters: AwsReadStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticRolesNameResponse> {
        const response = await this.awsReadStaticRolesNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsRotateRootIamCredentialsRaw(requestParameters: AwsRotateRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsRotateRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsRotateRootIamCredentials(requestParameters: AwsRotateRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsRotateRootIamCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRoleRaw(requestParameters: AwsWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['awsWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteRoleRequest',
                'Required parameter "awsWriteRoleRequest" was null or undefined when calling awsWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteRoleRequestToJSON(requestParameters['awsWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRole(requestParameters: AwsWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.awsWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awsWriteStaticRolesNameRaw(requestParameters: AwsWriteStaticRolesNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsWriteStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['awsWriteStaticRolesNameRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteStaticRolesNameRequest',
                'Required parameter "awsWriteStaticRolesNameRequest" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteStaticRolesNameRequestToJSON(requestParameters['awsWriteStaticRolesNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsWriteStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsWriteStaticRolesName(requestParameters: AwsWriteStaticRolesNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsWriteStaticRolesNameResponse> {
        const response = await this.awsWriteStaticRolesNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureConfigureRaw(requestParameters: AzureConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureConfigure().'
            );
        }

        if (requestParameters['azureConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'azureConfigureRequest',
                'Required parameter "azureConfigureRequest" was null or undefined when calling azureConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureConfigureRequestToJSON(requestParameters['azureConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureConfigure(requestParameters: AzureConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureDeleteConfigurationRaw(requestParameters: AzureDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteConfiguration(requestParameters: AzureDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRoleRaw(requestParameters: AzureDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureDeleteRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRole(requestParameters: AzureDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * List existing roles.
     */
    async azureListRolesRaw(requestParameters: AzureListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling azureListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List existing roles.
     */
    async azureListRoles(requestParameters: AzureListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.azureListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureReadConfigurationRaw(requestParameters: AzureReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadConfiguration(requestParameters: AzureReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRoleRaw(requestParameters: AzureReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureReadRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRole(requestParameters: AzureReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureRequestServicePrincipalCredentialsRaw(requestParameters: AzureRequestServicePrincipalCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRequestServicePrincipalCredentials(requestParameters: AzureRequestServicePrincipalCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureRequestServicePrincipalCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async azureRotateRootRaw(requestParameters: AzureRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRotateRoot(requestParameters: AzureRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureRotateRootRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRoleRaw(requestParameters: AzureWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['azureWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'azureWriteRoleRequest',
                'Required parameter "azureWriteRoleRequest" was null or undefined when calling azureWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureWriteRoleRequestToJSON(requestParameters['azureWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRole(requestParameters: AzureWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.azureWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulConfigureAccessRaw(requestParameters: ConsulConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulConfigureAccess().'
            );
        }

        if (requestParameters['consulConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'consulConfigureAccessRequest',
                'Required parameter "consulConfigureAccessRequest" was null or undefined when calling consulConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulConfigureAccessRequestToJSON(requestParameters['consulConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulConfigureAccess(requestParameters: ConsulConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulConfigureAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulDeleteRoleRaw(requestParameters: ConsulDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulDeleteRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulDeleteRole(requestParameters: ConsulDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulGenerateCredentialsRaw(requestParameters: ConsulGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulGenerateCredentials(requestParameters: ConsulGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulListRolesRaw(requestParameters: ConsulListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling consulListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async consulListRoles(requestParameters: ConsulListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.consulListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulReadAccessConfigurationRaw(requestParameters: ConsulReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadAccessConfiguration(requestParameters: ConsulReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulReadAccessConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulReadRoleRaw(requestParameters: ConsulReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulReadRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadRole(requestParameters: ConsulReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async consulWriteRoleRaw(requestParameters: ConsulWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['consulWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'consulWriteRoleRequest',
                'Required parameter "consulWriteRoleRequest" was null or undefined when calling consulWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulWriteRoleRequestToJSON(requestParameters['consulWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulWriteRole(requestParameters: ConsulWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.consulWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDeleteRaw(requestParameters: CubbyholeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDelete(requestParameters: CubbyholeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cubbyholeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeListRaw(requestParameters: CubbyholeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling cubbyholeList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeList(requestParameters: CubbyholeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.cubbyholeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeReadRaw(requestParameters: CubbyholeReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeRead(requestParameters: CubbyholeReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cubbyholeReadRaw(requestParameters, initOverrides);
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWriteRaw(requestParameters: CubbyholeWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeWrite().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling cubbyholeWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWrite(requestParameters: CubbyholeWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cubbyholeWriteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async databaseConfigureConnectionRaw(requestParameters: DatabaseConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['databaseConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseConfigureConnectionRequest',
                'Required parameter "databaseConfigureConnectionRequest" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseConfigureConnectionRequestToJSON(requestParameters['databaseConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseConfigureConnection(requestParameters: DatabaseConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseConfigureConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async databaseDeleteConnectionConfigurationRaw(requestParameters: DatabaseDeleteConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseDeleteConnectionConfiguration(requestParameters: DatabaseDeleteConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseDeleteConnectionConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRoleRaw(requestParameters: DatabaseDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRole(requestParameters: DatabaseDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRoleRaw(requestParameters: DatabaseDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRole(requestParameters: DatabaseDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseDeleteStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentialsRaw(requestParameters: DatabaseGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentials(requestParameters: DatabaseGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnectionsRaw(requestParameters: DatabaseListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListConnections().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListConnections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnections(requestParameters: DatabaseListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRolesRaw(requestParameters: DatabaseListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRoles(requestParameters: DatabaseListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRolesRaw(requestParameters: DatabaseListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRoles(requestParameters: DatabaseListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListStaticRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseReadConnectionConfigurationRaw(requestParameters: DatabaseReadConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseReadConnectionConfiguration(requestParameters: DatabaseReadConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseReadConnectionConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRoleRaw(requestParameters: DatabaseReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRole(requestParameters: DatabaseReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRoleRaw(requestParameters: DatabaseReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRole(requestParameters: DatabaseReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseReadStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentialsRaw(requestParameters: DatabaseReadStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentials(requestParameters: DatabaseReadStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseReadStaticRoleCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPluginRaw(requestParameters: DatabaseReloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pluginName'] == null) {
            throw new runtime.RequiredError(
                'pluginName',
                'Required parameter "pluginName" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reload/{plugin_name}`.replace(`{${"plugin_name"}}`, encodeURIComponent(String(requestParameters['pluginName']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPlugin(requestParameters: DatabaseReloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseReloadPluginRaw(requestParameters, initOverrides);
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnectionRaw(requestParameters: DatabaseResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseResetConnection().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseResetConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnection(requestParameters: DatabaseResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseResetConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async databaseRotateRootCredentialsRaw(requestParameters: DatabaseRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-root/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateRootCredentials(requestParameters: DatabaseRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async databaseRotateStaticRoleCredentialsRaw(requestParameters: DatabaseRotateStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateStaticRoleCredentials(requestParameters: DatabaseRotateStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseRotateStaticRoleCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRoleRaw(requestParameters: DatabaseWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['databaseWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseWriteRoleRequest',
                'Required parameter "databaseWriteRoleRequest" was null or undefined when calling databaseWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteRoleRequestToJSON(requestParameters['databaseWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRole(requestParameters: DatabaseWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRoleRaw(requestParameters: DatabaseWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['databaseWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseWriteStaticRoleRequest',
                'Required parameter "databaseWriteStaticRoleRequest" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteStaticRoleRequestToJSON(requestParameters['databaseWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRole(requestParameters: DatabaseWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.databaseWriteStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudConfigureRaw(requestParameters: GoogleCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudConfigure().'
            );
        }

        if (requestParameters['googleCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudConfigureRequest',
                'Required parameter "googleCloudConfigureRequest" was null or undefined when calling googleCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudConfigureRequestToJSON(requestParameters['googleCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudConfigure(requestParameters: GoogleCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccountRaw(requestParameters: GoogleCloudDeleteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccount(requestParameters: GoogleCloudDeleteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudDeleteImpersonatedAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudDeleteRolesetRaw(requestParameters: GoogleCloudDeleteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteRoleset(requestParameters: GoogleCloudDeleteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudDeleteRolesetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudDeleteStaticAccountRaw(requestParameters: GoogleCloudDeleteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteStaticAccount(requestParameters: GoogleCloudDeleteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudDeleteStaticAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessTokenRaw(requestParameters: GoogleCloudGenerateImpersonatedAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken(requestParameters: GoogleCloudGenerateImpersonatedAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateImpersonatedAccountAccessTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2Raw(requestParameters: GoogleCloudGenerateImpersonatedAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2(requestParameters: GoogleCloudGenerateImpersonatedAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateImpersonatedAccountAccessToken2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessTokenRaw(requestParameters: GoogleCloudGenerateRolesetAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken(requestParameters: GoogleCloudGenerateRolesetAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetAccessTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2Raw(requestParameters: GoogleCloudGenerateRolesetAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2(requestParameters: GoogleCloudGenerateRolesetAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetAccessToken2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3Raw(requestParameters: GoogleCloudGenerateRolesetAccessToken3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3(requestParameters: GoogleCloudGenerateRolesetAccessToken3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetAccessToken3Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4Raw(requestParameters: GoogleCloudGenerateRolesetAccessToken4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4(requestParameters: GoogleCloudGenerateRolesetAccessToken4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetAccessToken4Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetKeyRaw(requestParameters: GoogleCloudGenerateRolesetKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['googleCloudGenerateRolesetKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateRolesetKeyRequest',
                'Required parameter "googleCloudGenerateRolesetKeyRequest" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKeyRequestToJSON(requestParameters['googleCloudGenerateRolesetKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey(requestParameters: GoogleCloudGenerateRolesetKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetKey2Raw(requestParameters: GoogleCloudGenerateRolesetKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey2(requestParameters: GoogleCloudGenerateRolesetKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetKey2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetKey3Raw(requestParameters: GoogleCloudGenerateRolesetKey3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['googleCloudGenerateRolesetKey3Request'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateRolesetKey3Request',
                'Required parameter "googleCloudGenerateRolesetKey3Request" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKey3RequestToJSON(requestParameters['googleCloudGenerateRolesetKey3Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey3(requestParameters: GoogleCloudGenerateRolesetKey3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetKey3Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateRolesetKey4Raw(requestParameters: GoogleCloudGenerateRolesetKey4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey4(requestParameters: GoogleCloudGenerateRolesetKey4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateRolesetKey4Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessTokenRaw(requestParameters: GoogleCloudGenerateStaticAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken(requestParameters: GoogleCloudGenerateStaticAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateStaticAccountAccessTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2Raw(requestParameters: GoogleCloudGenerateStaticAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2(requestParameters: GoogleCloudGenerateStaticAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateStaticAccountAccessToken2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKeyRaw(requestParameters: GoogleCloudGenerateStaticAccountKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['googleCloudGenerateStaticAccountKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateStaticAccountKeyRequest',
                'Required parameter "googleCloudGenerateStaticAccountKeyRequest" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateStaticAccountKeyRequestToJSON(requestParameters['googleCloudGenerateStaticAccountKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey(requestParameters: GoogleCloudGenerateStaticAccountKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateStaticAccountKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2Raw(requestParameters: GoogleCloudGenerateStaticAccountKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2(requestParameters: GoogleCloudGenerateStaticAccountKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudGenerateStaticAccountKey2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsConfigureRaw(requestParameters: GoogleCloudKmsConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        if (requestParameters['googleCloudKmsConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsConfigureRequest',
                'Required parameter "googleCloudKmsConfigureRequest" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureRequestToJSON(requestParameters['googleCloudKmsConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigure(requestParameters: GoogleCloudKmsConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsConfigureKeyRaw(requestParameters: GoogleCloudKmsConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['googleCloudKmsConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsConfigureKeyRequest',
                'Required parameter "googleCloudKmsConfigureKeyRequest" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureKeyRequestToJSON(requestParameters['googleCloudKmsConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigureKey(requestParameters: GoogleCloudKmsConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsConfigureKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecryptRaw(requestParameters: GoogleCloudKmsDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['googleCloudKmsDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsDecryptRequest',
                'Required parameter "googleCloudKmsDecryptRequest" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/decrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsDecryptRequestToJSON(requestParameters['googleCloudKmsDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecrypt(requestParameters: GoogleCloudKmsDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsDecryptRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsDeleteConfigurationRaw(requestParameters: GoogleCloudKmsDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeleteConfiguration(requestParameters: GoogleCloudKmsDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKeyRaw(requestParameters: GoogleCloudKmsDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKey(requestParameters: GoogleCloudKmsDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsDeleteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsDeregisterKeyRaw(requestParameters: GoogleCloudKmsDeregisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey(requestParameters: GoogleCloudKmsDeregisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsDeregisterKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsDeregisterKey2Raw(requestParameters: GoogleCloudKmsDeregisterKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey2(requestParameters: GoogleCloudKmsDeregisterKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsDeregisterKey2Raw(requestParameters, initOverrides);
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncryptRaw(requestParameters: GoogleCloudKmsEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['googleCloudKmsEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsEncryptRequest',
                'Required parameter "googleCloudKmsEncryptRequest" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/encrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsEncryptRequestToJSON(requestParameters['googleCloudKmsEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncrypt(requestParameters: GoogleCloudKmsEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsEncryptRaw(requestParameters, initOverrides);
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeysRaw(requestParameters: GoogleCloudKmsListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeys(requestParameters: GoogleCloudKmsListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudKmsListKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsReadConfigurationRaw(requestParameters: GoogleCloudKmsReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadConfiguration(requestParameters: GoogleCloudKmsReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKeyRaw(requestParameters: GoogleCloudKmsReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKey(requestParameters: GoogleCloudKmsReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsReadKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsReadKeyConfigurationRaw(requestParameters: GoogleCloudKmsReadKeyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadKeyConfiguration(requestParameters: GoogleCloudKmsReadKeyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsReadKeyConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencryptRaw(requestParameters: GoogleCloudKmsReencryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['googleCloudKmsReencryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsReencryptRequest',
                'Required parameter "googleCloudKmsReencryptRequest" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/reencrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsReencryptRequestToJSON(requestParameters['googleCloudKmsReencryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencrypt(requestParameters: GoogleCloudKmsReencryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsReencryptRaw(requestParameters, initOverrides);
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKeyRaw(requestParameters: GoogleCloudKmsRegisterKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['googleCloudKmsRegisterKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsRegisterKeyRequest',
                'Required parameter "googleCloudKmsRegisterKeyRequest" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/register/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsRegisterKeyRequestToJSON(requestParameters['googleCloudKmsRegisterKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKey(requestParameters: GoogleCloudKmsRegisterKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsRegisterKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKeyRaw(requestParameters: GoogleCloudKmsRetrievePublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/pubkey/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKey(requestParameters: GoogleCloudKmsRetrievePublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsRetrievePublicKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKeyRaw(requestParameters: GoogleCloudKmsRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/rotate/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKey(requestParameters: GoogleCloudKmsRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsRotateKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSignRaw(requestParameters: GoogleCloudKmsSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['googleCloudKmsSignRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsSignRequest',
                'Required parameter "googleCloudKmsSignRequest" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/sign/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsSignRequestToJSON(requestParameters['googleCloudKmsSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSign(requestParameters: GoogleCloudKmsSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsSignRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersionsRaw(requestParameters: GoogleCloudKmsTrimKeyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions(requestParameters: GoogleCloudKmsTrimKeyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsTrimKeyVersionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2Raw(requestParameters: GoogleCloudKmsTrimKeyVersions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2(requestParameters: GoogleCloudKmsTrimKeyVersions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsTrimKeyVersions2Raw(requestParameters, initOverrides);
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerifyRaw(requestParameters: GoogleCloudKmsVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['googleCloudKmsVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsVerifyRequest',
                'Required parameter "googleCloudKmsVerifyRequest" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/verify/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsVerifyRequestToJSON(requestParameters['googleCloudKmsVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerify(requestParameters: GoogleCloudKmsVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsVerifyRaw(requestParameters, initOverrides);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKeyRaw(requestParameters: GoogleCloudKmsWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['googleCloudKmsWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsWriteKeyRequest',
                'Required parameter "googleCloudKmsWriteKeyRequest" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsWriteKeyRequestToJSON(requestParameters['googleCloudKmsWriteKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKey(requestParameters: GoogleCloudKmsWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudKmsWriteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudListImpersonatedAccountsRaw(requestParameters: GoogleCloudListImpersonatedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts(requestParameters: GoogleCloudListImpersonatedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2Raw(requestParameters: GoogleCloudListImpersonatedAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2(requestParameters: GoogleCloudListImpersonatedAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccounts2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesetsRaw(requestParameters: GoogleCloudListRolesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets(requestParameters: GoogleCloudListRolesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesets2Raw(requestParameters: GoogleCloudListRolesets2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/rolesets/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets2(requestParameters: GoogleCloudListRolesets2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesets2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccountsRaw(requestParameters: GoogleCloudListStaticAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts(requestParameters: GoogleCloudListStaticAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccounts2Raw(requestParameters: GoogleCloudListStaticAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts2(requestParameters: GoogleCloudListStaticAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccounts2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadConfigurationRaw(requestParameters: GoogleCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadConfiguration(requestParameters: GoogleCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudReadImpersonatedAccountRaw(requestParameters: GoogleCloudReadImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadImpersonatedAccount(requestParameters: GoogleCloudReadImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadImpersonatedAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudReadRolesetRaw(requestParameters: GoogleCloudReadRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadRoleset(requestParameters: GoogleCloudReadRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadRolesetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudReadStaticAccountRaw(requestParameters: GoogleCloudReadStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadStaticAccount(requestParameters: GoogleCloudReadStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudReadStaticAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudRotateRolesetRaw(requestParameters: GoogleCloudRotateRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRoleset(requestParameters: GoogleCloudRotateRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudRotateRolesetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudRotateRolesetKeyRaw(requestParameters: GoogleCloudRotateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRolesetKey(requestParameters: GoogleCloudRotateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudRotateRolesetKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudRotateRootCredentialsRaw(requestParameters: GoogleCloudRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config/rotate-root`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRootCredentials(requestParameters: GoogleCloudRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudRotateStaticAccountKeyRaw(requestParameters: GoogleCloudRotateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateStaticAccountKey(requestParameters: GoogleCloudRotateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudRotateStaticAccountKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudWriteImpersonatedAccountRaw(requestParameters: GoogleCloudWriteImpersonatedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['googleCloudWriteImpersonatedAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteImpersonatedAccountRequest',
                'Required parameter "googleCloudWriteImpersonatedAccountRequest" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteImpersonatedAccountRequestToJSON(requestParameters['googleCloudWriteImpersonatedAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteImpersonatedAccount(requestParameters: GoogleCloudWriteImpersonatedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudWriteImpersonatedAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudWriteRolesetRaw(requestParameters: GoogleCloudWriteRolesetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['googleCloudWriteRolesetRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteRolesetRequest',
                'Required parameter "googleCloudWriteRolesetRequest" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteRolesetRequestToJSON(requestParameters['googleCloudWriteRolesetRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteRoleset(requestParameters: GoogleCloudWriteRolesetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudWriteRolesetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleCloudWriteStaticAccountRaw(requestParameters: GoogleCloudWriteStaticAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['googleCloudWriteStaticAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteStaticAccountRequest',
                'Required parameter "googleCloudWriteStaticAccountRequest" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteStaticAccountRequestToJSON(requestParameters['googleCloudWriteStaticAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteStaticAccount(requestParameters: GoogleCloudWriteStaticAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleCloudWriteStaticAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesCheckConfigurationRaw(requestParameters: KubernetesCheckConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesCheckConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/check`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesCheckConfiguration(requestParameters: KubernetesCheckConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesCheckConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesConfigureRaw(requestParameters: KubernetesConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesConfigure().'
            );
        }

        if (requestParameters['kubernetesConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesConfigureRequest',
                'Required parameter "kubernetesConfigureRequest" was null or undefined when calling kubernetesConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesConfigureRequestToJSON(requestParameters['kubernetesConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesConfigure(requestParameters: KubernetesConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesDeleteConfigurationRaw(requestParameters: KubernetesDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteConfiguration(requestParameters: KubernetesDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesDeleteRoleRaw(requestParameters: KubernetesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteRole(requestParameters: KubernetesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesGenerateCredentialsRaw(requestParameters: KubernetesGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['kubernetesGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesGenerateCredentialsRequest',
                'Required parameter "kubernetesGenerateCredentialsRequest" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesGenerateCredentialsRequestToJSON(requestParameters['kubernetesGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesGenerateCredentials(requestParameters: KubernetesGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesListRolesRaw(requestParameters: KubernetesListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kubernetesListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kubernetesListRoles(requestParameters: KubernetesListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kubernetesListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadConfigurationRaw(requestParameters: KubernetesReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadConfiguration(requestParameters: KubernetesReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesReadRoleRaw(requestParameters: KubernetesReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesReadRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadRole(requestParameters: KubernetesReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kubernetesWriteRoleRaw(requestParameters: KubernetesWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['kubernetesWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesWriteRoleRequest',
                'Required parameter "kubernetesWriteRoleRequest" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesWriteRoleRequestToJSON(requestParameters['kubernetesWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesWriteRole(requestParameters: KubernetesWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kubernetesWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV1DeleteRaw(requestParameters: KvV1DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Delete().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Delete(requestParameters: KvV1DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV1DeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV1ListRaw(requestParameters: KvV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV1List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV1List(requestParameters: KvV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV1ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1ReadRaw(requestParameters: KvV1ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Read().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Read(requestParameters: KvV1ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV1ReadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV1WriteRaw(requestParameters: KvV1WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling kvV1Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Write(requestParameters: KvV1WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV1WriteRaw(requestParameters, initOverrides);
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2ConfigureRaw(requestParameters: KvV2ConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Configure().'
            );
        }

        if (requestParameters['kvV2ConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2ConfigureRequest',
                'Required parameter "kvV2ConfigureRequest" was null or undefined when calling kvV2Configure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2ConfigureRequestToJSON(requestParameters['kvV2ConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2Configure(requestParameters: KvV2ConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2ConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2DeleteRaw(requestParameters: KvV2DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Delete().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2Delete(requestParameters: KvV2DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2DeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersionsRaw(requestParameters: KvV2DeleteMetadataAndAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersions(requestParameters: KvV2DeleteMetadataAndAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2DeleteMetadataAndAllVersionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2DeleteVersionsRaw(requestParameters: KvV2DeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['kvV2DeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2DeleteVersionsRequest',
                'Required parameter "kvV2DeleteVersionsRequest" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/delete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DeleteVersionsRequestToJSON(requestParameters['kvV2DeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteVersions(requestParameters: KvV2DeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2DeleteVersionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2DestroyVersionsRaw(requestParameters: KvV2DestroyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['kvV2DestroyVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2DestroyVersionsRequest',
                'Required parameter "kvV2DestroyVersionsRequest" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/destroy/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DestroyVersionsRequestToJSON(requestParameters['kvV2DestroyVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DestroyVersions(requestParameters: KvV2DestroyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2DestroyVersionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2ListRaw(requestParameters: KvV2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV2List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2List(requestParameters: KvV2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV2ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadRaw(requestParameters: KvV2ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Read().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Read(requestParameters: KvV2ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadResponse> {
        const response = await this.kvV2ReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfigurationRaw(requestParameters: KvV2ReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadConfigurationResponse>> {
        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfiguration(requestParameters: KvV2ReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadConfigurationResponse> {
        const response = await this.kvV2ReadConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadMetadataRaw(requestParameters: KvV2ReadMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadMetadataResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadMetadataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadMetadata(requestParameters: KvV2ReadMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadMetadataResponse> {
        const response = await this.kvV2ReadMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadSubkeysRaw(requestParameters: KvV2ReadSubkeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadSubkeysResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/subkeys/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadSubkeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadSubkeys(requestParameters: KvV2ReadSubkeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadSubkeysResponse> {
        const response = await this.kvV2ReadSubkeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2UndeleteVersionsRaw(requestParameters: KvV2UndeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['kvV2UndeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2UndeleteVersionsRequest',
                'Required parameter "kvV2UndeleteVersionsRequest" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/undelete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2UndeleteVersionsRequestToJSON(requestParameters['kvV2UndeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2UndeleteVersions(requestParameters: KvV2UndeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2UndeleteVersionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async kvV2WriteRaw(requestParameters: KvV2WriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2WriteResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['kvV2WriteRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2WriteRequest',
                'Required parameter "kvV2WriteRequest" was null or undefined when calling kvV2Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteRequestToJSON(requestParameters['kvV2WriteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2WriteResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Write(requestParameters: KvV2WriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2WriteResponse> {
        const response = await this.kvV2WriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2WriteMetadataRaw(requestParameters: KvV2WriteMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['kvV2WriteMetadataRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2WriteMetadataRequest',
                'Required parameter "kvV2WriteMetadataRequest" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteMetadataRequestToJSON(requestParameters['kvV2WriteMetadataRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2WriteMetadata(requestParameters: KvV2WriteMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.kvV2WriteMetadataRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapConfigureRaw(requestParameters: LdapConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapConfigure().'
            );
        }

        if (requestParameters['ldapConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapConfigureRequest',
                'Required parameter "ldapConfigureRequest" was null or undefined when calling ldapConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapConfigureRequestToJSON(requestParameters['ldapConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapConfigure(requestParameters: LdapConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapDeleteConfigurationRaw(requestParameters: LdapDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteConfiguration(requestParameters: LdapDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapDeleteDynamicRoleRaw(requestParameters: LdapDeleteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteDynamicRole(requestParameters: LdapDeleteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapDeleteDynamicRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapDeleteStaticRoleRaw(requestParameters: LdapDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteStaticRole(requestParameters: LdapDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapDeleteStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckInRaw(requestParameters: LdapLibraryCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['ldapLibraryCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryCheckInRequest',
                'Required parameter "ldapLibraryCheckInRequest" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckInRequestToJSON(requestParameters['ldapLibraryCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckIn(requestParameters: LdapLibraryCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryCheckInRaw(requestParameters, initOverrides);
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOutRaw(requestParameters: LdapLibraryCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['ldapLibraryCheckOutRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryCheckOutRequest',
                'Required parameter "ldapLibraryCheckOutRequest" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-out`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckOutRequestToJSON(requestParameters['ldapLibraryCheckOutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOut(requestParameters: LdapLibraryCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryCheckOutRaw(requestParameters, initOverrides);
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatusRaw(requestParameters: LdapLibraryCheckStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatus(requestParameters: LdapLibraryCheckStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryCheckStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigureRaw(requestParameters: LdapLibraryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['ldapLibraryConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryConfigureRequest',
                'Required parameter "ldapLibraryConfigureRequest" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryConfigureRequestToJSON(requestParameters['ldapLibraryConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigure(requestParameters: LdapLibraryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDeleteRaw(requestParameters: LdapLibraryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDelete(requestParameters: LdapLibraryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckInRaw(requestParameters: LdapLibraryForceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['ldapLibraryForceCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryForceCheckInRequest',
                'Required parameter "ldapLibraryForceCheckInRequest" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/manage/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryForceCheckInRequestToJSON(requestParameters['ldapLibraryForceCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckIn(requestParameters: LdapLibraryForceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryForceCheckInRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapLibraryListRaw(requestParameters: LdapLibraryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryList(requestParameters: LdapLibraryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPathRaw(requestParameters: LdapLibraryListLibraryPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath(requestParameters: LdapLibraryListLibraryPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPath_1Raw(requestParameters: LdapLibraryListLibraryPath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath_1(requestParameters: LdapLibraryListLibraryPath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPath_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read a library set.
     */
    async ldapLibraryReadRaw(requestParameters: LdapLibraryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryRead().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read a library set.
     */
    async ldapLibraryRead(requestParameters: LdapLibraryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapLibraryReadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapListDynamicRolesRaw(requestParameters: LdapListDynamicRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListDynamicRoles(requestParameters: LdapListDynamicRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListDynamicRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePathRaw(requestParameters: LdapListRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath(requestParameters: LdapListRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePath_2Raw(requestParameters: LdapListRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath_2(requestParameters: LdapListRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePath_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePathRaw(requestParameters: LdapListStaticRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath(requestParameters: LdapListStaticRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePath_3Raw(requestParameters: LdapListStaticRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath_3(requestParameters: LdapListStaticRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePath_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolesRaw(requestParameters: LdapListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRoles(requestParameters: LdapListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadConfigurationRaw(requestParameters: LdapReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadConfiguration(requestParameters: LdapReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapReadDynamicRoleRaw(requestParameters: LdapReadDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadDynamicRole(requestParameters: LdapReadDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadDynamicRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapReadStaticRoleRaw(requestParameters: LdapReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadStaticRole(requestParameters: LdapReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapReadStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapRequestDynamicRoleCredentialsRaw(requestParameters: LdapRequestDynamicRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestDynamicRoleCredentials(requestParameters: LdapRequestDynamicRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapRequestDynamicRoleCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapRequestStaticRoleCredentialsRaw(requestParameters: LdapRequestStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-cred/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestStaticRoleCredentials(requestParameters: LdapRequestStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapRequestStaticRoleCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapRotateRootCredentialsRaw(requestParameters: LdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateRootCredentials(requestParameters: LdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapRotateRootCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapRotateStaticRoleRaw(requestParameters: LdapRotateStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['ldapRotateStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapRotateStaticRoleRequest',
                'Required parameter "ldapRotateStaticRoleRequest" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapRotateStaticRoleRequestToJSON(requestParameters['ldapRotateStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateStaticRole(requestParameters: LdapRotateStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapRotateStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapWriteDynamicRoleRaw(requestParameters: LdapWriteDynamicRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['ldapWriteDynamicRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteDynamicRoleRequest',
                'Required parameter "ldapWriteDynamicRoleRequest" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteDynamicRoleRequestToJSON(requestParameters['ldapWriteDynamicRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteDynamicRole(requestParameters: LdapWriteDynamicRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapWriteDynamicRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ldapWriteStaticRoleRaw(requestParameters: LdapWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['ldapWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteStaticRoleRequest',
                'Required parameter "ldapWriteStaticRoleRequest" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteStaticRoleRequestToJSON(requestParameters['ldapWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteStaticRole(requestParameters: LdapWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ldapWriteStaticRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mongoDbAtlasConfigureRaw(requestParameters: MongoDbAtlasConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        if (requestParameters['mongoDbAtlasConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'mongoDbAtlasConfigureRequest',
                'Required parameter "mongoDbAtlasConfigureRequest" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasConfigureRequestToJSON(requestParameters['mongoDbAtlasConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasConfigure(requestParameters: MongoDbAtlasConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasConfigureRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRoleRaw(requestParameters: MongoDbAtlasDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRole(requestParameters: MongoDbAtlasDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentialsRaw(requestParameters: MongoDbAtlasGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials(requestParameters: MongoDbAtlasGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2Raw(requestParameters: MongoDbAtlasGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2(requestParameters: MongoDbAtlasGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasGenerateCredentials2Raw(requestParameters, initOverrides);
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRolesRaw(requestParameters: MongoDbAtlasListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRoles(requestParameters: MongoDbAtlasListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mongoDbAtlasListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasReadConfigurationRaw(requestParameters: MongoDbAtlasReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasReadConfiguration(requestParameters: MongoDbAtlasReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRoleRaw(requestParameters: MongoDbAtlasReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRole(requestParameters: MongoDbAtlasReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRoleRaw(requestParameters: MongoDbAtlasWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['mongoDbAtlasWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'mongoDbAtlasWriteRoleRequest',
                'Required parameter "mongoDbAtlasWriteRoleRequest" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasWriteRoleRequestToJSON(requestParameters['mongoDbAtlasWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRole(requestParameters: MongoDbAtlasWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mongoDbAtlasWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadConfigureAccessRaw(requestParameters: NomadConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        if (requestParameters['nomadConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadConfigureAccessRequest',
                'Required parameter "nomadConfigureAccessRequest" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureAccessRequestToJSON(requestParameters['nomadConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureAccess(requestParameters: NomadConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadConfigureAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadConfigureLeaseRaw(requestParameters: NomadConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureLease().'
            );
        }

        if (requestParameters['nomadConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadConfigureLeaseRequest',
                'Required parameter "nomadConfigureLeaseRequest" was null or undefined when calling nomadConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureLeaseRequestToJSON(requestParameters['nomadConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureLease(requestParameters: NomadConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadConfigureLeaseRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadDeleteAccessConfigurationRaw(requestParameters: NomadDeleteAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteAccessConfiguration(requestParameters: NomadDeleteAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadDeleteAccessConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadDeleteLeaseConfigurationRaw(requestParameters: NomadDeleteLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteLeaseConfiguration(requestParameters: NomadDeleteLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadDeleteLeaseConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadDeleteRoleRaw(requestParameters: NomadDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadDeleteRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteRole(requestParameters: NomadDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadGenerateCredentialsRaw(requestParameters: NomadGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadGenerateCredentials(requestParameters: NomadGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadListRolesRaw(requestParameters: NomadListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling nomadListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async nomadListRoles(requestParameters: NomadListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.nomadListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadAccessConfigurationRaw(requestParameters: NomadReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadAccessConfiguration(requestParameters: NomadReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadReadAccessConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadReadLeaseConfigurationRaw(requestParameters: NomadReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadLeaseConfiguration(requestParameters: NomadReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadReadLeaseConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadReadRoleRaw(requestParameters: NomadReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadReadRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadRole(requestParameters: NomadReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nomadWriteRoleRaw(requestParameters: NomadWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['nomadWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadWriteRoleRequest',
                'Required parameter "nomadWriteRoleRequest" was null or undefined when calling nomadWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadWriteRoleRequestToJSON(requestParameters['nomadWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadWriteRole(requestParameters: NomadWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nomadWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiConfigureAcmeRaw(requestParameters: PkiConfigureAcmeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        if (requestParameters['pkiConfigureAcmeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureAcmeRequest',
                'Required parameter "pkiConfigureAcmeRequest" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAcmeRequestToJSON(requestParameters['pkiConfigureAcmeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureAcme(requestParameters: PkiConfigureAcmeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiConfigureAcmeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiConfigureAutoTidyRaw(requestParameters: PkiConfigureAutoTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureAutoTidyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        if (requestParameters['pkiConfigureAutoTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureAutoTidyRequest',
                'Required parameter "pkiConfigureAutoTidyRequest" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAutoTidyRequestToJSON(requestParameters['pkiConfigureAutoTidyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureAutoTidyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureAutoTidy(requestParameters: PkiConfigureAutoTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureAutoTidyResponse> {
        const response = await this.pkiConfigureAutoTidyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCaRaw(requestParameters: PkiConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCaResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCa().'
            );
        }

        if (requestParameters['pkiConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureCaRequest',
                'Required parameter "pkiConfigureCaRequest" was null or undefined when calling pkiConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCaRequestToJSON(requestParameters['pkiConfigureCaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCa(requestParameters: PkiConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCaResponse> {
        const response = await this.pkiConfigureCaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureClusterRaw(requestParameters: PkiConfigureClusterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureClusterResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        if (requestParameters['pkiConfigureClusterRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureClusterRequest',
                'Required parameter "pkiConfigureClusterRequest" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureClusterRequestToJSON(requestParameters['pkiConfigureClusterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureClusterResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCluster(requestParameters: PkiConfigureClusterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureClusterResponse> {
        const response = await this.pkiConfigureClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCrlRaw(requestParameters: PkiConfigureCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        if (requestParameters['pkiConfigureCrlRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureCrlRequest',
                'Required parameter "pkiConfigureCrlRequest" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCrlRequestToJSON(requestParameters['pkiConfigureCrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCrl(requestParameters: PkiConfigureCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCrlResponse> {
        const response = await this.pkiConfigureCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureIssuersRaw(requestParameters: PkiConfigureIssuersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureIssuersResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        if (requestParameters['pkiConfigureIssuersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureIssuersRequest',
                'Required parameter "pkiConfigureIssuersRequest" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureIssuersRequestToJSON(requestParameters['pkiConfigureIssuersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureIssuers(requestParameters: PkiConfigureIssuersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureIssuersResponse> {
        const response = await this.pkiConfigureIssuersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureKeysRaw(requestParameters: PkiConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        if (requestParameters['pkiConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureKeysRequest',
                'Required parameter "pkiConfigureKeysRequest" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureKeysRequestToJSON(requestParameters['pkiConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureKeys(requestParameters: PkiConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureKeysResponse> {
        const response = await this.pkiConfigureKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureUrlsRaw(requestParameters: PkiConfigureUrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureUrlsResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        if (requestParameters['pkiConfigureUrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureUrlsRequest',
                'Required parameter "pkiConfigureUrlsRequest" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureUrlsRequestToJSON(requestParameters['pkiConfigureUrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureUrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureUrls(requestParameters: PkiConfigureUrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureUrlsResponse> {
        const response = await this.pkiConfigureUrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiCrossSignIntermediateRaw(requestParameters: PkiCrossSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiCrossSignIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        if (requestParameters['pkiCrossSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiCrossSignIntermediateRequest',
                'Required parameter "pkiCrossSignIntermediateRequest" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/cross-sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiCrossSignIntermediateRequestToJSON(requestParameters['pkiCrossSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiCrossSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiCrossSignIntermediate(requestParameters: PkiCrossSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiCrossSignIntermediateResponse> {
        const response = await this.pkiCrossSignIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteEabKeyRaw(requestParameters: PkiDeleteEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/{key_id}`.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteEabKey(requestParameters: PkiDeleteEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiDeleteEabKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiDeleteIssuerRaw(requestParameters: PkiDeleteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteIssuer(requestParameters: PkiDeleteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiDeleteIssuerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiDeleteKeyRaw(requestParameters: PkiDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiDeleteKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteKey(requestParameters: PkiDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiDeleteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiDeleteRoleRaw(requestParameters: PkiDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiDeleteRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRole(requestParameters: PkiDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiDeleteRootRaw(requestParameters: PkiDeleteRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/root`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRoot(requestParameters: PkiDeleteRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiDeleteRootRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiGenerateEabKeyRaw(requestParameters: PkiGenerateEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey(requestParameters: PkiGenerateEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerRaw(requestParameters: PkiGenerateEabKeyForIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer(requestParameters: PkiGenerateEabKeyForIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRoleRaw(requestParameters: PkiGenerateEabKeyForIssuerAndRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerAndRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRole(requestParameters: PkiGenerateEabKeyForIssuerAndRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerAndRoleResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerAndRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForRoleRaw(requestParameters: PkiGenerateEabKeyForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-eab`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForRole(requestParameters: PkiGenerateEabKeyForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForRoleResponse> {
        const response = await this.pkiGenerateEabKeyForRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateExportedKeyRaw(requestParameters: PkiGenerateExportedKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateExportedKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        if (requestParameters['pkiGenerateExportedKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateExportedKeyRequest',
                'Required parameter "pkiGenerateExportedKeyRequest" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/exported`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateExportedKeyRequestToJSON(requestParameters['pkiGenerateExportedKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateExportedKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateExportedKey(requestParameters: PkiGenerateExportedKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateExportedKeyResponse> {
        const response = await this.pkiGenerateExportedKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateIntermediateRaw(requestParameters: PkiGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateIntermediateRequest',
                'Required parameter "pkiGenerateIntermediateRequest" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateIntermediateRequestToJSON(requestParameters['pkiGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateIntermediate(requestParameters: PkiGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateIntermediateResponse> {
        const response = await this.pkiGenerateIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateInternalKeyRaw(requestParameters: PkiGenerateInternalKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateInternalKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        if (requestParameters['pkiGenerateInternalKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateInternalKeyRequest',
                'Required parameter "pkiGenerateInternalKeyRequest" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/internal`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateInternalKeyRequestToJSON(requestParameters['pkiGenerateInternalKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateInternalKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateInternalKey(requestParameters: PkiGenerateInternalKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateInternalKeyResponse> {
        const response = await this.pkiGenerateInternalKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateKmsKeyRaw(requestParameters: PkiGenerateKmsKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateKmsKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        if (requestParameters['pkiGenerateKmsKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateKmsKeyRequest',
                'Required parameter "pkiGenerateKmsKeyRequest" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/kms`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateKmsKeyRequestToJSON(requestParameters['pkiGenerateKmsKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateKmsKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateKmsKey(requestParameters: PkiGenerateKmsKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateKmsKeyResponse> {
        const response = await this.pkiGenerateKmsKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateRootRaw(requestParameters: PkiGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['pkiGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateRootRequest',
                'Required parameter "pkiGenerateRootRequest" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateRootRequestToJSON(requestParameters['pkiGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateRoot(requestParameters: PkiGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateRootResponse> {
        const response = await this.pkiGenerateRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiImportKeyRaw(requestParameters: PkiImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiImportKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiImportKey().'
            );
        }

        if (requestParameters['pkiImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiImportKeyRequest',
                'Required parameter "pkiImportKeyRequest" was null or undefined when calling pkiImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/import`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiImportKeyRequestToJSON(requestParameters['pkiImportKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiImportKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiImportKey(requestParameters: PkiImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiImportKeyResponse> {
        const response = await this.pkiImportKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssueWithRoleRaw(requestParameters: PkiIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssueWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['pkiIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssueWithRoleRequest',
                'Required parameter "pkiIssueWithRoleRequest" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssueWithRoleRequestToJSON(requestParameters['pkiIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssueWithRole(requestParameters: PkiIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssueWithRoleResponse> {
        const response = await this.pkiIssueWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerIssueWithRoleRaw(requestParameters: PkiIssuerIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerIssueWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['pkiIssuerIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerIssueWithRoleRequest',
                'Required parameter "pkiIssuerIssueWithRoleRequest" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/issue/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerIssueWithRoleRequestToJSON(requestParameters['pkiIssuerIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerIssueWithRole(requestParameters: PkiIssuerIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerIssueWithRoleResponse> {
        const response = await this.pkiIssuerIssueWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlRaw(requestParameters: PkiIssuerReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrl(requestParameters: PkiIssuerReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlResponse> {
        const response = await this.pkiIssuerReadCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaRaw(requestParameters: PkiIssuerReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDelta(requestParameters: PkiIssuerReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaResponse> {
        const response = await this.pkiIssuerReadCrlDeltaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDerRaw(requestParameters: PkiIssuerReadCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDer(requestParameters: PkiIssuerReadCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaDerResponse> {
        const response = await this.pkiIssuerReadCrlDeltaDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPemRaw(requestParameters: PkiIssuerReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPem(requestParameters: PkiIssuerReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaPemResponse> {
        const response = await this.pkiIssuerReadCrlDeltaPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDerRaw(requestParameters: PkiIssuerReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDer(requestParameters: PkiIssuerReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDerResponse> {
        const response = await this.pkiIssuerReadCrlDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlPemRaw(requestParameters: PkiIssuerReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlPem(requestParameters: PkiIssuerReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlPemResponse> {
        const response = await this.pkiIssuerReadCrlPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerResignCrlsRaw(requestParameters: PkiIssuerResignCrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerResignCrlsResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['pkiIssuerResignCrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerResignCrlsRequest',
                'Required parameter "pkiIssuerResignCrlsRequest" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/resign-crls`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerResignCrlsRequestToJSON(requestParameters['pkiIssuerResignCrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerResignCrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerResignCrls(requestParameters: PkiIssuerResignCrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerResignCrlsResponse> {
        const response = await this.pkiIssuerResignCrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignIntermediateRaw(requestParameters: PkiIssuerSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignIntermediateResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['pkiIssuerSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignIntermediateRequest',
                'Required parameter "pkiIssuerSignIntermediateRequest" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignIntermediateRequestToJSON(requestParameters['pkiIssuerSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignIntermediate(requestParameters: PkiIssuerSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignIntermediateResponse> {
        const response = await this.pkiIssuerSignIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignRevocationListRaw(requestParameters: PkiIssuerSignRevocationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignRevocationListResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['pkiIssuerSignRevocationListRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignRevocationListRequest',
                'Required parameter "pkiIssuerSignRevocationListRequest" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-revocation-list`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignRevocationListRequestToJSON(requestParameters['pkiIssuerSignRevocationListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignRevocationListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignRevocationList(requestParameters: PkiIssuerSignRevocationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignRevocationListResponse> {
        const response = await this.pkiIssuerSignRevocationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignSelfIssuedRaw(requestParameters: PkiIssuerSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignSelfIssuedResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['pkiIssuerSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignSelfIssuedRequest',
                'Required parameter "pkiIssuerSignSelfIssuedRequest" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-self-issued`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignSelfIssuedRequestToJSON(requestParameters['pkiIssuerSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignSelfIssued(requestParameters: PkiIssuerSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignSelfIssuedResponse> {
        const response = await this.pkiIssuerSignSelfIssuedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimRaw(requestParameters: PkiIssuerSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['pkiIssuerSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignVerbatimRequest',
                'Required parameter "pkiIssuerSignVerbatimRequest" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimRequestToJSON(requestParameters['pkiIssuerSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatim(requestParameters: PkiIssuerSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimResponse> {
        const response = await this.pkiIssuerSignVerbatimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRoleRaw(requestParameters: PkiIssuerSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiIssuerSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignVerbatimWithRoleRequest',
                'Required parameter "pkiIssuerSignVerbatimWithRoleRequest" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimWithRoleRequestToJSON(requestParameters['pkiIssuerSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRole(requestParameters: PkiIssuerSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimWithRoleResponse> {
        const response = await this.pkiIssuerSignVerbatimWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignWithRoleRaw(requestParameters: PkiIssuerSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['pkiIssuerSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignWithRoleRequest',
                'Required parameter "pkiIssuerSignWithRoleRequest" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignWithRoleRequestToJSON(requestParameters['pkiIssuerSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignWithRole(requestParameters: PkiIssuerSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignWithRoleResponse> {
        const response = await this.pkiIssuerSignWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateIntermediateRaw(requestParameters: PkiIssuersGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiIssuersGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersGenerateIntermediateRequest',
                'Required parameter "pkiIssuersGenerateIntermediateRequest" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/intermediate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateIntermediateRequestToJSON(requestParameters['pkiIssuersGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateIntermediate(requestParameters: PkiIssuersGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateIntermediateResponse> {
        const response = await this.pkiIssuersGenerateIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateRootRaw(requestParameters: PkiIssuersGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['pkiIssuersGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersGenerateRootRequest',
                'Required parameter "pkiIssuersGenerateRootRequest" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/root/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateRootRequestToJSON(requestParameters['pkiIssuersGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateRoot(requestParameters: PkiIssuersGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateRootResponse> {
        const response = await this.pkiIssuersGenerateRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportBundleRaw(requestParameters: PkiIssuersImportBundleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportBundleResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        if (requestParameters['pkiIssuersImportBundleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersImportBundleRequest',
                'Required parameter "pkiIssuersImportBundleRequest" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/bundle`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportBundleRequestToJSON(requestParameters['pkiIssuersImportBundleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportBundleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportBundle(requestParameters: PkiIssuersImportBundleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportBundleResponse> {
        const response = await this.pkiIssuersImportBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportCertRaw(requestParameters: PkiIssuersImportCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportCertResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        if (requestParameters['pkiIssuersImportCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersImportCertRequest',
                'Required parameter "pkiIssuersImportCertRequest" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportCertRequestToJSON(requestParameters['pkiIssuersImportCertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportCert(requestParameters: PkiIssuersImportCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportCertResponse> {
        const response = await this.pkiIssuersImportCertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListAcmeAccountKeysRaw(requestParameters: PkiListAcmeAccountKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListAcmeAccountKeys(requestParameters: PkiListAcmeAccountKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListAcmeAccountKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertsRaw(requestParameters: PkiListCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCerts(requestParameters: PkiListCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListEabKeysRaw(requestParameters: PkiListEabKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListEabKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListEabKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListEabKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListEabKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListEabKeys(requestParameters: PkiListEabKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListEabKeysResponse> {
        const response = await this.pkiListEabKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListIssuersRaw(requestParameters: PkiListIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListIssuersResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListIssuers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListIssuers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListIssuers(requestParameters: PkiListIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListIssuersResponse> {
        const response = await this.pkiListIssuersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListKeysRaw(requestParameters: PkiListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/keys/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListKeys(requestParameters: PkiListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListKeysResponse> {
        const response = await this.pkiListKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRevokedCertsRaw(requestParameters: PkiListRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRevokedCerts(requestParameters: PkiListRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRevokedCertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRolesRaw(requestParameters: PkiListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRoles(requestParameters: PkiListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryOcspRaw(requestParameters: PkiQueryOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcsp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcsp(requestParameters: PkiQueryOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiQueryOcspRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiQueryOcspWithGetReqRaw(requestParameters: PkiQueryOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcspWithGetReq(requestParameters: PkiQueryOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiQueryOcspWithGetReqRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadAcmeConfigurationRaw(requestParameters: PkiReadAcmeConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeConfiguration(requestParameters: PkiReadAcmeConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadAcmeConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadAcmeDirectoryRaw(requestParameters: PkiReadAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeDirectory(requestParameters: PkiReadAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadAcmeDirectoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadAcmeKeyIdRaw(requestParameters: PkiReadAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeKeyId(requestParameters: PkiReadAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadAcmeKeyIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadAcmeNewNonceRaw(requestParameters: PkiReadAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeNewNonce(requestParameters: PkiReadAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadAcmeNewNonceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadAutoTidyConfigurationRaw(requestParameters: PkiReadAutoTidyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadAutoTidyConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAutoTidyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadAutoTidyConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadAutoTidyConfiguration(requestParameters: PkiReadAutoTidyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadAutoTidyConfigurationResponse> {
        const response = await this.pkiReadAutoTidyConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaChainPemRaw(requestParameters: PkiReadCaChainPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaChainPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaChainPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaChainPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaChainPem(requestParameters: PkiReadCaChainPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaChainPemResponse> {
        const response = await this.pkiReadCaChainPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaDerRaw(requestParameters: PkiReadCaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaDerResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaDer(requestParameters: PkiReadCaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaDerResponse> {
        const response = await this.pkiReadCaDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaPemRaw(requestParameters: PkiReadCaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaPem(requestParameters: PkiReadCaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaPemResponse> {
        const response = await this.pkiReadCaPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRaw(requestParameters: PkiReadCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCert(requestParameters: PkiReadCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertResponse> {
        const response = await this.pkiReadCertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCaChainRaw(requestParameters: PkiReadCertCaChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCaChainResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCaChain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCaChainResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCaChain(requestParameters: PkiReadCertCaChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCaChainResponse> {
        const response = await this.pkiReadCertCaChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCrlRaw(requestParameters: PkiReadCertCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCrl(requestParameters: PkiReadCertCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCrlResponse> {
        const response = await this.pkiReadCertCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertDeltaCrlRaw(requestParameters: PkiReadCertDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertDeltaCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertDeltaCrl(requestParameters: PkiReadCertDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertDeltaCrlResponse> {
        const response = await this.pkiReadCertDeltaCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawDerRaw(requestParameters: PkiReadCertRawDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawDerResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawDer(requestParameters: PkiReadCertRawDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawDerResponse> {
        const response = await this.pkiReadCertRawDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawPemRaw(requestParameters: PkiReadCertRawPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawPemResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw/pem`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawPem(requestParameters: PkiReadCertRawPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawPemResponse> {
        const response = await this.pkiReadCertRawPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadClusterConfigurationRaw(requestParameters: PkiReadClusterConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadClusterConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadClusterConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadClusterConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadClusterConfiguration(requestParameters: PkiReadClusterConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadClusterConfigurationResponse> {
        const response = await this.pkiReadClusterConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlConfigurationRaw(requestParameters: PkiReadCrlConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlConfiguration(requestParameters: PkiReadCrlConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlConfigurationResponse> {
        const response = await this.pkiReadCrlConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaRaw(requestParameters: PkiReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDelta(requestParameters: PkiReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaResponse> {
        const response = await this.pkiReadCrlDeltaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaPemRaw(requestParameters: PkiReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDeltaPem(requestParameters: PkiReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaPemResponse> {
        const response = await this.pkiReadCrlDeltaPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDerRaw(requestParameters: PkiReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDerResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDer(requestParameters: PkiReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDerResponse> {
        const response = await this.pkiReadCrlDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlPemRaw(requestParameters: PkiReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlPem(requestParameters: PkiReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlPemResponse> {
        const response = await this.pkiReadCrlPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerRaw(requestParameters: PkiReadIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuer(requestParameters: PkiReadIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerResponse> {
        const response = await this.pkiReadIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerDerRaw(requestParameters: PkiReadIssuerDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerDer(requestParameters: PkiReadIssuerDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerDerResponse> {
        const response = await this.pkiReadIssuerDerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectoryRaw(requestParameters: PkiReadIssuerIssuerRefAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectory(requestParameters: PkiReadIssuerIssuerRefAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadIssuerIssuerRefAcmeDirectoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonceRaw(requestParameters: PkiReadIssuerIssuerRefAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonce(requestParameters: PkiReadIssuerIssuerRefAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadIssuerIssuerRefAcmeNewNonceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw(requestParameters: PkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectory(requestParameters: PkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw(requestParameters: PkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce(requestParameters: PkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadIssuerJsonRaw(requestParameters: PkiReadIssuerJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerJsonResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/json`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerJsonResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerJson(requestParameters: PkiReadIssuerJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerJsonResponse> {
        const response = await this.pkiReadIssuerJsonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerPemRaw(requestParameters: PkiReadIssuerPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerPem(requestParameters: PkiReadIssuerPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerPemResponse> {
        const response = await this.pkiReadIssuerPemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuersConfigurationRaw(requestParameters: PkiReadIssuersConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuersConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuersConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuersConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuersConfiguration(requestParameters: PkiReadIssuersConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuersConfigurationResponse> {
        const response = await this.pkiReadIssuersConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeyRaw(requestParameters: PkiReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeyResponse>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiReadKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKey(requestParameters: PkiReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeyResponse> {
        const response = await this.pkiReadKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeysConfigurationRaw(requestParameters: PkiReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeysConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeysConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKeysConfiguration(requestParameters: PkiReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeysConfigurationResponse> {
        const response = await this.pkiReadKeysConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRoleRaw(requestParameters: PkiReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiReadRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadRole(requestParameters: PkiReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadRoleResponse> {
        const response = await this.pkiReadRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectoryRaw(requestParameters: PkiReadRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/directory`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectory(requestParameters: PkiReadRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadRolesRoleAcmeDirectoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonceRaw(requestParameters: PkiReadRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-nonce`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonce(requestParameters: PkiReadRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiReadRolesRoleAcmeNewNonceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiReadUrlsConfigurationRaw(requestParameters: PkiReadUrlsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadUrlsConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUrlsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadUrlsConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadUrlsConfiguration(requestParameters: PkiReadUrlsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadUrlsConfigurationResponse> {
        const response = await this.pkiReadUrlsConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReplaceRootRaw(requestParameters: PkiReplaceRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReplaceRootResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        if (requestParameters['pkiReplaceRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiReplaceRootRequest',
                'Required parameter "pkiReplaceRootRequest" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/replace`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiReplaceRootRequestToJSON(requestParameters['pkiReplaceRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReplaceRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReplaceRoot(requestParameters: PkiReplaceRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReplaceRootResponse> {
        const response = await this.pkiReplaceRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeRaw(requestParameters: PkiRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevoke().'
            );
        }

        if (requestParameters['pkiRevokeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRevokeRequest',
                'Required parameter "pkiRevokeRequest" was null or undefined when calling pkiRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeRequestToJSON(requestParameters['pkiRevokeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevoke(requestParameters: PkiRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeResponse> {
        const response = await this.pkiRevokeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeIssuerRaw(requestParameters: PkiRevokeIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/revoke`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeIssuer(requestParameters: PkiRevokeIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeIssuerResponse> {
        const response = await this.pkiRevokeIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeWithKeyRaw(requestParameters: PkiRevokeWithKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeWithKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        if (requestParameters['pkiRevokeWithKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRevokeWithKeyRequest',
                'Required parameter "pkiRevokeWithKeyRequest" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke-with-key`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeWithKeyRequestToJSON(requestParameters['pkiRevokeWithKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeWithKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeWithKey(requestParameters: PkiRevokeWithKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeWithKeyResponse> {
        const response = await this.pkiRevokeWithKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignIntermediateRaw(requestParameters: PkiRootSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        if (requestParameters['pkiRootSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRootSignIntermediateRequest',
                'Required parameter "pkiRootSignIntermediateRequest" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignIntermediateRequestToJSON(requestParameters['pkiRootSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignIntermediate(requestParameters: PkiRootSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignIntermediateResponse> {
        const response = await this.pkiRootSignIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignSelfIssuedRaw(requestParameters: PkiRootSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignSelfIssuedResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        if (requestParameters['pkiRootSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRootSignSelfIssuedRequest',
                'Required parameter "pkiRootSignSelfIssuedRequest" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-self-issued`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignSelfIssuedRequestToJSON(requestParameters['pkiRootSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignSelfIssued(requestParameters: PkiRootSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignSelfIssuedResponse> {
        const response = await this.pkiRootSignSelfIssuedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateCrlRaw(requestParameters: PkiRotateCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateCrl(requestParameters: PkiRotateCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateCrlResponse> {
        const response = await this.pkiRotateCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateDeltaCrlRaw(requestParameters: PkiRotateDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateDeltaCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate-delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateDeltaCrl(requestParameters: PkiRotateDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateDeltaCrlResponse> {
        const response = await this.pkiRotateDeltaCrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateRootRaw(requestParameters: PkiRotateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['pkiRotateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRotateRootRequest',
                'Required parameter "pkiRotateRootRequest" was null or undefined when calling pkiRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/rotate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRotateRootRequestToJSON(requestParameters['pkiRotateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateRoot(requestParameters: PkiRotateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateRootResponse> {
        const response = await this.pkiRotateRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSetSignedIntermediateRaw(requestParameters: PkiSetSignedIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSetSignedIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        if (requestParameters['pkiSetSignedIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSetSignedIntermediateRequest',
                'Required parameter "pkiSetSignedIntermediateRequest" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/set-signed`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSetSignedIntermediateRequestToJSON(requestParameters['pkiSetSignedIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSetSignedIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSetSignedIntermediate(requestParameters: PkiSetSignedIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSetSignedIntermediateResponse> {
        const response = await this.pkiSetSignedIntermediateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimRaw(requestParameters: PkiSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        if (requestParameters['pkiSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignVerbatimRequest',
                'Required parameter "pkiSignVerbatimRequest" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimRequestToJSON(requestParameters['pkiSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatim(requestParameters: PkiSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimResponse> {
        const response = await this.pkiSignVerbatimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimWithRoleRaw(requestParameters: PkiSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignVerbatimWithRoleRequest',
                'Required parameter "pkiSignVerbatimWithRoleRequest" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimWithRoleRequestToJSON(requestParameters['pkiSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatimWithRole(requestParameters: PkiSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimWithRoleResponse> {
        const response = await this.pkiSignVerbatimWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignWithRoleRaw(requestParameters: PkiSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['pkiSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignWithRoleRequest',
                'Required parameter "pkiSignWithRoleRequest" was null or undefined when calling pkiSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignWithRoleRequestToJSON(requestParameters['pkiSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignWithRole(requestParameters: PkiSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignWithRoleResponse> {
        const response = await this.pkiSignWithRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyRaw(requestParameters: PkiTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidy().'
            );
        }

        if (requestParameters['pkiTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiTidyRequest',
                'Required parameter "pkiTidyRequest" was null or undefined when calling pkiTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiTidyRequestToJSON(requestParameters['pkiTidyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiTidy(requestParameters: PkiTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiTidyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiTidyCancelRaw(requestParameters: PkiTidyCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyCancelResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-cancel`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyCancelResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyCancel(requestParameters: PkiTidyCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyCancelResponse> {
        const response = await this.pkiTidyCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyStatusRaw(requestParameters: PkiTidyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyStatusResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-status`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyStatus(requestParameters: PkiTidyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyStatusResponse> {
        const response = await this.pkiTidyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeAccountKidRaw(requestParameters: PkiWriteAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeAccountKidRequest',
                'Required parameter "pkiWriteAcmeAccountKidRequest" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAccountKidRequestToJSON(requestParameters['pkiWriteAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAccountKid(requestParameters: PkiWriteAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeAccountKidRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthIdRaw(requestParameters: PkiWriteAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthId(requestParameters: PkiWriteAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: PkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeType(requestParameters: PkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeKeyIdRaw(requestParameters: PkiWriteAcmeKeyIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['pkiWriteAcmeKeyIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeKeyIdRequest',
                'Required parameter "pkiWriteAcmeKeyIdRequest" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeKeyIdRequestToJSON(requestParameters['pkiWriteAcmeKeyIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeKeyId(requestParameters: PkiWriteAcmeKeyIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeKeyIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeNewAccountRaw(requestParameters: PkiWriteAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeNewAccountRequest',
                'Required parameter "pkiWriteAcmeNewAccountRequest" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewAccountRequestToJSON(requestParameters['pkiWriteAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewAccount(requestParameters: PkiWriteAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeNewAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeNewOrderRaw(requestParameters: PkiWriteAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeNewOrderRequest',
                'Required parameter "pkiWriteAcmeNewOrderRequest" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewOrderRequestToJSON(requestParameters['pkiWriteAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewOrder(requestParameters: PkiWriteAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeNewOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdRaw(requestParameters: PkiWriteAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderId(requestParameters: PkiWriteAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeOrderOrderIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCertRaw(requestParameters: PkiWriteAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCert(requestParameters: PkiWriteAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeOrderOrderIdCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalizeRaw(requestParameters: PkiWriteAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalize(requestParameters: PkiWriteAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeOrdersRaw(requestParameters: PkiWriteAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrdersRequest',
                'Required parameter "pkiWriteAcmeOrdersRequest" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrdersRequestToJSON(requestParameters['pkiWriteAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrders(requestParameters: PkiWriteAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeOrdersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteAcmeRevokeCertRaw(requestParameters: PkiWriteAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeRevokeCertRequest',
                'Required parameter "pkiWriteAcmeRevokeCertRequest" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeRevokeCert(requestParameters: PkiWriteAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteAcmeRevokeCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerRaw(requestParameters: PkiWriteIssuerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['pkiWriteIssuerRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerRequest',
                'Required parameter "pkiWriteIssuerRequest" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerRequestToJSON(requestParameters['pkiWriteIssuerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuer(requestParameters: PkiWriteIssuerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerResponse> {
        const response = await this.pkiWriteIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKidRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKid(requestParameters: PkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeAccountKidRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId(requestParameters: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType(requestParameters: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccountRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccount(requestParameters: PkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeNewAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrderRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrder(requestParameters: PkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeNewOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderId(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize(requestParameters: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrdersRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrders(requestParameters: PkiWriteIssuerIssuerRefAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeOrdersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCertRaw(requestParameters: PkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCert(requestParameters: PkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefAcmeRevokeCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrders(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert(requestParameters: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteKeyRaw(requestParameters: PkiWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteKeyResponse>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['pkiWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteKeyRequest',
                'Required parameter "pkiWriteKeyRequest" was null or undefined when calling pkiWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteKeyRequestToJSON(requestParameters['pkiWriteKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteKey(requestParameters: PkiWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteKeyResponse> {
        const response = await this.pkiWriteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRoleRaw(requestParameters: PkiWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['pkiWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRoleRequest',
                'Required parameter "pkiWriteRoleRequest" was null or undefined when calling pkiWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRoleRequestToJSON(requestParameters['pkiWriteRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteRole(requestParameters: PkiWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteRoleResponse> {
        const response = await this.pkiWriteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKidRaw(requestParameters: PkiWriteRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeAccountKidRequest',
                'Required parameter "pkiWriteRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAccountKidRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKid(requestParameters: PkiWriteRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeAccountKidRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: PkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthId(requestParameters: PkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType(requestParameters: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccountRaw(requestParameters: PkiWriteRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeNewAccountRequest',
                'Required parameter "pkiWriteRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-account`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewAccountRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccount(requestParameters: PkiWriteRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeNewAccountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrderRaw(requestParameters: PkiWriteRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeNewOrderRequest',
                'Required parameter "pkiWriteRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-order`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewOrderRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrder(requestParameters: PkiWriteRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeNewOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdRaw(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderId(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeOrderOrderIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCert(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeOrderOrderIdCertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalize(requestParameters: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrdersRaw(requestParameters: PkiWriteRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrdersRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/orders`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrdersRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrders(requestParameters: PkiWriteRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeOrdersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCertRaw(requestParameters: PkiWriteRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeRevokeCertRequest',
                'Required parameter "pkiWriteRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/revoke-cert`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCert(requestParameters: PkiWriteRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pkiWriteRolesRoleAcmeRevokeCertRaw(requestParameters, initOverrides);
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnectionRaw(requestParameters: RabbitMqConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        if (requestParameters['rabbitMqConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqConfigureConnectionRequest',
                'Required parameter "rabbitMqConfigureConnectionRequest" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/connection`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureConnectionRequestToJSON(requestParameters['rabbitMqConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnection(requestParameters: RabbitMqConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqConfigureConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async rabbitMqConfigureLeaseRaw(requestParameters: RabbitMqConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        if (requestParameters['rabbitMqConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqConfigureLeaseRequest',
                'Required parameter "rabbitMqConfigureLeaseRequest" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureLeaseRequestToJSON(requestParameters['rabbitMqConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqConfigureLease(requestParameters: RabbitMqConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqConfigureLeaseRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRoleRaw(requestParameters: RabbitMqDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRole(requestParameters: RabbitMqDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRolesRaw(requestParameters: RabbitMqListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRoles(requestParameters: RabbitMqListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.rabbitMqListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async rabbitMqReadLeaseConfigurationRaw(requestParameters: RabbitMqReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqReadLeaseConfiguration(requestParameters: RabbitMqReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqReadLeaseConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRoleRaw(requestParameters: RabbitMqReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRole(requestParameters: RabbitMqReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentialsRaw(requestParameters: RabbitMqRequestCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentials(requestParameters: RabbitMqRequestCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqRequestCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRoleRaw(requestParameters: RabbitMqWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['rabbitMqWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqWriteRoleRequest',
                'Required parameter "rabbitMqWriteRoleRequest" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqWriteRoleRequestToJSON(requestParameters['rabbitMqWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRole(requestParameters: RabbitMqWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rabbitMqWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshConfigureCaRaw(requestParameters: SshConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshConfigureCa().'
            );
        }

        if (requestParameters['sshConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'sshConfigureCaRequest',
                'Required parameter "sshConfigureCaRequest" was null or undefined when calling sshConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureCaRequestToJSON(requestParameters['sshConfigureCaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureCa(requestParameters: SshConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshConfigureCaRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshConfigureZeroAddressRaw(requestParameters: SshConfigureZeroAddressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        if (requestParameters['sshConfigureZeroAddressRequest'] == null) {
            throw new runtime.RequiredError(
                'sshConfigureZeroAddressRequest',
                'Required parameter "sshConfigureZeroAddressRequest" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureZeroAddressRequestToJSON(requestParameters['sshConfigureZeroAddressRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureZeroAddress(requestParameters: SshConfigureZeroAddressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshConfigureZeroAddressRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshDeleteCaConfigurationRaw(requestParameters: SshDeleteCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteCaConfiguration(requestParameters: SshDeleteCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshDeleteCaConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRoleRaw(requestParameters: SshDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshDeleteRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRole(requestParameters: SshDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshDeleteZeroAddressConfigurationRaw(requestParameters: SshDeleteZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteZeroAddressConfiguration(requestParameters: SshDeleteZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshDeleteZeroAddressConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentialsRaw(requestParameters: SshGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['sshGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'sshGenerateCredentialsRequest',
                'Required parameter "sshGenerateCredentialsRequest" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshGenerateCredentialsRequestToJSON(requestParameters['sshGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentials(requestParameters: SshGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshIssueCertificateRaw(requestParameters: SshIssueCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['sshIssueCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshIssueCertificateRequest',
                'Required parameter "sshIssueCertificateRequest" was null or undefined when calling sshIssueCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshIssueCertificateRequestToJSON(requestParameters['sshIssueCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshIssueCertificate(requestParameters: SshIssueCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshIssueCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRolesRaw(requestParameters: SshListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling sshListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRoles(requestParameters: SshListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.sshListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIpRaw(requestParameters: SshListRolesByIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshListRolesByIp().'
            );
        }

        if (requestParameters['sshListRolesByIpRequest'] == null) {
            throw new runtime.RequiredError(
                'sshListRolesByIpRequest',
                'Required parameter "sshListRolesByIpRequest" was null or undefined when calling sshListRolesByIp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/lookup`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshListRolesByIpRequestToJSON(requestParameters['sshListRolesByIpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIp(requestParameters: SshListRolesByIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshListRolesByIpRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshReadCaConfigurationRaw(requestParameters: SshReadCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadCaConfiguration(requestParameters: SshReadCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshReadCaConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKeyRaw(requestParameters: SshReadPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadPublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/public_key`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKey(requestParameters: SshReadPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshReadPublicKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRoleRaw(requestParameters: SshReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshReadRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRole(requestParameters: SshReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshReadZeroAddressConfigurationRaw(requestParameters: SshReadZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadZeroAddressConfiguration(requestParameters: SshReadZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshReadZeroAddressConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificateRaw(requestParameters: SshSignCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['sshSignCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshSignCertificateRequest',
                'Required parameter "sshSignCertificateRequest" was null or undefined when calling sshSignCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshSignCertificateRequestToJSON(requestParameters['sshSignCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificate(requestParameters: SshSignCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshSignCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeysRaw(requestParameters: SshTidyDynamicHostKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshTidyDynamicHostKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/tidy/dynamic-keys`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeys(requestParameters: SshTidyDynamicHostKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshTidyDynamicHostKeysRaw(requestParameters, initOverrides);
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtpRaw(requestParameters: SshVerifyOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshVerifyOtp().'
            );
        }

        if (requestParameters['sshVerifyOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'sshVerifyOtpRequest',
                'Required parameter "sshVerifyOtpRequest" was null or undefined when calling sshVerifyOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/verify`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshVerifyOtpRequestToJSON(requestParameters['sshVerifyOtpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtp(requestParameters: SshVerifyOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshVerifyOtpRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRoleRaw(requestParameters: SshWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['sshWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'sshWriteRoleRequest',
                'Required parameter "sshWriteRoleRequest" was null or undefined when calling sshWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshWriteRoleRequestToJSON(requestParameters['sshWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRole(requestParameters: SshWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudConfigureRaw(requestParameters: TerraformCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        if (requestParameters['terraformCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'terraformCloudConfigureRequest',
                'Required parameter "terraformCloudConfigureRequest" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudConfigureRequestToJSON(requestParameters['terraformCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudConfigure(requestParameters: TerraformCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudConfigureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudDeleteConfigurationRaw(requestParameters: TerraformCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteConfiguration(requestParameters: TerraformCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudDeleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudDeleteRoleRaw(requestParameters: TerraformCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteRole(requestParameters: TerraformCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudDeleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudGenerateCredentialsRaw(requestParameters: TerraformCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials(requestParameters: TerraformCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudGenerateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudGenerateCredentials2Raw(requestParameters: TerraformCloudGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials2(requestParameters: TerraformCloudGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudGenerateCredentials2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudListRolesRaw(requestParameters: TerraformCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async terraformCloudListRoles(requestParameters: TerraformCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.terraformCloudListRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudReadConfigurationRaw(requestParameters: TerraformCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadConfiguration(requestParameters: TerraformCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudReadConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudReadRoleRaw(requestParameters: TerraformCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadRole(requestParameters: TerraformCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudReadRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudRotateRoleRaw(requestParameters: TerraformCloudRotateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudRotateRole(requestParameters: TerraformCloudRotateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudRotateRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async terraformCloudWriteRoleRaw(requestParameters: TerraformCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['terraformCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'terraformCloudWriteRoleRequest',
                'Required parameter "terraformCloudWriteRoleRequest" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudWriteRoleRequestToJSON(requestParameters['terraformCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudWriteRole(requestParameters: TerraformCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terraformCloudWriteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async totpCreateKeyRaw(requestParameters: TotpCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['totpCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'totpCreateKeyRequest',
                'Required parameter "totpCreateKeyRequest" was null or undefined when calling totpCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpCreateKeyRequestToJSON(requestParameters['totpCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpCreateKey(requestParameters: TotpCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.totpCreateKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async totpDeleteKeyRaw(requestParameters: TotpDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpDeleteKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpDeleteKey(requestParameters: TotpDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.totpDeleteKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async totpGenerateCodeRaw(requestParameters: TotpGenerateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpGenerateCode().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpGenerateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpGenerateCode(requestParameters: TotpGenerateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.totpGenerateCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeysRaw(requestParameters: TotpListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling totpListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/`.replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeys(requestParameters: TotpListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.totpListKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpReadKeyRaw(requestParameters: TotpReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpReadKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpReadKey(requestParameters: TotpReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.totpReadKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async totpValidateCodeRaw(requestParameters: TotpValidateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['totpValidateCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'totpValidateCodeRequest',
                'Required parameter "totpValidateCodeRequest" was null or undefined when calling totpValidateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpValidateCodeRequestToJSON(requestParameters['totpValidateCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpValidateCode(requestParameters: TotpValidateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.totpValidateCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Backup the named key
     */
    async transitBackUpKeyRaw(requestParameters: TransitBackUpKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitBackUpKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitBackUpKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/backup/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Backup the named key
     */
    async transitBackUpKey(requestParameters: TransitBackUpKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitBackUpKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyRaw(requestParameters: TransitByokKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitByokKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKey(requestParameters: TransitByokKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitByokKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersionRaw(requestParameters: TransitByokKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}/{version}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersion(requestParameters: TransitByokKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitByokKeyVersionRaw(requestParameters, initOverrides);
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCacheRaw(requestParameters: TransitConfigureCacheOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureCache().'
            );
        }

        if (requestParameters['transitConfigureCacheRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureCacheRequest',
                'Required parameter "transitConfigureCacheRequest" was null or undefined when calling transitConfigureCache().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureCacheRequestToJSON(requestParameters['transitConfigureCacheRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCache(requestParameters: TransitConfigureCacheOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitConfigureCacheRaw(requestParameters, initOverrides);
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKeyRaw(requestParameters: TransitConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['transitConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureKeyRequest',
                'Required parameter "transitConfigureKeyRequest" was null or undefined when calling transitConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/config`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeyRequestToJSON(requestParameters['transitConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKey(requestParameters: TransitConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitConfigureKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitConfigureKeysRaw(requestParameters: TransitConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKeys().'
            );
        }

        if (requestParameters['transitConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureKeysRequest',
                'Required parameter "transitConfigureKeysRequest" was null or undefined when calling transitConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeysRequestToJSON(requestParameters['transitConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitConfigureKeys(requestParameters: TransitConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitConfigureKeysRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitCreateKeyRaw(requestParameters: TransitCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['transitCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitCreateKeyRequest',
                'Required parameter "transitCreateKeyRequest" was null or undefined when calling transitCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitCreateKeyRequestToJSON(requestParameters['transitCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitCreateKey(requestParameters: TransitCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitCreateKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecryptRaw(requestParameters: TransitDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['transitDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'transitDecryptRequest',
                'Required parameter "transitDecryptRequest" was null or undefined when calling transitDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/decrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitDecryptRequestToJSON(requestParameters['transitDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecrypt(requestParameters: TransitDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitDecryptRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitDeleteKeyRaw(requestParameters: TransitDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDeleteKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitDeleteKey(requestParameters: TransitDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitDeleteKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncryptRaw(requestParameters: TransitEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['transitEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'transitEncryptRequest',
                'Required parameter "transitEncryptRequest" was null or undefined when calling transitEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/encrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitEncryptRequestToJSON(requestParameters['transitEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncrypt(requestParameters: TransitEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitEncryptRaw(requestParameters, initOverrides);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyRaw(requestParameters: TransitExportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitExportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKey(requestParameters: TransitExportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitExportKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersionRaw(requestParameters: TransitExportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}/{version}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersion(requestParameters: TransitExportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitExportKeyVersionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitGenerateCsrForKeyRaw(requestParameters: TransitGenerateCsrForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['transitGenerateCsrForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateCsrForKeyRequest',
                'Required parameter "transitGenerateCsrForKeyRequest" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/csr`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCsrForKeyRequestToJSON(requestParameters['transitGenerateCsrForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCsrForKey(requestParameters: TransitGenerateCsrForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateCsrForKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKeyRaw(requestParameters: TransitGenerateDataKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['plaintext'] == null) {
            throw new runtime.RequiredError(
                'plaintext',
                'Required parameter "plaintext" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['transitGenerateDataKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateDataKeyRequest',
                'Required parameter "transitGenerateDataKeyRequest" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/datakey/{plaintext}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"plaintext"}}`, encodeURIComponent(String(requestParameters['plaintext']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateDataKeyRequestToJSON(requestParameters['transitGenerateDataKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKey(requestParameters: TransitGenerateDataKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateDataKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacRaw(requestParameters: TransitGenerateHmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['transitGenerateHmacRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateHmacRequest',
                'Required parameter "transitGenerateHmacRequest" was null or undefined when calling transitGenerateHmac().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacRequestToJSON(requestParameters['transitGenerateHmacRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmac(requestParameters: TransitGenerateHmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateHmacRaw(requestParameters, initOverrides);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithmRaw(requestParameters: TransitGenerateHmacWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['transitGenerateHmacWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateHmacWithAlgorithmRequest',
                'Required parameter "transitGenerateHmacWithAlgorithmRequest" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacWithAlgorithmRequestToJSON(requestParameters['transitGenerateHmacWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithm(requestParameters: TransitGenerateHmacWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateHmacWithAlgorithmRaw(requestParameters, initOverrides);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomRaw(requestParameters: TransitGenerateRandomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandom().'
            );
        }

        if (requestParameters['transitGenerateRandomRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomRequest',
                'Required parameter "transitGenerateRandomRequest" was null or undefined when calling transitGenerateRandom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomRequestToJSON(requestParameters['transitGenerateRandomRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandom(requestParameters: TransitGenerateRandomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateRandomRaw(requestParameters, initOverrides);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytesRaw(requestParameters: TransitGenerateRandomWithBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['transitGenerateRandomWithBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithBytesRequest',
                'Required parameter "transitGenerateRandomWithBytesRequest" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithBytesRequestToJSON(requestParameters['transitGenerateRandomWithBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytes(requestParameters: TransitGenerateRandomWithBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateRandomWithBytesRaw(requestParameters, initOverrides);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceRaw(requestParameters: TransitGenerateRandomWithSourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['transitGenerateRandomWithSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithSourceRequest',
                'Required parameter "transitGenerateRandomWithSourceRequest" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceRequestToJSON(requestParameters['transitGenerateRandomWithSourceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSource(requestParameters: TransitGenerateRandomWithSourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateRandomWithSourceRaw(requestParameters, initOverrides);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytesRaw(requestParameters: TransitGenerateRandomWithSourceAndBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['transitGenerateRandomWithSourceAndBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithSourceAndBytesRequest',
                'Required parameter "transitGenerateRandomWithSourceAndBytesRequest" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceAndBytesRequestToJSON(requestParameters['transitGenerateRandomWithSourceAndBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytes(requestParameters: TransitGenerateRandomWithSourceAndBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitGenerateRandomWithSourceAndBytesRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashRaw(requestParameters: TransitHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitHash().'
            );
        }

        if (requestParameters['transitHashRequest'] == null) {
            throw new runtime.RequiredError(
                'transitHashRequest',
                'Required parameter "transitHashRequest" was null or undefined when calling transitHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashRequestToJSON(requestParameters['transitHashRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHash(requestParameters: TransitHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitHashRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithmRaw(requestParameters: TransitHashWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['transitHashWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitHashWithAlgorithmRequest',
                'Required parameter "transitHashWithAlgorithmRequest" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashWithAlgorithmRequestToJSON(requestParameters['transitHashWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithm(requestParameters: TransitHashWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitHashWithAlgorithmRaw(requestParameters, initOverrides);
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKeyRaw(requestParameters: TransitImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['transitImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitImportKeyRequest',
                'Required parameter "transitImportKeyRequest" was null or undefined when calling transitImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyRequestToJSON(requestParameters['transitImportKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKey(requestParameters: TransitImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitImportKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersionRaw(requestParameters: TransitImportKeyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['transitImportKeyVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'transitImportKeyVersionRequest',
                'Required parameter "transitImportKeyVersionRequest" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import_version`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyVersionRequestToJSON(requestParameters['transitImportKeyVersionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersion(requestParameters: TransitImportKeyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitImportKeyVersionRaw(requestParameters, initOverrides);
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeysRaw(requestParameters: TransitListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transitListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeys(requestParameters: TransitListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transitListKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfigurationRaw(requestParameters: TransitReadCacheConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadCacheConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfiguration(requestParameters: TransitReadCacheConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitReadCacheConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitReadKeyRaw(requestParameters: TransitReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitReadKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKey(requestParameters: TransitReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitReadKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitReadKeysConfigurationRaw(requestParameters: TransitReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKeysConfiguration(requestParameters: TransitReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitReadKeysConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKeyRaw(requestParameters: TransitReadWrappingKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadWrappingKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/wrapping_key`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKey(requestParameters: TransitReadWrappingKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitReadWrappingKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKeyRaw(requestParameters: TransitRestoreAndRenameKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['transitRestoreAndRenameKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRestoreAndRenameKeyRequest',
                'Required parameter "transitRestoreAndRenameKeyRequest" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreAndRenameKeyRequestToJSON(requestParameters['transitRestoreAndRenameKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKey(requestParameters: TransitRestoreAndRenameKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitRestoreAndRenameKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Restore the named key
     */
    async transitRestoreKeyRaw(requestParameters: TransitRestoreKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRestoreKey().'
            );
        }

        if (requestParameters['transitRestoreKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRestoreKeyRequest',
                'Required parameter "transitRestoreKeyRequest" was null or undefined when calling transitRestoreKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreKeyRequestToJSON(requestParameters['transitRestoreKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreKey(requestParameters: TransitRestoreKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitRestoreKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrapRaw(requestParameters: TransitRewrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['transitRewrapRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRewrapRequest',
                'Required parameter "transitRewrapRequest" was null or undefined when calling transitRewrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/rewrap/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRewrapRequestToJSON(requestParameters['transitRewrapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrap(requestParameters: TransitRewrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitRewrapRaw(requestParameters, initOverrides);
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKeyRaw(requestParameters: TransitRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['transitRotateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRotateKeyRequest',
                'Required parameter "transitRotateKeyRequest" was null or undefined when calling transitRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRotateKeyRequestToJSON(requestParameters['transitRotateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKey(requestParameters: TransitRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitRotateKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async transitSetCertificateForKeyRaw(requestParameters: TransitSetCertificateForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['transitSetCertificateForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSetCertificateForKeyRequest',
                'Required parameter "transitSetCertificateForKeyRequest" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/set-certificate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSetCertificateForKeyRequestToJSON(requestParameters['transitSetCertificateForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitSetCertificateForKey(requestParameters: TransitSetCertificateForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitSetCertificateForKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignRaw(requestParameters: TransitSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['transitSignRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSignRequest',
                'Required parameter "transitSignRequest" was null or undefined when calling transitSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignRequestToJSON(requestParameters['transitSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSign(requestParameters: TransitSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitSignRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithmRaw(requestParameters: TransitSignWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['transitSignWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSignWithAlgorithmRequest',
                'Required parameter "transitSignWithAlgorithmRequest" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignWithAlgorithmRequestToJSON(requestParameters['transitSignWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithm(requestParameters: TransitSignWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitSignWithAlgorithmRaw(requestParameters, initOverrides);
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKeyRaw(requestParameters: TransitTrimKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['transitTrimKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitTrimKeyRequest',
                'Required parameter "transitTrimKeyRequest" was null or undefined when calling transitTrimKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/trim`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitTrimKeyRequestToJSON(requestParameters['transitTrimKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKey(requestParameters: TransitTrimKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitTrimKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyRaw(requestParameters: TransitVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['transitVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitVerifyRequest',
                'Required parameter "transitVerifyRequest" was null or undefined when calling transitVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyRequestToJSON(requestParameters['transitVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerify(requestParameters: TransitVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitVerifyRaw(requestParameters, initOverrides);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithmRaw(requestParameters: TransitVerifyWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['transitVerifyWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitVerifyWithAlgorithmRequest',
                'Required parameter "transitVerifyWithAlgorithmRequest" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyWithAlgorithmRequestToJSON(requestParameters['transitVerifyWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithm(requestParameters: TransitVerifyWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transitVerifyWithAlgorithmRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AliCloudListRolesListEnum = {
    True: 'true'
} as const;
export type AliCloudListRolesListEnum = typeof AliCloudListRolesListEnum[keyof typeof AliCloudListRolesListEnum];
/**
 * @export
 */
export const AwsListRolesListEnum = {
    True: 'true'
} as const;
export type AwsListRolesListEnum = typeof AwsListRolesListEnum[keyof typeof AwsListRolesListEnum];
/**
 * @export
 */
export const AzureListRolesListEnum = {
    True: 'true'
} as const;
export type AzureListRolesListEnum = typeof AzureListRolesListEnum[keyof typeof AzureListRolesListEnum];
/**
 * @export
 */
export const ConsulListRolesListEnum = {
    True: 'true'
} as const;
export type ConsulListRolesListEnum = typeof ConsulListRolesListEnum[keyof typeof ConsulListRolesListEnum];
/**
 * @export
 */
export const CubbyholeListListEnum = {
    True: 'true'
} as const;
export type CubbyholeListListEnum = typeof CubbyholeListListEnum[keyof typeof CubbyholeListListEnum];
/**
 * @export
 */
export const DatabaseListConnectionsListEnum = {
    True: 'true'
} as const;
export type DatabaseListConnectionsListEnum = typeof DatabaseListConnectionsListEnum[keyof typeof DatabaseListConnectionsListEnum];
/**
 * @export
 */
export const DatabaseListRolesListEnum = {
    True: 'true'
} as const;
export type DatabaseListRolesListEnum = typeof DatabaseListRolesListEnum[keyof typeof DatabaseListRolesListEnum];
/**
 * @export
 */
export const DatabaseListStaticRolesListEnum = {
    True: 'true'
} as const;
export type DatabaseListStaticRolesListEnum = typeof DatabaseListStaticRolesListEnum[keyof typeof DatabaseListStaticRolesListEnum];
/**
 * @export
 */
export const GoogleCloudKmsListKeysListEnum = {
    True: 'true'
} as const;
export type GoogleCloudKmsListKeysListEnum = typeof GoogleCloudKmsListKeysListEnum[keyof typeof GoogleCloudKmsListKeysListEnum];
/**
 * @export
 */
export const GoogleCloudListImpersonatedAccountsListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListImpersonatedAccountsListEnum = typeof GoogleCloudListImpersonatedAccountsListEnum[keyof typeof GoogleCloudListImpersonatedAccountsListEnum];
/**
 * @export
 */
export const GoogleCloudListImpersonatedAccounts2ListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListImpersonatedAccounts2ListEnum = typeof GoogleCloudListImpersonatedAccounts2ListEnum[keyof typeof GoogleCloudListImpersonatedAccounts2ListEnum];
/**
 * @export
 */
export const GoogleCloudListRolesetsListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListRolesetsListEnum = typeof GoogleCloudListRolesetsListEnum[keyof typeof GoogleCloudListRolesetsListEnum];
/**
 * @export
 */
export const GoogleCloudListRolesets2ListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListRolesets2ListEnum = typeof GoogleCloudListRolesets2ListEnum[keyof typeof GoogleCloudListRolesets2ListEnum];
/**
 * @export
 */
export const GoogleCloudListStaticAccountsListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListStaticAccountsListEnum = typeof GoogleCloudListStaticAccountsListEnum[keyof typeof GoogleCloudListStaticAccountsListEnum];
/**
 * @export
 */
export const GoogleCloudListStaticAccounts2ListEnum = {
    True: 'true'
} as const;
export type GoogleCloudListStaticAccounts2ListEnum = typeof GoogleCloudListStaticAccounts2ListEnum[keyof typeof GoogleCloudListStaticAccounts2ListEnum];
/**
 * @export
 */
export const KubernetesListRolesListEnum = {
    True: 'true'
} as const;
export type KubernetesListRolesListEnum = typeof KubernetesListRolesListEnum[keyof typeof KubernetesListRolesListEnum];
/**
 * @export
 */
export const KvV1ListListEnum = {
    True: 'true'
} as const;
export type KvV1ListListEnum = typeof KvV1ListListEnum[keyof typeof KvV1ListListEnum];
/**
 * @export
 */
export const KvV2ListListEnum = {
    True: 'true'
} as const;
export type KvV2ListListEnum = typeof KvV2ListListEnum[keyof typeof KvV2ListListEnum];
/**
 * @export
 */
export const LdapLibraryListListEnum = {
    True: 'true'
} as const;
export type LdapLibraryListListEnum = typeof LdapLibraryListListEnum[keyof typeof LdapLibraryListListEnum];
/**
 * @export
 */
export const LdapLibraryListLibraryPathListEnum = {
    True: 'true'
} as const;
export type LdapLibraryListLibraryPathListEnum = typeof LdapLibraryListLibraryPathListEnum[keyof typeof LdapLibraryListLibraryPathListEnum];
/**
 * @export
 */
export const LdapLibraryListLibraryPath0ListEnum = {
    True: 'true'
} as const;
export type LdapLibraryListLibraryPath0ListEnum = typeof LdapLibraryListLibraryPath0ListEnum[keyof typeof LdapLibraryListLibraryPath0ListEnum];
/**
 * @export
 */
export const LdapListDynamicRolesListEnum = {
    True: 'true'
} as const;
export type LdapListDynamicRolesListEnum = typeof LdapListDynamicRolesListEnum[keyof typeof LdapListDynamicRolesListEnum];
/**
 * @export
 */
export const LdapListRolePathListEnum = {
    True: 'true'
} as const;
export type LdapListRolePathListEnum = typeof LdapListRolePathListEnum[keyof typeof LdapListRolePathListEnum];
/**
 * @export
 */
export const LdapListRolePath0ListEnum = {
    True: 'true'
} as const;
export type LdapListRolePath0ListEnum = typeof LdapListRolePath0ListEnum[keyof typeof LdapListRolePath0ListEnum];
/**
 * @export
 */
export const LdapListStaticRolePathListEnum = {
    True: 'true'
} as const;
export type LdapListStaticRolePathListEnum = typeof LdapListStaticRolePathListEnum[keyof typeof LdapListStaticRolePathListEnum];
/**
 * @export
 */
export const LdapListStaticRolePath0ListEnum = {
    True: 'true'
} as const;
export type LdapListStaticRolePath0ListEnum = typeof LdapListStaticRolePath0ListEnum[keyof typeof LdapListStaticRolePath0ListEnum];
/**
 * @export
 */
export const LdapListStaticRolesListEnum = {
    True: 'true'
} as const;
export type LdapListStaticRolesListEnum = typeof LdapListStaticRolesListEnum[keyof typeof LdapListStaticRolesListEnum];
/**
 * @export
 */
export const MongoDbAtlasListRolesListEnum = {
    True: 'true'
} as const;
export type MongoDbAtlasListRolesListEnum = typeof MongoDbAtlasListRolesListEnum[keyof typeof MongoDbAtlasListRolesListEnum];
/**
 * @export
 */
export const NomadListRolesListEnum = {
    True: 'true'
} as const;
export type NomadListRolesListEnum = typeof NomadListRolesListEnum[keyof typeof NomadListRolesListEnum];
/**
 * @export
 */
export const PkiGenerateIntermediateOperationExportedEnum = {
    Internal: 'internal',
    External: 'external',
    Kms: 'kms'
} as const;
export type PkiGenerateIntermediateOperationExportedEnum = typeof PkiGenerateIntermediateOperationExportedEnum[keyof typeof PkiGenerateIntermediateOperationExportedEnum];
/**
 * @export
 */
export const PkiGenerateRootOperationExportedEnum = {
    Internal: 'internal',
    External: 'external',
    Kms: 'kms'
} as const;
export type PkiGenerateRootOperationExportedEnum = typeof PkiGenerateRootOperationExportedEnum[keyof typeof PkiGenerateRootOperationExportedEnum];
/**
 * @export
 */
export const PkiIssuersGenerateIntermediateOperationExportedEnum = {
    Internal: 'internal',
    External: 'external',
    Kms: 'kms'
} as const;
export type PkiIssuersGenerateIntermediateOperationExportedEnum = typeof PkiIssuersGenerateIntermediateOperationExportedEnum[keyof typeof PkiIssuersGenerateIntermediateOperationExportedEnum];
/**
 * @export
 */
export const PkiIssuersGenerateRootOperationExportedEnum = {
    Internal: 'internal',
    External: 'external',
    Kms: 'kms'
} as const;
export type PkiIssuersGenerateRootOperationExportedEnum = typeof PkiIssuersGenerateRootOperationExportedEnum[keyof typeof PkiIssuersGenerateRootOperationExportedEnum];
/**
 * @export
 */
export const PkiListAcmeAccountKeysListEnum = {
    True: 'true'
} as const;
export type PkiListAcmeAccountKeysListEnum = typeof PkiListAcmeAccountKeysListEnum[keyof typeof PkiListAcmeAccountKeysListEnum];
/**
 * @export
 */
export const PkiListCertsListEnum = {
    True: 'true'
} as const;
export type PkiListCertsListEnum = typeof PkiListCertsListEnum[keyof typeof PkiListCertsListEnum];
/**
 * @export
 */
export const PkiListEabKeysListEnum = {
    True: 'true'
} as const;
export type PkiListEabKeysListEnum = typeof PkiListEabKeysListEnum[keyof typeof PkiListEabKeysListEnum];
/**
 * @export
 */
export const PkiListIssuersListEnum = {
    True: 'true'
} as const;
export type PkiListIssuersListEnum = typeof PkiListIssuersListEnum[keyof typeof PkiListIssuersListEnum];
/**
 * @export
 */
export const PkiListKeysListEnum = {
    True: 'true'
} as const;
export type PkiListKeysListEnum = typeof PkiListKeysListEnum[keyof typeof PkiListKeysListEnum];
/**
 * @export
 */
export const PkiListRevokedCertsListEnum = {
    True: 'true'
} as const;
export type PkiListRevokedCertsListEnum = typeof PkiListRevokedCertsListEnum[keyof typeof PkiListRevokedCertsListEnum];
/**
 * @export
 */
export const PkiListRolesListEnum = {
    True: 'true'
} as const;
export type PkiListRolesListEnum = typeof PkiListRolesListEnum[keyof typeof PkiListRolesListEnum];
/**
 * @export
 */
export const PkiRotateRootOperationExportedEnum = {
    Internal: 'internal',
    External: 'external',
    Kms: 'kms'
} as const;
export type PkiRotateRootOperationExportedEnum = typeof PkiRotateRootOperationExportedEnum[keyof typeof PkiRotateRootOperationExportedEnum];
/**
 * @export
 */
export const RabbitMqListRolesListEnum = {
    True: 'true'
} as const;
export type RabbitMqListRolesListEnum = typeof RabbitMqListRolesListEnum[keyof typeof RabbitMqListRolesListEnum];
/**
 * @export
 */
export const SshListRolesListEnum = {
    True: 'true'
} as const;
export type SshListRolesListEnum = typeof SshListRolesListEnum[keyof typeof SshListRolesListEnum];
/**
 * @export
 */
export const TerraformCloudListRolesListEnum = {
    True: 'true'
} as const;
export type TerraformCloudListRolesListEnum = typeof TerraformCloudListRolesListEnum[keyof typeof TerraformCloudListRolesListEnum];
/**
 * @export
 */
export const TotpListKeysListEnum = {
    True: 'true'
} as const;
export type TotpListKeysListEnum = typeof TotpListKeysListEnum[keyof typeof TotpListKeysListEnum];
/**
 * @export
 */
export const TransitListKeysListEnum = {
    True: 'true'
} as const;
export type TransitListKeysListEnum = typeof TransitListKeysListEnum[keyof typeof TransitListKeysListEnum];
