/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseConfigureConnectionRequest
 */
export interface DatabaseConfigureConnectionRequest {
    /**
     * Comma separated string or array of the role names allowed to get creds from this database connection. If empty no roles are allowed. If "*" all roles are allowed.
     * @type {Array<string>}
     * @memberof DatabaseConfigureConnectionRequest
     */
    allowedRoles?: Array<string>;
    /**
     * Password policy to use when generating passwords.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    passwordPolicy?: string;
    /**
     * The name of a builtin or previously registered plugin known to vault. This endpoint will create an instance of that plugin type.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    pluginName?: string;
    /**
     * The version of the plugin to use.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    pluginVersion?: string;
    /**
     * Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter.
     * @type {Array<string>}
     * @memberof DatabaseConfigureConnectionRequest
     */
    rootRotationStatements?: Array<string>;
    /**
     * If true, the connection details are verified by actually connecting to the database. Defaults to true.
     * @type {boolean}
     * @memberof DatabaseConfigureConnectionRequest
     */
    verifyConnection?: boolean;
}

/**
 * Check if a given object implements the DatabaseConfigureConnectionRequest interface.
 */
export function instanceOfDatabaseConfigureConnectionRequest(value: object): value is DatabaseConfigureConnectionRequest {
    return true;
}

export function DatabaseConfigureConnectionRequestFromJSON(json: any): DatabaseConfigureConnectionRequest {
    return DatabaseConfigureConnectionRequestFromJSONTyped(json, false);
}

export function DatabaseConfigureConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseConfigureConnectionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowedRoles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'passwordPolicy': json['password_policy'] == null ? undefined : json['password_policy'],
        'pluginName': json['plugin_name'] == null ? undefined : json['plugin_name'],
        'pluginVersion': json['plugin_version'] == null ? undefined : json['plugin_version'],
        'rootRotationStatements': json['root_rotation_statements'] == null ? undefined : json['root_rotation_statements'],
        'verifyConnection': json['verify_connection'] == null ? undefined : json['verify_connection'],
    };
}

export function DatabaseConfigureConnectionRequestToJSON(json: any): DatabaseConfigureConnectionRequest {
    return DatabaseConfigureConnectionRequestToJSONTyped(json, false);
}

export function DatabaseConfigureConnectionRequestToJSONTyped(value?: DatabaseConfigureConnectionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_roles': value['allowedRoles'],
        'password_policy': value['passwordPolicy'],
        'plugin_name': value['pluginName'],
        'plugin_version': value['pluginVersion'],
        'root_rotation_statements': value['rootRotationStatements'],
        'verify_connection': value['verifyConnection'],
    };
}

