"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WellKnownListLabelsListEnum = exports.VersionHistoryListEnum = exports.UiHeadersListListEnum = exports.UiConfigListCustomMessagesListEnum = exports.SystemListSyncGithubAppsListEnum = exports.SystemListSyncDestinationsTypeListEnum = exports.SystemListSyncDestinationsListEnum = exports.SystemListSyncAssociationsListEnum = exports.SystemListStorageRaftSnapshotAutoConfigListEnum = exports.SystemListQuotasLeaseCountListEnum = exports.SystemListPoliciesRgpListEnum = exports.SystemListPoliciesEgpListEnum = exports.SystemListNamespacesListEnum = exports.SystemListMfaMethodListEnum = exports.SystemListManagedKeysTypeListEnum = exports.SubscriptionsListEventsSubscriptionsListEnum = exports.RawListListEnum = exports.RateLimitQuotasListListEnum = exports.PoliciesListPasswordPoliciesListEnum = exports.PoliciesListAclPolicies3ListEnum = exports.PoliciesListAclPoliciesListEnum = exports.PluginsRuntimesCatalogListPluginsRuntimes0ListEnum = exports.PluginsCatalogListPluginsWithTypeListEnum = exports.LeasesLookUpListEnum = exports.SystemApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class SystemApi extends runtime.BaseAPI {
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivateRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/activation-flags/activation-test/activate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivate(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.activationFlagsActivateRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivate_1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/activation-flags/force-identity-deduplication/activate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivate_1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.activationFlagsActivate_1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivate_2Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/activation-flags/secrets-sync/activate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Activate a flagged feature.
     */
    activationFlagsActivate_2(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.activationFlagsActivate_2Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    auditingCalculateHashRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling auditingCalculateHash().');
            }
            if (requestParameters['auditingCalculateHashRequest'] == null) {
                throw new runtime.RequiredError('auditingCalculateHashRequest', 'Required parameter "auditingCalculateHashRequest" was null or undefined when calling auditingCalculateHash().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/audit-hash/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AuditingCalculateHashRequestToJSON)(requestParameters['auditingCalculateHashRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuditingCalculateHashResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    auditingCalculateHash(path, auditingCalculateHashRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingCalculateHashRaw({ path: path, auditingCalculateHashRequest: auditingCalculateHashRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Disable the audit device at the given path.
     */
    auditingDisableDeviceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling auditingDisableDevice().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/audit/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Disable the audit device at the given path.
     */
    auditingDisableDevice(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingDisableDeviceRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Disable auditing of the given request header.
     */
    auditingDisableRequestHeaderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling auditingDisableRequestHeader().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Disable auditing of the given request header.
     */
    auditingDisableRequestHeader(header, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingDisableRequestHeaderRaw({ header: header }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enable a new audit device at the supplied path.
     */
    auditingEnableDeviceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling auditingEnableDevice().');
            }
            if (requestParameters['auditingEnableDeviceRequest'] == null) {
                throw new runtime.RequiredError('auditingEnableDeviceRequest', 'Required parameter "auditingEnableDeviceRequest" was null or undefined when calling auditingEnableDevice().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/audit/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AuditingEnableDeviceRequestToJSON)(requestParameters['auditingEnableDeviceRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Enable a new audit device at the supplied path.
     */
    auditingEnableDevice(path, auditingEnableDeviceRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingEnableDeviceRaw({ path: path, auditingEnableDeviceRequest: auditingEnableDeviceRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enable auditing of a header.
     */
    auditingEnableRequestHeaderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling auditingEnableRequestHeader().');
            }
            if (requestParameters['auditingEnableRequestHeaderRequest'] == null) {
                throw new runtime.RequiredError('auditingEnableRequestHeaderRequest', 'Required parameter "auditingEnableRequestHeaderRequest" was null or undefined when calling auditingEnableRequestHeader().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AuditingEnableRequestHeaderRequestToJSON)(requestParameters['auditingEnableRequestHeaderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Enable auditing of a header.
     */
    auditingEnableRequestHeader(header, auditingEnableRequestHeaderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingEnableRequestHeaderRaw({ header: header, auditingEnableRequestHeaderRequest: auditingEnableRequestHeaderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the enabled audit devices.
     */
    auditingListEnabledDevicesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/audit`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * List the enabled audit devices.
     */
    auditingListEnabledDevices(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingListEnabledDevicesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the request headers that are configured to be audited.
     */
    auditingListRequestHeadersRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/auditing/request-headers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuditingListRequestHeadersResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the request headers that are configured to be audited.
     */
    auditingListRequestHeaders(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingListRequestHeadersRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the information for the given request header.
     */
    auditingReadRequestHeaderInformationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling auditingReadRequestHeaderInformation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * List the information for the given request header.
     */
    auditingReadRequestHeaderInformation(header, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.auditingReadRequestHeaderInformationRaw({ header: header }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Disable the auth method at the given auth path
     */
    authDisableMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling authDisableMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Disable the auth method at the given auth path
     */
    authDisableMethod(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authDisableMethodRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
     * Enables a new auth method.
     */
    authEnableMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling authEnableMethod().');
            }
            if (requestParameters['authEnableMethodRequest'] == null) {
                throw new runtime.RequiredError('authEnableMethodRequest', 'Required parameter "authEnableMethodRequest" was null or undefined when calling authEnableMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AuthEnableMethodRequestToJSON)(requestParameters['authEnableMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
     * Enables a new auth method.
     */
    authEnableMethod(path, authEnableMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authEnableMethodRaw({ path: path, authEnableMethodRequest: authEnableMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    authListEnabledMethodsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/auth`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    authListEnabledMethods(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authListEnabledMethodsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the configuration of the auth engine at the given path.
     */
    authReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling authReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the configuration of the auth engine at the given path.
     */
    authReadConfiguration(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authReadConfigurationRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Reads the given auth path\'s configuration.
     */
    authReadTuningInformationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling authReadTuningInformation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/auth/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthReadTuningInformationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Reads the given auth path\'s configuration.
     */
    authReadTuningInformation(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authReadTuningInformationRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Tune configuration parameters for a given auth path.
     */
    authTuneConfigurationParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling authTuneConfigurationParameters().');
            }
            if (requestParameters['authTuneConfigurationParametersRequest'] == null) {
                throw new runtime.RequiredError('authTuneConfigurationParametersRequest', 'Required parameter "authTuneConfigurationParametersRequest" was null or undefined when calling authTuneConfigurationParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/auth/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AuthTuneConfigurationParametersRequestToJSON)(requestParameters['authTuneConfigurationParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Tune configuration parameters for a given auth path.
     */
    authTuneConfigurationParameters(path, authTuneConfigurationParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authTuneConfigurationParametersRaw({ path: path, authTuneConfigurationParametersRequest: authTuneConfigurationParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
     * Information about the host instance that this Vault server is running on.
     */
    collectHostInformationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/host-info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CollectHostInformationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
     * Information about the host instance that this Vault server is running on.
     */
    collectHostInformation(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectHostInformationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
     * reports in-flight requests
     */
    collectInFlightRequestInformationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/in-flight-req`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
     * reports in-flight requests
     */
    collectInFlightRequestInformation(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectInFlightRequestInformationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure the CORS settings.
     */
    corsConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['corsConfigureRequest'] == null) {
                throw new runtime.RequiredError('corsConfigureRequest', 'Required parameter "corsConfigureRequest" was null or undefined when calling corsConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/cors`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CorsConfigureRequestToJSON)(requestParameters['corsConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure the CORS settings.
     */
    corsConfigure(corsConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.corsConfigureRaw({ corsConfigureRequest: corsConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove any CORS settings.
     */
    corsDeleteConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/cors`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove any CORS settings.
     */
    corsDeleteConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.corsDeleteConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the current CORS settings.
     */
    corsReadConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/cors`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CorsReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the current CORS settings.
     */
    corsReadConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.corsReadConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create custom message
     */
    createCustomMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['createCustomMessageRequest'] == null) {
                throw new runtime.RequiredError('createCustomMessageRequest', 'Required parameter "createCustomMessageRequest" was null or undefined when calling createCustomMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/ui/custom-messages`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateCustomMessageRequestToJSON)(requestParameters['createCustomMessageRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create custom message
     */
    createCustomMessage(createCustomMessageRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomMessageRaw({ createCustomMessageRequest: createCustomMessageRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Decodes the encoded token with the otp.
     */
    decodeTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['decodeTokenRequest'] == null) {
                throw new runtime.RequiredError('decodeTokenRequest', 'Required parameter "decodeTokenRequest" was null or undefined when calling decodeToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/decode-token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DecodeTokenRequestToJSON)(requestParameters['decodeTokenRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Decodes the encoded token with the otp.
     */
    decodeToken(decodeTokenRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.decodeTokenRaw({ decodeTokenRequest: decodeTokenRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    encryptionKeyConfigureRotationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['encryptionKeyConfigureRotationRequest'] == null) {
                throw new runtime.RequiredError('encryptionKeyConfigureRotationRequest', 'Required parameter "encryptionKeyConfigureRotationRequest" was null or undefined when calling encryptionKeyConfigureRotation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/rotate/config`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EncryptionKeyConfigureRotationRequestToJSON)(requestParameters['encryptionKeyConfigureRotationRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    encryptionKeyConfigureRotation(encryptionKeyConfigureRotationRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.encryptionKeyConfigureRotationRaw({ encryptionKeyConfigureRotationRequest: encryptionKeyConfigureRotationRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    encryptionKeyReadRotationConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rotate/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EncryptionKeyReadRotationConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    encryptionKeyReadRotationConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.encryptionKeyReadRotationConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    encryptionKeyRotateRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rotate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    encryptionKeyRotate(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.encryptionKeyRotateRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Provides information about the backend encryption key.
     */
    encryptionKeyStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/key-status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Provides information about the backend encryption key.
     */
    encryptionKeyStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.encryptionKeyStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateHashRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['generateHashRequest'] == null) {
                throw new runtime.RequiredError('generateHashRequest', 'Required parameter "generateHashRequest" was null or undefined when calling generateHash().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/hash`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateHashRequestToJSON)(requestParameters['generateHashRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateHashResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateHash(generateHashRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateHashRaw({ generateHashRequest: generateHashRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateHashWithAlgorithmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlalgorithm'] == null) {
                throw new runtime.RequiredError('urlalgorithm', 'Required parameter "urlalgorithm" was null or undefined when calling generateHashWithAlgorithm().');
            }
            if (requestParameters['generateHashWithAlgorithmRequest'] == null) {
                throw new runtime.RequiredError('generateHashWithAlgorithmRequest', 'Required parameter "generateHashWithAlgorithmRequest" was null or undefined when calling generateHashWithAlgorithm().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateHashWithAlgorithmRequestToJSON)(requestParameters['generateHashWithAlgorithmRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateHashWithAlgorithmResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateHashWithAlgorithm(urlalgorithm, generateHashWithAlgorithmRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateHashWithAlgorithmRaw({ urlalgorithm: urlalgorithm, generateHashWithAlgorithmRequest: generateHashWithAlgorithmRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateRandomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['generateRandomRequest'] == null) {
                throw new runtime.RequiredError('generateRandomRequest', 'Required parameter "generateRandomRequest" was null or undefined when calling generateRandom().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/random`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateRandomRequestToJSON)(requestParameters['generateRandomRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateRandomResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateRandom(generateRandomRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateRandomRaw({ generateRandomRequest: generateRandomRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateRandomWithBytesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlbytes'] == null) {
                throw new runtime.RequiredError('urlbytes', 'Required parameter "urlbytes" was null or undefined when calling generateRandomWithBytes().');
            }
            if (requestParameters['generateRandomWithBytesRequest'] == null) {
                throw new runtime.RequiredError('generateRandomWithBytesRequest', 'Required parameter "generateRandomWithBytesRequest" was null or undefined when calling generateRandomWithBytes().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateRandomWithBytesRequestToJSON)(requestParameters['generateRandomWithBytesRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateRandomWithBytesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateRandomWithBytes(urlbytes, generateRandomWithBytesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateRandomWithBytesRaw({ urlbytes: urlbytes, generateRandomWithBytesRequest: generateRandomWithBytesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateRandomWithSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling generateRandomWithSource().');
            }
            if (requestParameters['generateRandomWithSourceRequest'] == null) {
                throw new runtime.RequiredError('generateRandomWithSourceRequest', 'Required parameter "generateRandomWithSourceRequest" was null or undefined when calling generateRandomWithSource().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateRandomWithSourceRequestToJSON)(requestParameters['generateRandomWithSourceRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateRandomWithSourceResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateRandomWithSource(source, generateRandomWithSourceRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateRandomWithSourceRaw({ source: source, generateRandomWithSourceRequest: generateRandomWithSourceRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    generateRandomWithSourceAndBytesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling generateRandomWithSourceAndBytes().');
            }
            if (requestParameters['urlbytes'] == null) {
                throw new runtime.RequiredError('urlbytes', 'Required parameter "urlbytes" was null or undefined when calling generateRandomWithSourceAndBytes().');
            }
            if (requestParameters['generateRandomWithSourceAndBytesRequest'] == null) {
                throw new runtime.RequiredError('generateRandomWithSourceAndBytesRequest', 'Required parameter "generateRandomWithSourceAndBytesRequest" was null or undefined when calling generateRandomWithSourceAndBytes().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/tools/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GenerateRandomWithSourceAndBytesRequestToJSON)(requestParameters['generateRandomWithSourceAndBytesRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GenerateRandomWithSourceAndBytesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    generateRandomWithSourceAndBytes(source, urlbytes, generateRandomWithSourceAndBytesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateRandomWithSourceAndBytesRaw({ source: source, urlbytes: urlbytes, generateRandomWithSourceAndBytesRequest: generateRandomWithSourceAndBytesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check the HA status of a Vault cluster
     */
    haStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/ha-status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HaStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Check the HA status of a Vault cluster
     */
    haStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.haStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
     * Initialize a new Vault.
     */
    initializeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['initializeRequest'] == null) {
                throw new runtime.RequiredError('initializeRequest', 'Required parameter "initializeRequest" was null or undefined when calling initialize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/init`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InitializeRequestToJSON)(requestParameters['initializeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
     * Initialize a new Vault.
     */
    initialize(initializeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.initializeRaw({ initializeRequest: initializeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enable or disable collection of client count, set retention period, or set default reporting period.
     */
    internalClientActivityConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['internalClientActivityConfigureRequest'] == null) {
                throw new runtime.RequiredError('internalClientActivityConfigureRequest', 'Required parameter "internalClientActivityConfigureRequest" was null or undefined when calling internalClientActivityConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/internal/counters/config`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InternalClientActivityConfigureRequestToJSON)(requestParameters['internalClientActivityConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Enable or disable collection of client count, set retention period, or set default reporting period.
     */
    internalClientActivityConfigure(internalClientActivityConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalClientActivityConfigureRaw({ internalClientActivityConfigureRequest: internalClientActivityConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    internalClientActivityExportRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/activity/export`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    internalClientActivityExport(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalClientActivityExportRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the client count tracking configuration.
     */
    internalClientActivityReadConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the client count tracking configuration.
     */
    internalClientActivityReadConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalClientActivityReadConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    internalClientActivityReportCountsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/activity`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    internalClientActivityReportCounts(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalClientActivityReportCountsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Report the number of clients for this month, for this namespace and all child namespaces.
     */
    internalClientActivityReportCountsThisMonthRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/activity/monthly`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Report the number of clients for this month, for this namespace and all child namespaces.
     */
    internalClientActivityReportCountsThisMonth(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalClientActivityReportCountsThisMonthRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalCountEntitiesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/entities`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalCountEntitiesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalCountEntities(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalCountEntitiesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     * @deprecated
     */
    internalCountRequestsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/requests`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     * @deprecated
     */
    internalCountRequests(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalCountRequestsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalCountTokensRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/counters/tokens`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalCountTokensResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalCountTokens(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalCountTokensRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    internalGenerateOpenApiDocumentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['context'] != null) {
                queryParameters['context'] = requestParameters['context'];
            }
            if (requestParameters['genericMountPaths'] != null) {
                queryParameters['generic_mount_paths'] = requestParameters['genericMountPaths'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/specs/openapi`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    internalGenerateOpenApiDocument(context, genericMountPaths, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalGenerateOpenApiDocumentRaw({ context: context, genericMountPaths: genericMountPaths }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    internalGenerateOpenApiDocumentWithParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['internalGenerateOpenApiDocumentWithParametersRequest'] == null) {
                throw new runtime.RequiredError('internalGenerateOpenApiDocumentWithParametersRequest', 'Required parameter "internalGenerateOpenApiDocumentWithParametersRequest" was null or undefined when calling internalGenerateOpenApiDocumentWithParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/internal/specs/openapi`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InternalGenerateOpenApiDocumentWithParametersRequestToJSON)(requestParameters['internalGenerateOpenApiDocumentWithParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    internalGenerateOpenApiDocumentWithParameters(internalGenerateOpenApiDocumentWithParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalGenerateOpenApiDocumentWithParametersRaw({ internalGenerateOpenApiDocumentWithParametersRequest: internalGenerateOpenApiDocumentWithParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Expose the route entry and mount entry tables present in the router
     */
    internalInspectRouterRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tag'] == null) {
                throw new runtime.RequiredError('tag', 'Required parameter "tag" was null or undefined when calling internalInspectRouter().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/inspect/router/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Expose the route entry and mount entry tables present in the router
     */
    internalInspectRouter(tag, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalInspectRouterRaw({ tag: tag }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists enabled feature flags.
     */
    internalUiListEnabledFeatureFlagsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/feature-flags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiListEnabledFeatureFlagsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Lists enabled feature flags.
     */
    internalUiListEnabledFeatureFlags(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiListEnabledFeatureFlagsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists all enabled and visible auth and secrets mounts.
     */
    internalUiListEnabledVisibleMountsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/mounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiListEnabledVisibleMountsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Lists all enabled and visible auth and secrets mounts.
     */
    internalUiListEnabledVisibleMounts(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiListEnabledVisibleMountsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalUiListNamespacesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/namespaces`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiListNamespacesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalUiListNamespaces(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiListNamespacesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves Active post-login Custom Messages
     */
    internalUiReadAuthenticatedActiveCustomMessagesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/authenticated-messages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiReadAuthenticatedActiveCustomMessagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves Active post-login Custom Messages
     */
    internalUiReadAuthenticatedActiveCustomMessages(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiReadAuthenticatedActiveCustomMessagesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return information about the given mount.
     */
    internalUiReadMountInformationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling internalUiReadMountInformation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiReadMountInformationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return information about the given mount.
     */
    internalUiReadMountInformation(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiReadMountInformationRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalUiReadResultantAclRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/resultant-acl`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiReadResultantAclResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Backwards compatibility is not guaranteed for this API
     */
    internalUiReadResultantAcl(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiReadResultantAclRaw(initOverrides);
            switch (response.raw.status) {
                case 200:
                    return yield response.value();
                case 204:
                    return null;
                default:
                    return yield response.value();
            }
        });
    }
    /**
     * Retrieves Active pre-login Custom Messages
     */
    internalUiReadUnauthenticatedActiveCustomMessagesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/ui/unauthenticated-messages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InternalUiReadUnauthenticatedActiveCustomMessagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves Active pre-login Custom Messages
     */
    internalUiReadUnauthenticatedActiveCustomMessages(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.internalUiReadUnauthenticatedActiveCustomMessagesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the high availability status and current leader instance of Vault.
     */
    leaderStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leader`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LeaderStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the high availability status and current leader instance of Vault.
     */
    leaderStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leaderStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    leasesCountRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leases/count`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LeasesCountResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    leasesCount(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesCountRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    leasesForceRevokeLeaseWithPrefixRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['prefix'] == null) {
                throw new runtime.RequiredError('prefix', 'Required parameter "prefix" was null or undefined when calling leasesForceRevokeLeaseWithPrefix().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leases/revoke-force/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    leasesForceRevokeLeaseWithPrefix(prefix, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesForceRevokeLeaseWithPrefixRaw({ prefix: prefix }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    leasesForceRevokeLeaseWithPrefix2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['prefix'] == null) {
                throw new runtime.RequiredError('prefix', 'Required parameter "prefix" was null or undefined when calling leasesForceRevokeLeaseWithPrefix2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/revoke-force/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    leasesForceRevokeLeaseWithPrefix2(prefix, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesForceRevokeLeaseWithPrefix2Raw({ prefix: prefix }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    leasesListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leases`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LeasesListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    leasesList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    leasesLookUpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['prefix'] == null) {
                throw new runtime.RequiredError('prefix', 'Required parameter "prefix" was null or undefined when calling leasesLookUp().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling leasesLookUp().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leases/lookup/{prefix}/`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LeasesLookUpResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    leasesLookUp(prefix, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesLookUpRaw({ prefix: prefix, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    leasesReadLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['leasesReadLeaseRequest'] == null) {
                throw new runtime.RequiredError('leasesReadLeaseRequest', 'Required parameter "leasesReadLeaseRequest" was null or undefined when calling leasesReadLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/lookup`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesReadLeaseRequestToJSON)(requestParameters['leasesReadLeaseRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LeasesReadLeaseResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    leasesReadLease(leasesReadLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesReadLeaseRaw({ leasesReadLeaseRequest: leasesReadLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['leasesRenewLeaseRequest'] == null) {
                throw new runtime.RequiredError('leasesRenewLeaseRequest', 'Required parameter "leasesRenewLeaseRequest" was null or undefined when calling leasesRenewLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/renew`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRenewLeaseRequestToJSON)(requestParameters['leasesRenewLeaseRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLease(leasesRenewLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRenewLeaseRaw({ leasesRenewLeaseRequest: leasesRenewLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLease2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['leasesRenewLease2Request'] == null) {
                throw new runtime.RequiredError('leasesRenewLease2Request', 'Required parameter "leasesRenewLease2Request" was null or undefined when calling leasesRenewLease2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/renew`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRenewLease2RequestToJSON)(requestParameters['leasesRenewLease2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLease2(leasesRenewLease2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRenewLease2Raw({ leasesRenewLease2Request: leasesRenewLease2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLeaseWithIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlLeaseId'] == null) {
                throw new runtime.RequiredError('urlLeaseId', 'Required parameter "urlLeaseId" was null or undefined when calling leasesRenewLeaseWithId().');
            }
            if (requestParameters['leasesRenewLeaseWithIdRequest'] == null) {
                throw new runtime.RequiredError('leasesRenewLeaseWithIdRequest', 'Required parameter "leasesRenewLeaseWithIdRequest" was null or undefined when calling leasesRenewLeaseWithId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/renew/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['urlLeaseId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRenewLeaseWithIdRequestToJSON)(requestParameters['leasesRenewLeaseWithIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLeaseWithId(urlLeaseId, leasesRenewLeaseWithIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRenewLeaseWithIdRaw({ urlLeaseId: urlLeaseId, leasesRenewLeaseWithIdRequest: leasesRenewLeaseWithIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLeaseWithId2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlLeaseId'] == null) {
                throw new runtime.RequiredError('urlLeaseId', 'Required parameter "urlLeaseId" was null or undefined when calling leasesRenewLeaseWithId2().');
            }
            if (requestParameters['leasesRenewLeaseWithId2Request'] == null) {
                throw new runtime.RequiredError('leasesRenewLeaseWithId2Request', 'Required parameter "leasesRenewLeaseWithId2Request" was null or undefined when calling leasesRenewLeaseWithId2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/renew/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['urlLeaseId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRenewLeaseWithId2RequestToJSON)(requestParameters['leasesRenewLeaseWithId2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Renews a lease, requesting to extend the lease.
     */
    leasesRenewLeaseWithId2(urlLeaseId, leasesRenewLeaseWithId2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRenewLeaseWithId2Raw({ urlLeaseId: urlLeaseId, leasesRenewLeaseWithId2Request: leasesRenewLeaseWithId2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['leasesRevokeLeaseRequest'] == null) {
                throw new runtime.RequiredError('leasesRevokeLeaseRequest', 'Required parameter "leasesRevokeLeaseRequest" was null or undefined when calling leasesRevokeLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/revoke`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLeaseRequestToJSON)(requestParameters['leasesRevokeLeaseRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLease(leasesRevokeLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLeaseRaw({ leasesRevokeLeaseRequest: leasesRevokeLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLease2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['leasesRevokeLease2Request'] == null) {
                throw new runtime.RequiredError('leasesRevokeLease2Request', 'Required parameter "leasesRevokeLease2Request" was null or undefined when calling leasesRevokeLease2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/revoke`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLease2RequestToJSON)(requestParameters['leasesRevokeLease2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLease2(leasesRevokeLease2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLease2Raw({ leasesRevokeLease2Request: leasesRevokeLease2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLeaseWithIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlLeaseId'] == null) {
                throw new runtime.RequiredError('urlLeaseId', 'Required parameter "urlLeaseId" was null or undefined when calling leasesRevokeLeaseWithId().');
            }
            if (requestParameters['leasesRevokeLeaseWithIdRequest'] == null) {
                throw new runtime.RequiredError('leasesRevokeLeaseWithIdRequest', 'Required parameter "leasesRevokeLeaseWithIdRequest" was null or undefined when calling leasesRevokeLeaseWithId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/revoke/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['urlLeaseId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLeaseWithIdRequestToJSON)(requestParameters['leasesRevokeLeaseWithIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLeaseWithId(urlLeaseId, leasesRevokeLeaseWithIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLeaseWithIdRaw({ urlLeaseId: urlLeaseId, leasesRevokeLeaseWithIdRequest: leasesRevokeLeaseWithIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLeaseWithId2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlLeaseId'] == null) {
                throw new runtime.RequiredError('urlLeaseId', 'Required parameter "urlLeaseId" was null or undefined when calling leasesRevokeLeaseWithId2().');
            }
            if (requestParameters['leasesRevokeLeaseWithId2Request'] == null) {
                throw new runtime.RequiredError('leasesRevokeLeaseWithId2Request', 'Required parameter "leasesRevokeLeaseWithId2Request" was null or undefined when calling leasesRevokeLeaseWithId2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/revoke/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['urlLeaseId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLeaseWithId2RequestToJSON)(requestParameters['leasesRevokeLeaseWithId2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes a lease immediately.
     */
    leasesRevokeLeaseWithId2(urlLeaseId, leasesRevokeLeaseWithId2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLeaseWithId2Raw({ urlLeaseId: urlLeaseId, leasesRevokeLeaseWithId2Request: leasesRevokeLeaseWithId2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    leasesRevokeLeaseWithPrefixRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['prefix'] == null) {
                throw new runtime.RequiredError('prefix', 'Required parameter "prefix" was null or undefined when calling leasesRevokeLeaseWithPrefix().');
            }
            if (requestParameters['leasesRevokeLeaseWithPrefixRequest'] == null) {
                throw new runtime.RequiredError('leasesRevokeLeaseWithPrefixRequest', 'Required parameter "leasesRevokeLeaseWithPrefixRequest" was null or undefined when calling leasesRevokeLeaseWithPrefix().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/leases/revoke-prefix/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLeaseWithPrefixRequestToJSON)(requestParameters['leasesRevokeLeaseWithPrefixRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    leasesRevokeLeaseWithPrefix(prefix, leasesRevokeLeaseWithPrefixRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLeaseWithPrefixRaw({ prefix: prefix, leasesRevokeLeaseWithPrefixRequest: leasesRevokeLeaseWithPrefixRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    leasesRevokeLeaseWithPrefix2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['prefix'] == null) {
                throw new runtime.RequiredError('prefix', 'Required parameter "prefix" was null or undefined when calling leasesRevokeLeaseWithPrefix2().');
            }
            if (requestParameters['leasesRevokeLeaseWithPrefix2Request'] == null) {
                throw new runtime.RequiredError('leasesRevokeLeaseWithPrefix2Request', 'Required parameter "leasesRevokeLeaseWithPrefix2Request" was null or undefined when calling leasesRevokeLeaseWithPrefix2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/revoke-prefix/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LeasesRevokeLeaseWithPrefix2RequestToJSON)(requestParameters['leasesRevokeLeaseWithPrefix2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    leasesRevokeLeaseWithPrefix2(prefix, leasesRevokeLeaseWithPrefix2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesRevokeLeaseWithPrefix2Raw({ prefix: prefix, leasesRevokeLeaseWithPrefix2Request: leasesRevokeLeaseWithPrefix2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    leasesTidyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/leases/tidy`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    leasesTidy(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.leasesTidyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the available and enabled experiments
     */
    listExperimentalFeaturesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/experiments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the available and enabled experiments
     */
    listExperimentalFeatures(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listExperimentalFeaturesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Report the locked user count metrics, for this namespace and all child namespaces.
     */
    lockedUsersListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/locked-users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Report the locked user count metrics, for this namespace and all child namespaces.
     */
    lockedUsersList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lockedUsersListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unlocks the user with given mount_accessor and alias_identifier
     */
    lockedUsersUnlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aliasIdentifier'] == null) {
                throw new runtime.RequiredError('aliasIdentifier', 'Required parameter "aliasIdentifier" was null or undefined when calling lockedUsersUnlock().');
            }
            if (requestParameters['mountAccessor'] == null) {
                throw new runtime.RequiredError('mountAccessor', 'Required parameter "mountAccessor" was null or undefined when calling lockedUsersUnlock().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/locked-users/{mount_accessor}/unlock/{alias_identifier}`.replace(`{${"alias_identifier"}}`, encodeURIComponent(String(requestParameters['aliasIdentifier']))).replace(`{${"mount_accessor"}}`, encodeURIComponent(String(requestParameters['mountAccessor']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unlocks the user with given mount_accessor and alias_identifier
     */
    lockedUsersUnlock(aliasIdentifier, mountAccessor, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lockedUsersUnlockRaw({ aliasIdentifier: aliasIdentifier, mountAccessor: mountAccessor }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the log level for all existing loggers.
     */
    loggersReadVerbosityLevelRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/loggers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the log level for all existing loggers.
     */
    loggersReadVerbosityLevel(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersReadVerbosityLevelRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the log level for a single logger.
     */
    loggersReadVerbosityLevelForRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling loggersReadVerbosityLevelFor().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the log level for a single logger.
     */
    loggersReadVerbosityLevelFor(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersReadVerbosityLevelForRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revert the all loggers to use log level provided in config.
     */
    loggersRevertVerbosityLevelRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/loggers`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revert the all loggers to use log level provided in config.
     */
    loggersRevertVerbosityLevel(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersRevertVerbosityLevelRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revert a single logger to use log level provided in config.
     */
    loggersRevertVerbosityLevelForRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling loggersRevertVerbosityLevelFor().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revert a single logger to use log level provided in config.
     */
    loggersRevertVerbosityLevelFor(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersRevertVerbosityLevelForRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Modify the log level for all existing loggers.
     */
    loggersUpdateVerbosityLevelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['loggersUpdateVerbosityLevelRequest'] == null) {
                throw new runtime.RequiredError('loggersUpdateVerbosityLevelRequest', 'Required parameter "loggersUpdateVerbosityLevelRequest" was null or undefined when calling loggersUpdateVerbosityLevel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/loggers`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LoggersUpdateVerbosityLevelRequestToJSON)(requestParameters['loggersUpdateVerbosityLevelRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Modify the log level for all existing loggers.
     */
    loggersUpdateVerbosityLevel(loggersUpdateVerbosityLevelRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersUpdateVerbosityLevelRaw({ loggersUpdateVerbosityLevelRequest: loggersUpdateVerbosityLevelRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Modify the log level of a single logger.
     */
    loggersUpdateVerbosityLevelForRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling loggersUpdateVerbosityLevelFor().');
            }
            if (requestParameters['loggersUpdateVerbosityLevelForRequest'] == null) {
                throw new runtime.RequiredError('loggersUpdateVerbosityLevelForRequest', 'Required parameter "loggersUpdateVerbosityLevelForRequest" was null or undefined when calling loggersUpdateVerbosityLevelFor().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LoggersUpdateVerbosityLevelForRequestToJSON)(requestParameters['loggersUpdateVerbosityLevelForRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Modify the log level of a single logger.
     */
    loggersUpdateVerbosityLevelFor(name, loggersUpdateVerbosityLevelForRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loggersUpdateVerbosityLevelForRaw({ name: name, loggersUpdateVerbosityLevelForRequest: loggersUpdateVerbosityLevelForRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    metricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/metrics`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    metrics(format, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.metricsRaw({ format: format }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
     */
    mfaValidateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaValidateRequest'] == null) {
                throw new runtime.RequiredError('mfaValidateRequest', 'Required parameter "mfaValidateRequest" was null or undefined when calling mfaValidate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/validate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaValidateRequestToJSON)(requestParameters['mfaValidateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
     */
    mfaValidate(mfaValidateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaValidateRaw({ mfaValidateRequest: mfaValidateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    monitorRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['logFormat'] != null) {
                queryParameters['log_format'] = requestParameters['logFormat'];
            }
            if (requestParameters['logLevel'] != null) {
                queryParameters['log_level'] = requestParameters['logLevel'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/monitor`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    monitor(logFormat, logLevel, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.monitorRaw({ logFormat: logFormat, logLevel: logLevel }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Disable the mount point specified at the given path.
     */
    mountsDisableSecretsEngineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling mountsDisableSecretsEngine().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Disable the mount point specified at the given path.
     */
    mountsDisableSecretsEngine(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsDisableSecretsEngineRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enable a new secrets engine at the given path.
     */
    mountsEnableSecretsEngineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling mountsEnableSecretsEngine().');
            }
            if (requestParameters['mountsEnableSecretsEngineRequest'] == null) {
                throw new runtime.RequiredError('mountsEnableSecretsEngineRequest', 'Required parameter "mountsEnableSecretsEngineRequest" was null or undefined when calling mountsEnableSecretsEngine().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MountsEnableSecretsEngineRequestToJSON)(requestParameters['mountsEnableSecretsEngineRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Enable a new secrets engine at the given path.
     */
    mountsEnableSecretsEngine(path, mountsEnableSecretsEngineRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsEnableSecretsEngineRaw({ path: path, mountsEnableSecretsEngineRequest: mountsEnableSecretsEngineRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mountsListSecretsEnginesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mountsListSecretsEngines(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsListSecretsEnginesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the configuration of the secret engine at the given path.
     */
    mountsReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling mountsReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MountsReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the configuration of the secret engine at the given path.
     */
    mountsReadConfiguration(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsReadConfigurationRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mountsReadTuningInformationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling mountsReadTuningInformation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mounts/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MountsReadTuningInformationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    mountsReadTuningInformation(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsReadTuningInformationRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mountsTuneConfigurationParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling mountsTuneConfigurationParameters().');
            }
            if (requestParameters['mountsTuneConfigurationParametersRequest'] == null) {
                throw new runtime.RequiredError('mountsTuneConfigurationParametersRequest', 'Required parameter "mountsTuneConfigurationParametersRequest" was null or undefined when calling mountsTuneConfigurationParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mounts/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MountsTuneConfigurationParametersRequestToJSON)(requestParameters['mountsTuneConfigurationParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mountsTuneConfigurationParameters(path, mountsTuneConfigurationParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mountsTuneConfigurationParametersRaw({ path: path, mountsTuneConfigurationParametersRequest: mountsTuneConfigurationParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pluginsCatalogListPluginsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogListPluginsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pluginsCatalogListPlugins(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogListPluginsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the plugins in the catalog.
     */
    pluginsCatalogListPluginsWithTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogListPluginsWithType().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pluginsCatalogListPluginsWithType().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogListPluginsWithTypeResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the plugins in the catalog.
     */
    pluginsCatalogListPluginsWithType(type, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogListPluginsWithTypeRaw({ type: type, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create or update the pinned version for a plugin with a given type and name.
     */
    pluginsCatalogPinsCreatePinnedVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().');
            }
            if (requestParameters['pluginsCatalogPinsCreatePinnedVersionRequest'] == null) {
                throw new runtime.RequiredError('pluginsCatalogPinsCreatePinnedVersionRequest', 'Required parameter "pluginsCatalogPinsCreatePinnedVersionRequest" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PluginsCatalogPinsCreatePinnedVersionRequestToJSON)(requestParameters['pluginsCatalogPinsCreatePinnedVersionRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create or update the pinned version for a plugin with a given type and name.
     */
    pluginsCatalogPinsCreatePinnedVersion(name, type, pluginsCatalogPinsCreatePinnedVersionRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogPinsCreatePinnedVersionRaw({ name: name, type: type, pluginsCatalogPinsCreatePinnedVersionRequest: pluginsCatalogPinsCreatePinnedVersionRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pluginsCatalogPinsListPinnedVersionsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/pins`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogPinsListPinnedVersionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pluginsCatalogPinsListPinnedVersions(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogPinsListPinnedVersionsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the pinned version for the plugin with the given type and name.
     */
    pluginsCatalogPinsReadPinnedVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogPinsReadPinnedVersion().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogPinsReadPinnedVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogPinsReadPinnedVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the pinned version for the plugin with the given type and name.
     */
    pluginsCatalogPinsReadPinnedVersion(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogPinsReadPinnedVersionRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove any pinned version for the plugin with the given type and name.
     */
    pluginsCatalogPinsRemovePinnedVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogPinsRemovePinnedVersion().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogPinsRemovePinnedVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove any pinned version for the plugin with the given type and name.
     */
    pluginsCatalogPinsRemovePinnedVersion(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogPinsRemovePinnedVersionRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the configuration data for the plugin with the given name.
     */
    pluginsCatalogReadPluginConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogReadPluginConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogReadPluginConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the configuration data for the plugin with the given name.
     */
    pluginsCatalogReadPluginConfiguration(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogReadPluginConfigurationRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the configuration data for the plugin with the given name.
     */
    pluginsCatalogReadPluginConfigurationWithTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogReadPluginConfigurationWithType().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogReadPluginConfigurationWithType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsCatalogReadPluginConfigurationWithTypeResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the configuration data for the plugin with the given name.
     */
    pluginsCatalogReadPluginConfigurationWithType(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogReadPluginConfigurationWithTypeRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    pluginsCatalogRegisterPluginRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogRegisterPlugin().');
            }
            if (requestParameters['pluginsCatalogRegisterPluginRequest'] == null) {
                throw new runtime.RequiredError('pluginsCatalogRegisterPluginRequest', 'Required parameter "pluginsCatalogRegisterPluginRequest" was null or undefined when calling pluginsCatalogRegisterPlugin().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PluginsCatalogRegisterPluginRequestToJSON)(requestParameters['pluginsCatalogRegisterPluginRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    pluginsCatalogRegisterPlugin(name, pluginsCatalogRegisterPluginRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogRegisterPluginRaw({ name: name, pluginsCatalogRegisterPluginRequest: pluginsCatalogRegisterPluginRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    pluginsCatalogRegisterPluginWithTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogRegisterPluginWithType().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogRegisterPluginWithType().');
            }
            if (requestParameters['pluginsCatalogRegisterPluginWithTypeRequest'] == null) {
                throw new runtime.RequiredError('pluginsCatalogRegisterPluginWithTypeRequest', 'Required parameter "pluginsCatalogRegisterPluginWithTypeRequest" was null or undefined when calling pluginsCatalogRegisterPluginWithType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PluginsCatalogRegisterPluginWithTypeRequestToJSON)(requestParameters['pluginsCatalogRegisterPluginWithTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    pluginsCatalogRegisterPluginWithType(name, type, pluginsCatalogRegisterPluginWithTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogRegisterPluginWithTypeRaw({ name: name, type: type, pluginsCatalogRegisterPluginWithTypeRequest: pluginsCatalogRegisterPluginWithTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove the plugin with the given name.
     */
    pluginsCatalogRemovePluginRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogRemovePlugin().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove the plugin with the given name.
     */
    pluginsCatalogRemovePlugin(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogRemovePluginRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove the plugin with the given name.
     */
    pluginsCatalogRemovePluginWithTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsCatalogRemovePluginWithType().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsCatalogRemovePluginWithType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove the plugin with the given name.
     */
    pluginsCatalogRemovePluginWithType(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsCatalogRemovePluginWithTypeRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
     * Reload mounted plugin backends.
     */
    pluginsReloadBackendsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pluginsReloadBackendsRequest'] == null) {
                throw new runtime.RequiredError('pluginsReloadBackendsRequest', 'Required parameter "pluginsReloadBackendsRequest" was null or undefined when calling pluginsReloadBackends().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/reload/backend`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PluginsReloadBackendsRequestToJSON)(requestParameters['pluginsReloadBackendsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsReloadBackendsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
     * Reload mounted plugin backends.
     */
    pluginsReloadBackends(pluginsReloadBackendsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsReloadBackendsRaw({ pluginsReloadBackendsRequest: pluginsReloadBackendsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pluginsRuntimesCatalogListPluginsRuntimesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/runtimes/catalog`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsRuntimesCatalogListPluginsRuntimesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pluginsRuntimesCatalogListPluginsRuntimes(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsRuntimesCatalogListPluginsRuntimesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pluginsRuntimesCatalogListPluginsRuntimes_3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pluginsRuntimesCatalogListPluginsRuntimes_3().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/runtimes/catalog/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsRuntimesCatalogListPluginsRuntimesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pluginsRuntimesCatalogListPluginsRuntimes_3(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsRuntimesCatalogListPluginsRuntimes_3Raw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the configuration data for the plugin runtime with the given name.
     */
    pluginsRuntimesCatalogReadPluginRuntimeConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogReadPluginRuntimeConfiguration().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogReadPluginRuntimeConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the configuration data for the plugin runtime with the given name.
     */
    pluginsRuntimesCatalogReadPluginRuntimeConfiguration(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsRuntimesCatalogReadPluginRuntimeConfigurationRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register a new plugin runtime, or updates an existing one with the supplied name.
     */
    pluginsRuntimesCatalogRegisterPluginRuntimeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().');
            }
            if (requestParameters['pluginsRuntimesCatalogRegisterPluginRuntimeRequest'] == null) {
                throw new runtime.RequiredError('pluginsRuntimesCatalogRegisterPluginRuntimeRequest', 'Required parameter "pluginsRuntimesCatalogRegisterPluginRuntimeRequest" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PluginsRuntimesCatalogRegisterPluginRuntimeRequestToJSON)(requestParameters['pluginsRuntimesCatalogRegisterPluginRuntimeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Register a new plugin runtime, or updates an existing one with the supplied name.
     */
    pluginsRuntimesCatalogRegisterPluginRuntime(name, type, pluginsRuntimesCatalogRegisterPluginRuntimeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsRuntimesCatalogRegisterPluginRuntimeRaw({ name: name, type: type, pluginsRuntimesCatalogRegisterPluginRuntimeRequest: pluginsRuntimesCatalogRegisterPluginRuntimeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove the plugin runtime with the given name.
     */
    pluginsRuntimesCatalogRemovePluginRuntimeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogRemovePluginRuntime().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogRemovePluginRuntime().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove the plugin runtime with the given name.
     */
    pluginsRuntimesCatalogRemovePluginRuntime(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pluginsRuntimesCatalogRemovePluginRuntimeRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the ACL policy with the given name.
     */
    policiesDeleteAclPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesDeleteAclPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the ACL policy with the given name.
     */
    policiesDeleteAclPolicy(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesDeleteAclPolicyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the policy with the given name.
     */
    policiesDeleteAclPolicy2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesDeleteAclPolicy2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the policy with the given name.
     */
    policiesDeleteAclPolicy2(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesDeleteAclPolicy2Raw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a password policy.
     */
    policiesDeletePasswordPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesDeletePasswordPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a password policy.
     */
    policiesDeletePasswordPolicy(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesDeletePasswordPolicyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a password from an existing password policy.
     */
    policiesGeneratePasswordFromPasswordPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesGeneratePasswordFromPasswordPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/password/{name}/generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesGeneratePasswordFromPasswordPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Generate a password from an existing password policy.
     */
    policiesGeneratePasswordFromPasswordPolicy(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesGeneratePasswordFromPasswordPolicyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    policiesListAclPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling policiesListAclPolicies().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/acl/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesListAclPoliciesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    policiesListAclPolicies(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesListAclPoliciesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    policiesListAclPolicies2Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policy`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesListAclPolicies2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    policiesListAclPolicies2(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesListAclPolicies2Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    policiesListAclPolicies3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling policiesListAclPolicies3().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policy/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesListAclPolicies3ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    policiesListAclPolicies3(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesListAclPolicies3Raw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the existing password policies.
     */
    policiesListPasswordPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling policiesListPasswordPolicies().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/password/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the existing password policies.
     */
    policiesListPasswordPolicies(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesListPasswordPoliciesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve information about the named ACL policy.
     */
    policiesReadAclPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesReadAclPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesReadAclPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve information about the named ACL policy.
     */
    policiesReadAclPolicy(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesReadAclPolicyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the policy body for the named policy.
     */
    policiesReadAclPolicy2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesReadAclPolicy2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesReadAclPolicy2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the policy body for the named policy.
     */
    policiesReadAclPolicy2(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesReadAclPolicy2Raw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve an existing password policy.
     */
    policiesReadPasswordPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesReadPasswordPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PoliciesReadPasswordPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve an existing password policy.
     */
    policiesReadPasswordPolicy(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesReadPasswordPolicyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a new or update an existing ACL policy.
     */
    policiesWriteAclPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesWriteAclPolicy().');
            }
            if (requestParameters['policiesWriteAclPolicyRequest'] == null) {
                throw new runtime.RequiredError('policiesWriteAclPolicyRequest', 'Required parameter "policiesWriteAclPolicyRequest" was null or undefined when calling policiesWriteAclPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PoliciesWriteAclPolicyRequestToJSON)(requestParameters['policiesWriteAclPolicyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Add a new or update an existing ACL policy.
     */
    policiesWriteAclPolicy(name, policiesWriteAclPolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesWriteAclPolicyRaw({ name: name, policiesWriteAclPolicyRequest: policiesWriteAclPolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a new or update an existing policy.
     */
    policiesWriteAclPolicy2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesWriteAclPolicy2().');
            }
            if (requestParameters['policiesWriteAclPolicy2Request'] == null) {
                throw new runtime.RequiredError('policiesWriteAclPolicy2Request', 'Required parameter "policiesWriteAclPolicy2Request" was null or undefined when calling policiesWriteAclPolicy2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PoliciesWriteAclPolicy2RequestToJSON)(requestParameters['policiesWriteAclPolicy2Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Add a new or update an existing policy.
     */
    policiesWriteAclPolicy2(name, policiesWriteAclPolicy2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesWriteAclPolicy2Raw({ name: name, policiesWriteAclPolicy2Request: policiesWriteAclPolicy2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a new or update an existing password policy.
     */
    policiesWritePasswordPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling policiesWritePasswordPolicy().');
            }
            if (requestParameters['policiesWritePasswordPolicyRequest'] == null) {
                throw new runtime.RequiredError('policiesWritePasswordPolicyRequest', 'Required parameter "policiesWritePasswordPolicyRequest" was null or undefined when calling policiesWritePasswordPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PoliciesWritePasswordPolicyRequestToJSON)(requestParameters['policiesWritePasswordPolicyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Add a new or update an existing password policy.
     */
    policiesWritePasswordPolicy(name, policiesWritePasswordPolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.policiesWritePasswordPolicyRaw({ name: name, policiesWritePasswordPolicyRequest: policiesWritePasswordPolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns stack traces that led to blocking on synchronization primitives
     * Returns stack traces that led to blocking on synchronization primitives
     */
    pprofBlockingRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/block`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns stack traces that led to blocking on synchronization primitives
     * Returns stack traces that led to blocking on synchronization primitives
     */
    pprofBlocking(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofBlockingRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the running program\'s command line, with arguments separated by NUL bytes.
     * Returns the running program\'s command line.
     */
    pprofCommandLineRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/cmdline`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the running program\'s command line, with arguments separated by NUL bytes.
     * Returns the running program\'s command line.
     */
    pprofCommandLine(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofCommandLineRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
     * Returns a pprof-formatted cpu profile payload.
     */
    pprofCpuProfileRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/profile`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
     * Returns a pprof-formatted cpu profile payload.
     */
    pprofCpuProfile(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofCpuProfileRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
     * Returns the execution trace in binary form.
     */
    pprofExecutionTraceRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/trace`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
     * Returns the execution trace in binary form.
     */
    pprofExecutionTrace(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofExecutionTraceRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns stack traces of all current goroutines.
     * Returns stack traces of all current goroutines.
     */
    pprofGoroutinesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/goroutine`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns stack traces of all current goroutines.
     * Returns stack traces of all current goroutines.
     */
    pprofGoroutines(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofGoroutinesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
     * Returns an HTML page listing the available profiles.
     */
    pprofIndexRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
     * Returns an HTML page listing the available profiles.
     */
    pprofIndex(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofIndexRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a sampling of all past memory allocations.
     * Returns a sampling of all past memory allocations.
     */
    pprofMemoryAllocationsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/allocs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns a sampling of all past memory allocations.
     * Returns a sampling of all past memory allocations.
     */
    pprofMemoryAllocations(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofMemoryAllocationsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a sampling of memory allocations of live object.
     * Returns a sampling of memory allocations of live object.
     */
    pprofMemoryAllocationsLiveRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/heap`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns a sampling of memory allocations of live object.
     * Returns a sampling of memory allocations of live object.
     */
    pprofMemoryAllocationsLive(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofMemoryAllocationsLiveRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns stack traces of holders of contended mutexes
     * Returns stack traces of holders of contended mutexes
     */
    pprofMutexesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/mutex`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns stack traces of holders of contended mutexes
     * Returns stack traces of holders of contended mutexes
     */
    pprofMutexes(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofMutexesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the program counters listed in the request.
     * Returns the program counters listed in the request.
     */
    pprofSymbolsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/symbol`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the program counters listed in the request.
     * Returns the program counters listed in the request.
     */
    pprofSymbols(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofSymbolsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns stack traces that led to the creation of new OS threads
     * Returns stack traces that led to the creation of new OS threads
     */
    pprofThreadCreationsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/pprof/threadcreate`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns stack traces that led to the creation of new OS threads
     * Returns stack traces that led to the creation of new OS threads
     */
    pprofThreadCreations(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pprofThreadCreationsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    queryTokenAccessorCapabilitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['queryTokenAccessorCapabilitiesRequest'] == null) {
                throw new runtime.RequiredError('queryTokenAccessorCapabilitiesRequest', 'Required parameter "queryTokenAccessorCapabilitiesRequest" was null or undefined when calling queryTokenAccessorCapabilities().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/capabilities-accessor`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.QueryTokenAccessorCapabilitiesRequestToJSON)(requestParameters['queryTokenAccessorCapabilitiesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    queryTokenAccessorCapabilities(queryTokenAccessorCapabilitiesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.queryTokenAccessorCapabilitiesRaw({ queryTokenAccessorCapabilitiesRequest: queryTokenAccessorCapabilitiesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    queryTokenCapabilitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['queryTokenCapabilitiesRequest'] == null) {
                throw new runtime.RequiredError('queryTokenCapabilitiesRequest', 'Required parameter "queryTokenCapabilitiesRequest" was null or undefined when calling queryTokenCapabilities().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/capabilities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.QueryTokenCapabilitiesRequestToJSON)(requestParameters['queryTokenCapabilitiesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    queryTokenCapabilities(queryTokenCapabilitiesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.queryTokenCapabilitiesRaw({ queryTokenCapabilitiesRequest: queryTokenCapabilitiesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    queryTokenSelfCapabilitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['queryTokenSelfCapabilitiesRequest'] == null) {
                throw new runtime.RequiredError('queryTokenSelfCapabilitiesRequest', 'Required parameter "queryTokenSelfCapabilitiesRequest" was null or undefined when calling queryTokenSelfCapabilities().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/capabilities-self`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.QueryTokenSelfCapabilitiesRequestToJSON)(requestParameters['queryTokenSelfCapabilitiesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    queryTokenSelfCapabilities(queryTokenSelfCapabilitiesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.queryTokenSelfCapabilitiesRaw({ queryTokenSelfCapabilitiesRequest: queryTokenSelfCapabilitiesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rateLimitQuotasConfigureRequest'] == null) {
                throw new runtime.RequiredError('rateLimitQuotasConfigureRequest', 'Required parameter "rateLimitQuotasConfigureRequest" was null or undefined when calling rateLimitQuotasConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/quotas/config`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateLimitQuotasConfigureRequestToJSON)(requestParameters['rateLimitQuotasConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rateLimitQuotasConfigure(rateLimitQuotasConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasConfigureRaw({ rateLimitQuotasConfigureRequest: rateLimitQuotasConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rateLimitQuotasDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rateLimitQuotasDelete(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasDeleteRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling rateLimitQuotasList().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/rate-limit/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    rateLimitQuotasList(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasListRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rateLimitQuotasRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateLimitQuotasReadResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    rateLimitQuotasRead(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasReadRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasReadConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateLimitQuotasReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    rateLimitQuotasReadConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasReadConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rateLimitQuotasWriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rateLimitQuotasWrite().');
            }
            if (requestParameters['rateLimitQuotasWriteRequest'] == null) {
                throw new runtime.RequiredError('rateLimitQuotasWriteRequest', 'Required parameter "rateLimitQuotasWriteRequest" was null or undefined when calling rateLimitQuotasWrite().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateLimitQuotasWriteRequestToJSON)(requestParameters['rateLimitQuotasWriteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rateLimitQuotasWrite(name, rateLimitQuotasWriteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rateLimitQuotasWriteRaw({ name: name, rateLimitQuotasWriteRequest: rateLimitQuotasWriteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the key with given path.
     */
    rawDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling rawDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the key with given path.
     */
    rawDelete(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rawDeleteRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list keys for a given path prefix.
     */
    rawListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling rawList().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling rawList().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/raw/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list keys for a given path prefix.
     */
    rawList(path, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rawListRaw({ path: path, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the value of the key at the given path.
     */
    rawReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling rawRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RawReadResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the value of the key at the given path.
     */
    rawRead(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rawReadRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the value of the key at the given path.
     */
    rawWriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling rawWrite().');
            }
            if (requestParameters['rawWriteRequest'] == null) {
                throw new runtime.RequiredError('rawWriteRequest', 'Required parameter "rawWriteRequest" was null or undefined when calling rawWrite().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RawWriteRequestToJSON)(requestParameters['rawWriteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update the value of the key at the given path.
     */
    rawWrite(path, rawWriteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rawWriteRaw({ path: path, rawWriteRequest: rawWriteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the available and activated activation-flagged features.
     */
    readActivationFlagsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/activation-flags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the available and activated activation-flagged features.
     */
    readActivationFlags(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readActivationFlagsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the health status of Vault.
     */
    readHealthStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/health`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the health status of Vault.
     */
    readHealthStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readHealthStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the initialization status of Vault.
     */
    readInitializationStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/init`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the initialization status of Vault.
     */
    readInitializationStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readInitializationStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
     * Return a sanitized version of the Vault server configuration.
     */
    readSanitizedConfigurationStateRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/state/sanitized`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
     * Return a sanitized version of the Vault server configuration.
     */
    readSanitizedConfigurationState(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readSanitizedConfigurationStateRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current Census agent\'s snapshot fields.
     */
    readVerbosityLevelForRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/census/snapshot`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current Census agent\'s snapshot fields.
     */
    readVerbosityLevelFor(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVerbosityLevelForRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current status of the request limiter.
     */
    readVerbosityLevelFor_4Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/internal/request-limiter/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current status of the request limiter.
     */
    readVerbosityLevelFor_4(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVerbosityLevelFor_4Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Look up wrapping properties for the given token.
     */
    readWrappingPropertiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['readWrappingPropertiesRequest'] == null) {
                throw new runtime.RequiredError('readWrappingPropertiesRequest', 'Required parameter "readWrappingPropertiesRequest" was null or undefined when calling readWrappingProperties().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/wrapping/lookup`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReadWrappingPropertiesRequestToJSON)(requestParameters['readWrappingPropertiesRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReadWrappingPropertiesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Look up wrapping properties for the given token.
     */
    readWrappingProperties(readWrappingPropertiesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readWrappingPropertiesRaw({ readWrappingPropertiesRequest: readWrappingPropertiesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Look up wrapping properties for the requester\'s token.
     */
    readWrappingProperties2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['token'] != null) {
                queryParameters['token'] = requestParameters['token'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/wrapping/lookup`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReadWrappingProperties2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Look up wrapping properties for the requester\'s token.
     */
    readWrappingProperties2(token, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readWrappingProperties2Raw({ token: token }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
     * Cancels any in-progress rekey.
     */
    rekeyAttemptCancelRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/init`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
     * Cancels any in-progress rekey.
     */
    rekeyAttemptCancel(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyAttemptCancelRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
     * Initializes a new rekey attempt.
     */
    rekeyAttemptInitializeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rekeyAttemptInitializeRequest'] == null) {
                throw new runtime.RequiredError('rekeyAttemptInitializeRequest', 'Required parameter "rekeyAttemptInitializeRequest" was null or undefined when calling rekeyAttemptInitialize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/rekey/init`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RekeyAttemptInitializeRequestToJSON)(requestParameters['rekeyAttemptInitializeRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyAttemptInitializeResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
     * Initializes a new rekey attempt.
     */
    rekeyAttemptInitialize(rekeyAttemptInitializeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyAttemptInitializeRaw({ rekeyAttemptInitializeRequest: rekeyAttemptInitializeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reads the configuration and progress of the current rekey attempt.
     */
    rekeyAttemptReadProgressRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/init`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyAttemptReadProgressResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Reads the configuration and progress of the current rekey attempt.
     */
    rekeyAttemptReadProgress(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyAttemptReadProgressRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enter a single unseal key share to progress the rekey of the Vault.
     */
    rekeyAttemptUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rekeyAttemptUpdateRequest'] == null) {
                throw new runtime.RequiredError('rekeyAttemptUpdateRequest', 'Required parameter "rekeyAttemptUpdateRequest" was null or undefined when calling rekeyAttemptUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/rekey/update`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RekeyAttemptUpdateRequestToJSON)(requestParameters['rekeyAttemptUpdateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyAttemptUpdateResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Enter a single unseal key share to progress the rekey of the Vault.
     */
    rekeyAttemptUpdate(rekeyAttemptUpdateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyAttemptUpdateRaw({ rekeyAttemptUpdateRequest: rekeyAttemptUpdateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the backup copy of PGP-encrypted unseal keys.
     */
    rekeyDeleteBackupKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/backup`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the backup copy of PGP-encrypted unseal keys.
     */
    rekeyDeleteBackupKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyDeleteBackupKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rekeyDeleteBackupRecoveryKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/recovery-key-backup`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rekeyDeleteBackupRecoveryKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyDeleteBackupRecoveryKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the backup copy of PGP-encrypted unseal keys.
     */
    rekeyReadBackupKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/backup`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyReadBackupKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the backup copy of PGP-encrypted unseal keys.
     */
    rekeyReadBackupKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyReadBackupKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rekeyReadBackupRecoveryKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/recovery-key-backup`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyReadBackupRecoveryKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    rekeyReadBackupRecoveryKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyReadBackupRecoveryKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
     * Cancel any in-progress rekey verification operation.
     */
    rekeyVerificationCancelRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/verify`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyVerificationCancelResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
     * Cancel any in-progress rekey verification operation.
     */
    rekeyVerificationCancel(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyVerificationCancelRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the configuration and progress of the current rekey verification attempt.
     */
    rekeyVerificationReadProgressRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/rekey/verify`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyVerificationReadProgressResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the configuration and progress of the current rekey verification attempt.
     */
    rekeyVerificationReadProgress(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyVerificationReadProgressRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Enter a single new key share to progress the rekey verification operation.
     */
    rekeyVerificationUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rekeyVerificationUpdateRequest'] == null) {
                throw new runtime.RequiredError('rekeyVerificationUpdateRequest', 'Required parameter "rekeyVerificationUpdateRequest" was null or undefined when calling rekeyVerificationUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/rekey/verify`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RekeyVerificationUpdateRequestToJSON)(requestParameters['rekeyVerificationUpdateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RekeyVerificationUpdateResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Enter a single new key share to progress the rekey verification operation.
     */
    rekeyVerificationUpdate(rekeyVerificationUpdateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rekeyVerificationUpdateRaw({ rekeyVerificationUpdateRequest: rekeyVerificationUpdateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reload all plugins of a specific name and type across all namespaces. If \"scope\" is provided and is \"global\", the plugin is reloaded across all nodes and clusters. If a new plugin version has been pinned, this will ensure all instances start using the new version.
     * Reload all instances of a specific plugin.
     */
    reloadPluginsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling reloadPlugins().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling reloadPlugins().');
            }
            if (requestParameters['reloadPluginsRequest'] == null) {
                throw new runtime.RequiredError('reloadPluginsRequest', 'Required parameter "reloadPluginsRequest" was null or undefined when calling reloadPlugins().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/plugins/reload/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReloadPluginsRequestToJSON)(requestParameters['reloadPluginsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReloadPluginsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Reload all plugins of a specific name and type across all namespaces. If \"scope\" is provided and is \"global\", the plugin is reloaded across all nodes and clusters. If a new plugin version has been pinned, this will ensure all instances start using the new version.
     * Reload all instances of a specific plugin.
     */
    reloadPlugins(name, type, reloadPluginsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reloadPluginsRaw({ name: name, type: type, reloadPluginsRequest: reloadPluginsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reload the given subsystem
     */
    reloadSubsystemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subsystem'] == null) {
                throw new runtime.RequiredError('subsystem', 'Required parameter "subsystem" was null or undefined when calling reloadSubsystem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/reload/{subsystem}`.replace(`{${"subsystem"}}`, encodeURIComponent(String(requestParameters['subsystem']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Reload the given subsystem
     */
    reloadSubsystem(subsystem, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reloadSubsystemRaw({ subsystem: subsystem }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Initiate a mount migration
     */
    remountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['remountRequest'] == null) {
                throw new runtime.RequiredError('remountRequest', 'Required parameter "remountRequest" was null or undefined when calling remount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/remount`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RemountRequestToJSON)(requestParameters['remountRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RemountResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Initiate a mount migration
     */
    remount(remountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.remountRaw({ remountRequest: remountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check status of a mount migration
     */
    remountStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['migrationId'] == null) {
                throw new runtime.RequiredError('migrationId', 'Required parameter "migrationId" was null or undefined when calling remountStatus().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/remount/status/{migration_id}`.replace(`{${"migration_id"}}`, encodeURIComponent(String(requestParameters['migrationId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RemountStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Check status of a mount migration
     */
    remountStatus(migrationId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.remountStatusRaw({ migrationId: migrationId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rewrapRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rewrapRequest'] == null) {
                throw new runtime.RequiredError('rewrapRequest', 'Required parameter "rewrapRequest" was null or undefined when calling rewrap().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/wrapping/rewrap`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RewrapRequestToJSON)(requestParameters['rewrapRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rewrap(rewrapRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rewrapRaw({ rewrapRequest: rewrapRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Cancels any in-progress root generation attempt.
     */
    rootTokenGenerationCancelRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/generate-root/attempt`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Cancels any in-progress root generation attempt.
     */
    rootTokenGenerationCancel(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationCancelRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Cancels any in-progress root generation attempt.
     */
    rootTokenGenerationCancel2Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/generate-root`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Cancels any in-progress root generation attempt.
     */
    rootTokenGenerationCancel2(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationCancel2Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    rootTokenGenerationInitializeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rootTokenGenerationInitializeRequest'] == null) {
                throw new runtime.RequiredError('rootTokenGenerationInitializeRequest', 'Required parameter "rootTokenGenerationInitializeRequest" was null or undefined when calling rootTokenGenerationInitialize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/generate-root/attempt`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RootTokenGenerationInitializeRequestToJSON)(requestParameters['rootTokenGenerationInitializeRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RootTokenGenerationInitializeResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    rootTokenGenerationInitialize(rootTokenGenerationInitializeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationInitializeRaw({ rootTokenGenerationInitializeRequest: rootTokenGenerationInitializeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    rootTokenGenerationInitialize2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rootTokenGenerationInitialize2Request'] == null) {
                throw new runtime.RequiredError('rootTokenGenerationInitialize2Request', 'Required parameter "rootTokenGenerationInitialize2Request" was null or undefined when calling rootTokenGenerationInitialize2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/generate-root`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RootTokenGenerationInitialize2RequestToJSON)(requestParameters['rootTokenGenerationInitialize2Request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RootTokenGenerationInitialize2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    rootTokenGenerationInitialize2(rootTokenGenerationInitialize2Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationInitialize2Raw({ rootTokenGenerationInitialize2Request: rootTokenGenerationInitialize2Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    rootTokenGenerationReadProgressRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/generate-root/attempt`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RootTokenGenerationReadProgressResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    rootTokenGenerationReadProgress(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationReadProgressRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    rootTokenGenerationReadProgress2Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/generate-root`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RootTokenGenerationReadProgress2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    rootTokenGenerationReadProgress2(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationReadProgress2Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
     * Enter a single unseal key share to progress the root generation attempt.
     */
    rootTokenGenerationUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rootTokenGenerationUpdateRequest'] == null) {
                throw new runtime.RequiredError('rootTokenGenerationUpdateRequest', 'Required parameter "rootTokenGenerationUpdateRequest" was null or undefined when calling rootTokenGenerationUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/generate-root/update`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RootTokenGenerationUpdateRequestToJSON)(requestParameters['rootTokenGenerationUpdateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RootTokenGenerationUpdateResponseFromJSON)(jsonValue));
        });
    }
    /**
     * If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
     * Enter a single unseal key share to progress the root generation attempt.
     */
    rootTokenGenerationUpdate(rootTokenGenerationUpdateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rootTokenGenerationUpdateRaw({ rootTokenGenerationUpdateRequest: rootTokenGenerationUpdateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Seal the Vault.
     */
    sealRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/seal`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Seal the Vault.
     */
    seal(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sealRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check the seal status of a Vault.
     */
    sealStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/seal-status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SealStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Check the seal status of a Vault.
     */
    sealStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sealStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
     * Cause the node to give up active status.
     */
    stepDownLeaderRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/step-down`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
     * Cause the node to give up active status.
     */
    stepDownLeader(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.stepDownLeaderRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the specified event notification subscription.
     */
    subscriptionsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling subscriptionsCreate().');
            }
            if (requestParameters['plugin'] == null) {
                throw new runtime.RequiredError('plugin', 'Required parameter "plugin" was null or undefined when calling subscriptionsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/events/subscriptions/{plugin}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters['plugin']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionsCreateResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the specified event notification subscription.
     */
    subscriptionsCreate(id, plugin, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsCreateRaw({ id: id, plugin: plugin }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes the specified event notification subscription and stops sending event notifications to it.
     */
    subscriptionsCreate_5Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling subscriptionsCreate_5().');
            }
            if (requestParameters['plugin'] == null) {
                throw new runtime.RequiredError('plugin', 'Required parameter "plugin" was null or undefined when calling subscriptionsCreate_5().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/events/subscriptions/{plugin}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters['plugin']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes the specified event notification subscription and stops sending event notifications to it.
     */
    subscriptionsCreate_5(id, plugin, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsCreate_5Raw({ id: id, plugin: plugin }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Listing event notifications subscriptions
     */
    subscriptionsListEventsSubscriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling subscriptionsListEventsSubscriptions().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/events/subscriptions/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionsListEventsSubscriptionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Listing event notifications subscriptions
     */
    subscriptionsListEventsSubscriptions(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsListEventsSubscriptionsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Listing event notifications subscriptions
     */
    subscriptionsReadEventsSubscriptionsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/events/subscriptions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionsReadEventsSubscriptionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Listing event notifications subscriptions
     */
    subscriptionsReadEventsSubscriptions(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsReadEventsSubscriptionsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new event notification subscription and starts to send events to it.
     */
    subscriptionsWriteEventsSubscriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionsWriteEventsSubscriptionsRequest'] == null) {
                throw new runtime.RequiredError('subscriptionsWriteEventsSubscriptionsRequest', 'Required parameter "subscriptionsWriteEventsSubscriptionsRequest" was null or undefined when calling subscriptionsWriteEventsSubscriptions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/events/subscriptions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SubscriptionsWriteEventsSubscriptionsRequestToJSON)(requestParameters['subscriptionsWriteEventsSubscriptionsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionsWriteEventsSubscriptionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new event notification subscription and starts to send events to it.
     */
    subscriptionsWriteEventsSubscriptions(subscriptionsWriteEventsSubscriptionsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsWriteEventsSubscriptionsRaw({ subscriptionsWriteEventsSubscriptionsRequest: subscriptionsWriteEventsSubscriptionsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure control group global settings.
     */
    systemDeleteConfigControlGroupRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/control-group`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure control group global settings.
     */
    systemDeleteConfigControlGroup(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteConfigControlGroupRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteManagedKeysTypeNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteManagedKeysTypeName().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemDeleteManagedKeysTypeName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteManagedKeysTypeName(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteManagedKeysTypeNameRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemDeleteMfaMethodDuoNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodDuoName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemDeleteMfaMethodDuoName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteMfaMethodDuoNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemDeleteMfaMethodOktaNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodOktaName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemDeleteMfaMethodOktaName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteMfaMethodOktaNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemDeleteMfaMethodPingidNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodPingidName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemDeleteMfaMethodPingidName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteMfaMethodPingidNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemDeleteMfaMethodTotpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodTotpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemDeleteMfaMethodTotpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteMfaMethodTotpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteNamespacesPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling systemDeleteNamespacesPath().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteNamespacesPath(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteNamespacesPathRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemDeletePoliciesEgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeletePoliciesEgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemDeletePoliciesEgpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeletePoliciesEgpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemDeletePoliciesRgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeletePoliciesRgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemDeletePoliciesRgpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeletePoliciesRgpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteQuotasLeaseCountNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteQuotasLeaseCountName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteQuotasLeaseCountName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteQuotasLeaseCountNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemDeleteReplicationPerformancePrimaryPathsFilterId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteReplicationPerformancePrimaryPathsFilterId(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteReplicationPerformancePrimaryPathsFilterIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete automated raft snapshot configuration
     */
    systemDeleteStorageRaftSnapshotAutoConfigNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteStorageRaftSnapshotAutoConfigName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete automated raft snapshot configuration
     */
    systemDeleteStorageRaftSnapshotAutoConfigName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteStorageRaftSnapshotAutoConfigNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncConfigRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/config`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemDeleteSyncConfigResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemDeleteSyncConfig(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncConfigRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsAwsSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsAwsSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsAwsSmName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsAwsSmNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsAzureKvNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsAzureKvName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsAzureKvName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsAzureKvNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsGcpSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsGcpSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsGcpSmName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsGcpSmNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsGhNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsGhName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsGhName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsGhNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsInMemNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsInMemName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsInMemName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsInMemNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncDestinationsVercelProjectNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsVercelProjectName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemDeleteSyncDestinationsVercelProjectName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncDestinationsVercelProjectNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemDeleteSyncGithubAppsNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemDeleteSyncGithubAppsName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemDeleteSyncGithubAppsNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemDeleteSyncGithubAppsName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemDeleteSyncGithubAppsNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListManagedKeysTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemListManagedKeysType().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListManagedKeysType().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/managed-keys/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListManagedKeysType(type, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListManagedKeysTypeRaw({ type: type, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists all the available MFA methods by their name.
     */
    systemListMfaMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListMfaMethod().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Lists all the available MFA methods by their name.
     */
    systemListMfaMethod(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListMfaMethodRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListNamespaces().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/namespaces/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListNamespaces(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListNamespacesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the configured access control policies.
     */
    systemListPoliciesEgpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListPoliciesEgp().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/egp/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the configured access control policies.
     */
    systemListPoliciesEgp(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListPoliciesEgpRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the configured access control policies.
     */
    systemListPoliciesRgpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListPoliciesRgp().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/rgp/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the configured access control policies.
     */
    systemListPoliciesRgp(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListPoliciesRgpRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListQuotasLeaseCountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListQuotasLeaseCount().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/lease-count/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListQuotasLeaseCount(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListQuotasLeaseCountRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List automated raft snapshot configurations
     */
    systemListStorageRaftSnapshotAutoConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListStorageRaftSnapshotAutoConfig().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/storage/raft/snapshot-auto/config/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List automated raft snapshot configurations
     */
    systemListStorageRaftSnapshotAutoConfig(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListStorageRaftSnapshotAutoConfigRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListSyncAssociationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListSyncAssociations().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/associations/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemListSyncAssociationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListSyncAssociations(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListSyncAssociationsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListSyncDestinationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListSyncDestinations().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemListSyncDestinationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListSyncDestinations(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListSyncDestinationsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListSyncDestinationsTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemListSyncDestinationsType().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListSyncDestinationsType().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemListSyncDestinationsTypeResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListSyncDestinationsType(type, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListSyncDestinationsTypeRaw({ type: type, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemListSyncGithubAppsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling systemListSyncGithubApps().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/github-apps/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemListSyncGithubAppsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemListSyncGithubApps(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemListSyncGithubAppsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure control group global settings.
     */
    systemReadConfigControlGroupRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/control-group`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure control group global settings.
     */
    systemReadConfigControlGroup(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadConfigControlGroupRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets the current status of the policy application mode for Vault.
     * Gets the current status of the policy application mode for Vault.
     */
    systemReadConfigGroupPolicyApplicationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/group-policy-application`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadConfigGroupPolicyApplicationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Gets the current status of the policy application mode for Vault.
     * Gets the current status of the policy application mode for Vault.
     */
    systemReadConfigGroupPolicyApplication(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadConfigGroupPolicyApplicationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server
     */
    systemReadLicenseStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/license/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server
     */
    systemReadLicenseStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadLicenseStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadManagedKeysTypeNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadManagedKeysTypeName().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemReadManagedKeysTypeName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadManagedKeysTypeName(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadManagedKeysTypeNameRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemReadMfaMethodDuoNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadMfaMethodDuoName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemReadMfaMethodDuoName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadMfaMethodDuoNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemReadMfaMethodOktaNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadMfaMethodOktaName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemReadMfaMethodOktaName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadMfaMethodOktaNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemReadMfaMethodPingidNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadMfaMethodPingidName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemReadMfaMethodPingidName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadMfaMethodPingidNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemReadMfaMethodTotpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadMfaMethodTotpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemReadMfaMethodTotpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadMfaMethodTotpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generates a TOTP secret for the given method name on the entity of the   calling token.
     */
    systemReadMfaMethodTotpNameGenerateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadMfaMethodTotpNameGenerate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}/generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generates a TOTP secret for the given method name on the entity of the   calling token.
     */
    systemReadMfaMethodTotpNameGenerate(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadMfaMethodTotpNameGenerateRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadNamespacesPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling systemReadNamespacesPath().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadNamespacesPath(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadNamespacesPathRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * The reload_id returned by a cluster scoped reload must be provided.
     * Get the status of a cluster-scoped reload.
     */
    systemReadPluginsReloadBackendStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/plugins/reload/backend/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The reload_id returned by a cluster scoped reload must be provided.
     * Get the status of a cluster-scoped reload.
     */
    systemReadPluginsReloadBackendStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadPluginsReloadBackendStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemReadPoliciesEgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadPoliciesEgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemReadPoliciesEgpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadPoliciesEgpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemReadPoliciesRgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadPoliciesRgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemReadPoliciesRgpName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadPoliciesRgpNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadQuotasLeaseCountNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadQuotasLeaseCountName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadQuotasLeaseCountName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadQuotasLeaseCountNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationDrSecondaryLicenseStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/license/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationDrSecondaryLicenseStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationDrSecondaryLicenseStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationDrStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationDrStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationDrStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationPerformancePrimaryDynamicFilterIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemReadReplicationPerformancePrimaryDynamicFilterId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/primary/dynamic-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationPerformancePrimaryDynamicFilterId(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationPerformancePrimaryDynamicFilterIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemReadReplicationPerformancePrimaryPathsFilterId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationPerformancePrimaryPathsFilterId(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationPerformancePrimaryPathsFilterIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationPerformanceSecondaryDynamicFilterIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemReadReplicationPerformanceSecondaryDynamicFilterId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/dynamic-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationPerformanceSecondaryDynamicFilterId(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationPerformanceSecondaryDynamicFilterIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationPerformanceStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationPerformanceStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationPerformanceStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadReplicationStatusRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadReplicationStatus(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadReplicationStatusRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the state of any ongoing seal rewrap process
     */
    systemReadSealwrapRewrapRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sealwrap/rewrap`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve the state of any ongoing seal rewrap process
     */
    systemReadSealwrapRewrap(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSealwrapRewrapRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read automated raft snapshot configuration
     */
    systemReadStorageRaftSnapshotAutoConfigNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadStorageRaftSnapshotAutoConfigName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read automated raft snapshot configuration
     */
    systemReadStorageRaftSnapshotAutoConfigName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadStorageRaftSnapshotAutoConfigNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read status of automated raft snapshots
     */
    systemReadStorageRaftSnapshotAutoStatusNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadStorageRaftSnapshotAutoStatusName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/storage/raft/snapshot-auto/status/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read status of automated raft snapshots
     */
    systemReadStorageRaftSnapshotAutoStatusName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadStorageRaftSnapshotAutoStatusNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncAssociationsDestinationsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/associations/destinations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncAssociationsDestinationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncAssociationsDestinations(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncAssociationsDestinationsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncAssociationsMountSecretNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mount'] == null) {
                throw new runtime.RequiredError('mount', 'Required parameter "mount" was null or undefined when calling systemReadSyncAssociationsMountSecretName().');
            }
            if (requestParameters['secretName'] == null) {
                throw new runtime.RequiredError('secretName', 'Required parameter "secretName" was null or undefined when calling systemReadSyncAssociationsMountSecretName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/associations/{mount}/{secret_name}`.replace(`{${"mount"}}`, encodeURIComponent(String(requestParameters['mount']))).replace(`{${"secret_name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncAssociationsMountSecretNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncAssociationsMountSecretName(mount, secretName, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncAssociationsMountSecretNameRaw({ mount: mount, secretName: secretName }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncConfigRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncConfigResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncConfig(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncConfigRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsAwsSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsAwsSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsAwsSmNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsAwsSmName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsAwsSmNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsAzureKvNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsAzureKvName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsAzureKvNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsAzureKvName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsAzureKvNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsGcpSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsGcpSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsGcpSmNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsGcpSmName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsGcpSmNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsGhNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsGhName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsGhNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsGhName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsGhNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsInMemNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsInMemName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsInMemNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsInMemName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsInMemNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsTypeNameAssociationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsTypeNameAssociations().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemReadSyncDestinationsTypeNameAssociations().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/{type}/{name}/associations`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsTypeNameAssociationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsTypeNameAssociations(name, type, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsTypeNameAssociationsRaw({ name: name, type: type }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncDestinationsVercelProjectNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsVercelProjectName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncDestinationsVercelProjectNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncDestinationsVercelProjectName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncDestinationsVercelProjectNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadSyncGithubAppsNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemReadSyncGithubAppsName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemReadSyncGithubAppsNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemReadSyncGithubAppsName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadSyncGithubAppsNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemReadUtilizationReportRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/utilization-report`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemReadUtilizationReport(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemReadUtilizationReportRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure control group global settings.
     */
    systemWriteConfigControlGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteConfigControlGroupRequest'] == null) {
                throw new runtime.RequiredError('systemWriteConfigControlGroupRequest', 'Required parameter "systemWriteConfigControlGroupRequest" was null or undefined when calling systemWriteConfigControlGroup().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/control-group`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteConfigControlGroupRequestToJSON)(requestParameters['systemWriteConfigControlGroupRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure control group global settings.
     */
    systemWriteConfigControlGroup(systemWriteConfigControlGroupRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteConfigControlGroupRaw({ systemWriteConfigControlGroupRequest: systemWriteConfigControlGroupRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * The group_policy_application_mode must be provided, as within_namespace_hierarchy or any.
     * Updates the policy application mode for Vault.
     */
    systemWriteConfigGroupPolicyApplicationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteConfigGroupPolicyApplicationRequest'] == null) {
                throw new runtime.RequiredError('systemWriteConfigGroupPolicyApplicationRequest', 'Required parameter "systemWriteConfigGroupPolicyApplicationRequest" was null or undefined when calling systemWriteConfigGroupPolicyApplication().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/group-policy-application`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteConfigGroupPolicyApplicationRequestToJSON)(requestParameters['systemWriteConfigGroupPolicyApplicationRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The group_policy_application_mode must be provided, as within_namespace_hierarchy or any.
     * Updates the policy application mode for Vault.
     */
    systemWriteConfigGroupPolicyApplication(systemWriteConfigGroupPolicyApplicationRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteConfigGroupPolicyApplicationRaw({ systemWriteConfigGroupPolicyApplicationRequest: systemWriteConfigGroupPolicyApplicationRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Authorize a control group request
     */
    systemWriteControlGroupAuthorizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteControlGroupAuthorizeRequest'] == null) {
                throw new runtime.RequiredError('systemWriteControlGroupAuthorizeRequest', 'Required parameter "systemWriteControlGroupAuthorizeRequest" was null or undefined when calling systemWriteControlGroupAuthorize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/control-group/authorize`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteControlGroupAuthorizeRequestToJSON)(requestParameters['systemWriteControlGroupAuthorizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Authorize a control group request
     */
    systemWriteControlGroupAuthorize(systemWriteControlGroupAuthorizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteControlGroupAuthorizeRaw({ systemWriteControlGroupAuthorizeRequest: systemWriteControlGroupAuthorizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check the status of a control group request
     */
    systemWriteControlGroupRequestRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteControlGroupRequestRequest'] == null) {
                throw new runtime.RequiredError('systemWriteControlGroupRequestRequest', 'Required parameter "systemWriteControlGroupRequestRequest" was null or undefined when calling systemWriteControlGroupRequest().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/control-group/request`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteControlGroupRequestRequestToJSON)(requestParameters['systemWriteControlGroupRequestRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check the status of a control group request
     */
    systemWriteControlGroupRequest(systemWriteControlGroupRequestRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteControlGroupRequestRaw({ systemWriteControlGroupRequestRequest: systemWriteControlGroupRequestRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Write activity log data
     */
    systemWriteInternalCountersActivityWriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteInternalCountersActivityWriteRequest'] == null) {
                throw new runtime.RequiredError('systemWriteInternalCountersActivityWriteRequest', 'Required parameter "systemWriteInternalCountersActivityWriteRequest" was null or undefined when calling systemWriteInternalCountersActivityWrite().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/internal/counters/activity/write`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteInternalCountersActivityWriteRequestToJSON)(requestParameters['systemWriteInternalCountersActivityWriteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Write activity log data
     */
    systemWriteInternalCountersActivityWrite(systemWriteInternalCountersActivityWriteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteInternalCountersActivityWriteRaw({ systemWriteInternalCountersActivityWriteRequest: systemWriteInternalCountersActivityWriteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteManagedKeysTypeNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteManagedKeysTypeName().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemWriteManagedKeysTypeName().');
            }
            if (requestParameters['systemWriteManagedKeysTypeNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteManagedKeysTypeNameRequest', 'Required parameter "systemWriteManagedKeysTypeNameRequest" was null or undefined when calling systemWriteManagedKeysTypeName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteManagedKeysTypeNameRequestToJSON)(requestParameters['systemWriteManagedKeysTypeNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteManagedKeysTypeName(name, type, systemWriteManagedKeysTypeNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteManagedKeysTypeNameRaw({ name: name, type: type, systemWriteManagedKeysTypeNameRequest: systemWriteManagedKeysTypeNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteManagedKeysTypeNameTestSignRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().');
            }
            if (requestParameters['systemWriteManagedKeysTypeNameTestSignRequest'] == null) {
                throw new runtime.RequiredError('systemWriteManagedKeysTypeNameTestSignRequest', 'Required parameter "systemWriteManagedKeysTypeNameTestSignRequest" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/managed-keys/{type}/{name}/test/sign`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteManagedKeysTypeNameTestSignRequestToJSON)(requestParameters['systemWriteManagedKeysTypeNameTestSignRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteManagedKeysTypeNameTestSign(name, type, systemWriteManagedKeysTypeNameTestSignRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteManagedKeysTypeNameTestSignRaw({ name: name, type: type, systemWriteManagedKeysTypeNameTestSignRequest: systemWriteManagedKeysTypeNameTestSignRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemWriteMfaMethodDuoNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodDuoName().');
            }
            if (requestParameters['systemWriteMfaMethodDuoNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodDuoNameRequest', 'Required parameter "systemWriteMfaMethodDuoNameRequest" was null or undefined when calling systemWriteMfaMethodDuoName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodDuoNameRequestToJSON)(requestParameters['systemWriteMfaMethodDuoNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a Duo MFA method.
     */
    systemWriteMfaMethodDuoName(name, systemWriteMfaMethodDuoNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodDuoNameRaw({ name: name, systemWriteMfaMethodDuoNameRequest: systemWriteMfaMethodDuoNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemWriteMfaMethodOktaNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodOktaName().');
            }
            if (requestParameters['systemWriteMfaMethodOktaNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodOktaNameRequest', 'Required parameter "systemWriteMfaMethodOktaNameRequest" was null or undefined when calling systemWriteMfaMethodOktaName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodOktaNameRequestToJSON)(requestParameters['systemWriteMfaMethodOktaNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates an Okta MFA method.
     */
    systemWriteMfaMethodOktaName(name, systemWriteMfaMethodOktaNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodOktaNameRaw({ name: name, systemWriteMfaMethodOktaNameRequest: systemWriteMfaMethodOktaNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemWriteMfaMethodPingidNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodPingidName().');
            }
            if (requestParameters['systemWriteMfaMethodPingidNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodPingidNameRequest', 'Required parameter "systemWriteMfaMethodPingidNameRequest" was null or undefined when calling systemWriteMfaMethodPingidName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodPingidNameRequestToJSON)(requestParameters['systemWriteMfaMethodPingidNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a PingID MFA method.
     */
    systemWriteMfaMethodPingidName(name, systemWriteMfaMethodPingidNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodPingidNameRaw({ name: name, systemWriteMfaMethodPingidNameRequest: systemWriteMfaMethodPingidNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemWriteMfaMethodTotpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpName().');
            }
            if (requestParameters['systemWriteMfaMethodTotpNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodTotpNameRequest', 'Required parameter "systemWriteMfaMethodTotpNameRequest" was null or undefined when calling systemWriteMfaMethodTotpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodTotpNameRequestToJSON)(requestParameters['systemWriteMfaMethodTotpNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Defines or updates a TOTP MFA method.
     */
    systemWriteMfaMethodTotpName(name, systemWriteMfaMethodTotpNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodTotpNameRaw({ name: name, systemWriteMfaMethodTotpNameRequest: systemWriteMfaMethodTotpNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes the TOTP secret for the given method name on the given entity.
     */
    systemWriteMfaMethodTotpNameAdminDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpNameAdminDestroy().');
            }
            if (requestParameters['systemWriteMfaMethodTotpNameAdminDestroyRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodTotpNameAdminDestroyRequest', 'Required parameter "systemWriteMfaMethodTotpNameAdminDestroyRequest" was null or undefined when calling systemWriteMfaMethodTotpNameAdminDestroy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}/admin-destroy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodTotpNameAdminDestroyRequestToJSON)(requestParameters['systemWriteMfaMethodTotpNameAdminDestroyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes the TOTP secret for the given method name on the given entity.
     */
    systemWriteMfaMethodTotpNameAdminDestroy(name, systemWriteMfaMethodTotpNameAdminDestroyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodTotpNameAdminDestroyRaw({ name: name, systemWriteMfaMethodTotpNameAdminDestroyRequest: systemWriteMfaMethodTotpNameAdminDestroyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generates a TOTP secret for the given method name on the given entity.
     */
    systemWriteMfaMethodTotpNameAdminGenerateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpNameAdminGenerate().');
            }
            if (requestParameters['systemWriteMfaMethodTotpNameAdminGenerateRequest'] == null) {
                throw new runtime.RequiredError('systemWriteMfaMethodTotpNameAdminGenerateRequest', 'Required parameter "systemWriteMfaMethodTotpNameAdminGenerateRequest" was null or undefined when calling systemWriteMfaMethodTotpNameAdminGenerate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/mfa/method/totp/{name}/admin-generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteMfaMethodTotpNameAdminGenerateRequestToJSON)(requestParameters['systemWriteMfaMethodTotpNameAdminGenerateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generates a TOTP secret for the given method name on the given entity.
     */
    systemWriteMfaMethodTotpNameAdminGenerate(name, systemWriteMfaMethodTotpNameAdminGenerateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteMfaMethodTotpNameAdminGenerateRaw({ name: name, systemWriteMfaMethodTotpNameAdminGenerateRequest: systemWriteMfaMethodTotpNameAdminGenerateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockLockRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/namespaces/api-lock/lock`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Lock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockLock(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteNamespacesApiLockLockRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockLockPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling systemWriteNamespacesApiLockLockPath().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/namespaces/api-lock/lock/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Lock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockLockPath(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteNamespacesApiLockLockPathRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unlock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockUnlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteNamespacesApiLockUnlockRequest'] == null) {
                throw new runtime.RequiredError('systemWriteNamespacesApiLockUnlockRequest', 'Required parameter "systemWriteNamespacesApiLockUnlockRequest" was null or undefined when calling systemWriteNamespacesApiLockUnlock().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/namespaces/api-lock/unlock`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteNamespacesApiLockUnlockRequestToJSON)(requestParameters['systemWriteNamespacesApiLockUnlockRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unlock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockUnlock(systemWriteNamespacesApiLockUnlockRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteNamespacesApiLockUnlockRaw({ systemWriteNamespacesApiLockUnlockRequest: systemWriteNamespacesApiLockUnlockRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unlock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockUnlockPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling systemWriteNamespacesApiLockUnlockPath().');
            }
            if (requestParameters['systemWriteNamespacesApiLockUnlockPathRequest'] == null) {
                throw new runtime.RequiredError('systemWriteNamespacesApiLockUnlockPathRequest', 'Required parameter "systemWriteNamespacesApiLockUnlockPathRequest" was null or undefined when calling systemWriteNamespacesApiLockUnlockPath().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/namespaces/api-lock/unlock/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteNamespacesApiLockUnlockPathRequestToJSON)(requestParameters['systemWriteNamespacesApiLockUnlockPathRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unlock the API for a namespace and its descendants
     */
    systemWriteNamespacesApiLockUnlockPath(path, systemWriteNamespacesApiLockUnlockPathRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteNamespacesApiLockUnlockPathRaw({ path: path, systemWriteNamespacesApiLockUnlockPathRequest: systemWriteNamespacesApiLockUnlockPathRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteNamespacesPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling systemWriteNamespacesPath().');
            }
            if (requestParameters['systemWriteNamespacesPathRequest'] == null) {
                throw new runtime.RequiredError('systemWriteNamespacesPathRequest', 'Required parameter "systemWriteNamespacesPathRequest" was null or undefined when calling systemWriteNamespacesPath().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteNamespacesPathRequestToJSON)(requestParameters['systemWriteNamespacesPathRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteNamespacesPath(path, systemWriteNamespacesPathRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteNamespacesPathRaw({ path: path, systemWriteNamespacesPathRequest: systemWriteNamespacesPathRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemWritePoliciesEgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWritePoliciesEgpName().');
            }
            if (requestParameters['systemWritePoliciesEgpNameRequest'] == null) {
                throw new runtime.RequiredError('systemWritePoliciesEgpNameRequest', 'Required parameter "systemWritePoliciesEgpNameRequest" was null or undefined when calling systemWritePoliciesEgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWritePoliciesEgpNameRequestToJSON)(requestParameters['systemWritePoliciesEgpNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemWritePoliciesEgpName(name, systemWritePoliciesEgpNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWritePoliciesEgpNameRaw({ name: name, systemWritePoliciesEgpNameRequest: systemWritePoliciesEgpNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemWritePoliciesRgpNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWritePoliciesRgpName().');
            }
            if (requestParameters['systemWritePoliciesRgpNameRequest'] == null) {
                throw new runtime.RequiredError('systemWritePoliciesRgpNameRequest', 'Required parameter "systemWritePoliciesRgpNameRequest" was null or undefined when calling systemWritePoliciesRgpName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWritePoliciesRgpNameRequestToJSON)(requestParameters['systemWritePoliciesRgpNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, Modify, or Delete an access control policy.
     */
    systemWritePoliciesRgpName(name, systemWritePoliciesRgpNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWritePoliciesRgpNameRaw({ name: name, systemWritePoliciesRgpNameRequest: systemWritePoliciesRgpNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteQuotasLeaseCountNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteQuotasLeaseCountName().');
            }
            if (requestParameters['systemWriteQuotasLeaseCountNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteQuotasLeaseCountNameRequest', 'Required parameter "systemWriteQuotasLeaseCountNameRequest" was null or undefined when calling systemWriteQuotasLeaseCountName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteQuotasLeaseCountNameRequestToJSON)(requestParameters['systemWriteQuotasLeaseCountNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteQuotasLeaseCountName(name, systemWriteQuotasLeaseCountNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteQuotasLeaseCountNameRaw({ name: name, systemWriteQuotasLeaseCountNameRequest: systemWriteQuotasLeaseCountNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryDemoteRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/primary/demote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryDemote(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrPrimaryDemoteRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryDisableRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/primary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryDisable(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrPrimaryDisableRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrPrimaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrPrimaryEnableRequest', 'Required parameter "systemWriteReplicationDrPrimaryEnableRequest" was null or undefined when calling systemWriteReplicationDrPrimaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/primary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrPrimaryEnableRequestToJSON)(requestParameters['systemWriteReplicationDrPrimaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryEnable(systemWriteReplicationDrPrimaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrPrimaryEnableRaw({ systemWriteReplicationDrPrimaryEnableRequest: systemWriteReplicationDrPrimaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryRevokeSecondaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrPrimaryRevokeSecondaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrPrimaryRevokeSecondaryRequest', 'Required parameter "systemWriteReplicationDrPrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationDrPrimaryRevokeSecondary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/primary/revoke-secondary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrPrimaryRevokeSecondaryRequestToJSON)(requestParameters['systemWriteReplicationDrPrimaryRevokeSecondaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrPrimaryRevokeSecondary(systemWriteReplicationDrPrimaryRevokeSecondaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrPrimaryRevokeSecondaryRaw({ systemWriteReplicationDrPrimaryRevokeSecondaryRequest: systemWriteReplicationDrPrimaryRevokeSecondaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrPrimarySecondaryTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrPrimarySecondaryTokenRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrPrimarySecondaryTokenRequest', 'Required parameter "systemWriteReplicationDrPrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationDrPrimarySecondaryToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/primary/secondary-token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrPrimarySecondaryTokenRequestToJSON)(requestParameters['systemWriteReplicationDrPrimarySecondaryTokenRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrPrimarySecondaryToken(systemWriteReplicationDrPrimarySecondaryTokenRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrPrimarySecondaryTokenRaw({ systemWriteReplicationDrPrimarySecondaryTokenRequest: systemWriteReplicationDrPrimarySecondaryTokenRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reload the given subsystem
     */
    systemWriteReplicationDrSecondaryConfigReloadSubsystemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subsystem'] == null) {
                throw new runtime.RequiredError('subsystem', 'Required parameter "subsystem" was null or undefined when calling systemWriteReplicationDrSecondaryConfigReloadSubsystem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/config/reload/{subsystem}`.replace(`{${"subsystem"}}`, encodeURIComponent(String(requestParameters['subsystem']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Reload the given subsystem
     */
    systemWriteReplicationDrSecondaryConfigReloadSubsystem(subsystem, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryConfigReloadSubsystemRaw({ subsystem: subsystem }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryDisableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryDisableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryDisableRequest', 'Required parameter "systemWriteReplicationDrSecondaryDisableRequest" was null or undefined when calling systemWriteReplicationDrSecondaryDisable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryDisableRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryDisableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryDisable(systemWriteReplicationDrSecondaryDisableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryDisableRaw({ systemWriteReplicationDrSecondaryDisableRequest: systemWriteReplicationDrSecondaryDisableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryEnableRequest', 'Required parameter "systemWriteReplicationDrSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationDrSecondaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryEnableRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryEnable(systemWriteReplicationDrSecondaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryEnableRaw({ systemWriteReplicationDrSecondaryEnableRequest: systemWriteReplicationDrSecondaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryGeneratePublicKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/generate-public-key`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryGeneratePublicKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryGeneratePublicKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryMerkleCheckRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryMerkleCheckRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryMerkleCheckRequest', 'Required parameter "systemWriteReplicationDrSecondaryMerkleCheckRequest" was null or undefined when calling systemWriteReplicationDrSecondaryMerkleCheck().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/merkle-check`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryMerkleCheckRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryMerkleCheckRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryMerkleCheck(systemWriteReplicationDrSecondaryMerkleCheckRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryMerkleCheckRaw({ systemWriteReplicationDrSecondaryMerkleCheckRequest: systemWriteReplicationDrSecondaryMerkleCheckRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryOperationTokenDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryOperationTokenDeleteRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryOperationTokenDeleteRequest', 'Required parameter "systemWriteReplicationDrSecondaryOperationTokenDeleteRequest" was null or undefined when calling systemWriteReplicationDrSecondaryOperationTokenDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/operation-token/delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryOperationTokenDeleteRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryOperationTokenDeleteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryOperationTokenDelete(systemWriteReplicationDrSecondaryOperationTokenDeleteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryOperationTokenDeleteRaw({ systemWriteReplicationDrSecondaryOperationTokenDeleteRequest: systemWriteReplicationDrSecondaryOperationTokenDeleteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryPromoteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryPromoteRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryPromoteRequest', 'Required parameter "systemWriteReplicationDrSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationDrSecondaryPromote().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/promote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryPromoteRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryPromoteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryPromote(systemWriteReplicationDrSecondaryPromoteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryPromoteRaw({ systemWriteReplicationDrSecondaryPromoteRequest: systemWriteReplicationDrSecondaryPromoteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryRecoverRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryRecoverRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryRecoverRequest', 'Required parameter "systemWriteReplicationDrSecondaryRecoverRequest" was null or undefined when calling systemWriteReplicationDrSecondaryRecover().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/recover`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryRecoverRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryRecoverRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryRecover(systemWriteReplicationDrSecondaryRecoverRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryRecoverRaw({ systemWriteReplicationDrSecondaryRecoverRequest: systemWriteReplicationDrSecondaryRecoverRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryReindexRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryReindexRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryReindexRequest', 'Required parameter "systemWriteReplicationDrSecondaryReindexRequest" was null or undefined when calling systemWriteReplicationDrSecondaryReindex().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/reindex`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryReindexRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryReindexRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryReindex(systemWriteReplicationDrSecondaryReindexRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryReindexRaw({ systemWriteReplicationDrSecondaryReindexRequest: systemWriteReplicationDrSecondaryReindexRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryUpdatePrimaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationDrSecondaryUpdatePrimaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationDrSecondaryUpdatePrimaryRequest', 'Required parameter "systemWriteReplicationDrSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationDrSecondaryUpdatePrimary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/dr/secondary/update-primary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationDrSecondaryUpdatePrimaryRequestToJSON)(requestParameters['systemWriteReplicationDrSecondaryUpdatePrimaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationDrSecondaryUpdatePrimary(systemWriteReplicationDrSecondaryUpdatePrimaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationDrSecondaryUpdatePrimaryRaw({ systemWriteReplicationDrSecondaryUpdatePrimaryRequest: systemWriteReplicationDrSecondaryUpdatePrimaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * force corrupting stuff
     */
    systemWriteReplicationForceCorruptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationForceCorruptionRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationForceCorruptionRequest', 'Required parameter "systemWriteReplicationForceCorruptionRequest" was null or undefined when calling systemWriteReplicationForceCorruption().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/force-corruption`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationForceCorruptionRequestToJSON)(requestParameters['systemWriteReplicationForceCorruptionRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * force corrupting stuff
     */
    systemWriteReplicationForceCorruption(systemWriteReplicationForceCorruptionRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationForceCorruptionRaw({ systemWriteReplicationForceCorruptionRequest: systemWriteReplicationForceCorruptionRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationMerkleCheckRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/merkle-check`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationMerkleCheck(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationMerkleCheckRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryDemoteRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/primary/demote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryDemote(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimaryDemoteRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryDisableRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/primary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryDisable(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimaryDisableRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformancePrimaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformancePrimaryEnableRequest', 'Required parameter "systemWriteReplicationPerformancePrimaryEnableRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/primary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformancePrimaryEnableRequestToJSON)(requestParameters['systemWriteReplicationPerformancePrimaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryEnable(systemWriteReplicationPerformancePrimaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimaryEnableRaw({ systemWriteReplicationPerformancePrimaryEnableRequest: systemWriteReplicationPerformancePrimaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemWriteReplicationPerformancePrimaryPathsFilterId().');
            }
            if (requestParameters['systemWriteReplicationPerformancePrimaryPathsFilterIdRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformancePrimaryPathsFilterIdRequest', 'Required parameter "systemWriteReplicationPerformancePrimaryPathsFilterIdRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryPathsFilterId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformancePrimaryPathsFilterIdRequestToJSON)(requestParameters['systemWriteReplicationPerformancePrimaryPathsFilterIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryPathsFilterId(id, systemWriteReplicationPerformancePrimaryPathsFilterIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimaryPathsFilterIdRaw({ id: id, systemWriteReplicationPerformancePrimaryPathsFilterIdRequest: systemWriteReplicationPerformancePrimaryPathsFilterIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryRevokeSecondaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest', 'Required parameter "systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryRevokeSecondary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/primary/revoke-secondary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequestToJSON)(requestParameters['systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimaryRevokeSecondary(systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimaryRevokeSecondaryRaw({ systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest: systemWriteReplicationPerformancePrimaryRevokeSecondaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimarySecondaryTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformancePrimarySecondaryTokenRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformancePrimarySecondaryTokenRequest', 'Required parameter "systemWriteReplicationPerformancePrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationPerformancePrimarySecondaryToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/primary/secondary-token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformancePrimarySecondaryTokenRequestToJSON)(requestParameters['systemWriteReplicationPerformancePrimarySecondaryTokenRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformancePrimarySecondaryToken(systemWriteReplicationPerformancePrimarySecondaryTokenRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformancePrimarySecondaryTokenRaw({ systemWriteReplicationPerformancePrimarySecondaryTokenRequest: systemWriteReplicationPerformancePrimarySecondaryTokenRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryDisableRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryDisable(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformanceSecondaryDisableRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformanceSecondaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformanceSecondaryEnableRequest', 'Required parameter "systemWriteReplicationPerformanceSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformanceSecondaryEnableRequestToJSON)(requestParameters['systemWriteReplicationPerformanceSecondaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryEnable(systemWriteReplicationPerformanceSecondaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformanceSecondaryEnableRaw({ systemWriteReplicationPerformanceSecondaryEnableRequest: systemWriteReplicationPerformanceSecondaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryGeneratePublicKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/generate-public-key`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryGeneratePublicKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformanceSecondaryGeneratePublicKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryPromoteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformanceSecondaryPromoteRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformanceSecondaryPromoteRequest', 'Required parameter "systemWriteReplicationPerformanceSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryPromote().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/promote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformanceSecondaryPromoteRequestToJSON)(requestParameters['systemWriteReplicationPerformanceSecondaryPromoteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryPromote(systemWriteReplicationPerformanceSecondaryPromoteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformanceSecondaryPromoteRaw({ systemWriteReplicationPerformanceSecondaryPromoteRequest: systemWriteReplicationPerformanceSecondaryPromoteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryUpdatePrimaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest', 'Required parameter "systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryUpdatePrimary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/performance/secondary/update-primary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequestToJSON)(requestParameters['systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPerformanceSecondaryUpdatePrimary(systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPerformanceSecondaryUpdatePrimaryRaw({ systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest: systemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPrimaryDemoteRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/primary/demote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPrimaryDemote(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPrimaryDemoteRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPrimaryDisableRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/primary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPrimaryDisable(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPrimaryDisableRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPrimaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPrimaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPrimaryEnableRequest', 'Required parameter "systemWriteReplicationPrimaryEnableRequest" was null or undefined when calling systemWriteReplicationPrimaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/primary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPrimaryEnableRequestToJSON)(requestParameters['systemWriteReplicationPrimaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPrimaryEnable(systemWriteReplicationPrimaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPrimaryEnableRaw({ systemWriteReplicationPrimaryEnableRequest: systemWriteReplicationPrimaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPrimaryRevokeSecondaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPrimaryRevokeSecondaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPrimaryRevokeSecondaryRequest', 'Required parameter "systemWriteReplicationPrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationPrimaryRevokeSecondary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/primary/revoke-secondary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPrimaryRevokeSecondaryRequestToJSON)(requestParameters['systemWriteReplicationPrimaryRevokeSecondaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPrimaryRevokeSecondary(systemWriteReplicationPrimaryRevokeSecondaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPrimaryRevokeSecondaryRaw({ systemWriteReplicationPrimaryRevokeSecondaryRequest: systemWriteReplicationPrimaryRevokeSecondaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationPrimarySecondaryTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationPrimarySecondaryTokenRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationPrimarySecondaryTokenRequest', 'Required parameter "systemWriteReplicationPrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationPrimarySecondaryToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/primary/secondary-token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationPrimarySecondaryTokenRequestToJSON)(requestParameters['systemWriteReplicationPrimarySecondaryTokenRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationPrimarySecondaryToken(systemWriteReplicationPrimarySecondaryTokenRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationPrimarySecondaryTokenRaw({ systemWriteReplicationPrimarySecondaryTokenRequest: systemWriteReplicationPrimarySecondaryTokenRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationRecoverRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/recover`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationRecover(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationRecoverRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationReindexRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationReindexRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationReindexRequest', 'Required parameter "systemWriteReplicationReindexRequest" was null or undefined when calling systemWriteReplicationReindex().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/reindex`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationReindexRequestToJSON)(requestParameters['systemWriteReplicationReindexRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationReindex(systemWriteReplicationReindexRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationReindexRaw({ systemWriteReplicationReindexRequest: systemWriteReplicationReindexRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationSecondaryDisableRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/replication/secondary/disable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationSecondaryDisable(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationSecondaryDisableRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationSecondaryEnableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationSecondaryEnableRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationSecondaryEnableRequest', 'Required parameter "systemWriteReplicationSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationSecondaryEnable().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/secondary/enable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationSecondaryEnableRequestToJSON)(requestParameters['systemWriteReplicationSecondaryEnableRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationSecondaryEnable(systemWriteReplicationSecondaryEnableRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationSecondaryEnableRaw({ systemWriteReplicationSecondaryEnableRequest: systemWriteReplicationSecondaryEnableRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationSecondaryPromoteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationSecondaryPromoteRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationSecondaryPromoteRequest', 'Required parameter "systemWriteReplicationSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationSecondaryPromote().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/secondary/promote`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationSecondaryPromoteRequestToJSON)(requestParameters['systemWriteReplicationSecondaryPromoteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationSecondaryPromote(systemWriteReplicationSecondaryPromoteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationSecondaryPromoteRaw({ systemWriteReplicationSecondaryPromoteRequest: systemWriteReplicationSecondaryPromoteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteReplicationSecondaryUpdatePrimaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteReplicationSecondaryUpdatePrimaryRequest'] == null) {
                throw new runtime.RequiredError('systemWriteReplicationSecondaryUpdatePrimaryRequest', 'Required parameter "systemWriteReplicationSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationSecondaryUpdatePrimary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/replication/secondary/update-primary`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteReplicationSecondaryUpdatePrimaryRequestToJSON)(requestParameters['systemWriteReplicationSecondaryUpdatePrimaryRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    systemWriteReplicationSecondaryUpdatePrimary(systemWriteReplicationSecondaryUpdatePrimaryRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteReplicationSecondaryUpdatePrimaryRaw({ systemWriteReplicationSecondaryUpdatePrimaryRequest: systemWriteReplicationSecondaryUpdatePrimaryRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Start a seal rewrap process
     */
    systemWriteSealwrapRewrapRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/sealwrap/rewrap`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Start a seal rewrap process
     */
    systemWriteSealwrapRewrap(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSealwrapRewrapRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update automated raft snapshot configuration
     */
    systemWriteStorageRaftSnapshotAutoConfigNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteStorageRaftSnapshotAutoConfigName().');
            }
            if (requestParameters['systemWriteStorageRaftSnapshotAutoConfigNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteStorageRaftSnapshotAutoConfigNameRequest', 'Required parameter "systemWriteStorageRaftSnapshotAutoConfigNameRequest" was null or undefined when calling systemWriteStorageRaftSnapshotAutoConfigName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteStorageRaftSnapshotAutoConfigNameRequestToJSON)(requestParameters['systemWriteStorageRaftSnapshotAutoConfigNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update automated raft snapshot configuration
     */
    systemWriteStorageRaftSnapshotAutoConfigName(name, systemWriteStorageRaftSnapshotAutoConfigNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteStorageRaftSnapshotAutoConfigNameRaw({ name: name, systemWriteStorageRaftSnapshotAutoConfigNameRequest: systemWriteStorageRaftSnapshotAutoConfigNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsAwsSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsAwsSmName().');
            }
            if (requestParameters['systemWriteSyncDestinationsAwsSmNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsAwsSmNameRequest', 'Required parameter "systemWriteSyncDestinationsAwsSmNameRequest" was null or undefined when calling systemWriteSyncDestinationsAwsSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsAwsSmNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsAwsSmNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsAwsSmNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsAwsSmName(name, systemWriteSyncDestinationsAwsSmNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsAwsSmNameRaw({ name: name, systemWriteSyncDestinationsAwsSmNameRequest: systemWriteSyncDestinationsAwsSmNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsAzureKvNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsAzureKvName().');
            }
            if (requestParameters['systemWriteSyncDestinationsAzureKvNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsAzureKvNameRequest', 'Required parameter "systemWriteSyncDestinationsAzureKvNameRequest" was null or undefined when calling systemWriteSyncDestinationsAzureKvName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsAzureKvNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsAzureKvNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsAzureKvNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsAzureKvName(name, systemWriteSyncDestinationsAzureKvNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsAzureKvNameRaw({ name: name, systemWriteSyncDestinationsAzureKvNameRequest: systemWriteSyncDestinationsAzureKvNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsGcpSmNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsGcpSmName().');
            }
            if (requestParameters['systemWriteSyncDestinationsGcpSmNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsGcpSmNameRequest', 'Required parameter "systemWriteSyncDestinationsGcpSmNameRequest" was null or undefined when calling systemWriteSyncDestinationsGcpSmName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsGcpSmNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsGcpSmNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsGcpSmNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsGcpSmName(name, systemWriteSyncDestinationsGcpSmNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsGcpSmNameRaw({ name: name, systemWriteSyncDestinationsGcpSmNameRequest: systemWriteSyncDestinationsGcpSmNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsGhNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsGhName().');
            }
            if (requestParameters['systemWriteSyncDestinationsGhNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsGhNameRequest', 'Required parameter "systemWriteSyncDestinationsGhNameRequest" was null or undefined when calling systemWriteSyncDestinationsGhName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsGhNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsGhNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsGhNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsGhName(name, systemWriteSyncDestinationsGhNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsGhNameRaw({ name: name, systemWriteSyncDestinationsGhNameRequest: systemWriteSyncDestinationsGhNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsInMemNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsInMemName().');
            }
            if (requestParameters['systemWriteSyncDestinationsInMemNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsInMemNameRequest', 'Required parameter "systemWriteSyncDestinationsInMemNameRequest" was null or undefined when calling systemWriteSyncDestinationsInMemName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsInMemNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsInMemNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsInMemNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsInMemName(name, systemWriteSyncDestinationsInMemNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsInMemNameRaw({ name: name, systemWriteSyncDestinationsInMemNameRequest: systemWriteSyncDestinationsInMemNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsTypeNameAssociationsRemoveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().');
            }
            if (requestParameters['systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest', 'Required parameter "systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/{type}/{name}/associations/remove`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequestToJSON)(requestParameters['systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsTypeNameAssociationsRemove(name, type, systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsTypeNameAssociationsRemoveRaw({ name: name, type: type, systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest: systemWriteSyncDestinationsTypeNameAssociationsRemoveRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsTypeNameAssociationsSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().');
            }
            if (requestParameters['systemWriteSyncDestinationsTypeNameAssociationsSetRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsTypeNameAssociationsSetRequest', 'Required parameter "systemWriteSyncDestinationsTypeNameAssociationsSetRequest" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/{type}/{name}/associations/set`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsTypeNameAssociationsSetRequestToJSON)(requestParameters['systemWriteSyncDestinationsTypeNameAssociationsSetRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsTypeNameAssociationsSetResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsTypeNameAssociationsSet(name, type, systemWriteSyncDestinationsTypeNameAssociationsSetRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsTypeNameAssociationsSetRaw({ name: name, type: type, systemWriteSyncDestinationsTypeNameAssociationsSetRequest: systemWriteSyncDestinationsTypeNameAssociationsSetRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncDestinationsVercelProjectNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsVercelProjectName().');
            }
            if (requestParameters['systemWriteSyncDestinationsVercelProjectNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncDestinationsVercelProjectNameRequest', 'Required parameter "systemWriteSyncDestinationsVercelProjectNameRequest" was null or undefined when calling systemWriteSyncDestinationsVercelProjectName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncDestinationsVercelProjectNameRequestToJSON)(requestParameters['systemWriteSyncDestinationsVercelProjectNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncDestinationsVercelProjectNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncDestinationsVercelProjectName(name, systemWriteSyncDestinationsVercelProjectNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncDestinationsVercelProjectNameRaw({ name: name, systemWriteSyncDestinationsVercelProjectNameRequest: systemWriteSyncDestinationsVercelProjectNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    systemWriteSyncGithubAppsNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling systemWriteSyncGithubAppsName().');
            }
            if (requestParameters['systemWriteSyncGithubAppsNameRequest'] == null) {
                throw new runtime.RequiredError('systemWriteSyncGithubAppsNameRequest', 'Required parameter "systemWriteSyncGithubAppsNameRequest" was null or undefined when calling systemWriteSyncGithubAppsName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteSyncGithubAppsNameRequestToJSON)(requestParameters['systemWriteSyncGithubAppsNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteSyncGithubAppsNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    systemWriteSyncGithubAppsName(name, systemWriteSyncGithubAppsNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteSyncGithubAppsNameRaw({ name: name, systemWriteSyncGithubAppsNameRequest: systemWriteSyncGithubAppsNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets manual license reporting data
     * returns manual license reporting report data
     */
    systemWriteUtilizationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['systemWriteUtilizationRequest'] == null) {
                throw new runtime.RequiredError('systemWriteUtilizationRequest', 'Required parameter "systemWriteUtilizationRequest" was null or undefined when calling systemWriteUtilization().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/utilization`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SystemWriteUtilizationRequestToJSON)(requestParameters['systemWriteUtilizationRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SystemWriteUtilizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Gets manual license reporting data
     * returns manual license reporting report data
     */
    systemWriteUtilization(systemWriteUtilizationRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.systemWriteUtilizationRaw({ systemWriteUtilizationRequest: systemWriteUtilizationRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete custom message
     */
    uiConfigDeleteCustomMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling uiConfigDeleteCustomMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UiConfigDeleteCustomMessageResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Delete custom message
     */
    uiConfigDeleteCustomMessage(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiConfigDeleteCustomMessageRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists custom messages
     */
    uiConfigListCustomMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling uiConfigListCustomMessages().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/custom-messages/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Lists custom messages
     */
    uiConfigListCustomMessages(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiConfigListCustomMessagesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read custom message
     */
    uiConfigReadCustomMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling uiConfigReadCustomMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UiConfigReadCustomMessageResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read custom message
     */
    uiConfigReadCustomMessage(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiConfigReadCustomMessageRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update custom message
     */
    uiConfigUpdateCustomMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling uiConfigUpdateCustomMessage().');
            }
            if (requestParameters['uiConfigUpdateCustomMessageRequest'] == null) {
                throw new runtime.RequiredError('uiConfigUpdateCustomMessageRequest', 'Required parameter "uiConfigUpdateCustomMessageRequest" was null or undefined when calling uiConfigUpdateCustomMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UiConfigUpdateCustomMessageRequestToJSON)(requestParameters['uiConfigUpdateCustomMessageRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UiConfigUpdateCustomMessageResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Update custom message
     */
    uiConfigUpdateCustomMessage(id, uiConfigUpdateCustomMessageRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiConfigUpdateCustomMessageRaw({ id: id, uiConfigUpdateCustomMessageRequest: uiConfigUpdateCustomMessageRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure the values to be returned for the UI header.
     */
    uiHeadersConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling uiHeadersConfigure().');
            }
            if (requestParameters['uiHeadersConfigureRequest'] == null) {
                throw new runtime.RequiredError('uiHeadersConfigureRequest', 'Required parameter "uiHeadersConfigureRequest" was null or undefined when calling uiHeadersConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UiHeadersConfigureRequestToJSON)(requestParameters['uiHeadersConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure the values to be returned for the UI header.
     */
    uiHeadersConfigure(header, uiHeadersConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiHeadersConfigureRaw({ header: header, uiHeadersConfigureRequest: uiHeadersConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a UI header.
     */
    uiHeadersDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling uiHeadersDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove a UI header.
     */
    uiHeadersDeleteConfiguration(header, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiHeadersDeleteConfigurationRaw({ header: header }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of configured UI headers.
     */
    uiHeadersListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling uiHeadersList().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/headers/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UiHeadersListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of configured UI headers.
     */
    uiHeadersList(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiHeadersListRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the given UI header\'s configuration
     */
    uiHeadersReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['header'] == null) {
                throw new runtime.RequiredError('header', 'Required parameter "header" was null or undefined when calling uiHeadersReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UiHeadersReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the given UI header\'s configuration
     */
    uiHeadersReadConfiguration(header, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uiHeadersReadConfigurationRaw({ header: header }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unseal the Vault.
     */
    unsealRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['unsealRequest'] == null) {
                throw new runtime.RequiredError('unsealRequest', 'Required parameter "unsealRequest" was null or undefined when calling unseal().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/unseal`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UnsealRequestToJSON)(requestParameters['unsealRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UnsealResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Unseal the Vault.
     */
    unseal(unsealRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unsealRaw({ unsealRequest: unsealRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    unwrapRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['unwrapRequest'] == null) {
                throw new runtime.RequiredError('unwrapRequest', 'Required parameter "unwrapRequest" was null or undefined when calling unwrap().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/wrapping/unwrap`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UnwrapRequestToJSON)(requestParameters['unwrapRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    unwrap(unwrapRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unwrapRaw({ unwrapRequest: unwrapRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns map of historical version change entries
     */
    versionHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling versionHistory().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/version-history/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VersionHistoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns map of historical version change entries
     */
    versionHistory(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionHistoryRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    wellKnownListLabelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling wellKnownListLabels().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/well-known/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WellKnownListLabelsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    wellKnownListLabels(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wellKnownListLabelsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    wellKnownListLabels2Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/well-known`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WellKnownListLabels2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    wellKnownListLabels2(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wellKnownListLabels2Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the associated mount information for a registered well-known label.
     */
    wellKnownReadLabelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['label'] == null) {
                throw new runtime.RequiredError('label', 'Required parameter "label" was null or undefined when calling wellKnownReadLabel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/sys/well-known/{label}`.replace(`{${"label"}}`, encodeURIComponent(String(requestParameters['label']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WellKnownReadLabelResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the associated mount information for a registered well-known label.
     */
    wellKnownReadLabel(label, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wellKnownReadLabelRaw({ label: label }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    wrapRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling wrap().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/sys/wrapping/wrap`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    wrap(requestBody, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wrapRaw({ requestBody: requestBody }, initOverrides);
            return yield response.value();
        });
    }
}
exports.SystemApi = SystemApi;
/**
  * @export
  * @enum {string}
  */
var LeasesLookUpListEnum;
(function (LeasesLookUpListEnum) {
    LeasesLookUpListEnum["TRUE"] = "true";
})(LeasesLookUpListEnum || (exports.LeasesLookUpListEnum = LeasesLookUpListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PluginsCatalogListPluginsWithTypeListEnum;
(function (PluginsCatalogListPluginsWithTypeListEnum) {
    PluginsCatalogListPluginsWithTypeListEnum["TRUE"] = "true";
})(PluginsCatalogListPluginsWithTypeListEnum || (exports.PluginsCatalogListPluginsWithTypeListEnum = PluginsCatalogListPluginsWithTypeListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PluginsRuntimesCatalogListPluginsRuntimes0ListEnum;
(function (PluginsRuntimesCatalogListPluginsRuntimes0ListEnum) {
    PluginsRuntimesCatalogListPluginsRuntimes0ListEnum["TRUE"] = "true";
})(PluginsRuntimesCatalogListPluginsRuntimes0ListEnum || (exports.PluginsRuntimesCatalogListPluginsRuntimes0ListEnum = PluginsRuntimesCatalogListPluginsRuntimes0ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PoliciesListAclPoliciesListEnum;
(function (PoliciesListAclPoliciesListEnum) {
    PoliciesListAclPoliciesListEnum["TRUE"] = "true";
})(PoliciesListAclPoliciesListEnum || (exports.PoliciesListAclPoliciesListEnum = PoliciesListAclPoliciesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PoliciesListAclPolicies3ListEnum;
(function (PoliciesListAclPolicies3ListEnum) {
    PoliciesListAclPolicies3ListEnum["TRUE"] = "true";
})(PoliciesListAclPolicies3ListEnum || (exports.PoliciesListAclPolicies3ListEnum = PoliciesListAclPolicies3ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PoliciesListPasswordPoliciesListEnum;
(function (PoliciesListPasswordPoliciesListEnum) {
    PoliciesListPasswordPoliciesListEnum["TRUE"] = "true";
})(PoliciesListPasswordPoliciesListEnum || (exports.PoliciesListPasswordPoliciesListEnum = PoliciesListPasswordPoliciesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var RateLimitQuotasListListEnum;
(function (RateLimitQuotasListListEnum) {
    RateLimitQuotasListListEnum["TRUE"] = "true";
})(RateLimitQuotasListListEnum || (exports.RateLimitQuotasListListEnum = RateLimitQuotasListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var RawListListEnum;
(function (RawListListEnum) {
    RawListListEnum["TRUE"] = "true";
})(RawListListEnum || (exports.RawListListEnum = RawListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SubscriptionsListEventsSubscriptionsListEnum;
(function (SubscriptionsListEventsSubscriptionsListEnum) {
    SubscriptionsListEventsSubscriptionsListEnum["TRUE"] = "true";
})(SubscriptionsListEventsSubscriptionsListEnum || (exports.SubscriptionsListEventsSubscriptionsListEnum = SubscriptionsListEventsSubscriptionsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListManagedKeysTypeListEnum;
(function (SystemListManagedKeysTypeListEnum) {
    SystemListManagedKeysTypeListEnum["TRUE"] = "true";
})(SystemListManagedKeysTypeListEnum || (exports.SystemListManagedKeysTypeListEnum = SystemListManagedKeysTypeListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListMfaMethodListEnum;
(function (SystemListMfaMethodListEnum) {
    SystemListMfaMethodListEnum["TRUE"] = "true";
})(SystemListMfaMethodListEnum || (exports.SystemListMfaMethodListEnum = SystemListMfaMethodListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListNamespacesListEnum;
(function (SystemListNamespacesListEnum) {
    SystemListNamespacesListEnum["TRUE"] = "true";
})(SystemListNamespacesListEnum || (exports.SystemListNamespacesListEnum = SystemListNamespacesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListPoliciesEgpListEnum;
(function (SystemListPoliciesEgpListEnum) {
    SystemListPoliciesEgpListEnum["TRUE"] = "true";
})(SystemListPoliciesEgpListEnum || (exports.SystemListPoliciesEgpListEnum = SystemListPoliciesEgpListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListPoliciesRgpListEnum;
(function (SystemListPoliciesRgpListEnum) {
    SystemListPoliciesRgpListEnum["TRUE"] = "true";
})(SystemListPoliciesRgpListEnum || (exports.SystemListPoliciesRgpListEnum = SystemListPoliciesRgpListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListQuotasLeaseCountListEnum;
(function (SystemListQuotasLeaseCountListEnum) {
    SystemListQuotasLeaseCountListEnum["TRUE"] = "true";
})(SystemListQuotasLeaseCountListEnum || (exports.SystemListQuotasLeaseCountListEnum = SystemListQuotasLeaseCountListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListStorageRaftSnapshotAutoConfigListEnum;
(function (SystemListStorageRaftSnapshotAutoConfigListEnum) {
    SystemListStorageRaftSnapshotAutoConfigListEnum["TRUE"] = "true";
})(SystemListStorageRaftSnapshotAutoConfigListEnum || (exports.SystemListStorageRaftSnapshotAutoConfigListEnum = SystemListStorageRaftSnapshotAutoConfigListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListSyncAssociationsListEnum;
(function (SystemListSyncAssociationsListEnum) {
    SystemListSyncAssociationsListEnum["TRUE"] = "true";
})(SystemListSyncAssociationsListEnum || (exports.SystemListSyncAssociationsListEnum = SystemListSyncAssociationsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListSyncDestinationsListEnum;
(function (SystemListSyncDestinationsListEnum) {
    SystemListSyncDestinationsListEnum["TRUE"] = "true";
})(SystemListSyncDestinationsListEnum || (exports.SystemListSyncDestinationsListEnum = SystemListSyncDestinationsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListSyncDestinationsTypeListEnum;
(function (SystemListSyncDestinationsTypeListEnum) {
    SystemListSyncDestinationsTypeListEnum["TRUE"] = "true";
})(SystemListSyncDestinationsTypeListEnum || (exports.SystemListSyncDestinationsTypeListEnum = SystemListSyncDestinationsTypeListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SystemListSyncGithubAppsListEnum;
(function (SystemListSyncGithubAppsListEnum) {
    SystemListSyncGithubAppsListEnum["TRUE"] = "true";
})(SystemListSyncGithubAppsListEnum || (exports.SystemListSyncGithubAppsListEnum = SystemListSyncGithubAppsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var UiConfigListCustomMessagesListEnum;
(function (UiConfigListCustomMessagesListEnum) {
    UiConfigListCustomMessagesListEnum["TRUE"] = "true";
})(UiConfigListCustomMessagesListEnum || (exports.UiConfigListCustomMessagesListEnum = UiConfigListCustomMessagesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var UiHeadersListListEnum;
(function (UiHeadersListListEnum) {
    UiHeadersListListEnum["TRUE"] = "true";
})(UiHeadersListListEnum || (exports.UiHeadersListListEnum = UiHeadersListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var VersionHistoryListEnum;
(function (VersionHistoryListEnum) {
    VersionHistoryListEnum["TRUE"] = "true";
})(VersionHistoryListEnum || (exports.VersionHistoryListEnum = VersionHistoryListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var WellKnownListLabelsListEnum;
(function (WellKnownListLabelsListEnum) {
    WellKnownListLabelsListEnum["TRUE"] = "true";
})(WellKnownListLabelsListEnum || (exports.WellKnownListLabelsListEnum = WellKnownListLabelsListEnum = {}));
