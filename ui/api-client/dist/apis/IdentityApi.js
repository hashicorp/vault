"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonaListByIdListEnum = exports.OidcListScopesListEnum = exports.OidcListRolesListEnum = exports.OidcListProvidersListEnum = exports.OidcListKeysListEnum = exports.OidcListClientsListEnum = exports.OidcListAssignmentsListEnum = exports.MfaListTotpMethodsListEnum = exports.MfaListPingIdMethodsListEnum = exports.MfaListOktaMethodsListEnum = exports.MfaListMethodsListEnum = exports.MfaListLoginEnforcementsListEnum = exports.MfaListDuoMethodsListEnum = exports.GroupListFromStorageListEnum = exports.GroupListByNameListEnum = exports.GroupListByIdListEnum = exports.GroupListAliasesByIdListEnum = exports.EntityListFromStorageListEnum = exports.EntityListByNameListEnum = exports.EntityListByIdListEnum = exports.EntityListAliasesByIdListEnum = exports.AliasListByIdListEnum = exports.IdentityApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class IdentityApi extends runtime.BaseAPI {
    /**
     * Create a new alias.
     */
    aliasCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aliasCreateRequest'] == null) {
                throw new runtime.RequiredError('aliasCreateRequest', 'Required parameter "aliasCreateRequest" was null or undefined when calling aliasCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/alias`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AliasCreateRequestToJSON)(requestParameters['aliasCreateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create a new alias.
     */
    aliasCreate(aliasCreateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliasCreateRaw({ aliasCreateRequest: aliasCreateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    aliasDeleteByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling aliasDeleteById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliasDeleteById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliasDeleteByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the alias IDs.
     */
    aliasListByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling aliasListById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/alias/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List all the alias IDs.
     */
    aliasListById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliasListByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    aliasReadByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling aliasReadById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliasReadById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliasReadByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    aliasUpdateByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling aliasUpdateById().');
            }
            if (requestParameters['aliasUpdateByIdRequest'] == null) {
                throw new runtime.RequiredError('aliasUpdateByIdRequest', 'Required parameter "aliasUpdateByIdRequest" was null or undefined when calling aliasUpdateById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AliasUpdateByIdRequestToJSON)(requestParameters['aliasUpdateByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliasUpdateById(id, aliasUpdateByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliasUpdateByIdRaw({ id: id, aliasUpdateByIdRequest: aliasUpdateByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entitiesCreateDuplicatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entitiesCreateDuplicatesRequest'] == null) {
                throw new runtime.RequiredError('entitiesCreateDuplicatesRequest', 'Required parameter "entitiesCreateDuplicatesRequest" was null or undefined when calling entitiesCreateDuplicates().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/duplicate/entities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntitiesCreateDuplicatesRequestToJSON)(requestParameters['entitiesCreateDuplicatesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entitiesCreateDuplicates(entitiesCreateDuplicatesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entitiesCreateDuplicatesRaw({ entitiesCreateDuplicatesRequest: entitiesCreateDuplicatesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityAliasCreateDuplicatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityAliasCreateDuplicatesRequest'] == null) {
                throw new runtime.RequiredError('entityAliasCreateDuplicatesRequest', 'Required parameter "entityAliasCreateDuplicatesRequest" was null or undefined when calling entityAliasCreateDuplicates().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/duplicate/local-entity-alias`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityAliasCreateDuplicatesRequestToJSON)(requestParameters['entityAliasCreateDuplicatesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityAliasCreateDuplicates(entityAliasCreateDuplicatesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityAliasCreateDuplicatesRaw({ entityAliasCreateDuplicatesRequest: entityAliasCreateDuplicatesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityAliasesCreateDuplicatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityAliasesCreateDuplicatesRequest'] == null) {
                throw new runtime.RequiredError('entityAliasesCreateDuplicatesRequest', 'Required parameter "entityAliasesCreateDuplicatesRequest" was null or undefined when calling entityAliasesCreateDuplicates().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/duplicate/entity-aliases`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityAliasesCreateDuplicatesRequestToJSON)(requestParameters['entityAliasesCreateDuplicatesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityAliasesCreateDuplicates(entityAliasesCreateDuplicatesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityAliasesCreateDuplicatesRaw({ entityAliasesCreateDuplicatesRequest: entityAliasesCreateDuplicatesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityBatchDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityBatchDeleteRequest'] == null) {
                throw new runtime.RequiredError('entityBatchDeleteRequest', 'Required parameter "entityBatchDeleteRequest" was null or undefined when calling entityBatchDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity/batch-delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityBatchDeleteRequestToJSON)(requestParameters['entityBatchDeleteRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityBatchDelete(entityBatchDeleteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityBatchDeleteRaw({ entityBatchDeleteRequest: entityBatchDeleteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityCreateRequest'] == null) {
                throw new runtime.RequiredError('entityCreateRequest', 'Required parameter "entityCreateRequest" was null or undefined when calling entityCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityCreateRequestToJSON)(requestParameters['entityCreateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityCreate(entityCreateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityCreateRaw({ entityCreateRequest: entityCreateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new alias.
     */
    entityCreateAliasRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityCreateAliasRequest'] == null) {
                throw new runtime.RequiredError('entityCreateAliasRequest', 'Required parameter "entityCreateAliasRequest" was null or undefined when calling entityCreateAlias().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity-alias`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityCreateAliasRequestToJSON)(requestParameters['entityCreateAliasRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create a new alias.
     */
    entityCreateAlias(entityCreateAliasRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityCreateAliasRaw({ entityCreateAliasRequest: entityCreateAliasRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityDeleteAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityDeleteAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityDeleteAliasById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityDeleteAliasByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityDeleteByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityDeleteById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityDeleteById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityDeleteByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityDeleteByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling entityDeleteByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityDeleteByName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityDeleteByNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the alias IDs.
     */
    entityListAliasesByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling entityListAliasesById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity-alias/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List all the alias IDs.
     */
    entityListAliasesById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityListAliasesByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityListByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling entityListById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    entityListById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityListByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityListByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling entityListByName().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/name/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    entityListByName(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityListByNameRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityListFromStorageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling entityListFromStorage().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/from-storage/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    entityListFromStorage(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityListFromStorageRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query entities based on various properties.
     */
    entityLookUpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityLookUpRequest'] == null) {
                throw new runtime.RequiredError('entityLookUpRequest', 'Required parameter "entityLookUpRequest" was null or undefined when calling entityLookUp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/lookup/entity`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityLookUpRequestToJSON)(requestParameters['entityLookUpRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Query entities based on various properties.
     */
    entityLookUp(entityLookUpRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityLookUpRaw({ entityLookUpRequest: entityLookUpRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityMergeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['entityMergeRequest'] == null) {
                throw new runtime.RequiredError('entityMergeRequest', 'Required parameter "entityMergeRequest" was null or undefined when calling entityMerge().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity/merge`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityMergeRequestToJSON)(requestParameters['entityMergeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityMerge(entityMergeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityMergeRaw({ entityMergeRequest: entityMergeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityReadAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityReadAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityReadAliasById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityReadAliasByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityReadByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityReadById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityReadById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityReadByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityReadByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling entityReadByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityReadByName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityReadByNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityUpdateAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityUpdateAliasById().');
            }
            if (requestParameters['entityUpdateAliasByIdRequest'] == null) {
                throw new runtime.RequiredError('entityUpdateAliasByIdRequest', 'Required parameter "entityUpdateAliasByIdRequest" was null or undefined when calling entityUpdateAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityUpdateAliasByIdRequestToJSON)(requestParameters['entityUpdateAliasByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityUpdateAliasById(id, entityUpdateAliasByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityUpdateAliasByIdRaw({ id: id, entityUpdateAliasByIdRequest: entityUpdateAliasByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityUpdateByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling entityUpdateById().');
            }
            if (requestParameters['entityUpdateByIdRequest'] == null) {
                throw new runtime.RequiredError('entityUpdateByIdRequest', 'Required parameter "entityUpdateByIdRequest" was null or undefined when calling entityUpdateById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityUpdateByIdRequestToJSON)(requestParameters['entityUpdateByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityUpdateById(id, entityUpdateByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityUpdateByIdRaw({ id: id, entityUpdateByIdRequest: entityUpdateByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    entityUpdateByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling entityUpdateByName().');
            }
            if (requestParameters['entityUpdateByNameRequest'] == null) {
                throw new runtime.RequiredError('entityUpdateByNameRequest', 'Required parameter "entityUpdateByNameRequest" was null or undefined when calling entityUpdateByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EntityUpdateByNameRequestToJSON)(requestParameters['entityUpdateByNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    entityUpdateByName(name, entityUpdateByNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.entityUpdateByNameRaw({ name: name, entityUpdateByNameRequest: entityUpdateByNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupCreateRequest'] == null) {
                throw new runtime.RequiredError('groupCreateRequest', 'Required parameter "groupCreateRequest" was null or undefined when calling groupCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/group`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupCreateRequestToJSON)(requestParameters['groupCreateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupCreate(groupCreateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupCreateRaw({ groupCreateRequest: groupCreateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupCreateAliasRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupCreateAliasRequest'] == null) {
                throw new runtime.RequiredError('groupCreateAliasRequest', 'Required parameter "groupCreateAliasRequest" was null or undefined when calling groupCreateAlias().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/group-alias`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupCreateAliasRequestToJSON)(requestParameters['groupCreateAliasRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupCreateAlias(groupCreateAliasRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupCreateAliasRaw({ groupCreateAliasRequest: groupCreateAliasRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupDeleteAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupDeleteAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupDeleteAliasById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupDeleteAliasByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupDeleteByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupDeleteById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupDeleteById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupDeleteByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupDeleteByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling groupDeleteByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupDeleteByName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupDeleteByNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the group alias IDs.
     */
    groupListAliasesByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling groupListAliasesById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group-alias/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List all the group alias IDs.
     */
    groupListAliasesById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupListAliasesByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the group IDs.
     */
    groupListByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling groupListById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List all the group IDs.
     */
    groupListById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupListByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupListByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling groupListByName().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/name/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    groupListByName(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupListByNameRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupListFromStorageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling groupListFromStorage().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/from-storage/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    groupListFromStorage(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupListFromStorageRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query groups based on various properties.
     */
    groupLookUpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupLookUpRequest'] == null) {
                throw new runtime.RequiredError('groupLookUpRequest', 'Required parameter "groupLookUpRequest" was null or undefined when calling groupLookUp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/lookup/group`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupLookUpRequestToJSON)(requestParameters['groupLookUpRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Query groups based on various properties.
     */
    groupLookUp(groupLookUpRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupLookUpRaw({ groupLookUpRequest: groupLookUpRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupReadAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupReadAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupReadAliasById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupReadAliasByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupReadByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupReadById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupReadById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupReadByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupReadByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling groupReadByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupReadByName(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupReadByNameRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupUpdateAliasByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupUpdateAliasById().');
            }
            if (requestParameters['groupUpdateAliasByIdRequest'] == null) {
                throw new runtime.RequiredError('groupUpdateAliasByIdRequest', 'Required parameter "groupUpdateAliasByIdRequest" was null or undefined when calling groupUpdateAliasById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupUpdateAliasByIdRequestToJSON)(requestParameters['groupUpdateAliasByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupUpdateAliasById(id, groupUpdateAliasByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupUpdateAliasByIdRaw({ id: id, groupUpdateAliasByIdRequest: groupUpdateAliasByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupUpdateByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling groupUpdateById().');
            }
            if (requestParameters['groupUpdateByIdRequest'] == null) {
                throw new runtime.RequiredError('groupUpdateByIdRequest', 'Required parameter "groupUpdateByIdRequest" was null or undefined when calling groupUpdateById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupUpdateByIdRequestToJSON)(requestParameters['groupUpdateByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupUpdateById(id, groupUpdateByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupUpdateByIdRaw({ id: id, groupUpdateByIdRequest: groupUpdateByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupUpdateByNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling groupUpdateByName().');
            }
            if (requestParameters['groupUpdateByNameRequest'] == null) {
                throw new runtime.RequiredError('groupUpdateByNameRequest', 'Required parameter "groupUpdateByNameRequest" was null or undefined when calling groupUpdateByName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupUpdateByNameRequestToJSON)(requestParameters['groupUpdateByNameRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupUpdateByName(name, groupUpdateByNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupUpdateByNameRaw({ name: name, groupUpdateByNameRequest: groupUpdateByNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    groupsCreateDuplicatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupsCreateDuplicatesRequest'] == null) {
                throw new runtime.RequiredError('groupsCreateDuplicatesRequest', 'Required parameter "groupsCreateDuplicatesRequest" was null or undefined when calling groupsCreateDuplicates().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/duplicate/groups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GroupsCreateDuplicatesRequestToJSON)(requestParameters['groupsCreateDuplicatesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    groupsCreateDuplicates(groupsCreateDuplicatesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.groupsCreateDuplicatesRaw({ groupsCreateDuplicatesRequest: groupsCreateDuplicatesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    mfaAdminDestroyTotpSecretRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaAdminDestroyTotpSecretRequest'] == null) {
                throw new runtime.RequiredError('mfaAdminDestroyTotpSecretRequest', 'Required parameter "mfaAdminDestroyTotpSecretRequest" was null or undefined when calling mfaAdminDestroyTotpSecret().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/totp/admin-destroy`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaAdminDestroyTotpSecretRequestToJSON)(requestParameters['mfaAdminDestroyTotpSecretRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    mfaAdminDestroyTotpSecret(mfaAdminDestroyTotpSecretRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaAdminDestroyTotpSecretRaw({ mfaAdminDestroyTotpSecretRequest: mfaAdminDestroyTotpSecretRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    mfaAdminGenerateTotpSecretRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaAdminGenerateTotpSecretRequest'] == null) {
                throw new runtime.RequiredError('mfaAdminGenerateTotpSecretRequest', 'Required parameter "mfaAdminGenerateTotpSecretRequest" was null or undefined when calling mfaAdminGenerateTotpSecret().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/totp/admin-generate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaAdminGenerateTotpSecretRequestToJSON)(requestParameters['mfaAdminGenerateTotpSecretRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    mfaAdminGenerateTotpSecret(mfaAdminGenerateTotpSecretRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaAdminGenerateTotpSecretRaw({ mfaAdminGenerateTotpSecretRequest: mfaAdminGenerateTotpSecretRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateDuoMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaCreateDuoMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaCreateDuoMethodRequest', 'Required parameter "mfaCreateDuoMethodRequest" was null or undefined when calling mfaCreateDuoMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/duo`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaCreateDuoMethodRequestToJSON)(requestParameters['mfaCreateDuoMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateDuoMethod(mfaCreateDuoMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaCreateDuoMethodRaw({ mfaCreateDuoMethodRequest: mfaCreateDuoMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateOktaMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaCreateOktaMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaCreateOktaMethodRequest', 'Required parameter "mfaCreateOktaMethodRequest" was null or undefined when calling mfaCreateOktaMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/okta`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaCreateOktaMethodRequestToJSON)(requestParameters['mfaCreateOktaMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateOktaMethod(mfaCreateOktaMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaCreateOktaMethodRaw({ mfaCreateOktaMethodRequest: mfaCreateOktaMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreatePingIdMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaCreatePingIdMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaCreatePingIdMethodRequest', 'Required parameter "mfaCreatePingIdMethodRequest" was null or undefined when calling mfaCreatePingIdMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/pingid`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaCreatePingIdMethodRequestToJSON)(requestParameters['mfaCreatePingIdMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreatePingIdMethod(mfaCreatePingIdMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaCreatePingIdMethodRaw({ mfaCreatePingIdMethodRequest: mfaCreatePingIdMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateTotpMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaCreateTotpMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaCreateTotpMethodRequest', 'Required parameter "mfaCreateTotpMethodRequest" was null or undefined when calling mfaCreateTotpMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/totp`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaCreateTotpMethodRequestToJSON)(requestParameters['mfaCreateTotpMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create the given MFA method
     */
    mfaCreateTotpMethod(mfaCreateTotpMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaCreateTotpMethodRaw({ mfaCreateTotpMethodRequest: mfaCreateTotpMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteDuoMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaDeleteDuoMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteDuoMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaDeleteDuoMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a login enforcement
     */
    mfaDeleteLoginEnforcementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mfaDeleteLoginEnforcement().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a login enforcement
     */
    mfaDeleteLoginEnforcement(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaDeleteLoginEnforcementRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteOktaMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaDeleteOktaMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteOktaMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaDeleteOktaMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeletePingIdMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaDeletePingIdMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeletePingIdMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaDeletePingIdMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteTotpMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaDeleteTotpMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the given MFA method
     */
    mfaDeleteTotpMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaDeleteTotpMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    mfaGenerateTotpSecretRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mfaGenerateTotpSecretRequest'] == null) {
                throw new runtime.RequiredError('mfaGenerateTotpSecretRequest', 'Required parameter "mfaGenerateTotpSecretRequest" was null or undefined when calling mfaGenerateTotpSecret().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/totp/generate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaGenerateTotpSecretRequestToJSON)(requestParameters['mfaGenerateTotpSecretRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    mfaGenerateTotpSecret(mfaGenerateTotpSecretRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaGenerateTotpSecretRaw({ mfaGenerateTotpSecretRequest: mfaGenerateTotpSecretRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListDuoMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListDuoMethods().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/duo/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListDuoMethods(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListDuoMethodsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List login enforcements
     */
    mfaListLoginEnforcementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListLoginEnforcements().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/login-enforcement/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List login enforcements
     */
    mfaListLoginEnforcements(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListLoginEnforcementsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List MFA method configurations for all MFA methods
     */
    mfaListMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListMethods().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List MFA method configurations for all MFA methods
     */
    mfaListMethods(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListMethodsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListOktaMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListOktaMethods().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/okta/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListOktaMethods(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListOktaMethodsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListPingIdMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListPingIdMethods().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/pingid/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListPingIdMethods(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListPingIdMethodsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListTotpMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mfaListTotpMethods().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/totp/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List MFA method configurations for the given MFA method
     */
    mfaListTotpMethods(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaListTotpMethodsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadDuoMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaReadDuoMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadDuoMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadDuoMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current login enforcement
     */
    mfaReadLoginEnforcementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mfaReadLoginEnforcement().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current login enforcement
     */
    mfaReadLoginEnforcement(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadLoginEnforcementRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    mfaReadMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaReadMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    mfaReadMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadOktaMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaReadOktaMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadOktaMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadOktaMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadPingIdMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaReadPingIdMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadPingIdMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadPingIdMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadTotpMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaReadTotpMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read the current configuration for the given MFA method
     */
    mfaReadTotpMethod(methodId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaReadTotpMethodRaw({ methodId: methodId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateDuoMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaUpdateDuoMethod().');
            }
            if (requestParameters['mfaUpdateDuoMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaUpdateDuoMethodRequest', 'Required parameter "mfaUpdateDuoMethodRequest" was null or undefined when calling mfaUpdateDuoMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaUpdateDuoMethodRequestToJSON)(requestParameters['mfaUpdateDuoMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateDuoMethod(methodId, mfaUpdateDuoMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaUpdateDuoMethodRaw({ methodId: methodId, mfaUpdateDuoMethodRequest: mfaUpdateDuoMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateOktaMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaUpdateOktaMethod().');
            }
            if (requestParameters['mfaUpdateOktaMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaUpdateOktaMethodRequest', 'Required parameter "mfaUpdateOktaMethodRequest" was null or undefined when calling mfaUpdateOktaMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaUpdateOktaMethodRequestToJSON)(requestParameters['mfaUpdateOktaMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateOktaMethod(methodId, mfaUpdateOktaMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaUpdateOktaMethodRaw({ methodId: methodId, mfaUpdateOktaMethodRequest: mfaUpdateOktaMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdatePingIdMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaUpdatePingIdMethod().');
            }
            if (requestParameters['mfaUpdatePingIdMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaUpdatePingIdMethodRequest', 'Required parameter "mfaUpdatePingIdMethodRequest" was null or undefined when calling mfaUpdatePingIdMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaUpdatePingIdMethodRequestToJSON)(requestParameters['mfaUpdatePingIdMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdatePingIdMethod(methodId, mfaUpdatePingIdMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaUpdatePingIdMethodRaw({ methodId: methodId, mfaUpdatePingIdMethodRequest: mfaUpdatePingIdMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateTotpMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['methodId'] == null) {
                throw new runtime.RequiredError('methodId', 'Required parameter "methodId" was null or undefined when calling mfaUpdateTotpMethod().');
            }
            if (requestParameters['mfaUpdateTotpMethodRequest'] == null) {
                throw new runtime.RequiredError('mfaUpdateTotpMethodRequest', 'Required parameter "mfaUpdateTotpMethodRequest" was null or undefined when calling mfaUpdateTotpMethod().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['methodId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaUpdateTotpMethodRequestToJSON)(requestParameters['mfaUpdateTotpMethodRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update the configuration for the given MFA method
     */
    mfaUpdateTotpMethod(methodId, mfaUpdateTotpMethodRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaUpdateTotpMethodRaw({ methodId: methodId, mfaUpdateTotpMethodRequest: mfaUpdateTotpMethodRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create or update a login enforcement
     */
    mfaWriteLoginEnforcementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mfaWriteLoginEnforcement().');
            }
            if (requestParameters['mfaWriteLoginEnforcementRequest'] == null) {
                throw new runtime.RequiredError('mfaWriteLoginEnforcementRequest', 'Required parameter "mfaWriteLoginEnforcementRequest" was null or undefined when calling mfaWriteLoginEnforcement().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MfaWriteLoginEnforcementRequestToJSON)(requestParameters['mfaWriteLoginEnforcementRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create or update a login enforcement
     */
    mfaWriteLoginEnforcement(name, mfaWriteLoginEnforcementRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mfaWriteLoginEnforcementRaw({ name: name, mfaWriteLoginEnforcementRequest: mfaWriteLoginEnforcementRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['oidcConfigureRequest'] == null) {
                throw new runtime.RequiredError('oidcConfigureRequest', 'Required parameter "oidcConfigureRequest" was null or undefined when calling oidcConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/config`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcConfigureRequestToJSON)(requestParameters['oidcConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcConfigure(oidcConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcConfigureRaw({ oidcConfigureRequest: oidcConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcDeleteAssignmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteAssignment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcDeleteAssignment(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteAssignmentRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcDeleteClientRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteClient().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcDeleteClient(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteClientRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcDeleteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcDeleteKey(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteKeyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcDeleteProviderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteProvider().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcDeleteProvider(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteProviderRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcDeleteRole(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteRoleRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcDeleteScopeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcDeleteScope().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcDeleteScope(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcDeleteScopeRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate an OIDC token
     */
    oidcGenerateTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcGenerateToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/token/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate an OIDC token
     */
    oidcGenerateToken(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcGenerateTokenRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Verify the authenticity of an OIDC token
     */
    oidcIntrospectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['oidcIntrospectRequest'] == null) {
                throw new runtime.RequiredError('oidcIntrospectRequest', 'Required parameter "oidcIntrospectRequest" was null or undefined when calling oidcIntrospect().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/introspect`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcIntrospectRequestToJSON)(requestParameters['oidcIntrospectRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Verify the authenticity of an OIDC token
     */
    oidcIntrospect(oidcIntrospectRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcIntrospectRaw({ oidcIntrospectRequest: oidcIntrospectRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcListAssignmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListAssignments().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/assignment/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    oidcListAssignments(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListAssignmentsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcListClientsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListClients().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/client/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    oidcListClients(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListClientsRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List OIDC keys
     */
    oidcListKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/key/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List OIDC keys
     */
    oidcListKeys(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListKeysRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcListProvidersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListProviders().');
            }
            const queryParameters = {};
            if (requestParameters['allowedClientId'] != null) {
                queryParameters['allowed_client_id'] = requestParameters['allowedClientId'];
            }
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    oidcListProviders(list, allowedClientId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListProvidersRaw({ list: list, allowedClientId: allowedClientId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List configured OIDC roles
     */
    oidcListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/role/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List configured OIDC roles
     */
    oidcListRoles(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListRolesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcListScopesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling oidcListScopes().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/scope/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    oidcListScopes(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcListScopesRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcProviderAuthorizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcProviderAuthorize().');
            }
            const queryParameters = {};
            if (requestParameters['clientId'] != null) {
                queryParameters['client_id'] = requestParameters['clientId'];
            }
            if (requestParameters['codeChallenge'] != null) {
                queryParameters['code_challenge'] = requestParameters['codeChallenge'];
            }
            if (requestParameters['codeChallengeMethod'] != null) {
                queryParameters['code_challenge_method'] = requestParameters['codeChallengeMethod'];
            }
            if (requestParameters['maxAge'] != null) {
                queryParameters['max_age'] = requestParameters['maxAge'];
            }
            if (requestParameters['nonce'] != null) {
                queryParameters['nonce'] = requestParameters['nonce'];
            }
            if (requestParameters['redirectUri'] != null) {
                queryParameters['redirect_uri'] = requestParameters['redirectUri'];
            }
            if (requestParameters['responseType'] != null) {
                queryParameters['response_type'] = requestParameters['responseType'];
            }
            if (requestParameters['scope'] != null) {
                queryParameters['scope'] = requestParameters['scope'];
            }
            if (requestParameters['state'] != null) {
                queryParameters['state'] = requestParameters['state'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcProviderAuthorize(name, clientId, codeChallenge, codeChallengeMethod, maxAge, nonce, redirectUri, responseType, scope, state, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcProviderAuthorizeRaw({ name: name, clientId: clientId, codeChallenge: codeChallenge, codeChallengeMethod: codeChallengeMethod, maxAge: maxAge, nonce: nonce, redirectUri: redirectUri, responseType: responseType, scope: scope, state: state }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcProviderAuthorizeWithParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcProviderAuthorizeWithParameters().');
            }
            if (requestParameters['oidcProviderAuthorizeWithParametersRequest'] == null) {
                throw new runtime.RequiredError('oidcProviderAuthorizeWithParametersRequest', 'Required parameter "oidcProviderAuthorizeWithParametersRequest" was null or undefined when calling oidcProviderAuthorizeWithParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcProviderAuthorizeWithParametersRequestToJSON)(requestParameters['oidcProviderAuthorizeWithParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcProviderAuthorizeWithParameters(name, oidcProviderAuthorizeWithParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcProviderAuthorizeWithParametersRaw({ name: name, oidcProviderAuthorizeWithParametersRequest: oidcProviderAuthorizeWithParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcProviderTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcProviderToken().');
            }
            if (requestParameters['oidcProviderTokenRequest'] == null) {
                throw new runtime.RequiredError('oidcProviderTokenRequest', 'Required parameter "oidcProviderTokenRequest" was null or undefined when calling oidcProviderToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcProviderTokenRequestToJSON)(requestParameters['oidcProviderTokenRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcProviderToken(name, oidcProviderTokenRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcProviderTokenRaw({ name: name, oidcProviderTokenRequest: oidcProviderTokenRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcProviderUserInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcProviderUserInfo().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcProviderUserInfo(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcProviderUserInfoRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcProviderUserInfo2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcProviderUserInfo2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcProviderUserInfo2(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcProviderUserInfo2Raw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadAssignmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadAssignment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadAssignment(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadAssignmentRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadClientRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadClient().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadClient(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadClientRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcReadKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcReadKey(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadKeyRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve public keys
     */
    oidcReadOidcChildWellKnownKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['child'] == null) {
                throw new runtime.RequiredError('child', 'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownKeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/{child}/.well-known/keys`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve public keys
     */
    oidcReadOidcChildWellKnownKeys(child, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadOidcChildWellKnownKeysRaw({ child: child }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query OIDC configurations
     */
    oidcReadOidcChildWellKnownOpenidConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['child'] == null) {
                throw new runtime.RequiredError('child', 'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownOpenidConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/{child}/.well-known/openid-configuration`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Query OIDC configurations
     */
    oidcReadOidcChildWellKnownOpenidConfiguration(child, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadOidcChildWellKnownOpenidConfigurationRaw({ child: child }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query OIDC configurations
     */
    oidcReadOpenIdConfigurationRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/.well-known/openid-configuration`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Query OIDC configurations
     */
    oidcReadOpenIdConfiguration(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadOpenIdConfigurationRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadProviderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadProvider().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadProvider(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadProviderRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadProviderOpenIdConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadProviderOpenIdConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/.well-known/openid-configuration`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadProviderOpenIdConfiguration(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadProviderOpenIdConfigurationRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadProviderPublicKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadProviderPublicKeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}/.well-known/keys`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadProviderPublicKeys(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadProviderPublicKeysRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve public keys
     */
    oidcReadPublicKeysRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/.well-known/keys`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve public keys
     */
    oidcReadPublicKeys(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadPublicKeysRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcReadRole(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadRoleRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcReadScopeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcReadScope().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcReadScope(name, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcReadScopeRaw({ name: name }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Rotate a named OIDC key.
     */
    oidcRotateKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcRotateKey().');
            }
            if (requestParameters['oidcRotateKeyRequest'] == null) {
                throw new runtime.RequiredError('oidcRotateKeyRequest', 'Required parameter "oidcRotateKeyRequest" was null or undefined when calling oidcRotateKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/key/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcRotateKeyRequestToJSON)(requestParameters['oidcRotateKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Rotate a named OIDC key.
     */
    oidcRotateKey(name, oidcRotateKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcRotateKeyRaw({ name: name, oidcRotateKeyRequest: oidcRotateKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcWriteAssignmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteAssignment().');
            }
            if (requestParameters['oidcWriteAssignmentRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteAssignmentRequest', 'Required parameter "oidcWriteAssignmentRequest" was null or undefined when calling oidcWriteAssignment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteAssignmentRequestToJSON)(requestParameters['oidcWriteAssignmentRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcWriteAssignment(name, oidcWriteAssignmentRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteAssignmentRaw({ name: name, oidcWriteAssignmentRequest: oidcWriteAssignmentRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcWriteClientRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteClient().');
            }
            if (requestParameters['oidcWriteClientRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteClientRequest', 'Required parameter "oidcWriteClientRequest" was null or undefined when calling oidcWriteClient().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteClientRequestToJSON)(requestParameters['oidcWriteClientRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcWriteClient(name, oidcWriteClientRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteClientRaw({ name: name, oidcWriteClientRequest: oidcWriteClientRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcWriteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteKey().');
            }
            if (requestParameters['oidcWriteKeyRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteKeyRequest', 'Required parameter "oidcWriteKeyRequest" was null or undefined when calling oidcWriteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteKeyRequestToJSON)(requestParameters['oidcWriteKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations for OIDC keys.
     */
    oidcWriteKey(name, oidcWriteKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteKeyRaw({ name: name, oidcWriteKeyRequest: oidcWriteKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcWriteProviderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteProvider().');
            }
            if (requestParameters['oidcWriteProviderRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteProviderRequest', 'Required parameter "oidcWriteProviderRequest" was null or undefined when calling oidcWriteProvider().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteProviderRequestToJSON)(requestParameters['oidcWriteProviderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcWriteProvider(name, oidcWriteProviderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteProviderRaw({ name: name, oidcWriteProviderRequest: oidcWriteProviderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteRole().');
            }
            if (requestParameters['oidcWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteRoleRequest', 'Required parameter "oidcWriteRoleRequest" was null or undefined when calling oidcWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteRoleRequestToJSON)(requestParameters['oidcWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CRUD operations on OIDC Roles
     */
    oidcWriteRole(name, oidcWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteRoleRaw({ name: name, oidcWriteRoleRequest: oidcWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    oidcWriteScopeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling oidcWriteScope().');
            }
            if (requestParameters['oidcWriteScopeRequest'] == null) {
                throw new runtime.RequiredError('oidcWriteScopeRequest', 'Required parameter "oidcWriteScopeRequest" was null or undefined when calling oidcWriteScope().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OidcWriteScopeRequestToJSON)(requestParameters['oidcWriteScopeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    oidcWriteScope(name, oidcWriteScopeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oidcWriteScopeRaw({ name: name, oidcWriteScopeRequest: oidcWriteScopeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new alias.
     */
    personaCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['personaCreateRequest'] == null) {
                throw new runtime.RequiredError('personaCreateRequest', 'Required parameter "personaCreateRequest" was null or undefined when calling personaCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/persona`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PersonaCreateRequestToJSON)(requestParameters['personaCreateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create a new alias.
     */
    personaCreate(personaCreateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.personaCreateRaw({ personaCreateRequest: personaCreateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    personaDeleteByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling personaDeleteById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    personaDeleteById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.personaDeleteByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the alias IDs.
     */
    personaListByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling personaListById().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/persona/id/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List all the alias IDs.
     */
    personaListById(list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.personaListByIdRaw({ list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    personaReadByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling personaReadById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    personaReadById(id, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.personaReadByIdRaw({ id: id }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    personaUpdateByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling personaUpdateById().');
            }
            if (requestParameters['personaUpdateByIdRequest'] == null) {
                throw new runtime.RequiredError('personaUpdateByIdRequest', 'Required parameter "personaUpdateByIdRequest" was null or undefined when calling personaUpdateById().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PersonaUpdateByIdRequestToJSON)(requestParameters['personaUpdateByIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    personaUpdateById(id, personaUpdateByIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.personaUpdateByIdRaw({ id: id, personaUpdateByIdRequest: personaUpdateByIdRequest }, initOverrides);
            return yield response.value();
        });
    }
}
exports.IdentityApi = IdentityApi;
/**
  * @export
  * @enum {string}
  */
var AliasListByIdListEnum;
(function (AliasListByIdListEnum) {
    AliasListByIdListEnum["TRUE"] = "true";
})(AliasListByIdListEnum || (exports.AliasListByIdListEnum = AliasListByIdListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var EntityListAliasesByIdListEnum;
(function (EntityListAliasesByIdListEnum) {
    EntityListAliasesByIdListEnum["TRUE"] = "true";
})(EntityListAliasesByIdListEnum || (exports.EntityListAliasesByIdListEnum = EntityListAliasesByIdListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var EntityListByIdListEnum;
(function (EntityListByIdListEnum) {
    EntityListByIdListEnum["TRUE"] = "true";
})(EntityListByIdListEnum || (exports.EntityListByIdListEnum = EntityListByIdListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var EntityListByNameListEnum;
(function (EntityListByNameListEnum) {
    EntityListByNameListEnum["TRUE"] = "true";
})(EntityListByNameListEnum || (exports.EntityListByNameListEnum = EntityListByNameListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var EntityListFromStorageListEnum;
(function (EntityListFromStorageListEnum) {
    EntityListFromStorageListEnum["TRUE"] = "true";
})(EntityListFromStorageListEnum || (exports.EntityListFromStorageListEnum = EntityListFromStorageListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GroupListAliasesByIdListEnum;
(function (GroupListAliasesByIdListEnum) {
    GroupListAliasesByIdListEnum["TRUE"] = "true";
})(GroupListAliasesByIdListEnum || (exports.GroupListAliasesByIdListEnum = GroupListAliasesByIdListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GroupListByIdListEnum;
(function (GroupListByIdListEnum) {
    GroupListByIdListEnum["TRUE"] = "true";
})(GroupListByIdListEnum || (exports.GroupListByIdListEnum = GroupListByIdListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GroupListByNameListEnum;
(function (GroupListByNameListEnum) {
    GroupListByNameListEnum["TRUE"] = "true";
})(GroupListByNameListEnum || (exports.GroupListByNameListEnum = GroupListByNameListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GroupListFromStorageListEnum;
(function (GroupListFromStorageListEnum) {
    GroupListFromStorageListEnum["TRUE"] = "true";
})(GroupListFromStorageListEnum || (exports.GroupListFromStorageListEnum = GroupListFromStorageListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListDuoMethodsListEnum;
(function (MfaListDuoMethodsListEnum) {
    MfaListDuoMethodsListEnum["TRUE"] = "true";
})(MfaListDuoMethodsListEnum || (exports.MfaListDuoMethodsListEnum = MfaListDuoMethodsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListLoginEnforcementsListEnum;
(function (MfaListLoginEnforcementsListEnum) {
    MfaListLoginEnforcementsListEnum["TRUE"] = "true";
})(MfaListLoginEnforcementsListEnum || (exports.MfaListLoginEnforcementsListEnum = MfaListLoginEnforcementsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListMethodsListEnum;
(function (MfaListMethodsListEnum) {
    MfaListMethodsListEnum["TRUE"] = "true";
})(MfaListMethodsListEnum || (exports.MfaListMethodsListEnum = MfaListMethodsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListOktaMethodsListEnum;
(function (MfaListOktaMethodsListEnum) {
    MfaListOktaMethodsListEnum["TRUE"] = "true";
})(MfaListOktaMethodsListEnum || (exports.MfaListOktaMethodsListEnum = MfaListOktaMethodsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListPingIdMethodsListEnum;
(function (MfaListPingIdMethodsListEnum) {
    MfaListPingIdMethodsListEnum["TRUE"] = "true";
})(MfaListPingIdMethodsListEnum || (exports.MfaListPingIdMethodsListEnum = MfaListPingIdMethodsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MfaListTotpMethodsListEnum;
(function (MfaListTotpMethodsListEnum) {
    MfaListTotpMethodsListEnum["TRUE"] = "true";
})(MfaListTotpMethodsListEnum || (exports.MfaListTotpMethodsListEnum = MfaListTotpMethodsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListAssignmentsListEnum;
(function (OidcListAssignmentsListEnum) {
    OidcListAssignmentsListEnum["TRUE"] = "true";
})(OidcListAssignmentsListEnum || (exports.OidcListAssignmentsListEnum = OidcListAssignmentsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListClientsListEnum;
(function (OidcListClientsListEnum) {
    OidcListClientsListEnum["TRUE"] = "true";
})(OidcListClientsListEnum || (exports.OidcListClientsListEnum = OidcListClientsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListKeysListEnum;
(function (OidcListKeysListEnum) {
    OidcListKeysListEnum["TRUE"] = "true";
})(OidcListKeysListEnum || (exports.OidcListKeysListEnum = OidcListKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListProvidersListEnum;
(function (OidcListProvidersListEnum) {
    OidcListProvidersListEnum["TRUE"] = "true";
})(OidcListProvidersListEnum || (exports.OidcListProvidersListEnum = OidcListProvidersListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListRolesListEnum;
(function (OidcListRolesListEnum) {
    OidcListRolesListEnum["TRUE"] = "true";
})(OidcListRolesListEnum || (exports.OidcListRolesListEnum = OidcListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var OidcListScopesListEnum;
(function (OidcListScopesListEnum) {
    OidcListScopesListEnum["TRUE"] = "true";
})(OidcListScopesListEnum || (exports.OidcListScopesListEnum = OidcListScopesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PersonaListByIdListEnum;
(function (PersonaListByIdListEnum) {
    PersonaListByIdListEnum["TRUE"] = "true";
})(PersonaListByIdListEnum || (exports.PersonaListByIdListEnum = PersonaListByIdListEnum = {}));
