"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TotpListKeysListEnum = exports.TerraformCloudListRolesListEnum = exports.SshListRolesListEnum = exports.RabbitMqListRolesListEnum = exports.PkiRotateRootExportedEnum = exports.PkiListUnifiedRevokedCertsListEnum = exports.PkiListRolesListEnum = exports.PkiListRevokedCertsListEnum = exports.PkiListKeysListEnum = exports.PkiListIssuersListEnum = exports.PkiListEabKeysListEnum = exports.PkiListCertsRevocationQueueListEnum = exports.PkiListCertsListEnum = exports.PkiListCertMetadataListEnum = exports.PkiListAcmeAccountKeysListEnum = exports.PkiIssuersGenerateRootExportedEnum = exports.PkiIssuersGenerateIntermediateExportedEnum = exports.PkiGenerateRootExportedEnum = exports.PkiGenerateIntermediateExportedEnum = exports.NomadListRolesListEnum = exports.MongoDbAtlasListRolesListEnum = exports.LdapListStaticRolesListEnum = exports.LdapListStaticRolePath0ListEnum = exports.LdapListStaticRolePathListEnum = exports.LdapListRolePath0ListEnum = exports.LdapListRolePathListEnum = exports.LdapListDynamicRolesListEnum = exports.LdapLibraryListLibraryPath0ListEnum = exports.LdapLibraryListLibraryPathListEnum = exports.LdapLibraryListListEnum = exports.KvV2ListListEnum = exports.KvV1ListListEnum = exports.KubernetesListRolesListEnum = exports.GoogleCloudListStaticAccounts2ListEnum = exports.GoogleCloudListStaticAccountsListEnum = exports.GoogleCloudListRolesets2ListEnum = exports.GoogleCloudListRolesetsListEnum = exports.GoogleCloudListImpersonatedAccounts2ListEnum = exports.GoogleCloudListImpersonatedAccountsListEnum = exports.GoogleCloudKmsListKeysListEnum = exports.DatabaseListStaticRolesListEnum = exports.DatabaseListRolesListEnum = exports.DatabaseListConnectionsListEnum = exports.CubbyholeListListEnum = exports.ConsulListRolesListEnum = exports.AzureListRolesListEnum = exports.AwsListStaticRolesListEnum = exports.AwsListRolesListEnum = exports.AliCloudListRolesListEnum = exports.SecretsApi = void 0;
exports.TransitListKeysListEnum = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class SecretsApi extends runtime.BaseAPI {
    /**
     */
    aliCloudConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudConfigure().');
            }
            if (requestParameters['aliCloudConfigureRequest'] == null) {
                throw new runtime.RequiredError('aliCloudConfigureRequest', 'Required parameter "aliCloudConfigureRequest" was null or undefined when calling aliCloudConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AliCloudConfigureRequestToJSON)(requestParameters['aliCloudConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliCloudConfigure(alicloudMountPath, aliCloudConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudConfigureRaw({ alicloudMountPath: alicloudMountPath, aliCloudConfigureRequest: aliCloudConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    aliCloudDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliCloudDeleteConfiguration(alicloudMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudDeleteConfigurationRaw({ alicloudMountPath: alicloudMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling aliCloudDeleteRole().');
            }
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudDeleteRole(name, alicloudMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudDeleteRoleRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    aliCloudGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling aliCloudGenerateCredentials().');
            }
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    aliCloudGenerateCredentials(name, alicloudMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudGenerateCredentialsRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the existing roles in this backend.
     */
    aliCloudListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling aliCloudListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the existing roles in this backend.
     */
    aliCloudListRoles(alicloudMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudListRolesRaw({ alicloudMountPath: alicloudMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    aliCloudReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    aliCloudReadConfiguration(alicloudMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudReadConfigurationRaw({ alicloudMountPath: alicloudMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling aliCloudReadRole().');
            }
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudReadRole(name, alicloudMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudReadRoleRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling aliCloudWriteRole().');
            }
            if (requestParameters['alicloudMountPath'] == null) {
                throw new runtime.RequiredError('alicloudMountPath', 'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudWriteRole().');
            }
            if (requestParameters['aliCloudWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('aliCloudWriteRoleRequest', 'Required parameter "aliCloudWriteRoleRequest" was null or undefined when calling aliCloudWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AliCloudWriteRoleRequestToJSON)(requestParameters['aliCloudWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    aliCloudWriteRole(name, alicloudMountPath, aliCloudWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.aliCloudWriteRoleRaw({ name: name, alicloudMountPath: alicloudMountPath, aliCloudWriteRoleRequest: aliCloudWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsConfigureLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsConfigureLease().');
            }
            if (requestParameters['awsConfigureLeaseRequest'] == null) {
                throw new runtime.RequiredError('awsConfigureLeaseRequest', 'Required parameter "awsConfigureLeaseRequest" was null or undefined when calling awsConfigureLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsConfigureLeaseRequestToJSON)(requestParameters['awsConfigureLeaseRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsConfigureLease(awsMountPath, awsConfigureLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsConfigureLeaseRaw({ awsMountPath: awsMountPath, awsConfigureLeaseRequest: awsConfigureLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsConfigureRootIamCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRootIamCredentials().');
            }
            if (requestParameters['awsConfigureRootIamCredentialsRequest'] == null) {
                throw new runtime.RequiredError('awsConfigureRootIamCredentialsRequest', 'Required parameter "awsConfigureRootIamCredentialsRequest" was null or undefined when calling awsConfigureRootIamCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsConfigureRootIamCredentialsRequestToJSON)(requestParameters['awsConfigureRootIamCredentialsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsConfigureRootIamCredentials(awsMountPath, awsConfigureRootIamCredentialsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsConfigureRootIamCredentialsRaw({ awsMountPath: awsMountPath, awsConfigureRootIamCredentialsRequest: awsConfigureRootIamCredentialsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsDeleteRole().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsDeleteRole(name, awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsDeleteRoleRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsDeleteStaticRolesNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsDeleteStaticRolesName().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsDeleteStaticRolesName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsDeleteStaticRolesName(name, awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsDeleteStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsGenerateCredentials().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentials().');
            }
            const queryParameters = {};
            if (requestParameters['roleArn'] != null) {
                queryParameters['role_arn'] = requestParameters['roleArn'];
            }
            if (requestParameters['roleSessionName'] != null) {
                queryParameters['role_session_name'] = requestParameters['roleSessionName'];
            }
            if (requestParameters['ttl'] != null) {
                queryParameters['ttl'] = requestParameters['ttl'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsGenerateCredentials(name, awsMountPath, roleArn, roleSessionName, ttl, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsGenerateCredentialsRaw({ name: name, awsMountPath: awsMountPath, roleArn: roleArn, roleSessionName: roleSessionName, ttl: ttl }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsGenerateCredentialsWithParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsGenerateCredentialsWithParameters().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentialsWithParameters().');
            }
            if (requestParameters['awsGenerateCredentialsWithParametersRequest'] == null) {
                throw new runtime.RequiredError('awsGenerateCredentialsWithParametersRequest', 'Required parameter "awsGenerateCredentialsWithParametersRequest" was null or undefined when calling awsGenerateCredentialsWithParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsGenerateCredentialsWithParametersRequestToJSON)(requestParameters['awsGenerateCredentialsWithParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsGenerateCredentialsWithParameters(name, awsMountPath, awsGenerateCredentialsWithParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsGenerateCredentialsWithParametersRaw({ name: name, awsMountPath: awsMountPath, awsGenerateCredentialsWithParametersRequest: awsGenerateCredentialsWithParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsGenerateStsCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsGenerateStsCredentials().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentials().');
            }
            const queryParameters = {};
            if (requestParameters['roleArn'] != null) {
                queryParameters['role_arn'] = requestParameters['roleArn'];
            }
            if (requestParameters['roleSessionName'] != null) {
                queryParameters['role_session_name'] = requestParameters['roleSessionName'];
            }
            if (requestParameters['ttl'] != null) {
                queryParameters['ttl'] = requestParameters['ttl'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsGenerateStsCredentials(name, awsMountPath, roleArn, roleSessionName, ttl, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsGenerateStsCredentialsRaw({ name: name, awsMountPath: awsMountPath, roleArn: roleArn, roleSessionName: roleSessionName, ttl: ttl }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsGenerateStsCredentialsWithParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsGenerateStsCredentialsWithParameters().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentialsWithParameters().');
            }
            if (requestParameters['awsGenerateStsCredentialsWithParametersRequest'] == null) {
                throw new runtime.RequiredError('awsGenerateStsCredentialsWithParametersRequest', 'Required parameter "awsGenerateStsCredentialsWithParametersRequest" was null or undefined when calling awsGenerateStsCredentialsWithParameters().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsGenerateStsCredentialsWithParametersRequestToJSON)(requestParameters['awsGenerateStsCredentialsWithParametersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsGenerateStsCredentialsWithParameters(name, awsMountPath, awsGenerateStsCredentialsWithParametersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsGenerateStsCredentialsWithParametersRaw({ name: name, awsMountPath: awsMountPath, awsGenerateStsCredentialsWithParametersRequest: awsGenerateStsCredentialsWithParametersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the existing roles in this backend
     */
    awsListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling awsListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the existing roles in this backend
     */
    awsListRoles(awsMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsListRolesRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsListStaticRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsListStaticRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling awsListStaticRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/static-roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    awsListStaticRoles(awsMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsListStaticRolesRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsReadLeaseConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsReadLeaseConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsReadLeaseConfiguration(awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsReadLeaseConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsReadRole().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsReadRole(name, awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsReadRoleRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsReadRootIamCredentialsConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsReadRootIamCredentialsConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsReadRootIamCredentialsConfiguration(awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsReadRootIamCredentialsConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsReadStaticCredsNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsReadStaticCredsName().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticCredsName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwsReadStaticCredsNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    awsReadStaticCredsName(name, awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsReadStaticCredsNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsReadStaticRolesNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsReadStaticRolesName().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticRolesName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwsReadStaticRolesNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    awsReadStaticRolesName(name, awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsReadStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsRotateRootIamCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsRotateRootIamCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    awsRotateRootIamCredentials(awsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsRotateRootIamCredentialsRaw({ awsMountPath: awsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsWriteRole().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsWriteRole().');
            }
            if (requestParameters['awsWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('awsWriteRoleRequest', 'Required parameter "awsWriteRoleRequest" was null or undefined when calling awsWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsWriteRoleRequestToJSON)(requestParameters['awsWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    awsWriteRole(name, awsMountPath, awsWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsWriteRoleRaw({ name: name, awsMountPath: awsMountPath, awsWriteRoleRequest: awsWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    awsWriteStaticRolesNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling awsWriteStaticRolesName().');
            }
            if (requestParameters['awsMountPath'] == null) {
                throw new runtime.RequiredError('awsMountPath', 'Required parameter "awsMountPath" was null or undefined when calling awsWriteStaticRolesName().');
            }
            if (requestParameters['awsWriteStaticRolesNameRequest'] == null) {
                throw new runtime.RequiredError('awsWriteStaticRolesNameRequest', 'Required parameter "awsWriteStaticRolesNameRequest" was null or undefined when calling awsWriteStaticRolesName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwsWriteStaticRolesNameRequestToJSON)(requestParameters['awsWriteStaticRolesNameRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwsWriteStaticRolesNameResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    awsWriteStaticRolesName(name, awsMountPath, awsWriteStaticRolesNameRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.awsWriteStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath, awsWriteStaticRolesNameRequest: awsWriteStaticRolesNameRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    azureConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureConfigure().');
            }
            if (requestParameters['azureConfigureRequest'] == null) {
                throw new runtime.RequiredError('azureConfigureRequest', 'Required parameter "azureConfigureRequest" was null or undefined when calling azureConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AzureConfigureRequestToJSON)(requestParameters['azureConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    azureConfigure(azureMountPath, azureConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureConfigureRaw({ azureMountPath: azureMountPath, azureConfigureRequest: azureConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    azureDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    azureDeleteConfiguration(azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureDeleteConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling azureDeleteRole().');
            }
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureDeleteRole(name, azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureDeleteRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List existing roles.
     */
    azureListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling azureListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/roles/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List existing roles.
     */
    azureListRoles(azureMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureListRolesRaw({ azureMountPath: azureMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    azureReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    azureReadConfiguration(azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureReadConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling azureReadRole().');
            }
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureReadRole(name, azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureReadRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    azureRequestServicePrincipalCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling azureRequestServicePrincipalCredentials().');
            }
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureRequestServicePrincipalCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    azureRequestServicePrincipalCredentials(role, azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureRequestServicePrincipalCredentialsRaw({ role: role, azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    azureRotateRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureRotateRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    azureRotateRoot(azureMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureRotateRootRaw({ azureMountPath: azureMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling azureWriteRole().');
            }
            if (requestParameters['azureMountPath'] == null) {
                throw new runtime.RequiredError('azureMountPath', 'Required parameter "azureMountPath" was null or undefined when calling azureWriteRole().');
            }
            if (requestParameters['azureWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('azureWriteRoleRequest', 'Required parameter "azureWriteRoleRequest" was null or undefined when calling azureWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AzureWriteRoleRequestToJSON)(requestParameters['azureWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    azureWriteRole(name, azureMountPath, azureWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.azureWriteRoleRaw({ name: name, azureMountPath: azureMountPath, azureWriteRoleRequest: azureWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulConfigureAccessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulConfigureAccess().');
            }
            if (requestParameters['consulConfigureAccessRequest'] == null) {
                throw new runtime.RequiredError('consulConfigureAccessRequest', 'Required parameter "consulConfigureAccessRequest" was null or undefined when calling consulConfigureAccess().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConsulConfigureAccessRequestToJSON)(requestParameters['consulConfigureAccessRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulConfigureAccess(consulMountPath, consulConfigureAccessRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulConfigureAccessRaw({ consulMountPath: consulMountPath, consulConfigureAccessRequest: consulConfigureAccessRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling consulDeleteRole().');
            }
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulDeleteRole(name, consulMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulDeleteRoleRaw({ name: name, consulMountPath: consulMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling consulGenerateCredentials().');
            }
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{consul_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulGenerateCredentials(role, consulMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulGenerateCredentialsRaw({ role: role, consulMountPath: consulMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling consulListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{consul_mount_path}/roles/`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    consulListRoles(consulMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulListRolesRaw({ consulMountPath: consulMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulReadAccessConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulReadAccessConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulReadAccessConfiguration(consulMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulReadAccessConfigurationRaw({ consulMountPath: consulMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling consulReadRole().');
            }
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulReadRole(name, consulMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulReadRoleRaw({ name: name, consulMountPath: consulMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    consulWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling consulWriteRole().');
            }
            if (requestParameters['consulMountPath'] == null) {
                throw new runtime.RequiredError('consulMountPath', 'Required parameter "consulMountPath" was null or undefined when calling consulWriteRole().');
            }
            if (requestParameters['consulWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('consulWriteRoleRequest', 'Required parameter "consulWriteRoleRequest" was null or undefined when calling consulWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConsulWriteRoleRequestToJSON)(requestParameters['consulWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    consulWriteRole(name, consulMountPath, consulWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.consulWriteRoleRaw({ name: name, consulMountPath: consulMountPath, consulWriteRoleRequest: consulWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes the secret at the specified location.
     */
    cubbyholeDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling cubbyholeDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes the secret at the specified location.
     */
    cubbyholeDelete(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cubbyholeDeleteRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    cubbyholeListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling cubbyholeList().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling cubbyholeList().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/cubbyhole/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    cubbyholeList(path, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cubbyholeListRaw({ path: path, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the secret at the specified location.
     */
    cubbyholeReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling cubbyholeRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve the secret at the specified location.
     */
    cubbyholeRead(path, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cubbyholeReadRaw({ path: path }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Store a secret at the specified location.
     */
    cubbyholeWriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling cubbyholeWrite().');
            }
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling cubbyholeWrite().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Store a secret at the specified location.
     */
    cubbyholeWrite(path, requestBody, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cubbyholeWriteRaw({ path: path, requestBody: requestBody }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    databaseConfigureConnectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseConfigureConnection().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseConfigureConnection().');
            }
            if (requestParameters['databaseConfigureConnectionRequest'] == null) {
                throw new runtime.RequiredError('databaseConfigureConnectionRequest', 'Required parameter "databaseConfigureConnectionRequest" was null or undefined when calling databaseConfigureConnection().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DatabaseConfigureConnectionRequestToJSON)(requestParameters['databaseConfigureConnectionRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    databaseConfigureConnection(name, databaseMountPath, databaseConfigureConnectionRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseConfigureConnectionRaw({ name: name, databaseMountPath: databaseMountPath, databaseConfigureConnectionRequest: databaseConfigureConnectionRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    databaseDeleteConnectionConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseDeleteConnectionConfiguration().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteConnectionConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    databaseDeleteConnectionConfiguration(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseDeleteConnectionConfigurationRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseDeleteRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseDeleteRole(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseDeleteRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseDeleteStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseDeleteStaticRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseDeleteStaticRole(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseDeleteStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request database credentials for a certain role.
     */
    databaseGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseGenerateCredentials().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Request database credentials for a certain role.
     */
    databaseGenerateCredentials(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseGenerateCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure connection details to a database plugin.
     */
    databaseListConnectionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseListConnections().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling databaseListConnections().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/config/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Configure connection details to a database plugin.
     */
    databaseListConnections(databaseMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseListConnectionsRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling databaseListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseListRoles(databaseMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseListRolesRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseListStaticRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseListStaticRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling databaseListStaticRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/static-roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseListStaticRoles(databaseMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseListStaticRolesRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    databaseReadConnectionConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseReadConnectionConfiguration().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseReadConnectionConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    databaseReadConnectionConfiguration(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseReadConnectionConfigurationRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseReadRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseReadRole(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseReadRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseReadStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseReadStaticRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseReadStaticRole(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseReadStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    databaseReadStaticRoleCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseReadStaticRoleCredentials().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRoleCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    databaseReadStaticRoleCredentials(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseReadStaticRoleCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reloads all connections using a named database plugin.
     */
    databaseReloadPluginRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pluginName'] == null) {
                throw new runtime.RequiredError('pluginName', 'Required parameter "pluginName" was null or undefined when calling databaseReloadPlugin().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseReloadPlugin().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/reload/{plugin_name}`.replace(`{${"plugin_name"}}`, encodeURIComponent(String(requestParameters['pluginName']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Reloads all connections using a named database plugin.
     */
    databaseReloadPlugin(pluginName, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseReloadPluginRaw({ pluginName: pluginName, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Resets a database plugin.
     */
    databaseResetConnectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseResetConnection().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseResetConnection().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/reset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Resets a database plugin.
     */
    databaseResetConnection(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseResetConnectionRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    databaseRotateRootCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseRotateRootCredentials().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateRootCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/rotate-root/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    databaseRotateRootCredentials(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseRotateRootCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    databaseRotateStaticRoleCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseRotateStaticRoleCredentials().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateStaticRoleCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{database_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    databaseRotateStaticRoleCredentials(name, databaseMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseRotateStaticRoleCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseWriteRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteRole().');
            }
            if (requestParameters['databaseWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('databaseWriteRoleRequest', 'Required parameter "databaseWriteRoleRequest" was null or undefined when calling databaseWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DatabaseWriteRoleRequestToJSON)(requestParameters['databaseWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    databaseWriteRole(name, databaseMountPath, databaseWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseWriteRoleRaw({ name: name, databaseMountPath: databaseMountPath, databaseWriteRoleRequest: databaseWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseWriteStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling databaseWriteStaticRole().');
            }
            if (requestParameters['databaseMountPath'] == null) {
                throw new runtime.RequiredError('databaseMountPath', 'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteStaticRole().');
            }
            if (requestParameters['databaseWriteStaticRoleRequest'] == null) {
                throw new runtime.RequiredError('databaseWriteStaticRoleRequest', 'Required parameter "databaseWriteStaticRoleRequest" was null or undefined when calling databaseWriteStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DatabaseWriteStaticRoleRequestToJSON)(requestParameters['databaseWriteStaticRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the static roles that can be created with this backend.
     */
    databaseWriteStaticRole(name, databaseMountPath, databaseWriteStaticRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.databaseWriteStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath, databaseWriteStaticRoleRequest: databaseWriteStaticRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudConfigure().');
            }
            if (requestParameters['googleCloudConfigureRequest'] == null) {
                throw new runtime.RequiredError('googleCloudConfigureRequest', 'Required parameter "googleCloudConfigureRequest" was null or undefined when calling googleCloudConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudConfigureRequestToJSON)(requestParameters['googleCloudConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudConfigure(gcpMountPath, googleCloudConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudConfigureRaw({ gcpMountPath: gcpMountPath, googleCloudConfigureRequest: googleCloudConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudDeleteImpersonatedAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudDeleteImpersonatedAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteImpersonatedAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudDeleteImpersonatedAccount(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudDeleteImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudDeleteRolesetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudDeleteRoleset().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteRoleset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudDeleteRoleset(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudDeleteRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudDeleteStaticAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudDeleteStaticAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteStaticAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudDeleteStaticAccount(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudDeleteStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateImpersonatedAccountAccessTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateImpersonatedAccountAccessToken(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateImpersonatedAccountAccessTokenRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateImpersonatedAccountAccessToken2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateImpersonatedAccountAccessToken2(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateImpersonatedAccountAccessToken2Raw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken(roleset, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetAccessTokenRaw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken2(roleset, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetAccessToken2Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken3(roleset, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetAccessToken3Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetAccessToken4(roleset, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetAccessToken4Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey().');
            }
            if (requestParameters['googleCloudGenerateRolesetKeyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudGenerateRolesetKeyRequest', 'Required parameter "googleCloudGenerateRolesetKeyRequest" was null or undefined when calling googleCloudGenerateRolesetKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudGenerateRolesetKeyRequestToJSON)(requestParameters['googleCloudGenerateRolesetKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey(roleset, gcpMountPath, googleCloudGenerateRolesetKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetKeyRaw({ roleset: roleset, gcpMountPath: gcpMountPath, googleCloudGenerateRolesetKeyRequest: googleCloudGenerateRolesetKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey2().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey2().');
            }
            const queryParameters = {};
            if (requestParameters['keyAlgorithm'] != null) {
                queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
            }
            if (requestParameters['keyType'] != null) {
                queryParameters['key_type'] = requestParameters['keyType'];
            }
            if (requestParameters['ttl'] != null) {
                queryParameters['ttl'] = requestParameters['ttl'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey2(roleset, gcpMountPath, keyAlgorithm, keyType, ttl, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetKey2Raw({ roleset: roleset, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey3().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey3().');
            }
            if (requestParameters['googleCloudGenerateRolesetKey3Request'] == null) {
                throw new runtime.RequiredError('googleCloudGenerateRolesetKey3Request', 'Required parameter "googleCloudGenerateRolesetKey3Request" was null or undefined when calling googleCloudGenerateRolesetKey3().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudGenerateRolesetKey3RequestToJSON)(requestParameters['googleCloudGenerateRolesetKey3Request']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey3(roleset, gcpMountPath, googleCloudGenerateRolesetKey3Request, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetKey3Raw({ roleset: roleset, gcpMountPath: gcpMountPath, googleCloudGenerateRolesetKey3Request: googleCloudGenerateRolesetKey3Request }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleset'] == null) {
                throw new runtime.RequiredError('roleset', 'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey4().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey4().');
            }
            const queryParameters = {};
            if (requestParameters['keyAlgorithm'] != null) {
                queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
            }
            if (requestParameters['keyType'] != null) {
                queryParameters['key_type'] = requestParameters['keyType'];
            }
            if (requestParameters['ttl'] != null) {
                queryParameters['ttl'] = requestParameters['ttl'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateRolesetKey4(roleset, gcpMountPath, keyAlgorithm, keyType, ttl, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateRolesetKey4Raw({ roleset: roleset, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountAccessTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountAccessToken(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateStaticAccountAccessTokenRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountAccessToken2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountAccessToken2(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateStaticAccountAccessToken2Raw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey().');
            }
            if (requestParameters['googleCloudGenerateStaticAccountKeyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudGenerateStaticAccountKeyRequest', 'Required parameter "googleCloudGenerateStaticAccountKeyRequest" was null or undefined when calling googleCloudGenerateStaticAccountKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudGenerateStaticAccountKeyRequestToJSON)(requestParameters['googleCloudGenerateStaticAccountKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountKey(name, gcpMountPath, googleCloudGenerateStaticAccountKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateStaticAccountKeyRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudGenerateStaticAccountKeyRequest: googleCloudGenerateStaticAccountKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountKey2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey2().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey2().');
            }
            const queryParameters = {};
            if (requestParameters['keyAlgorithm'] != null) {
                queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
            }
            if (requestParameters['keyType'] != null) {
                queryParameters['key_type'] = requestParameters['keyType'];
            }
            if (requestParameters['ttl'] != null) {
                queryParameters['ttl'] = requestParameters['ttl'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudGenerateStaticAccountKey2(name, gcpMountPath, keyAlgorithm, keyType, ttl, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudGenerateStaticAccountKey2Raw({ name: name, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigure().');
            }
            if (requestParameters['googleCloudKmsConfigureRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsConfigureRequest', 'Required parameter "googleCloudKmsConfigureRequest" was null or undefined when calling googleCloudKmsConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsConfigureRequestToJSON)(requestParameters['googleCloudKmsConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsConfigure(gcpkmsMountPath, googleCloudKmsConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsConfigureRaw({ gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsConfigureRequest: googleCloudKmsConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsConfigureKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsConfigureKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigureKey().');
            }
            if (requestParameters['googleCloudKmsConfigureKeyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsConfigureKeyRequest', 'Required parameter "googleCloudKmsConfigureKeyRequest" was null or undefined when calling googleCloudKmsConfigureKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsConfigureKeyRequestToJSON)(requestParameters['googleCloudKmsConfigureKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsConfigureKey(key, gcpkmsMountPath, googleCloudKmsConfigureKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsConfigureKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsConfigureKeyRequest: googleCloudKmsConfigureKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Decrypt a ciphertext value using a named key
     */
    googleCloudKmsDecryptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsDecrypt().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDecrypt().');
            }
            if (requestParameters['googleCloudKmsDecryptRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsDecryptRequest', 'Required parameter "googleCloudKmsDecryptRequest" was null or undefined when calling googleCloudKmsDecrypt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/decrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsDecryptRequestToJSON)(requestParameters['googleCloudKmsDecryptRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Decrypt a ciphertext value using a named key
     */
    googleCloudKmsDecrypt(key, gcpkmsMountPath, googleCloudKmsDecryptRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsDecryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsDecryptRequest: googleCloudKmsDecryptRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsDeleteConfiguration(gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsDeleteConfigurationRaw({ gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsDeleteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsDeleteKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsDeleteKey(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsDeleteKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsDeregisterKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsDeregisterKey(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsDeregisterKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsDeregisterKey2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey2().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsDeregisterKey2(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsDeregisterKey2Raw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Encrypt a plaintext value using a named key
     */
    googleCloudKmsEncryptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsEncrypt().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsEncrypt().');
            }
            if (requestParameters['googleCloudKmsEncryptRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsEncryptRequest', 'Required parameter "googleCloudKmsEncryptRequest" was null or undefined when calling googleCloudKmsEncrypt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/encrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsEncryptRequestToJSON)(requestParameters['googleCloudKmsEncryptRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Encrypt a plaintext value using a named key
     */
    googleCloudKmsEncrypt(key, gcpkmsMountPath, googleCloudKmsEncryptRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsEncryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsEncryptRequest: googleCloudKmsEncryptRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List named keys
     */
    googleCloudKmsListKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsListKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudKmsListKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List named keys
     */
    googleCloudKmsListKeys(gcpkmsMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsListKeysRaw({ gcpkmsMountPath: gcpkmsMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsReadConfiguration(gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsReadConfigurationRaw({ gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsReadKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsReadKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsReadKey(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsReadKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsReadKeyConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsReadKeyConfiguration().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKeyConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsReadKeyConfiguration(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsReadKeyConfigurationRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    googleCloudKmsReencryptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsReencrypt().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReencrypt().');
            }
            if (requestParameters['googleCloudKmsReencryptRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsReencryptRequest', 'Required parameter "googleCloudKmsReencryptRequest" was null or undefined when calling googleCloudKmsReencrypt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/reencrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsReencryptRequestToJSON)(requestParameters['googleCloudKmsReencryptRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    googleCloudKmsReencrypt(key, gcpkmsMountPath, googleCloudKmsReencryptRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsReencryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsReencryptRequest: googleCloudKmsReencryptRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    googleCloudKmsRegisterKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsRegisterKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRegisterKey().');
            }
            if (requestParameters['googleCloudKmsRegisterKeyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsRegisterKeyRequest', 'Required parameter "googleCloudKmsRegisterKeyRequest" was null or undefined when calling googleCloudKmsRegisterKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/register/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsRegisterKeyRequestToJSON)(requestParameters['googleCloudKmsRegisterKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    googleCloudKmsRegisterKey(key, gcpkmsMountPath, googleCloudKmsRegisterKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsRegisterKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsRegisterKeyRequest: googleCloudKmsRegisterKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the public key associated with the named key
     */
    googleCloudKmsRetrievePublicKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsRetrievePublicKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRetrievePublicKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/pubkey/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve the public key associated with the named key
     */
    googleCloudKmsRetrievePublicKey(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsRetrievePublicKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Rotate a crypto key to a new primary version
     */
    googleCloudKmsRotateKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsRotateKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRotateKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/rotate/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Rotate a crypto key to a new primary version
     */
    googleCloudKmsRotateKey(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsRotateKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Signs a message or digest using a named key
     */
    googleCloudKmsSignRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsSign().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsSign().');
            }
            if (requestParameters['googleCloudKmsSignRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsSignRequest', 'Required parameter "googleCloudKmsSignRequest" was null or undefined when calling googleCloudKmsSign().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/sign/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsSignRequestToJSON)(requestParameters['googleCloudKmsSignRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Signs a message or digest using a named key
     */
    googleCloudKmsSign(key, gcpkmsMountPath, googleCloudKmsSignRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsSignRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsSignRequest: googleCloudKmsSignRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsTrimKeyVersionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsTrimKeyVersions(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsTrimKeyVersionsRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudKmsTrimKeyVersions2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions2().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudKmsTrimKeyVersions2(key, gcpkmsMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsTrimKeyVersions2Raw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Verify a signature using a named key
     */
    googleCloudKmsVerifyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsVerify().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsVerify().');
            }
            if (requestParameters['googleCloudKmsVerifyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsVerifyRequest', 'Required parameter "googleCloudKmsVerifyRequest" was null or undefined when calling googleCloudKmsVerify().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/verify/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsVerifyRequestToJSON)(requestParameters['googleCloudKmsVerifyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Verify a signature using a named key
     */
    googleCloudKmsVerify(key, gcpkmsMountPath, googleCloudKmsVerifyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsVerifyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsVerifyRequest: googleCloudKmsVerifyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsWriteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['key'] == null) {
                throw new runtime.RequiredError('key', 'Required parameter "key" was null or undefined when calling googleCloudKmsWriteKey().');
            }
            if (requestParameters['gcpkmsMountPath'] == null) {
                throw new runtime.RequiredError('gcpkmsMountPath', 'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsWriteKey().');
            }
            if (requestParameters['googleCloudKmsWriteKeyRequest'] == null) {
                throw new runtime.RequiredError('googleCloudKmsWriteKeyRequest', 'Required parameter "googleCloudKmsWriteKeyRequest" was null or undefined when calling googleCloudKmsWriteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudKmsWriteKeyRequestToJSON)(requestParameters['googleCloudKmsWriteKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    googleCloudKmsWriteKey(key, gcpkmsMountPath, googleCloudKmsWriteKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudKmsWriteKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsWriteKeyRequest: googleCloudKmsWriteKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListImpersonatedAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListImpersonatedAccounts(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListImpersonatedAccountsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListImpersonatedAccounts2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts2().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts2().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListImpersonatedAccounts2(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListImpersonatedAccounts2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListRolesetsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListRolesets().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListRolesets(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListRolesetsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListRolesets2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets2().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListRolesets2().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/rolesets/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListRolesets2(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListRolesets2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListStaticAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListStaticAccounts(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListStaticAccountsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudListStaticAccounts2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts2().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts2().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    googleCloudListStaticAccounts2(gcpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudListStaticAccounts2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudReadConfiguration(gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudReadConfigurationRaw({ gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudReadImpersonatedAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudReadImpersonatedAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadImpersonatedAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudReadImpersonatedAccount(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudReadImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudReadRolesetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudReadRoleset().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadRoleset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudReadRoleset(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudReadRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudReadStaticAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudReadStaticAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadStaticAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudReadStaticAccount(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudReadStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudRotateRolesetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudRotateRoleset().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRoleset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudRotateRoleset(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudRotateRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudRotateRolesetKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudRotateRolesetKey().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRolesetKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudRotateRolesetKey(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudRotateRolesetKeyRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudRotateRootCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRootCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/config/rotate-root`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudRotateRootCredentials(gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudRotateRootCredentialsRaw({ gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudRotateStaticAccountKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudRotateStaticAccountKey().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateStaticAccountKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudRotateStaticAccountKey(name, gcpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudRotateStaticAccountKeyRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudWriteImpersonatedAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudWriteImpersonatedAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteImpersonatedAccount().');
            }
            if (requestParameters['googleCloudWriteImpersonatedAccountRequest'] == null) {
                throw new runtime.RequiredError('googleCloudWriteImpersonatedAccountRequest', 'Required parameter "googleCloudWriteImpersonatedAccountRequest" was null or undefined when calling googleCloudWriteImpersonatedAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudWriteImpersonatedAccountRequestToJSON)(requestParameters['googleCloudWriteImpersonatedAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudWriteImpersonatedAccount(name, gcpMountPath, googleCloudWriteImpersonatedAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudWriteImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteImpersonatedAccountRequest: googleCloudWriteImpersonatedAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudWriteRolesetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudWriteRoleset().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteRoleset().');
            }
            if (requestParameters['googleCloudWriteRolesetRequest'] == null) {
                throw new runtime.RequiredError('googleCloudWriteRolesetRequest', 'Required parameter "googleCloudWriteRolesetRequest" was null or undefined when calling googleCloudWriteRoleset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudWriteRolesetRequestToJSON)(requestParameters['googleCloudWriteRolesetRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudWriteRoleset(name, gcpMountPath, googleCloudWriteRolesetRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudWriteRolesetRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteRolesetRequest: googleCloudWriteRolesetRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    googleCloudWriteStaticAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling googleCloudWriteStaticAccount().');
            }
            if (requestParameters['gcpMountPath'] == null) {
                throw new runtime.RequiredError('gcpMountPath', 'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteStaticAccount().');
            }
            if (requestParameters['googleCloudWriteStaticAccountRequest'] == null) {
                throw new runtime.RequiredError('googleCloudWriteStaticAccountRequest', 'Required parameter "googleCloudWriteStaticAccountRequest" was null or undefined when calling googleCloudWriteStaticAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GoogleCloudWriteStaticAccountRequestToJSON)(requestParameters['googleCloudWriteStaticAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    googleCloudWriteStaticAccount(name, gcpMountPath, googleCloudWriteStaticAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.googleCloudWriteStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteStaticAccountRequest: googleCloudWriteStaticAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesCheckConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesCheckConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/check`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesCheckConfiguration(kubernetesMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesCheckConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesConfigure().');
            }
            if (requestParameters['kubernetesConfigureRequest'] == null) {
                throw new runtime.RequiredError('kubernetesConfigureRequest', 'Required parameter "kubernetesConfigureRequest" was null or undefined when calling kubernetesConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KubernetesConfigureRequestToJSON)(requestParameters['kubernetesConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesConfigure(kubernetesMountPath, kubernetesConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesConfigureRaw({ kubernetesMountPath: kubernetesMountPath, kubernetesConfigureRequest: kubernetesConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesDeleteConfiguration(kubernetesMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesDeleteConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling kubernetesDeleteRole().');
            }
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesDeleteRole(name, kubernetesMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesDeleteRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling kubernetesGenerateCredentials().');
            }
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesGenerateCredentials().');
            }
            if (requestParameters['kubernetesGenerateCredentialsRequest'] == null) {
                throw new runtime.RequiredError('kubernetesGenerateCredentialsRequest', 'Required parameter "kubernetesGenerateCredentialsRequest" was null or undefined when calling kubernetesGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KubernetesGenerateCredentialsRequestToJSON)(requestParameters['kubernetesGenerateCredentialsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesGenerateCredentials(name, kubernetesMountPath, kubernetesGenerateCredentialsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesGenerateCredentialsRaw({ name: name, kubernetesMountPath: kubernetesMountPath, kubernetesGenerateCredentialsRequest: kubernetesGenerateCredentialsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling kubernetesListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/roles/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kubernetesListRoles(kubernetesMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesListRolesRaw({ kubernetesMountPath: kubernetesMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesReadConfiguration(kubernetesMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesReadConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling kubernetesReadRole().');
            }
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesReadRole(name, kubernetesMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesReadRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kubernetesWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling kubernetesWriteRole().');
            }
            if (requestParameters['kubernetesMountPath'] == null) {
                throw new runtime.RequiredError('kubernetesMountPath', 'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesWriteRole().');
            }
            if (requestParameters['kubernetesWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('kubernetesWriteRoleRequest', 'Required parameter "kubernetesWriteRoleRequest" was null or undefined when calling kubernetesWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KubernetesWriteRoleRequestToJSON)(requestParameters['kubernetesWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kubernetesWriteRole(name, kubernetesMountPath, kubernetesWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kubernetesWriteRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath, kubernetesWriteRoleRequest: kubernetesWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV1DeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV1Delete().');
            }
            if (requestParameters['kvV1MountPath'] == null) {
                throw new runtime.RequiredError('kvV1MountPath', 'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Delete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV1Delete(path, kvV1MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV1DeleteRaw({ path: path, kvV1MountPath: kvV1MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV1ListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV1List().');
            }
            if (requestParameters['kvV1MountPath'] == null) {
                throw new runtime.RequiredError('kvV1MountPath', 'Required parameter "kvV1MountPath" was null or undefined when calling kvV1List().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling kvV1List().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v1_mount_path}/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV1List(path, kvV1MountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV1ListRaw({ path: path, kvV1MountPath: kvV1MountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV1ReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV1Read().');
            }
            if (requestParameters['kvV1MountPath'] == null) {
                throw new runtime.RequiredError('kvV1MountPath', 'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Read().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV1Read(path, kvV1MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV1ReadRaw({ path: path, kvV1MountPath: kvV1MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV1WriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV1Write().');
            }
            if (requestParameters['kvV1MountPath'] == null) {
                throw new runtime.RequiredError('kvV1MountPath', 'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Write().');
            }
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling kvV1Write().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV1Write(path, kvV1MountPath, requestBody, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV1WriteRaw({ path: path, kvV1MountPath: kvV1MountPath, requestBody: requestBody }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    kvV2ConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Configure().');
            }
            if (requestParameters['kvV2ConfigureRequest'] == null) {
                throw new runtime.RequiredError('kvV2ConfigureRequest', 'Required parameter "kvV2ConfigureRequest" was null or undefined when calling kvV2Configure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2ConfigureRequestToJSON)(requestParameters['kvV2ConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    kvV2Configure(kvV2MountPath, kvV2ConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ConfigureRaw({ kvV2MountPath: kvV2MountPath, kvV2ConfigureRequest: kvV2ConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2DeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2Delete().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Delete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2Delete(path, kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2DeleteRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2DeleteMetadataAndAllVersionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2DeleteMetadataAndAllVersions(path, kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2DeleteMetadataAndAllVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2DeleteVersionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2DeleteVersions().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteVersions().');
            }
            if (requestParameters['kvV2DeleteVersionsRequest'] == null) {
                throw new runtime.RequiredError('kvV2DeleteVersionsRequest', 'Required parameter "kvV2DeleteVersionsRequest" was null or undefined when calling kvV2DeleteVersions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/delete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2DeleteVersionsRequestToJSON)(requestParameters['kvV2DeleteVersionsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2DeleteVersions(path, kvV2MountPath, kvV2DeleteVersionsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2DeleteVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2DeleteVersionsRequest: kvV2DeleteVersionsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2DestroyVersionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2DestroyVersions().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DestroyVersions().');
            }
            if (requestParameters['kvV2DestroyVersionsRequest'] == null) {
                throw new runtime.RequiredError('kvV2DestroyVersionsRequest', 'Required parameter "kvV2DestroyVersionsRequest" was null or undefined when calling kvV2DestroyVersions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/destroy/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2DestroyVersionsRequestToJSON)(requestParameters['kvV2DestroyVersionsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2DestroyVersions(path, kvV2MountPath, kvV2DestroyVersionsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2DestroyVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2DestroyVersionsRequest: kvV2DestroyVersionsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2ListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2List().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2List().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling kvV2List().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/metadata/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV2List(path, kvV2MountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ListRaw({ path: path, kvV2MountPath: kvV2MountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2ReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2Read().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Read().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KvV2ReadResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV2Read(path, kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ReadRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read the backend level settings.
     */
    kvV2ReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KvV2ReadConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Read the backend level settings.
     */
    kvV2ReadConfiguration(kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ReadConfigurationRaw({ kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2ReadMetadataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2ReadMetadata().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadMetadata().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KvV2ReadMetadataResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV2ReadMetadata(path, kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ReadMetadataRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2ReadSubkeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2ReadSubkeys().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadSubkeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/subkeys/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KvV2ReadSubkeysResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV2ReadSubkeys(path, kvV2MountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2ReadSubkeysRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2UndeleteVersionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2UndeleteVersions().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2UndeleteVersions().');
            }
            if (requestParameters['kvV2UndeleteVersionsRequest'] == null) {
                throw new runtime.RequiredError('kvV2UndeleteVersionsRequest', 'Required parameter "kvV2UndeleteVersionsRequest" was null or undefined when calling kvV2UndeleteVersions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/undelete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2UndeleteVersionsRequestToJSON)(requestParameters['kvV2UndeleteVersionsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2UndeleteVersions(path, kvV2MountPath, kvV2UndeleteVersionsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2UndeleteVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2UndeleteVersionsRequest: kvV2UndeleteVersionsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2WriteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2Write().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Write().');
            }
            if (requestParameters['kvV2WriteRequest'] == null) {
                throw new runtime.RequiredError('kvV2WriteRequest', 'Required parameter "kvV2WriteRequest" was null or undefined when calling kvV2Write().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2WriteRequestToJSON)(requestParameters['kvV2WriteRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KvV2WriteResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    kvV2Write(path, kvV2MountPath, kvV2WriteRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2WriteRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2WriteRequest: kvV2WriteRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    kvV2WriteMetadataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling kvV2WriteMetadata().');
            }
            if (requestParameters['kvV2MountPath'] == null) {
                throw new runtime.RequiredError('kvV2MountPath', 'Required parameter "kvV2MountPath" was null or undefined when calling kvV2WriteMetadata().');
            }
            if (requestParameters['kvV2WriteMetadataRequest'] == null) {
                throw new runtime.RequiredError('kvV2WriteMetadataRequest', 'Required parameter "kvV2WriteMetadataRequest" was null or undefined when calling kvV2WriteMetadata().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.KvV2WriteMetadataRequestToJSON)(requestParameters['kvV2WriteMetadataRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    kvV2WriteMetadata(path, kvV2MountPath, kvV2WriteMetadataRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.kvV2WriteMetadataRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2WriteMetadataRequest: kvV2WriteMetadataRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapConfigure().');
            }
            if (requestParameters['ldapConfigureRequest'] == null) {
                throw new runtime.RequiredError('ldapConfigureRequest', 'Required parameter "ldapConfigureRequest" was null or undefined when calling ldapConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapConfigureRequestToJSON)(requestParameters['ldapConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapConfigure(ldapMountPath, ldapConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapConfigureRaw({ ldapMountPath: ldapMountPath, ldapConfigureRequest: ldapConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapDeleteConfiguration(ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapDeleteConfigurationRaw({ ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapDeleteDynamicRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapDeleteDynamicRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteDynamicRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapDeleteDynamicRole(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapDeleteDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapDeleteStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapDeleteStaticRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapDeleteStaticRole(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapDeleteStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check service accounts in to the library.
     */
    ldapLibraryCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryCheckIn().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckIn().');
            }
            if (requestParameters['ldapLibraryCheckInRequest'] == null) {
                throw new runtime.RequiredError('ldapLibraryCheckInRequest', 'Required parameter "ldapLibraryCheckInRequest" was null or undefined when calling ldapLibraryCheckIn().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapLibraryCheckInRequestToJSON)(requestParameters['ldapLibraryCheckInRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check service accounts in to the library.
     */
    ldapLibraryCheckIn(name, ldapMountPath, ldapLibraryCheckInRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryCheckInRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryCheckInRequest: ldapLibraryCheckInRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check a service account out from the library.
     */
    ldapLibraryCheckOutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryCheckOut().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckOut().');
            }
            if (requestParameters['ldapLibraryCheckOutRequest'] == null) {
                throw new runtime.RequiredError('ldapLibraryCheckOutRequest', 'Required parameter "ldapLibraryCheckOutRequest" was null or undefined when calling ldapLibraryCheckOut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}/check-out`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapLibraryCheckOutRequestToJSON)(requestParameters['ldapLibraryCheckOutRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check a service account out from the library.
     */
    ldapLibraryCheckOut(name, ldapMountPath, ldapLibraryCheckOutRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryCheckOutRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryCheckOutRequest: ldapLibraryCheckOutRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check the status of the service accounts in a library set.
     */
    ldapLibraryCheckStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryCheckStatus().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckStatus().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check the status of the service accounts in a library set.
     */
    ldapLibraryCheckStatus(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryCheckStatusRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a library set.
     */
    ldapLibraryConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryConfigure().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryConfigure().');
            }
            if (requestParameters['ldapLibraryConfigureRequest'] == null) {
                throw new runtime.RequiredError('ldapLibraryConfigureRequest', 'Required parameter "ldapLibraryConfigureRequest" was null or undefined when calling ldapLibraryConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapLibraryConfigureRequestToJSON)(requestParameters['ldapLibraryConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update a library set.
     */
    ldapLibraryConfigure(name, ldapMountPath, ldapLibraryConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryConfigureRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryConfigureRequest: ldapLibraryConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a library set.
     */
    ldapLibraryDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryDelete().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a library set.
     */
    ldapLibraryDelete(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryDeleteRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check service accounts in to the library.
     */
    ldapLibraryForceCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryForceCheckIn().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryForceCheckIn().');
            }
            if (requestParameters['ldapLibraryForceCheckInRequest'] == null) {
                throw new runtime.RequiredError('ldapLibraryForceCheckInRequest', 'Required parameter "ldapLibraryForceCheckInRequest" was null or undefined when calling ldapLibraryForceCheckIn().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/manage/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapLibraryForceCheckInRequestToJSON)(requestParameters['ldapLibraryForceCheckInRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check service accounts in to the library.
     */
    ldapLibraryForceCheckIn(name, ldapMountPath, ldapLibraryForceCheckInRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryForceCheckInRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryForceCheckInRequest: ldapLibraryForceCheckInRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapLibraryListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryList().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapLibraryList().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapLibraryList(ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryListRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapLibraryListLibraryPathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapLibraryListLibraryPath(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryListLibraryPathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapLibraryListLibraryPath_1Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath_1().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath_1().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath_1().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapLibraryListLibraryPath_1(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryListLibraryPath_1Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read a library set.
     */
    ldapLibraryReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapLibraryRead().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Read a library set.
     */
    ldapLibraryRead(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapLibraryReadRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListDynamicRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListDynamicRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListDynamicRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListDynamicRoles(ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListDynamicRolesRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListRolePathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapListRolePath().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListRolePath().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListRolePath(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListRolePathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListRolePath_2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapListRolePath_2().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath_2().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListRolePath_2().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListRolePath_2(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListRolePath_2Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListStaticRolePathRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapListStaticRolePath().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListStaticRolePath().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListStaticRolePath(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListStaticRolePathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListStaticRolePath_3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['path'] == null) {
                throw new runtime.RequiredError('path', 'Required parameter "path" was null or undefined when calling ldapListStaticRolePath_3().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath_3().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListStaticRolePath_3().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListStaticRolePath_3(path, ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListStaticRolePath_3Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapListStaticRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling ldapListStaticRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ldapListStaticRoles(ldapMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapListStaticRolesRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapReadConfiguration(ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapReadConfigurationRaw({ ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapReadDynamicRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapReadDynamicRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapReadDynamicRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapReadDynamicRole(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapReadDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapReadStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapReadStaticRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapReadStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapReadStaticRole(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapReadStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapRequestDynamicRoleCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapRequestDynamicRoleCredentials().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestDynamicRoleCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapRequestDynamicRoleCredentials(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapRequestDynamicRoleCredentialsRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapRequestStaticRoleCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapRequestStaticRoleCredentials().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestStaticRoleCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-cred/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapRequestStaticRoleCredentials(name, ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapRequestStaticRoleCredentialsRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapRotateRootCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateRootCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ldap_mount_path}/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapRotateRootCredentials(ldapMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapRotateRootCredentialsRaw({ ldapMountPath: ldapMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapRotateStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapRotateStaticRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateStaticRole().');
            }
            if (requestParameters['ldapRotateStaticRoleRequest'] == null) {
                throw new runtime.RequiredError('ldapRotateStaticRoleRequest', 'Required parameter "ldapRotateStaticRoleRequest" was null or undefined when calling ldapRotateStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapRotateStaticRoleRequestToJSON)(requestParameters['ldapRotateStaticRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapRotateStaticRole(name, ldapMountPath, ldapRotateStaticRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapRotateStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapRotateStaticRoleRequest: ldapRotateStaticRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapWriteDynamicRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapWriteDynamicRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteDynamicRole().');
            }
            if (requestParameters['ldapWriteDynamicRoleRequest'] == null) {
                throw new runtime.RequiredError('ldapWriteDynamicRoleRequest', 'Required parameter "ldapWriteDynamicRoleRequest" was null or undefined when calling ldapWriteDynamicRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapWriteDynamicRoleRequestToJSON)(requestParameters['ldapWriteDynamicRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapWriteDynamicRole(name, ldapMountPath, ldapWriteDynamicRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapWriteDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteDynamicRoleRequest: ldapWriteDynamicRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ldapWriteStaticRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling ldapWriteStaticRole().');
            }
            if (requestParameters['ldapMountPath'] == null) {
                throw new runtime.RequiredError('ldapMountPath', 'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteStaticRole().');
            }
            if (requestParameters['ldapWriteStaticRoleRequest'] == null) {
                throw new runtime.RequiredError('ldapWriteStaticRoleRequest', 'Required parameter "ldapWriteStaticRoleRequest" was null or undefined when calling ldapWriteStaticRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LdapWriteStaticRoleRequestToJSON)(requestParameters['ldapWriteStaticRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ldapWriteStaticRole(name, ldapMountPath, ldapWriteStaticRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ldapWriteStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteStaticRoleRequest: ldapWriteStaticRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mongoDbAtlasConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasConfigure().');
            }
            if (requestParameters['mongoDbAtlasConfigureRequest'] == null) {
                throw new runtime.RequiredError('mongoDbAtlasConfigureRequest', 'Required parameter "mongoDbAtlasConfigureRequest" was null or undefined when calling mongoDbAtlasConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MongoDbAtlasConfigureRequestToJSON)(requestParameters['mongoDbAtlasConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mongoDbAtlasConfigure(mongodbatlasMountPath, mongoDbAtlasConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasConfigureRaw({ mongodbatlasMountPath: mongodbatlasMountPath, mongoDbAtlasConfigureRequest: mongoDbAtlasConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mongoDbAtlasDeleteRole().');
            }
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasDeleteRole(name, mongodbatlasMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasDeleteRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mongoDbAtlasGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials().');
            }
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mongoDbAtlasGenerateCredentials(name, mongodbatlasMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasGenerateCredentialsRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mongoDbAtlasGenerateCredentials2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials2().');
            }
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mongoDbAtlasGenerateCredentials2(name, mongodbatlasMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasGenerateCredentials2Raw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the existing roles in this backend
     */
    mongoDbAtlasListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling mongoDbAtlasListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/roles/`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * List the existing roles in this backend
     */
    mongoDbAtlasListRoles(mongodbatlasMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasListRolesRaw({ mongodbatlasMountPath: mongodbatlasMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    mongoDbAtlasReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    mongoDbAtlasReadConfiguration(mongodbatlasMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasReadConfigurationRaw({ mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mongoDbAtlasReadRole().');
            }
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasReadRole(name, mongodbatlasMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasReadRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling mongoDbAtlasWriteRole().');
            }
            if (requestParameters['mongodbatlasMountPath'] == null) {
                throw new runtime.RequiredError('mongodbatlasMountPath', 'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasWriteRole().');
            }
            if (requestParameters['mongoDbAtlasWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('mongoDbAtlasWriteRoleRequest', 'Required parameter "mongoDbAtlasWriteRoleRequest" was null or undefined when calling mongoDbAtlasWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MongoDbAtlasWriteRoleRequestToJSON)(requestParameters['mongoDbAtlasWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    mongoDbAtlasWriteRole(name, mongodbatlasMountPath, mongoDbAtlasWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mongoDbAtlasWriteRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath, mongoDbAtlasWriteRoleRequest: mongoDbAtlasWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadConfigureAccessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureAccess().');
            }
            if (requestParameters['nomadConfigureAccessRequest'] == null) {
                throw new runtime.RequiredError('nomadConfigureAccessRequest', 'Required parameter "nomadConfigureAccessRequest" was null or undefined when calling nomadConfigureAccess().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NomadConfigureAccessRequestToJSON)(requestParameters['nomadConfigureAccessRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadConfigureAccess(nomadMountPath, nomadConfigureAccessRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadConfigureAccessRaw({ nomadMountPath: nomadMountPath, nomadConfigureAccessRequest: nomadConfigureAccessRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadConfigureLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureLease().');
            }
            if (requestParameters['nomadConfigureLeaseRequest'] == null) {
                throw new runtime.RequiredError('nomadConfigureLeaseRequest', 'Required parameter "nomadConfigureLeaseRequest" was null or undefined when calling nomadConfigureLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NomadConfigureLeaseRequestToJSON)(requestParameters['nomadConfigureLeaseRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadConfigureLease(nomadMountPath, nomadConfigureLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadConfigureLeaseRaw({ nomadMountPath: nomadMountPath, nomadConfigureLeaseRequest: nomadConfigureLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadDeleteAccessConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteAccessConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadDeleteAccessConfiguration(nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadDeleteAccessConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadDeleteLeaseConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteLeaseConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadDeleteLeaseConfiguration(nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadDeleteLeaseConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling nomadDeleteRole().');
            }
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadDeleteRole(name, nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadDeleteRoleRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling nomadGenerateCredentials().');
            }
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadGenerateCredentials(name, nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadGenerateCredentialsRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling nomadListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/role/`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    nomadListRoles(nomadMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadListRolesRaw({ nomadMountPath: nomadMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadReadAccessConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadReadAccessConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadReadAccessConfiguration(nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadReadAccessConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadReadLeaseConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadReadLeaseConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadReadLeaseConfiguration(nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadReadLeaseConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling nomadReadRole().');
            }
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadReadRole(name, nomadMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadReadRoleRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    nomadWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling nomadWriteRole().');
            }
            if (requestParameters['nomadMountPath'] == null) {
                throw new runtime.RequiredError('nomadMountPath', 'Required parameter "nomadMountPath" was null or undefined when calling nomadWriteRole().');
            }
            if (requestParameters['nomadWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('nomadWriteRoleRequest', 'Required parameter "nomadWriteRoleRequest" was null or undefined when calling nomadWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NomadWriteRoleRequestToJSON)(requestParameters['nomadWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    nomadWriteRole(name, nomadMountPath, nomadWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.nomadWriteRoleRaw({ name: name, nomadMountPath: nomadMountPath, nomadWriteRoleRequest: nomadWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureAcmeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAcme().');
            }
            if (requestParameters['pkiConfigureAcmeRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureAcmeRequest', 'Required parameter "pkiConfigureAcmeRequest" was null or undefined when calling pkiConfigureAcme().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureAcmeRequestToJSON)(requestParameters['pkiConfigureAcmeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiConfigureAcme(pkiMountPath, pkiConfigureAcmeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureAcmeRaw({ pkiMountPath: pkiMountPath, pkiConfigureAcmeRequest: pkiConfigureAcmeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureAutoTidyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAutoTidy().');
            }
            if (requestParameters['pkiConfigureAutoTidyRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureAutoTidyRequest', 'Required parameter "pkiConfigureAutoTidyRequest" was null or undefined when calling pkiConfigureAutoTidy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureAutoTidyRequestToJSON)(requestParameters['pkiConfigureAutoTidyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureAutoTidyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureAutoTidy(pkiMountPath, pkiConfigureAutoTidyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureAutoTidyRaw({ pkiMountPath: pkiMountPath, pkiConfigureAutoTidyRequest: pkiConfigureAutoTidyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureCaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCa().');
            }
            if (requestParameters['pkiConfigureCaRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureCaRequest', 'Required parameter "pkiConfigureCaRequest" was null or undefined when calling pkiConfigureCa().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureCaRequestToJSON)(requestParameters['pkiConfigureCaRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureCaResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureCa(pkiMountPath, pkiConfigureCaRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureCaRaw({ pkiMountPath: pkiMountPath, pkiConfigureCaRequest: pkiConfigureCaRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureClusterRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCluster().');
            }
            if (requestParameters['pkiConfigureClusterRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureClusterRequest', 'Required parameter "pkiConfigureClusterRequest" was null or undefined when calling pkiConfigureCluster().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureClusterRequestToJSON)(requestParameters['pkiConfigureClusterRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureClusterResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureCluster(pkiMountPath, pkiConfigureClusterRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureClusterRaw({ pkiMountPath: pkiMountPath, pkiConfigureClusterRequest: pkiConfigureClusterRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureCmpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCmp().');
            }
            if (requestParameters['pkiConfigureCmpRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureCmpRequest', 'Required parameter "pkiConfigureCmpRequest" was null or undefined when calling pkiConfigureCmp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureCmpRequestToJSON)(requestParameters['pkiConfigureCmpRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiConfigureCmp(pkiMountPath, pkiConfigureCmpRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureCmpRaw({ pkiMountPath: pkiMountPath, pkiConfigureCmpRequest: pkiConfigureCmpRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCrl().');
            }
            if (requestParameters['pkiConfigureCrlRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureCrlRequest', 'Required parameter "pkiConfigureCrlRequest" was null or undefined when calling pkiConfigureCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureCrlRequestToJSON)(requestParameters['pkiConfigureCrlRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureCrl(pkiMountPath, pkiConfigureCrlRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureCrlRaw({ pkiMountPath: pkiMountPath, pkiConfigureCrlRequest: pkiConfigureCrlRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureEstRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureEst().');
            }
            if (requestParameters['pkiConfigureEstRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureEstRequest', 'Required parameter "pkiConfigureEstRequest" was null or undefined when calling pkiConfigureEst().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureEstRequestToJSON)(requestParameters['pkiConfigureEstRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiConfigureEst(pkiMountPath, pkiConfigureEstRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureEstRaw({ pkiMountPath: pkiMountPath, pkiConfigureEstRequest: pkiConfigureEstRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureExternalPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureExternalPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureExternalPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureExternalPolicy(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureExternalPolicyRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureExternalPolicy_4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureExternalPolicy_4().');
            }
            if (requestParameters['pkiConfigureExternalPolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureExternalPolicyRequest', 'Required parameter "pkiConfigureExternalPolicyRequest" was null or undefined when calling pkiConfigureExternalPolicy_4().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureExternalPolicyRequestToJSON)(requestParameters['pkiConfigureExternalPolicyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiConfigureExternalPolicy_4(pkiMountPath, pkiConfigureExternalPolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureExternalPolicy_4Raw({ pkiMountPath: pkiMountPath, pkiConfigureExternalPolicyRequest: pkiConfigureExternalPolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureIssuersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureIssuers().');
            }
            if (requestParameters['pkiConfigureIssuersRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureIssuersRequest', 'Required parameter "pkiConfigureIssuersRequest" was null or undefined when calling pkiConfigureIssuers().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureIssuersRequestToJSON)(requestParameters['pkiConfigureIssuersRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureIssuersResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureIssuers(pkiMountPath, pkiConfigureIssuersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureIssuersRaw({ pkiMountPath: pkiMountPath, pkiConfigureIssuersRequest: pkiConfigureIssuersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureKeys().');
            }
            if (requestParameters['pkiConfigureKeysRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureKeysRequest', 'Required parameter "pkiConfigureKeysRequest" was null or undefined when calling pkiConfigureKeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureKeysRequestToJSON)(requestParameters['pkiConfigureKeysRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureKeysResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureKeys(pkiMountPath, pkiConfigureKeysRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureKeysRaw({ pkiMountPath: pkiMountPath, pkiConfigureKeysRequest: pkiConfigureKeysRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureScepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureScep().');
            }
            if (requestParameters['pkiConfigureScepRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureScepRequest', 'Required parameter "pkiConfigureScepRequest" was null or undefined when calling pkiConfigureScep().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureScepRequestToJSON)(requestParameters['pkiConfigureScepRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiConfigureScep(pkiMountPath, pkiConfigureScepRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureScepRaw({ pkiMountPath: pkiMountPath, pkiConfigureScepRequest: pkiConfigureScepRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiConfigureUrlsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureUrls().');
            }
            if (requestParameters['pkiConfigureUrlsRequest'] == null) {
                throw new runtime.RequiredError('pkiConfigureUrlsRequest', 'Required parameter "pkiConfigureUrlsRequest" was null or undefined when calling pkiConfigureUrls().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiConfigureUrlsRequestToJSON)(requestParameters['pkiConfigureUrlsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiConfigureUrlsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiConfigureUrls(pkiMountPath, pkiConfigureUrlsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiConfigureUrlsRaw({ pkiMountPath: pkiMountPath, pkiConfigureUrlsRequest: pkiConfigureUrlsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiCrossSignIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiCrossSignIntermediate().');
            }
            if (requestParameters['pkiCrossSignIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiCrossSignIntermediateRequest', 'Required parameter "pkiCrossSignIntermediateRequest" was null or undefined when calling pkiCrossSignIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/intermediate/cross-sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiCrossSignIntermediateRequestToJSON)(requestParameters['pkiCrossSignIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiCrossSignIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiCrossSignIntermediate(pkiMountPath, pkiCrossSignIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiCrossSignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiCrossSignIntermediateRequest: pkiCrossSignIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiDeleteEabKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyId'] == null) {
                throw new runtime.RequiredError('keyId', 'Required parameter "keyId" was null or undefined when calling pkiDeleteEabKey().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteEabKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/eab/{key_id}`.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiDeleteEabKey(keyId, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiDeleteEabKeyRaw({ keyId: keyId, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiDeleteIssuerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiDeleteIssuer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteIssuer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiDeleteIssuer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiDeleteIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiDeleteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyRef'] == null) {
                throw new runtime.RequiredError('keyRef', 'Required parameter "keyRef" was null or undefined when calling pkiDeleteKey().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiDeleteKey(keyRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiDeleteKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pkiDeleteRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiDeleteRole(name, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiDeleteRoleRaw({ name: name, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiDeleteRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/root`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiDeleteRoot(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiDeleteRootRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKey(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyForIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyForIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuerAndRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuerAndRole(issuerRef, role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyForIssuerAndRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuer_5Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyForIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuer_5(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyForIssuer_5Raw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuer_6Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyForIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKeyForIssuer_6(issuerRef, policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyForIssuer_6Raw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKeyForRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/new-eab`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyForRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKeyForRole(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKeyForRoleRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKey_7Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey_7().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKey_7(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKey_7Raw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateEabKey_8Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiGenerateEabKey_8().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey_8().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/new-eab`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateEabKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateEabKey_8(policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateEabKey_8Raw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateExportedKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateExportedKey().');
            }
            if (requestParameters['pkiGenerateExportedKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiGenerateExportedKeyRequest', 'Required parameter "pkiGenerateExportedKeyRequest" was null or undefined when calling pkiGenerateExportedKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/keys/generate/exported`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiGenerateExportedKeyRequestToJSON)(requestParameters['pkiGenerateExportedKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateExportedKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateExportedKey(pkiMountPath, pkiGenerateExportedKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateExportedKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateExportedKeyRequest: pkiGenerateExportedKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['exported'] == null) {
                throw new runtime.RequiredError('exported', 'Required parameter "exported" was null or undefined when calling pkiGenerateIntermediate().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateIntermediate().');
            }
            if (requestParameters['pkiGenerateIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiGenerateIntermediateRequest', 'Required parameter "pkiGenerateIntermediateRequest" was null or undefined when calling pkiGenerateIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/intermediate/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiGenerateIntermediateRequestToJSON)(requestParameters['pkiGenerateIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateIntermediate(exported, pkiMountPath, pkiGenerateIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateIntermediateRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiGenerateIntermediateRequest: pkiGenerateIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateInternalKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateInternalKey().');
            }
            if (requestParameters['pkiGenerateInternalKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiGenerateInternalKeyRequest', 'Required parameter "pkiGenerateInternalKeyRequest" was null or undefined when calling pkiGenerateInternalKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/keys/generate/internal`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiGenerateInternalKeyRequestToJSON)(requestParameters['pkiGenerateInternalKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateInternalKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateInternalKey(pkiMountPath, pkiGenerateInternalKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateInternalKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateInternalKeyRequest: pkiGenerateInternalKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateKmsKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateKmsKey().');
            }
            if (requestParameters['pkiGenerateKmsKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiGenerateKmsKeyRequest', 'Required parameter "pkiGenerateKmsKeyRequest" was null or undefined when calling pkiGenerateKmsKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/keys/generate/kms`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiGenerateKmsKeyRequestToJSON)(requestParameters['pkiGenerateKmsKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateKmsKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateKmsKey(pkiMountPath, pkiGenerateKmsKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateKmsKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateKmsKeyRequest: pkiGenerateKmsKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiGenerateRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['exported'] == null) {
                throw new runtime.RequiredError('exported', 'Required parameter "exported" was null or undefined when calling pkiGenerateRoot().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateRoot().');
            }
            if (requestParameters['pkiGenerateRootRequest'] == null) {
                throw new runtime.RequiredError('pkiGenerateRootRequest', 'Required parameter "pkiGenerateRootRequest" was null or undefined when calling pkiGenerateRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/root/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiGenerateRootRequestToJSON)(requestParameters['pkiGenerateRootRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiGenerateRootResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiGenerateRoot(exported, pkiMountPath, pkiGenerateRootRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiGenerateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiGenerateRootRequest: pkiGenerateRootRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiImportKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiImportKey().');
            }
            if (requestParameters['pkiImportKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiImportKeyRequest', 'Required parameter "pkiImportKeyRequest" was null or undefined when calling pkiImportKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/keys/import`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiImportKeyRequestToJSON)(requestParameters['pkiImportKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiImportKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiImportKey(pkiMountPath, pkiImportKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiImportKeyRaw({ pkiMountPath: pkiMountPath, pkiImportKeyRequest: pkiImportKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssueWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiIssueWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssueWithRole().');
            }
            if (requestParameters['pkiIssueWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiIssueWithRoleRequest', 'Required parameter "pkiIssueWithRoleRequest" was null or undefined when calling pkiIssueWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssueWithRoleRequestToJSON)(requestParameters['pkiIssueWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssueWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssueWithRole(role, pkiMountPath, pkiIssueWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssueWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiIssueWithRoleRequest: pkiIssueWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerIssueWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerIssueWithRole().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiIssuerIssueWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerIssueWithRole().');
            }
            if (requestParameters['pkiIssuerIssueWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerIssueWithRoleRequest', 'Required parameter "pkiIssuerIssueWithRoleRequest" was null or undefined when calling pkiIssuerIssueWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/issue/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerIssueWithRoleRequestToJSON)(requestParameters['pkiIssuerIssueWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerIssueWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerIssueWithRole(issuerRef, role, pkiMountPath, pkiIssuerIssueWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerIssueWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerIssueWithRoleRequest: pkiIssuerIssueWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrl().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrl(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlDeltaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDelta().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDelta().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlDeltaResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrlDelta(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlDeltaRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlDeltaDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlDeltaDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrlDeltaDer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlDeltaDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlDeltaPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlDeltaPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrlDeltaPem(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlDeltaPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrlDer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadCrlPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadCrlPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadCrlPem(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadCrlPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrl().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrl(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDeltaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlDeltaResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDelta(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlDeltaRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDeltaDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlDeltaDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDeltaDer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlDeltaDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDeltaPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlDeltaPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDeltaPem(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlDeltaPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlDer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerReadUnifiedCrlPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerReadUnifiedCrlPem(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerReadUnifiedCrlPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerResignCrlsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerResignCrls().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerResignCrls().');
            }
            if (requestParameters['pkiIssuerResignCrlsRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerResignCrlsRequest', 'Required parameter "pkiIssuerResignCrlsRequest" was null or undefined when calling pkiIssuerResignCrls().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/resign-crls`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerResignCrlsRequestToJSON)(requestParameters['pkiIssuerResignCrlsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerResignCrlsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerResignCrls(issuerRef, pkiMountPath, pkiIssuerResignCrlsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerResignCrlsRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerResignCrlsRequest: pkiIssuerResignCrlsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignIntermediate().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignIntermediate().');
            }
            if (requestParameters['pkiIssuerSignIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignIntermediateRequest', 'Required parameter "pkiIssuerSignIntermediateRequest" was null or undefined when calling pkiIssuerSignIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignIntermediateRequestToJSON)(requestParameters['pkiIssuerSignIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignIntermediate(issuerRef, pkiMountPath, pkiIssuerSignIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignIntermediateRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignIntermediateRequest: pkiIssuerSignIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignRevocationListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignRevocationList().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignRevocationList().');
            }
            if (requestParameters['pkiIssuerSignRevocationListRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignRevocationListRequest', 'Required parameter "pkiIssuerSignRevocationListRequest" was null or undefined when calling pkiIssuerSignRevocationList().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-revocation-list`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignRevocationListRequestToJSON)(requestParameters['pkiIssuerSignRevocationListRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignRevocationListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignRevocationList(issuerRef, pkiMountPath, pkiIssuerSignRevocationListRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignRevocationListRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignRevocationListRequest: pkiIssuerSignRevocationListRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignSelfIssuedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignSelfIssued().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignSelfIssued().');
            }
            if (requestParameters['pkiIssuerSignSelfIssuedRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignSelfIssuedRequest', 'Required parameter "pkiIssuerSignSelfIssuedRequest" was null or undefined when calling pkiIssuerSignSelfIssued().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-self-issued`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignSelfIssuedRequestToJSON)(requestParameters['pkiIssuerSignSelfIssuedRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignSelfIssuedResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignSelfIssued(issuerRef, pkiMountPath, pkiIssuerSignSelfIssuedRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignSelfIssuedRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignSelfIssuedRequest: pkiIssuerSignSelfIssuedRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignVerbatimRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatim().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatim().');
            }
            if (requestParameters['pkiIssuerSignVerbatimRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignVerbatimRequest', 'Required parameter "pkiIssuerSignVerbatimRequest" was null or undefined when calling pkiIssuerSignVerbatim().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignVerbatimRequestToJSON)(requestParameters['pkiIssuerSignVerbatimRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignVerbatimResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignVerbatim(issuerRef, pkiMountPath, pkiIssuerSignVerbatimRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignVerbatimRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignVerbatimRequest: pkiIssuerSignVerbatimRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignVerbatimWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatimWithRole().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiIssuerSignVerbatimWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatimWithRole().');
            }
            if (requestParameters['pkiIssuerSignVerbatimWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignVerbatimWithRoleRequest', 'Required parameter "pkiIssuerSignVerbatimWithRoleRequest" was null or undefined when calling pkiIssuerSignVerbatimWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignVerbatimWithRoleRequestToJSON)(requestParameters['pkiIssuerSignVerbatimWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignVerbatimWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignVerbatimWithRole(issuerRef, role, pkiMountPath, pkiIssuerSignVerbatimWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignVerbatimWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerSignVerbatimWithRoleRequest: pkiIssuerSignVerbatimWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuerSignWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignWithRole().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiIssuerSignWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignWithRole().');
            }
            if (requestParameters['pkiIssuerSignWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuerSignWithRoleRequest', 'Required parameter "pkiIssuerSignWithRoleRequest" was null or undefined when calling pkiIssuerSignWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/sign/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuerSignWithRoleRequestToJSON)(requestParameters['pkiIssuerSignWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuerSignWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuerSignWithRole(issuerRef, role, pkiMountPath, pkiIssuerSignWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuerSignWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerSignWithRoleRequest: pkiIssuerSignWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuersGenerateIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['exported'] == null) {
                throw new runtime.RequiredError('exported', 'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateIntermediate().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateIntermediate().');
            }
            if (requestParameters['pkiIssuersGenerateIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuersGenerateIntermediateRequest', 'Required parameter "pkiIssuersGenerateIntermediateRequest" was null or undefined when calling pkiIssuersGenerateIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuers/generate/intermediate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuersGenerateIntermediateRequestToJSON)(requestParameters['pkiIssuersGenerateIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuersGenerateIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuersGenerateIntermediate(exported, pkiMountPath, pkiIssuersGenerateIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuersGenerateIntermediateRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiIssuersGenerateIntermediateRequest: pkiIssuersGenerateIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuersGenerateRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['exported'] == null) {
                throw new runtime.RequiredError('exported', 'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateRoot().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateRoot().');
            }
            if (requestParameters['pkiIssuersGenerateRootRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuersGenerateRootRequest', 'Required parameter "pkiIssuersGenerateRootRequest" was null or undefined when calling pkiIssuersGenerateRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuers/generate/root/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuersGenerateRootRequestToJSON)(requestParameters['pkiIssuersGenerateRootRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuersGenerateRootResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuersGenerateRoot(exported, pkiMountPath, pkiIssuersGenerateRootRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuersGenerateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiIssuersGenerateRootRequest: pkiIssuersGenerateRootRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuersImportBundleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportBundle().');
            }
            if (requestParameters['pkiIssuersImportBundleRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuersImportBundleRequest', 'Required parameter "pkiIssuersImportBundleRequest" was null or undefined when calling pkiIssuersImportBundle().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuers/import/bundle`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuersImportBundleRequestToJSON)(requestParameters['pkiIssuersImportBundleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuersImportBundleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuersImportBundle(pkiMountPath, pkiIssuersImportBundleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuersImportBundleRaw({ pkiMountPath: pkiMountPath, pkiIssuersImportBundleRequest: pkiIssuersImportBundleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiIssuersImportCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportCert().');
            }
            if (requestParameters['pkiIssuersImportCertRequest'] == null) {
                throw new runtime.RequiredError('pkiIssuersImportCertRequest', 'Required parameter "pkiIssuersImportCertRequest" was null or undefined when calling pkiIssuersImportCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuers/import/cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiIssuersImportCertRequestToJSON)(requestParameters['pkiIssuersImportCertRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiIssuersImportCertResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiIssuersImportCert(pkiMountPath, pkiIssuersImportCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiIssuersImportCertRaw({ pkiMountPath: pkiMountPath, pkiIssuersImportCertRequest: pkiIssuersImportCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListAcmeAccountKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListAcmeAccountKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListAcmeAccountKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/mgmt/account/keyid/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListAcmeAccountKeys(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListAcmeAccountKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListCertMetadataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListCertMetadata().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListCertMetadata().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert-metadata/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListCertMetadata(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListCertMetadataRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListCertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListCerts().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListCerts().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/certs/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListCerts(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListCertsRevocationQueueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListCertsRevocationQueue().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListCertsRevocationQueue().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/certs/revocation-queue/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListCertsRevocationQueue(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListCertsRevocationQueueRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListEabKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListEabKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListEabKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/eab/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiListEabKeysResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListEabKeys(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListEabKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListIssuersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListIssuers().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListIssuers().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuers/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiListIssuersResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListIssuers(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListIssuersRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/keys/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiListKeysResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListKeys(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListRevokedCertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListRevokedCerts().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListRevokedCerts().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/certs/revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListRevokedCerts(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListRevokedCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListRoles(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListRolesRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiListUnifiedRevokedCertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiListUnifiedRevokedCerts().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling pkiListUnifiedRevokedCerts().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/certs/unified-revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiListUnifiedRevokedCertsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiListUnifiedRevokedCerts(pkiMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiListUnifiedRevokedCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiQueryOcspRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcsp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiQueryOcsp(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiQueryOcspRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiQueryOcspWithGetReqRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['req'] == null) {
                throw new runtime.RequiredError('req', 'Required parameter "req" was null or undefined when calling pkiQueryOcspWithGetReq().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcspWithGetReq().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiQueryOcspWithGetReq(req, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiQueryOcspWithGetReqRaw({ req: req, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiQueryUnifiedOcspRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryUnifiedOcsp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiQueryUnifiedOcsp(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiQueryUnifiedOcspRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiQueryUnifiedOcspWithGetReqRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['req'] == null) {
                throw new runtime.RequiredError('req', 'Required parameter "req" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiQueryUnifiedOcspWithGetReq(req, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiQueryUnifiedOcspWithGetReqRaw({ req: req, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadAcmeConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadAcmeConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadAcmeConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadAcmeDirectory(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadAcmeDirectoryRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadAcmeKeyIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyid'] == null) {
                throw new runtime.RequiredError('keyid', 'Required parameter "keyid" was null or undefined when calling pkiReadAcmeKeyId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeKeyId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadAcmeKeyId(keyid, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadAcmeKeyIdRaw({ keyid: keyid, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadAcmeNewNonce(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadAcmeNewNonceRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadAutoTidyConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAutoTidyConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadAutoTidyConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadAutoTidyConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadAutoTidyConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCaChainPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaChainPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCaChainPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCaChainPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCaChainPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCaDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCaDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCaDer(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCaDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCaPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/ca/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCaPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCaPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serial'] == null) {
                throw new runtime.RequiredError('serial', 'Required parameter "serial" was null or undefined when calling pkiReadCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCert(serial, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertCaChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCaChain().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertCaChainResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertCaChain(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertCaChainRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertDeltaCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertDeltaCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertDeltaCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertDeltaCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertMetadataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serial'] == null) {
                throw new runtime.RequiredError('serial', 'Required parameter "serial" was null or undefined when calling pkiReadCertMetadata().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertMetadata().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert-metadata/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertMetadataResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertMetadata(serial, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertMetadataRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertRawDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serial'] == null) {
                throw new runtime.RequiredError('serial', 'Required parameter "serial" was null or undefined when calling pkiReadCertRawDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/{serial}/raw`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertRawDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertRawDer(serial, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertRawDerRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertRawPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serial'] == null) {
                throw new runtime.RequiredError('serial', 'Required parameter "serial" was null or undefined when calling pkiReadCertRawPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/{serial}/raw/pem`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertRawPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertRawPem(serial, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertRawPemRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertUnifiedCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertUnifiedCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertUnifiedCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertUnifiedCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertUnifiedCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCertUnifiedDeltaCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertUnifiedDeltaCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cert/unified-delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCertUnifiedDeltaCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCertUnifiedDeltaCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCertUnifiedDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadClusterConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadClusterConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadClusterConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadClusterConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadClusterConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCmpv2ConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCmpv2Configuration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadCmpv2Configuration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCmpv2ConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCrlConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCrlConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCrlConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCrlConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCrlDeltaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDelta().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCrlDeltaResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCrlDelta(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCrlDeltaRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCrlDeltaPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDeltaPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCrlDeltaPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCrlDeltaPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCrlDeltaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCrlDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCrlDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCrlDer(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCrlDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadCrlPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadCrlPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadCrlPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadCrlPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadEstCacertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadEstCacerts().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/est/cacerts`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadEstCacerts(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadEstCacertsRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadEstConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadEstConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadEstConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadEstConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadExternalPolicyAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadExternalPolicyAcmeDirectory(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadExternalPolicyAcmeDirectoryRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadExternalPolicyAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadExternalPolicyAcmeNewNonce(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadExternalPolicyAcmeNewNonceRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadExternalPolicyPolicyAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/directory`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadExternalPolicyPolicyAcmeDirectory(policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadExternalPolicyPolicyAcmeDirectoryRaw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadExternalPolicyPolicyAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/new-nonce`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadExternalPolicyPolicyAcmeNewNonce(policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadExternalPolicyPolicyAcmeNewNonceRaw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadIssuer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerDer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadIssuerDerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadIssuerDer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefAcmeDirectory(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefAcmeDirectoryRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefAcmeNewNonce(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefAcmeNewNonceRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory(issuerRef, policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce(issuerRef, policy, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefRolesRoleAcmeDirectory(issuerRef, role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce(issuerRef, role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerJsonRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerJson().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerJson().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/json`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadIssuerJsonResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadIssuerJson(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerJsonRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuerPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerPem().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadIssuerPemResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadIssuerPem(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuerPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadIssuersConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuersConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadIssuersConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadIssuersConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadIssuersConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyRef'] == null) {
                throw new runtime.RequiredError('keyRef', 'Required parameter "keyRef" was null or undefined when calling pkiReadKey().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadKey(keyRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadKeysConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKeysConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadKeysConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadKeysConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadKeysConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pkiReadRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadRole(name, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadRoleRaw({ name: name, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadRolesRoleAcmeDirectoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/directory`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadRolesRoleAcmeDirectory(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadRolesRoleAcmeDirectoryRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadRolesRoleAcmeNewNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/new-nonce`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadRolesRoleAcmeNewNonce(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadRolesRoleAcmeNewNonceRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadRolesRoleEstCacertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadRolesRoleEstCacerts().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleEstCacerts().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/est/cacerts`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadRolesRoleEstCacerts(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadRolesRoleEstCacertsRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadRolesRoleScepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiReadRolesRoleScep().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleScep().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadRolesRoleScep(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadRolesRoleScepRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadScepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadScep().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadScep(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadScepRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadScepConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadScepConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadScepConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadScepConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadUnifiedCrlDeltaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDelta().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadUnifiedCrlDelta(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadUnifiedCrlDeltaRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadUnifiedCrlDeltaPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDeltaPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadUnifiedCrlDeltaPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadUnifiedCrlDeltaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadUnifiedCrlDerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadUnifiedCrlDer(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadUnifiedCrlDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadUnifiedCrlPemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlPem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/unified-crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiReadUnifiedCrlPem(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadUnifiedCrlPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReadUrlsConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUrlsConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReadUrlsConfigurationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReadUrlsConfiguration(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReadUrlsConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiReplaceRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiReplaceRoot().');
            }
            if (requestParameters['pkiReplaceRootRequest'] == null) {
                throw new runtime.RequiredError('pkiReplaceRootRequest', 'Required parameter "pkiReplaceRootRequest" was null or undefined when calling pkiReplaceRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/root/replace`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiReplaceRootRequestToJSON)(requestParameters['pkiReplaceRootRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiReplaceRootResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiReplaceRoot(pkiMountPath, pkiReplaceRootRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiReplaceRootRaw({ pkiMountPath: pkiMountPath, pkiReplaceRootRequest: pkiReplaceRootRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRevokeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRevoke().');
            }
            if (requestParameters['pkiRevokeRequest'] == null) {
                throw new runtime.RequiredError('pkiRevokeRequest', 'Required parameter "pkiRevokeRequest" was null or undefined when calling pkiRevoke().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/revoke`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiRevokeRequestToJSON)(requestParameters['pkiRevokeRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRevokeResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRevoke(pkiMountPath, pkiRevokeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRevokeRaw({ pkiMountPath: pkiMountPath, pkiRevokeRequest: pkiRevokeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRevokeIssuerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiRevokeIssuer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeIssuer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/revoke`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRevokeIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRevokeIssuer(issuerRef, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRevokeIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRevokeWithKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeWithKey().');
            }
            if (requestParameters['pkiRevokeWithKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiRevokeWithKeyRequest', 'Required parameter "pkiRevokeWithKeyRequest" was null or undefined when calling pkiRevokeWithKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/revoke-with-key`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiRevokeWithKeyRequestToJSON)(requestParameters['pkiRevokeWithKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRevokeWithKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRevokeWithKey(pkiMountPath, pkiRevokeWithKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRevokeWithKeyRaw({ pkiMountPath: pkiMountPath, pkiRevokeWithKeyRequest: pkiRevokeWithKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRootSignIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignIntermediate().');
            }
            if (requestParameters['pkiRootSignIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiRootSignIntermediateRequest', 'Required parameter "pkiRootSignIntermediateRequest" was null or undefined when calling pkiRootSignIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/root/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiRootSignIntermediateRequestToJSON)(requestParameters['pkiRootSignIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRootSignIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRootSignIntermediate(pkiMountPath, pkiRootSignIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRootSignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiRootSignIntermediateRequest: pkiRootSignIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRootSignSelfIssuedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignSelfIssued().');
            }
            if (requestParameters['pkiRootSignSelfIssuedRequest'] == null) {
                throw new runtime.RequiredError('pkiRootSignSelfIssuedRequest', 'Required parameter "pkiRootSignSelfIssuedRequest" was null or undefined when calling pkiRootSignSelfIssued().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/root/sign-self-issued`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiRootSignSelfIssuedRequestToJSON)(requestParameters['pkiRootSignSelfIssuedRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRootSignSelfIssuedResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRootSignSelfIssued(pkiMountPath, pkiRootSignSelfIssuedRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRootSignSelfIssuedRaw({ pkiMountPath: pkiMountPath, pkiRootSignSelfIssuedRequest: pkiRootSignSelfIssuedRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRotateCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl/rotate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRotateCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRotateCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRotateCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRotateDeltaCrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateDeltaCrl().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/crl/rotate-delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRotateDeltaCrlResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRotateDeltaCrl(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRotateDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiRotateRootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['exported'] == null) {
                throw new runtime.RequiredError('exported', 'Required parameter "exported" was null or undefined when calling pkiRotateRoot().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateRoot().');
            }
            if (requestParameters['pkiRotateRootRequest'] == null) {
                throw new runtime.RequiredError('pkiRotateRootRequest', 'Required parameter "pkiRotateRootRequest" was null or undefined when calling pkiRotateRoot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/root/rotate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiRotateRootRequestToJSON)(requestParameters['pkiRotateRootRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiRotateRootResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiRotateRoot(exported, pkiMountPath, pkiRotateRootRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiRotateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiRotateRootRequest: pkiRotateRootRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiSetSignedIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiSetSignedIntermediate().');
            }
            if (requestParameters['pkiSetSignedIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiSetSignedIntermediateRequest', 'Required parameter "pkiSetSignedIntermediateRequest" was null or undefined when calling pkiSetSignedIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/intermediate/set-signed`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiSetSignedIntermediateRequestToJSON)(requestParameters['pkiSetSignedIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiSetSignedIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiSetSignedIntermediate(pkiMountPath, pkiSetSignedIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiSetSignedIntermediateRaw({ pkiMountPath: pkiMountPath, pkiSetSignedIntermediateRequest: pkiSetSignedIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiSignVerbatimRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatim().');
            }
            if (requestParameters['pkiSignVerbatimRequest'] == null) {
                throw new runtime.RequiredError('pkiSignVerbatimRequest', 'Required parameter "pkiSignVerbatimRequest" was null or undefined when calling pkiSignVerbatim().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/sign-verbatim`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiSignVerbatimRequestToJSON)(requestParameters['pkiSignVerbatimRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiSignVerbatimResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiSignVerbatim(pkiMountPath, pkiSignVerbatimRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiSignVerbatimRaw({ pkiMountPath: pkiMountPath, pkiSignVerbatimRequest: pkiSignVerbatimRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiSignVerbatimWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiSignVerbatimWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatimWithRole().');
            }
            if (requestParameters['pkiSignVerbatimWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiSignVerbatimWithRoleRequest', 'Required parameter "pkiSignVerbatimWithRoleRequest" was null or undefined when calling pkiSignVerbatimWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/sign-verbatim/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiSignVerbatimWithRoleRequestToJSON)(requestParameters['pkiSignVerbatimWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiSignVerbatimWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiSignVerbatimWithRole(role, pkiMountPath, pkiSignVerbatimWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiSignVerbatimWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiSignVerbatimWithRoleRequest: pkiSignVerbatimWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiSignWithRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiSignWithRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiSignWithRole().');
            }
            if (requestParameters['pkiSignWithRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiSignWithRoleRequest', 'Required parameter "pkiSignWithRoleRequest" was null or undefined when calling pkiSignWithRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiSignWithRoleRequestToJSON)(requestParameters['pkiSignWithRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiSignWithRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiSignWithRole(role, pkiMountPath, pkiSignWithRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiSignWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiSignWithRoleRequest: pkiSignWithRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiTidyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiTidy().');
            }
            if (requestParameters['pkiTidyRequest'] == null) {
                throw new runtime.RequiredError('pkiTidyRequest', 'Required parameter "pkiTidyRequest" was null or undefined when calling pkiTidy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiTidyRequestToJSON)(requestParameters['pkiTidyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiTidy(pkiMountPath, pkiTidyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiTidyRaw({ pkiMountPath: pkiMountPath, pkiTidyRequest: pkiTidyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiTidyCancelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyCancel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/tidy-cancel`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiTidyCancelResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiTidyCancel(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiTidyCancelRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiTidyStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyStatus().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/tidy-status`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiTidyStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiTidyStatus(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiTidyStatusRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeAccountKidRequest', 'Required parameter "pkiWriteAcmeAccountKidRequest" was null or undefined when calling pkiWriteAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeAccountKid(kid, pkiMountPath, pkiWriteAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeAccountKidRaw({ kid: kid, pkiMountPath: pkiMountPath, pkiWriteAcmeAccountKidRequest: pkiWriteAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeAuthorizationAuthId(authId, pkiMountPath, pkiWriteAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeAuthorizationAuthIdRaw({ authId: authId, pkiMountPath: pkiMountPath, pkiWriteAcmeAuthorizationAuthIdRequest: pkiWriteAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeChallengeAuthIdChallengeType(authId, challengeType, pkiMountPath, pkiWriteAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, pkiMountPath: pkiMountPath, pkiWriteAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeKeyIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyid'] == null) {
                throw new runtime.RequiredError('keyid', 'Required parameter "keyid" was null or undefined when calling pkiWriteAcmeKeyId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeKeyId().');
            }
            if (requestParameters['pkiWriteAcmeKeyIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeKeyIdRequest', 'Required parameter "pkiWriteAcmeKeyIdRequest" was null or undefined when calling pkiWriteAcmeKeyId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeKeyIdRequestToJSON)(requestParameters['pkiWriteAcmeKeyIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeKeyId(keyid, pkiMountPath, pkiWriteAcmeKeyIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeKeyIdRaw({ keyid: keyid, pkiMountPath: pkiMountPath, pkiWriteAcmeKeyIdRequest: pkiWriteAcmeKeyIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeNewAccountRequest', 'Required parameter "pkiWriteAcmeNewAccountRequest" was null or undefined when calling pkiWriteAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeNewAccount(pkiMountPath, pkiWriteAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeNewAccountRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeNewAccountRequest: pkiWriteAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeNewOrderRequest', 'Required parameter "pkiWriteAcmeNewOrderRequest" was null or undefined when calling pkiWriteAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeNewOrder(pkiMountPath, pkiWriteAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeNewOrderRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeNewOrderRequest: pkiWriteAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderId(orderId, pkiMountPath, pkiWriteAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeOrderOrderIdRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdRequest: pkiWriteAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderIdCert(orderId, pkiMountPath, pkiWriteAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeOrderOrderIdCertRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdCertRequest: pkiWriteAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeOrderOrderIdFinalize(orderId, pkiMountPath, pkiWriteAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdFinalizeRequest: pkiWriteAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrders().');
            }
            if (requestParameters['pkiWriteAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeOrdersRequest', 'Required parameter "pkiWriteAcmeOrdersRequest" was null or undefined when calling pkiWriteAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeOrdersRequestToJSON)(requestParameters['pkiWriteAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeOrders(pkiMountPath, pkiWriteAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeOrdersRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeOrdersRequest: pkiWriteAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteAcmeRevokeCertRequest', 'Required parameter "pkiWriteAcmeRevokeCertRequest" was null or undefined when calling pkiWriteAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteAcmeRevokeCert(pkiMountPath, pkiWriteAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteAcmeRevokeCertRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeRevokeCertRequest: pkiWriteAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteCmpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteCmp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteCmp(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteCmpRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteEstSimpleenrollRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteEstSimpleenroll().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/est/simpleenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteEstSimpleenroll(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteEstSimpleenrollRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteEstSimplereenrollRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteEstSimplereenroll().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/est/simplereenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteEstSimplereenroll(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteEstSimplereenrollRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeAccountKidRequest', 'Required parameter "pkiWriteExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeAccountKid(kid, pkiMountPath, pkiWriteExternalPolicyAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeAccountKidRaw({ kid: kid, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeAccountKidRequest: pkiWriteExternalPolicyAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeAuthorizationAuthId(authId, pkiMountPath, pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType(authId, challengeType, pkiMountPath, pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeNewAccountRequest', 'Required parameter "pkiWriteExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeNewAccount(pkiMountPath, pkiWriteExternalPolicyAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeNewAccountRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeNewAccountRequest: pkiWriteExternalPolicyAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeNewOrderRequest', 'Required parameter "pkiWriteExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeNewOrder(pkiMountPath, pkiWriteExternalPolicyAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeNewOrderRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeNewOrderRequest: pkiWriteExternalPolicyAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderId(orderId, pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeOrderOrderIdRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdRequest: pkiWriteExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderIdCert(orderId, pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrderOrderIdFinalize(orderId, pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeOrdersRequest', 'Required parameter "pkiWriteExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeOrdersRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeOrders(pkiMountPath, pkiWriteExternalPolicyAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeOrdersRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrdersRequest: pkiWriteExternalPolicyAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteExternalPolicyAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyAcmeRevokeCertRequest', 'Required parameter "pkiWriteExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteExternalPolicyAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyAcmeRevokeCert(pkiMountPath, pkiWriteExternalPolicyAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyAcmeRevokeCertRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeRevokeCertRequest: pkiWriteExternalPolicyAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyIssueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyIssue().');
            }
            if (requestParameters['pkiWriteExternalPolicyIssueRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyIssueRequest', 'Required parameter "pkiWriteExternalPolicyIssueRequest" was null or undefined when calling pkiWriteExternalPolicyIssue().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/issue`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyIssueRequestToJSON)(requestParameters['pkiWriteExternalPolicyIssueRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicyIssueResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicyIssue(pkiMountPath, pkiWriteExternalPolicyIssueRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyIssueRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyIssueRequest: pkiWriteExternalPolicyIssueRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyIssuePolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().');
            }
            if (requestParameters['pkiWriteExternalPolicyIssuePolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyIssuePolicyRequest', 'Required parameter "pkiWriteExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/issue/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyIssuePolicyRequestToJSON)(requestParameters['pkiWriteExternalPolicyIssuePolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicyIssuePolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicyIssuePolicy(policy, pkiMountPath, pkiWriteExternalPolicyIssuePolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyIssuePolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyIssuePolicyRequest: pkiWriteExternalPolicyIssuePolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeAccountKidRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeAccountKid(kid, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeAccountKidRaw({ kid: kid, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAccountKidRequest: pkiWriteExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId(authId, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(authId, challengeType, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeNewAccountRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/new-account`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeNewAccount(policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeNewAccountRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewAccountRequest: pkiWriteExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeNewOrderRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/new-order`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeNewOrder(policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeNewOrderRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewOrderRequest: pkiWriteExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderId(orderId, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert(orderId, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize(orderId, policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeOrdersRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/orders`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeOrdersRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeOrders(policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeOrdersRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrdersRequest: pkiWriteExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest', 'Required parameter "pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteExternalPolicyPolicyAcmeRevokeCert(policy, pkiMountPath, pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicySignRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySign().');
            }
            if (requestParameters['pkiWriteExternalPolicySignRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicySignRequest', 'Required parameter "pkiWriteExternalPolicySignRequest" was null or undefined when calling pkiWriteExternalPolicySign().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicySignRequestToJSON)(requestParameters['pkiWriteExternalPolicySignRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicySignResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicySign(pkiMountPath, pkiWriteExternalPolicySignRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicySignRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignRequest: pkiWriteExternalPolicySignRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicySignIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().');
            }
            if (requestParameters['pkiWriteExternalPolicySignIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicySignIntermediateRequest', 'Required parameter "pkiWriteExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicySignIntermediateRequestToJSON)(requestParameters['pkiWriteExternalPolicySignIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicySignIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicySignIntermediate(pkiMountPath, pkiWriteExternalPolicySignIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicySignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignIntermediateRequest: pkiWriteExternalPolicySignIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicySignIntermediatePolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().');
            }
            if (requestParameters['pkiWriteExternalPolicySignIntermediatePolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicySignIntermediatePolicyRequest', 'Required parameter "pkiWriteExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/sign-intermediate/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicySignIntermediatePolicyRequestToJSON)(requestParameters['pkiWriteExternalPolicySignIntermediatePolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicySignIntermediatePolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicySignIntermediatePolicy(policy, pkiMountPath, pkiWriteExternalPolicySignIntermediatePolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicySignIntermediatePolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignIntermediatePolicyRequest: pkiWriteExternalPolicySignIntermediatePolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteExternalPolicySignPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignPolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignPolicy().');
            }
            if (requestParameters['pkiWriteExternalPolicySignPolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteExternalPolicySignPolicyRequest', 'Required parameter "pkiWriteExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/external-policy/sign/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteExternalPolicySignPolicyRequestToJSON)(requestParameters['pkiWriteExternalPolicySignPolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteExternalPolicySignPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteExternalPolicySignPolicy(policy, pkiMountPath, pkiWriteExternalPolicySignPolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteExternalPolicySignPolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignPolicyRequest: pkiWriteExternalPolicySignPolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuer().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuer().');
            }
            if (requestParameters['pkiWriteIssuerRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerRequest', 'Required parameter "pkiWriteIssuerRequest" was null or undefined when calling pkiWriteIssuer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerRequestToJSON)(requestParameters['pkiWriteIssuerRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuer(issuerRef, pkiMountPath, pkiWriteIssuerRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerRequest: pkiWriteIssuerRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().');
            }
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeAccountKidRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeAccountKid(issuerRef, kid, pkiMountPath, pkiWriteIssuerIssuerRefAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeAccountKidRequest: pkiWriteIssuerIssuerRefAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId(authId, issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType(authId, challengeType, issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeNewAccountRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeNewAccount(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeNewAccountRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewAccountRequest: pkiWriteIssuerIssuerRefAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeNewOrderRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeNewOrder(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeNewOrderRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewOrderRequest: pkiWriteIssuerIssuerRefAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderId(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeOrdersRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeOrders(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeOrdersRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrdersRequest: pkiWriteIssuerIssuerRefAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefAcmeRevokeCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefAcmeRevokeCert(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefAcmeRevokeCertRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().');
            }
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid(issuerRef, kid, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId(authId, issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType(authId, challengeType, issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize(issuerRef, orderId, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyIssueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssueRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyIssueRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyIssueRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyIssueRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssueRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyIssueResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyIssue(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssueRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyIssueRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssueRequest: pkiWriteIssuerIssuerRefExternalPolicyIssueRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid(issuerRef, kid, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId(authId, issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(authId, challengeType, issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId(issuerRef, orderId, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert(issuerRef, orderId, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize(issuerRef, orderId, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicySignRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySign(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicySignRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignRequest: pkiWriteIssuerIssuerRefExternalPolicySignRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediate(issuerRef, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().');
            }
            if (requestParameters['policy'] == null) {
                throw new runtime.RequiredError('policy', 'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest', 'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefExternalPolicySignPolicy(issuerRef, policy, pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid(issuerRef, kid, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId(authId, issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType(authId, challengeType, issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount(issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder(issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId(issuerRef, orderId, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert(issuerRef, orderId, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize(issuerRef, orderId, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrders(issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['issuerRef'] == null) {
                throw new runtime.RequiredError('issuerRef', 'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest', 'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert(issuerRef, role, pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyRef'] == null) {
                throw new runtime.RequiredError('keyRef', 'Required parameter "keyRef" was null or undefined when calling pkiWriteKey().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteKey().');
            }
            if (requestParameters['pkiWriteKeyRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteKeyRequest', 'Required parameter "pkiWriteKeyRequest" was null or undefined when calling pkiWriteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteKeyRequestToJSON)(requestParameters['pkiWriteKeyRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteKey(keyRef, pkiMountPath, pkiWriteKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath, pkiWriteKeyRequest: pkiWriteKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling pkiWriteRole().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRole().');
            }
            if (requestParameters['pkiWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRoleRequest', 'Required parameter "pkiWriteRoleRequest" was null or undefined when calling pkiWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRoleRequestToJSON)(requestParameters['pkiWriteRoleRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PkiWriteRoleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    pkiWriteRole(name, pkiMountPath, pkiWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRoleRaw({ name: name, pkiMountPath: pkiMountPath, pkiWriteRoleRequest: pkiWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeAccountKidRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['kid'] == null) {
                throw new runtime.RequiredError('kid', 'Required parameter "kid" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeAccountKidRequest', 'Required parameter "pkiWriteRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeAccountKidRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeAccountKid(kid, role, pkiMountPath, pkiWriteRolesRoleAcmeAccountKidRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeAccountKidRaw({ kid: kid, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeAccountKidRequest: pkiWriteRolesRoleAcmeAccountKidRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest', 'Required parameter "pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeAuthorizationAuthId(authId, role, pkiMountPath, pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw({ authId: authId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['authId'] == null) {
                throw new runtime.RequiredError('authId', 'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['challengeType'] == null) {
                throw new runtime.RequiredError('challengeType', 'Required parameter "challengeType" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest', 'Required parameter "pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType(authId, challengeType, role, pkiMountPath, pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeNewAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeNewAccountRequest', 'Required parameter "pkiWriteRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/new-account`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeNewAccountRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeNewAccount(role, pkiMountPath, pkiWriteRolesRoleAcmeNewAccountRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeNewAccountRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeNewAccountRequest: pkiWriteRolesRoleAcmeNewAccountRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeNewOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeNewOrderRequest', 'Required parameter "pkiWriteRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/new-order`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeNewOrderRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeNewOrder(role, pkiMountPath, pkiWriteRolesRoleAcmeNewOrderRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeNewOrderRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeNewOrderRequest: pkiWriteRolesRoleAcmeNewOrderRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeOrderOrderIdRequest', 'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderId(orderId, role, pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeOrderOrderIdRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdRequest: pkiWriteRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderIdCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeOrderOrderIdCertRequest', 'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderIdCert(orderId, role, pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeOrderOrderIdCertRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdCertRequest: pkiWriteRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['orderId'] == null) {
                throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest', 'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrderOrderIdFinalize(orderId, role, pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeOrdersRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeOrdersRequest', 'Required parameter "pkiWriteRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/orders`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeOrdersRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeOrdersRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeOrders(role, pkiMountPath, pkiWriteRolesRoleAcmeOrdersRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeOrdersRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrdersRequest: pkiWriteRolesRoleAcmeOrdersRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeRevokeCertRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().');
            }
            if (requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest'] == null) {
                throw new runtime.RequiredError('pkiWriteRolesRoleAcmeRevokeCertRequest', 'Required parameter "pkiWriteRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/acme/revoke-cert`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PkiWriteRolesRoleAcmeRevokeCertRequestToJSON)(requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleAcmeRevokeCert(role, pkiMountPath, pkiWriteRolesRoleAcmeRevokeCertRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleAcmeRevokeCertRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeRevokeCertRequest: pkiWriteRolesRoleAcmeRevokeCertRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleCmpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleCmp().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleCmp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/cmp`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleCmp(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleCmpRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleEstSimpleenrollRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/est/simpleenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleEstSimpleenroll(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleEstSimpleenrollRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleEstSimplereenrollRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/est/simplereenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleEstSimplereenroll(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleEstSimplereenrollRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteRolesRoleScepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleScep().');
            }
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleScep().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteRolesRoleScep(role, pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteRolesRoleScepRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    pkiWriteScepRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['pkiMountPath'] == null) {
                throw new runtime.RequiredError('pkiMountPath', 'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteScep().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    pkiWriteScep(pkiMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pkiWriteScepRaw({ pkiMountPath: pkiMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    rabbitMqConfigureConnectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureConnection().');
            }
            if (requestParameters['rabbitMqConfigureConnectionRequest'] == null) {
                throw new runtime.RequiredError('rabbitMqConfigureConnectionRequest', 'Required parameter "rabbitMqConfigureConnectionRequest" was null or undefined when calling rabbitMqConfigureConnection().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/config/connection`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RabbitMqConfigureConnectionRequestToJSON)(requestParameters['rabbitMqConfigureConnectionRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    rabbitMqConfigureConnection(rabbitmqMountPath, rabbitMqConfigureConnectionRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqConfigureConnectionRaw({ rabbitmqMountPath: rabbitmqMountPath, rabbitMqConfigureConnectionRequest: rabbitMqConfigureConnectionRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rabbitMqConfigureLeaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureLease().');
            }
            if (requestParameters['rabbitMqConfigureLeaseRequest'] == null) {
                throw new runtime.RequiredError('rabbitMqConfigureLeaseRequest', 'Required parameter "rabbitMqConfigureLeaseRequest" was null or undefined when calling rabbitMqConfigureLease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RabbitMqConfigureLeaseRequestToJSON)(requestParameters['rabbitMqConfigureLeaseRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rabbitMqConfigureLease(rabbitmqMountPath, rabbitMqConfigureLeaseRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqConfigureLeaseRaw({ rabbitmqMountPath: rabbitmqMountPath, rabbitMqConfigureLeaseRequest: rabbitMqConfigureLeaseRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rabbitMqDeleteRole().');
            }
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqDeleteRole(name, rabbitmqMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqDeleteRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling rabbitMqListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/roles/`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqListRoles(rabbitmqMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqListRolesRaw({ rabbitmqMountPath: rabbitmqMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rabbitMqReadLeaseConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadLeaseConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    rabbitMqReadLeaseConfiguration(rabbitmqMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqReadLeaseConfigurationRaw({ rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rabbitMqReadRole().');
            }
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqReadRole(name, rabbitmqMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqReadRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request RabbitMQ credentials for a certain role.
     */
    rabbitMqRequestCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rabbitMqRequestCredentials().');
            }
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqRequestCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Request RabbitMQ credentials for a certain role.
     */
    rabbitMqRequestCredentials(name, rabbitmqMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqRequestCredentialsRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling rabbitMqWriteRole().');
            }
            if (requestParameters['rabbitmqMountPath'] == null) {
                throw new runtime.RequiredError('rabbitmqMountPath', 'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqWriteRole().');
            }
            if (requestParameters['rabbitMqWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('rabbitMqWriteRoleRequest', 'Required parameter "rabbitMqWriteRoleRequest" was null or undefined when calling rabbitMqWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RabbitMqWriteRoleRequestToJSON)(requestParameters['rabbitMqWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the roles that can be created with this backend.
     */
    rabbitMqWriteRole(name, rabbitmqMountPath, rabbitMqWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rabbitMqWriteRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath, rabbitMqWriteRoleRequest: rabbitMqWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshConfigureCaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshConfigureCa().');
            }
            if (requestParameters['sshConfigureCaRequest'] == null) {
                throw new runtime.RequiredError('sshConfigureCaRequest', 'Required parameter "sshConfigureCaRequest" was null or undefined when calling sshConfigureCa().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshConfigureCaRequestToJSON)(requestParameters['sshConfigureCaRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshConfigureCa(sshMountPath, sshConfigureCaRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshConfigureCaRaw({ sshMountPath: sshMountPath, sshConfigureCaRequest: sshConfigureCaRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshConfigureZeroAddressRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshConfigureZeroAddress().');
            }
            if (requestParameters['sshConfigureZeroAddressRequest'] == null) {
                throw new runtime.RequiredError('sshConfigureZeroAddressRequest', 'Required parameter "sshConfigureZeroAddressRequest" was null or undefined when calling sshConfigureZeroAddress().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshConfigureZeroAddressRequestToJSON)(requestParameters['sshConfigureZeroAddressRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshConfigureZeroAddress(sshMountPath, sshConfigureZeroAddressRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshConfigureZeroAddressRaw({ sshMountPath: sshMountPath, sshConfigureZeroAddressRequest: sshConfigureZeroAddressRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshDeleteCaConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshDeleteCaConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshDeleteCaConfiguration(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshDeleteCaConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshDeleteRole().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshDeleteRole(role, sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshDeleteRoleRaw({ role: role, sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshDeleteZeroAddressConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshDeleteZeroAddressConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshDeleteZeroAddressConfiguration(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshDeleteZeroAddressConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    sshGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshGenerateCredentials().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshGenerateCredentials().');
            }
            if (requestParameters['sshGenerateCredentialsRequest'] == null) {
                throw new runtime.RequiredError('sshGenerateCredentialsRequest', 'Required parameter "sshGenerateCredentialsRequest" was null or undefined when calling sshGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshGenerateCredentialsRequestToJSON)(requestParameters['sshGenerateCredentialsRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    sshGenerateCredentials(role, sshMountPath, sshGenerateCredentialsRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshGenerateCredentialsRaw({ role: role, sshMountPath: sshMountPath, sshGenerateCredentialsRequest: sshGenerateCredentialsRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshIssueCertificateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshIssueCertificate().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshIssueCertificate().');
            }
            if (requestParameters['sshIssueCertificateRequest'] == null) {
                throw new runtime.RequiredError('sshIssueCertificateRequest', 'Required parameter "sshIssueCertificateRequest" was null or undefined when calling sshIssueCertificate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshIssueCertificateRequestToJSON)(requestParameters['sshIssueCertificateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshIssueCertificate(role, sshMountPath, sshIssueCertificateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshIssueCertificateRaw({ role: role, sshMountPath: sshMountPath, sshIssueCertificateRequest: sshIssueCertificateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling sshListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/roles/`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshListRoles(sshMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshListRolesRaw({ sshMountPath: sshMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all the roles associated with the given IP address.
     */
    sshListRolesByIpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshListRolesByIp().');
            }
            if (requestParameters['sshListRolesByIpRequest'] == null) {
                throw new runtime.RequiredError('sshListRolesByIpRequest', 'Required parameter "sshListRolesByIpRequest" was null or undefined when calling sshListRolesByIp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/lookup`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshListRolesByIpRequestToJSON)(requestParameters['sshListRolesByIpRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * List all the roles associated with the given IP address.
     */
    sshListRolesByIp(sshMountPath, sshListRolesByIpRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshListRolesByIpRaw({ sshMountPath: sshMountPath, sshListRolesByIpRequest: sshListRolesByIpRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshReadCaConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshReadCaConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshReadCaConfiguration(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshReadCaConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the public key.
     */
    sshReadPublicKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshReadPublicKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/public_key`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retrieve the public key.
     */
    sshReadPublicKey(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshReadPublicKeyRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshReadRole().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshReadRole(role, sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshReadRoleRaw({ role: role, sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    sshReadZeroAddressConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshReadZeroAddressConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    sshReadZeroAddressConfiguration(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshReadZeroAddressConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    sshSignCertificateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshSignCertificate().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshSignCertificate().');
            }
            if (requestParameters['sshSignCertificateRequest'] == null) {
                throw new runtime.RequiredError('sshSignCertificateRequest', 'Required parameter "sshSignCertificateRequest" was null or undefined when calling sshSignCertificate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshSignCertificateRequestToJSON)(requestParameters['sshSignCertificateRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    sshSignCertificate(role, sshMountPath, sshSignCertificateRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshSignCertificateRaw({ role: role, sshMountPath: sshMountPath, sshSignCertificateRequest: sshSignCertificateRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    sshTidyDynamicHostKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshTidyDynamicHostKeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{ssh_mount_path}/tidy/dynamic-keys`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    sshTidyDynamicHostKeys(sshMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshTidyDynamicHostKeysRaw({ sshMountPath: sshMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    sshVerifyOtpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshVerifyOtp().');
            }
            if (requestParameters['sshVerifyOtpRequest'] == null) {
                throw new runtime.RequiredError('sshVerifyOtpRequest', 'Required parameter "sshVerifyOtpRequest" was null or undefined when calling sshVerifyOtp().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/verify`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshVerifyOtpRequestToJSON)(requestParameters['sshVerifyOtpRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    sshVerifyOtp(sshMountPath, sshVerifyOtpRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshVerifyOtpRaw({ sshMountPath: sshMountPath, sshVerifyOtpRequest: sshVerifyOtpRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['role'] == null) {
                throw new runtime.RequiredError('role', 'Required parameter "role" was null or undefined when calling sshWriteRole().');
            }
            if (requestParameters['sshMountPath'] == null) {
                throw new runtime.RequiredError('sshMountPath', 'Required parameter "sshMountPath" was null or undefined when calling sshWriteRole().');
            }
            if (requestParameters['sshWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('sshWriteRoleRequest', 'Required parameter "sshWriteRoleRequest" was null or undefined when calling sshWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SshWriteRoleRequestToJSON)(requestParameters['sshWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    sshWriteRole(role, sshMountPath, sshWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sshWriteRoleRaw({ role: role, sshMountPath: sshMountPath, sshWriteRoleRequest: sshWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudConfigureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudConfigure().');
            }
            if (requestParameters['terraformCloudConfigureRequest'] == null) {
                throw new runtime.RequiredError('terraformCloudConfigureRequest', 'Required parameter "terraformCloudConfigureRequest" was null or undefined when calling terraformCloudConfigure().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TerraformCloudConfigureRequestToJSON)(requestParameters['terraformCloudConfigureRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudConfigure(terraformMountPath, terraformCloudConfigureRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudConfigureRaw({ terraformMountPath: terraformMountPath, terraformCloudConfigureRequest: terraformCloudConfigureRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudDeleteConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudDeleteConfiguration(terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudDeleteConfigurationRaw({ terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudDeleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudDeleteRole().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudDeleteRole(name, terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudDeleteRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudGenerateCredentialsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudGenerateCredentials(name, terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudGenerateCredentialsRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudGenerateCredentials2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials2().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials2().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudGenerateCredentials2(name, terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudGenerateCredentials2Raw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudListRolesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudListRoles().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling terraformCloudListRoles().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/role/`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    terraformCloudListRoles(terraformMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudListRolesRaw({ terraformMountPath: terraformMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudReadConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudReadConfiguration(terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudReadConfigurationRaw({ terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudReadRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudReadRole().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudReadRole(name, terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudReadRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudRotateRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudRotateRole().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudRotateRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{terraform_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudRotateRole(name, terraformMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudRotateRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    terraformCloudWriteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling terraformCloudWriteRole().');
            }
            if (requestParameters['terraformMountPath'] == null) {
                throw new runtime.RequiredError('terraformMountPath', 'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudWriteRole().');
            }
            if (requestParameters['terraformCloudWriteRoleRequest'] == null) {
                throw new runtime.RequiredError('terraformCloudWriteRoleRequest', 'Required parameter "terraformCloudWriteRoleRequest" was null or undefined when calling terraformCloudWriteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TerraformCloudWriteRoleRequestToJSON)(requestParameters['terraformCloudWriteRoleRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    terraformCloudWriteRole(name, terraformMountPath, terraformCloudWriteRoleRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.terraformCloudWriteRoleRaw({ name: name, terraformMountPath: terraformMountPath, terraformCloudWriteRoleRequest: terraformCloudWriteRoleRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    totpCreateKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling totpCreateKey().');
            }
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpCreateKey().');
            }
            if (requestParameters['totpCreateKeyRequest'] == null) {
                throw new runtime.RequiredError('totpCreateKeyRequest', 'Required parameter "totpCreateKeyRequest" was null or undefined when calling totpCreateKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TotpCreateKeyRequestToJSON)(requestParameters['totpCreateKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    totpCreateKey(name, totpMountPath, totpCreateKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpCreateKeyRaw({ name: name, totpMountPath: totpMountPath, totpCreateKeyRequest: totpCreateKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    totpDeleteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling totpDeleteKey().');
            }
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpDeleteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    totpDeleteKey(name, totpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpDeleteKeyRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    totpGenerateCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling totpGenerateCode().');
            }
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpGenerateCode().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    totpGenerateCode(name, totpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpGenerateCodeRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Manage the keys that can be created with this backend.
     */
    totpListKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpListKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling totpListKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{totp_mount_path}/keys/`.replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Manage the keys that can be created with this backend.
     */
    totpListKeys(totpMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpListKeysRaw({ totpMountPath: totpMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    totpReadKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling totpReadKey().');
            }
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpReadKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    totpReadKey(name, totpMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpReadKeyRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    totpValidateCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling totpValidateCode().');
            }
            if (requestParameters['totpMountPath'] == null) {
                throw new runtime.RequiredError('totpMountPath', 'Required parameter "totpMountPath" was null or undefined when calling totpValidateCode().');
            }
            if (requestParameters['totpValidateCodeRequest'] == null) {
                throw new runtime.RequiredError('totpValidateCodeRequest', 'Required parameter "totpValidateCodeRequest" was null or undefined when calling totpValidateCode().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TotpValidateCodeRequestToJSON)(requestParameters['totpValidateCodeRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    totpValidateCode(name, totpMountPath, totpValidateCodeRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.totpValidateCodeRaw({ name: name, totpMountPath: totpMountPath, totpValidateCodeRequest: totpValidateCodeRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Backup the named key
     */
    transitBackUpKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitBackUpKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitBackUpKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/backup/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Backup the named key
     */
    transitBackUpKey(name, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitBackUpKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Securely export named encryption or signing key
     */
    transitByokKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['destination'] == null) {
                throw new runtime.RequiredError('destination', 'Required parameter "destination" was null or undefined when calling transitByokKey().');
            }
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling transitByokKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitByokKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/byok-export/{destination}/{source}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Securely export named encryption or signing key
     */
    transitByokKey(destination, source, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitByokKeyRaw({ destination: destination, source: source, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Securely export named encryption or signing key
     */
    transitByokKeyVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['destination'] == null) {
                throw new runtime.RequiredError('destination', 'Required parameter "destination" was null or undefined when calling transitByokKeyVersion().');
            }
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling transitByokKeyVersion().');
            }
            if (requestParameters['version'] == null) {
                throw new runtime.RequiredError('version', 'Required parameter "version" was null or undefined when calling transitByokKeyVersion().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitByokKeyVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/byok-export/{destination}/{source}/{version}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Securely export named encryption or signing key
     */
    transitByokKeyVersion(destination, source, version, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitByokKeyVersionRaw({ destination: destination, source: source, version: version, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configures a new cache of the specified size
     */
    transitConfigureCacheRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitConfigureCache().');
            }
            if (requestParameters['transitConfigureCacheRequest'] == null) {
                throw new runtime.RequiredError('transitConfigureCacheRequest', 'Required parameter "transitConfigureCacheRequest" was null or undefined when calling transitConfigureCache().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitConfigureCacheRequestToJSON)(requestParameters['transitConfigureCacheRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configures a new cache of the specified size
     */
    transitConfigureCache(transitMountPath, transitConfigureCacheRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitConfigureCacheRaw({ transitMountPath: transitMountPath, transitConfigureCacheRequest: transitConfigureCacheRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Configure a named encryption key
     */
    transitConfigureKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitConfigureKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKey().');
            }
            if (requestParameters['transitConfigureKeyRequest'] == null) {
                throw new runtime.RequiredError('transitConfigureKeyRequest', 'Required parameter "transitConfigureKeyRequest" was null or undefined when calling transitConfigureKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/config`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitConfigureKeyRequestToJSON)(requestParameters['transitConfigureKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Configure a named encryption key
     */
    transitConfigureKey(name, transitMountPath, transitConfigureKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitConfigureKeyRaw({ name: name, transitMountPath: transitMountPath, transitConfigureKeyRequest: transitConfigureKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitConfigureKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKeys().');
            }
            if (requestParameters['transitConfigureKeysRequest'] == null) {
                throw new runtime.RequiredError('transitConfigureKeysRequest', 'Required parameter "transitConfigureKeysRequest" was null or undefined when calling transitConfigureKeys().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitConfigureKeysRequestToJSON)(requestParameters['transitConfigureKeysRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitConfigureKeys(transitMountPath, transitConfigureKeysRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitConfigureKeysRaw({ transitMountPath: transitMountPath, transitConfigureKeysRequest: transitConfigureKeysRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitCreateKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitCreateKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitCreateKey().');
            }
            if (requestParameters['transitCreateKeyRequest'] == null) {
                throw new runtime.RequiredError('transitCreateKeyRequest', 'Required parameter "transitCreateKeyRequest" was null or undefined when calling transitCreateKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitCreateKeyRequestToJSON)(requestParameters['transitCreateKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitCreateKey(name, transitMountPath, transitCreateKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitCreateKeyRaw({ name: name, transitMountPath: transitMountPath, transitCreateKeyRequest: transitCreateKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Decrypt a ciphertext value using a named key
     */
    transitDecryptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitDecrypt().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitDecrypt().');
            }
            if (requestParameters['transitDecryptRequest'] == null) {
                throw new runtime.RequiredError('transitDecryptRequest', 'Required parameter "transitDecryptRequest" was null or undefined when calling transitDecrypt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/decrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitDecryptRequestToJSON)(requestParameters['transitDecryptRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Decrypt a ciphertext value using a named key
     */
    transitDecrypt(name, transitMountPath, transitDecryptRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitDecryptRaw({ name: name, transitMountPath: transitMountPath, transitDecryptRequest: transitDecryptRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitDeleteKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitDeleteKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitDeleteKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitDeleteKey(name, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitDeleteKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    transitEncryptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitEncrypt().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitEncrypt().');
            }
            if (requestParameters['transitEncryptRequest'] == null) {
                throw new runtime.RequiredError('transitEncryptRequest', 'Required parameter "transitEncryptRequest" was null or undefined when calling transitEncrypt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/encrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitEncryptRequestToJSON)(requestParameters['transitEncryptRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    transitEncrypt(name, transitMountPath, transitEncryptRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitEncryptRaw({ name: name, transitMountPath: transitMountPath, transitEncryptRequest: transitEncryptRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export named encryption or signing key
     */
    transitExportKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitExportKey().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling transitExportKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitExportKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/export/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Export named encryption or signing key
     */
    transitExportKey(name, type, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitExportKeyRaw({ name: name, type: type, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export named encryption or signing key
     */
    transitExportKeyVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitExportKeyVersion().');
            }
            if (requestParameters['type'] == null) {
                throw new runtime.RequiredError('type', 'Required parameter "type" was null or undefined when calling transitExportKeyVersion().');
            }
            if (requestParameters['version'] == null) {
                throw new runtime.RequiredError('version', 'Required parameter "version" was null or undefined when calling transitExportKeyVersion().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitExportKeyVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/export/{type}/{name}/{version}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Export named encryption or signing key
     */
    transitExportKeyVersion(name, type, version, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitExportKeyVersionRaw({ name: name, type: type, version: version, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitGenerateCmacRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateCmac().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCmac().');
            }
            if (requestParameters['transitGenerateCmacRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateCmacRequest', 'Required parameter "transitGenerateCmacRequest" was null or undefined when calling transitGenerateCmac().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/cmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateCmacRequestToJSON)(requestParameters['transitGenerateCmacRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitGenerateCmac(name, transitMountPath, transitGenerateCmacRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateCmacRaw({ name: name, transitMountPath: transitMountPath, transitGenerateCmacRequest: transitGenerateCmacRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitGenerateCmacWithMacLengthRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateCmacWithMacLength().');
            }
            if (requestParameters['urlMacLength'] == null) {
                throw new runtime.RequiredError('urlMacLength', 'Required parameter "urlMacLength" was null or undefined when calling transitGenerateCmacWithMacLength().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCmacWithMacLength().');
            }
            if (requestParameters['transitGenerateCmacWithMacLengthRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateCmacWithMacLengthRequest', 'Required parameter "transitGenerateCmacWithMacLengthRequest" was null or undefined when calling transitGenerateCmacWithMacLength().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/cmac/{name}/{url_mac_length}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"url_mac_length"}}`, encodeURIComponent(String(requestParameters['urlMacLength']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateCmacWithMacLengthRequestToJSON)(requestParameters['transitGenerateCmacWithMacLengthRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitGenerateCmacWithMacLength(name, urlMacLength, transitMountPath, transitGenerateCmacWithMacLengthRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateCmacWithMacLengthRaw({ name: name, urlMacLength: urlMacLength, transitMountPath: transitMountPath, transitGenerateCmacWithMacLengthRequest: transitGenerateCmacWithMacLengthRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitGenerateCsrForKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateCsrForKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCsrForKey().');
            }
            if (requestParameters['transitGenerateCsrForKeyRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateCsrForKeyRequest', 'Required parameter "transitGenerateCsrForKeyRequest" was null or undefined when calling transitGenerateCsrForKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/csr`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateCsrForKeyRequestToJSON)(requestParameters['transitGenerateCsrForKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitGenerateCsrForKey(name, transitMountPath, transitGenerateCsrForKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateCsrForKeyRaw({ name: name, transitMountPath: transitMountPath, transitGenerateCsrForKeyRequest: transitGenerateCsrForKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a data key
     */
    transitGenerateDataKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateDataKey().');
            }
            if (requestParameters['plaintext'] == null) {
                throw new runtime.RequiredError('plaintext', 'Required parameter "plaintext" was null or undefined when calling transitGenerateDataKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateDataKey().');
            }
            if (requestParameters['transitGenerateDataKeyRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateDataKeyRequest', 'Required parameter "transitGenerateDataKeyRequest" was null or undefined when calling transitGenerateDataKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/datakey/{plaintext}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"plaintext"}}`, encodeURIComponent(String(requestParameters['plaintext']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateDataKeyRequestToJSON)(requestParameters['transitGenerateDataKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate a data key
     */
    transitGenerateDataKey(name, plaintext, transitMountPath, transitGenerateDataKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateDataKeyRaw({ name: name, plaintext: plaintext, transitMountPath: transitMountPath, transitGenerateDataKeyRequest: transitGenerateDataKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate an HMAC for input data using the named key
     */
    transitGenerateHmacRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateHmac().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmac().');
            }
            if (requestParameters['transitGenerateHmacRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateHmacRequest', 'Required parameter "transitGenerateHmacRequest" was null or undefined when calling transitGenerateHmac().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/hmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateHmacRequestToJSON)(requestParameters['transitGenerateHmacRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate an HMAC for input data using the named key
     */
    transitGenerateHmac(name, transitMountPath, transitGenerateHmacRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateHmacRaw({ name: name, transitMountPath: transitMountPath, transitGenerateHmacRequest: transitGenerateHmacRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate an HMAC for input data using the named key
     */
    transitGenerateHmacWithAlgorithmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitGenerateHmacWithAlgorithm().');
            }
            if (requestParameters['urlalgorithm'] == null) {
                throw new runtime.RequiredError('urlalgorithm', 'Required parameter "urlalgorithm" was null or undefined when calling transitGenerateHmacWithAlgorithm().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmacWithAlgorithm().');
            }
            if (requestParameters['transitGenerateHmacWithAlgorithmRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateHmacWithAlgorithmRequest', 'Required parameter "transitGenerateHmacWithAlgorithmRequest" was null or undefined when calling transitGenerateHmacWithAlgorithm().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/hmac/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateHmacWithAlgorithmRequestToJSON)(requestParameters['transitGenerateHmacWithAlgorithmRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate an HMAC for input data using the named key
     */
    transitGenerateHmacWithAlgorithm(name, urlalgorithm, transitMountPath, transitGenerateHmacWithAlgorithmRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateHmacWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitGenerateHmacWithAlgorithmRequest: transitGenerateHmacWithAlgorithmRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandom().');
            }
            if (requestParameters['transitGenerateRandomRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateRandomRequest', 'Required parameter "transitGenerateRandomRequest" was null or undefined when calling transitGenerateRandom().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/random`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateRandomRequestToJSON)(requestParameters['transitGenerateRandomRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandom(transitMountPath, transitGenerateRandomRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateRandomRaw({ transitMountPath: transitMountPath, transitGenerateRandomRequest: transitGenerateRandomRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithBytesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlbytes'] == null) {
                throw new runtime.RequiredError('urlbytes', 'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithBytes().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithBytes().');
            }
            if (requestParameters['transitGenerateRandomWithBytesRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateRandomWithBytesRequest', 'Required parameter "transitGenerateRandomWithBytesRequest" was null or undefined when calling transitGenerateRandomWithBytes().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateRandomWithBytesRequestToJSON)(requestParameters['transitGenerateRandomWithBytesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithBytes(urlbytes, transitMountPath, transitGenerateRandomWithBytesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateRandomWithBytesRaw({ urlbytes: urlbytes, transitMountPath: transitMountPath, transitGenerateRandomWithBytesRequest: transitGenerateRandomWithBytesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSource().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSource().');
            }
            if (requestParameters['transitGenerateRandomWithSourceRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateRandomWithSourceRequest', 'Required parameter "transitGenerateRandomWithSourceRequest" was null or undefined when calling transitGenerateRandomWithSource().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateRandomWithSourceRequestToJSON)(requestParameters['transitGenerateRandomWithSourceRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithSource(source, transitMountPath, transitGenerateRandomWithSourceRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateRandomWithSourceRaw({ source: source, transitMountPath: transitMountPath, transitGenerateRandomWithSourceRequest: transitGenerateRandomWithSourceRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithSourceAndBytesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['source'] == null) {
                throw new runtime.RequiredError('source', 'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().');
            }
            if (requestParameters['urlbytes'] == null) {
                throw new runtime.RequiredError('urlbytes', 'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().');
            }
            if (requestParameters['transitGenerateRandomWithSourceAndBytesRequest'] == null) {
                throw new runtime.RequiredError('transitGenerateRandomWithSourceAndBytesRequest', 'Required parameter "transitGenerateRandomWithSourceAndBytesRequest" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitGenerateRandomWithSourceAndBytesRequestToJSON)(requestParameters['transitGenerateRandomWithSourceAndBytesRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate random bytes
     */
    transitGenerateRandomWithSourceAndBytes(source, urlbytes, transitMountPath, transitGenerateRandomWithSourceAndBytesRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitGenerateRandomWithSourceAndBytesRaw({ source: source, urlbytes: urlbytes, transitMountPath: transitMountPath, transitGenerateRandomWithSourceAndBytesRequest: transitGenerateRandomWithSourceAndBytesRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a hash sum for input data
     */
    transitHashRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitHash().');
            }
            if (requestParameters['transitHashRequest'] == null) {
                throw new runtime.RequiredError('transitHashRequest', 'Required parameter "transitHashRequest" was null or undefined when calling transitHash().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/hash`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitHashRequestToJSON)(requestParameters['transitHashRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate a hash sum for input data
     */
    transitHash(transitMountPath, transitHashRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitHashRaw({ transitMountPath: transitMountPath, transitHashRequest: transitHashRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a hash sum for input data
     */
    transitHashWithAlgorithmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['urlalgorithm'] == null) {
                throw new runtime.RequiredError('urlalgorithm', 'Required parameter "urlalgorithm" was null or undefined when calling transitHashWithAlgorithm().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitHashWithAlgorithm().');
            }
            if (requestParameters['transitHashWithAlgorithmRequest'] == null) {
                throw new runtime.RequiredError('transitHashWithAlgorithmRequest', 'Required parameter "transitHashWithAlgorithmRequest" was null or undefined when calling transitHashWithAlgorithm().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitHashWithAlgorithmRequestToJSON)(requestParameters['transitHashWithAlgorithmRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate a hash sum for input data
     */
    transitHashWithAlgorithm(urlalgorithm, transitMountPath, transitHashWithAlgorithmRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitHashWithAlgorithmRaw({ urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitHashWithAlgorithmRequest: transitHashWithAlgorithmRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Imports an externally-generated key into a new transit key
     */
    transitImportKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitImportKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitImportKey().');
            }
            if (requestParameters['transitImportKeyRequest'] == null) {
                throw new runtime.RequiredError('transitImportKeyRequest', 'Required parameter "transitImportKeyRequest" was null or undefined when calling transitImportKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitImportKeyRequestToJSON)(requestParameters['transitImportKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Imports an externally-generated key into a new transit key
     */
    transitImportKey(name, transitMountPath, transitImportKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitImportKeyRaw({ name: name, transitMountPath: transitMountPath, transitImportKeyRequest: transitImportKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Imports an externally-generated key into an existing imported key
     */
    transitImportKeyVersionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitImportKeyVersion().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitImportKeyVersion().');
            }
            if (requestParameters['transitImportKeyVersionRequest'] == null) {
                throw new runtime.RequiredError('transitImportKeyVersionRequest', 'Required parameter "transitImportKeyVersionRequest" was null or undefined when calling transitImportKeyVersion().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/import_version`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitImportKeyVersionRequestToJSON)(requestParameters['transitImportKeyVersionRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Imports an externally-generated key into an existing imported key
     */
    transitImportKeyVersion(name, transitMountPath, transitImportKeyVersionRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitImportKeyVersionRaw({ name: name, transitMountPath: transitMountPath, transitImportKeyVersionRequest: transitImportKeyVersionRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Managed named encryption keys
     */
    transitListKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitListKeys().');
            }
            if (requestParameters['list'] == null) {
                throw new runtime.RequiredError('list', 'Required parameter "list" was null or undefined when calling transitListKeys().');
            }
            const queryParameters = {};
            if (requestParameters['list'] != null) {
                queryParameters['list'] = requestParameters['list'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StandardListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Managed named encryption keys
     */
    transitListKeys(transitMountPath, list, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitListKeysRaw({ transitMountPath: transitMountPath, list: list }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the size of the active cache
     */
    transitReadCacheConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitReadCacheConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the size of the active cache
     */
    transitReadCacheConfiguration(transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitReadCacheConfigurationRaw({ transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitReadKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitReadKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitReadKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitReadKey(name, transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitReadKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitReadKeysConfigurationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitReadKeysConfiguration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitReadKeysConfiguration(transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitReadKeysConfigurationRaw({ transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the public key to use for wrapping imported keys
     */
    transitReadWrappingKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitReadWrappingKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/{transit_mount_path}/wrapping_key`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns the public key to use for wrapping imported keys
     */
    transitReadWrappingKey(transitMountPath, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitReadWrappingKeyRaw({ transitMountPath: transitMountPath }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Restore the named key
     */
    transitRestoreAndRenameKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitRestoreAndRenameKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitRestoreAndRenameKey().');
            }
            if (requestParameters['transitRestoreAndRenameKeyRequest'] == null) {
                throw new runtime.RequiredError('transitRestoreAndRenameKeyRequest', 'Required parameter "transitRestoreAndRenameKeyRequest" was null or undefined when calling transitRestoreAndRenameKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/restore/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitRestoreAndRenameKeyRequestToJSON)(requestParameters['transitRestoreAndRenameKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Restore the named key
     */
    transitRestoreAndRenameKey(name, transitMountPath, transitRestoreAndRenameKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitRestoreAndRenameKeyRaw({ name: name, transitMountPath: transitMountPath, transitRestoreAndRenameKeyRequest: transitRestoreAndRenameKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Restore the named key
     */
    transitRestoreKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitRestoreKey().');
            }
            if (requestParameters['transitRestoreKeyRequest'] == null) {
                throw new runtime.RequiredError('transitRestoreKeyRequest', 'Required parameter "transitRestoreKeyRequest" was null or undefined when calling transitRestoreKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/restore`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitRestoreKeyRequestToJSON)(requestParameters['transitRestoreKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Restore the named key
     */
    transitRestoreKey(transitMountPath, transitRestoreKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitRestoreKeyRaw({ transitMountPath: transitMountPath, transitRestoreKeyRequest: transitRestoreKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Rewrap ciphertext
     */
    transitRewrapRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitRewrap().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitRewrap().');
            }
            if (requestParameters['transitRewrapRequest'] == null) {
                throw new runtime.RequiredError('transitRewrapRequest', 'Required parameter "transitRewrapRequest" was null or undefined when calling transitRewrap().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/rewrap/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitRewrapRequestToJSON)(requestParameters['transitRewrapRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Rewrap ciphertext
     */
    transitRewrap(name, transitMountPath, transitRewrapRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitRewrapRaw({ name: name, transitMountPath: transitMountPath, transitRewrapRequest: transitRewrapRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Rotate named encryption key
     */
    transitRotateKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitRotateKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitRotateKey().');
            }
            if (requestParameters['transitRotateKeyRequest'] == null) {
                throw new runtime.RequiredError('transitRotateKeyRequest', 'Required parameter "transitRotateKeyRequest" was null or undefined when calling transitRotateKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitRotateKeyRequestToJSON)(requestParameters['transitRotateKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Rotate named encryption key
     */
    transitRotateKey(name, transitMountPath, transitRotateKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitRotateKeyRaw({ name: name, transitMountPath: transitMountPath, transitRotateKeyRequest: transitRotateKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    transitSetCertificateForKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitSetCertificateForKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitSetCertificateForKey().');
            }
            if (requestParameters['transitSetCertificateForKeyRequest'] == null) {
                throw new runtime.RequiredError('transitSetCertificateForKeyRequest', 'Required parameter "transitSetCertificateForKeyRequest" was null or undefined when calling transitSetCertificateForKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/set-certificate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitSetCertificateForKeyRequestToJSON)(requestParameters['transitSetCertificateForKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    transitSetCertificateForKey(name, transitMountPath, transitSetCertificateForKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitSetCertificateForKeyRaw({ name: name, transitMountPath: transitMountPath, transitSetCertificateForKeyRequest: transitSetCertificateForKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a signature for input data using the named key
     */
    transitSignRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitSign().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitSign().');
            }
            if (requestParameters['transitSignRequest'] == null) {
                throw new runtime.RequiredError('transitSignRequest', 'Required parameter "transitSignRequest" was null or undefined when calling transitSign().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/sign/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitSignRequestToJSON)(requestParameters['transitSignRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate a signature for input data using the named key
     */
    transitSign(name, transitMountPath, transitSignRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitSignRaw({ name: name, transitMountPath: transitMountPath, transitSignRequest: transitSignRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate a signature for input data using the named key
     */
    transitSignWithAlgorithmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitSignWithAlgorithm().');
            }
            if (requestParameters['urlalgorithm'] == null) {
                throw new runtime.RequiredError('urlalgorithm', 'Required parameter "urlalgorithm" was null or undefined when calling transitSignWithAlgorithm().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitSignWithAlgorithm().');
            }
            if (requestParameters['transitSignWithAlgorithmRequest'] == null) {
                throw new runtime.RequiredError('transitSignWithAlgorithmRequest', 'Required parameter "transitSignWithAlgorithmRequest" was null or undefined when calling transitSignWithAlgorithm().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/sign/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitSignWithAlgorithmRequestToJSON)(requestParameters['transitSignWithAlgorithmRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Generate a signature for input data using the named key
     */
    transitSignWithAlgorithm(name, urlalgorithm, transitMountPath, transitSignWithAlgorithmRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitSignWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitSignWithAlgorithmRequest: transitSignWithAlgorithmRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Trim key versions of a named key
     */
    transitTrimKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitTrimKey().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitTrimKey().');
            }
            if (requestParameters['transitTrimKeyRequest'] == null) {
                throw new runtime.RequiredError('transitTrimKeyRequest', 'Required parameter "transitTrimKeyRequest" was null or undefined when calling transitTrimKey().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/keys/{name}/trim`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitTrimKeyRequestToJSON)(requestParameters['transitTrimKeyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Trim key versions of a named key
     */
    transitTrimKey(name, transitMountPath, transitTrimKeyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitTrimKeyRaw({ name: name, transitMountPath: transitMountPath, transitTrimKeyRequest: transitTrimKeyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    transitVerifyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitVerify().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitVerify().');
            }
            if (requestParameters['transitVerifyRequest'] == null) {
                throw new runtime.RequiredError('transitVerifyRequest', 'Required parameter "transitVerifyRequest" was null or undefined when calling transitVerify().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/verify/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitVerifyRequestToJSON)(requestParameters['transitVerifyRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    transitVerify(name, transitMountPath, transitVerifyRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitVerifyRaw({ name: name, transitMountPath: transitMountPath, transitVerifyRequest: transitVerifyRequest }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    transitVerifyWithAlgorithmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling transitVerifyWithAlgorithm().');
            }
            if (requestParameters['urlalgorithm'] == null) {
                throw new runtime.RequiredError('urlalgorithm', 'Required parameter "urlalgorithm" was null or undefined when calling transitVerifyWithAlgorithm().');
            }
            if (requestParameters['transitMountPath'] == null) {
                throw new runtime.RequiredError('transitMountPath', 'Required parameter "transitMountPath" was null or undefined when calling transitVerifyWithAlgorithm().');
            }
            if (requestParameters['transitVerifyWithAlgorithmRequest'] == null) {
                throw new runtime.RequiredError('transitVerifyWithAlgorithmRequest', 'Required parameter "transitVerifyWithAlgorithmRequest" was null or undefined when calling transitVerifyWithAlgorithm().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/{transit_mount_path}/verify/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransitVerifyWithAlgorithmRequestToJSON)(requestParameters['transitVerifyWithAlgorithmRequest']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    transitVerifyWithAlgorithm(name, urlalgorithm, transitMountPath, transitVerifyWithAlgorithmRequest, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitVerifyWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitVerifyWithAlgorithmRequest: transitVerifyWithAlgorithmRequest }, initOverrides);
            return yield response.value();
        });
    }
}
exports.SecretsApi = SecretsApi;
/**
  * @export
  * @enum {string}
  */
var AliCloudListRolesListEnum;
(function (AliCloudListRolesListEnum) {
    AliCloudListRolesListEnum["TRUE"] = "true";
})(AliCloudListRolesListEnum || (exports.AliCloudListRolesListEnum = AliCloudListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AwsListRolesListEnum;
(function (AwsListRolesListEnum) {
    AwsListRolesListEnum["TRUE"] = "true";
})(AwsListRolesListEnum || (exports.AwsListRolesListEnum = AwsListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AwsListStaticRolesListEnum;
(function (AwsListStaticRolesListEnum) {
    AwsListStaticRolesListEnum["TRUE"] = "true";
})(AwsListStaticRolesListEnum || (exports.AwsListStaticRolesListEnum = AwsListStaticRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AzureListRolesListEnum;
(function (AzureListRolesListEnum) {
    AzureListRolesListEnum["TRUE"] = "true";
})(AzureListRolesListEnum || (exports.AzureListRolesListEnum = AzureListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var ConsulListRolesListEnum;
(function (ConsulListRolesListEnum) {
    ConsulListRolesListEnum["TRUE"] = "true";
})(ConsulListRolesListEnum || (exports.ConsulListRolesListEnum = ConsulListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var CubbyholeListListEnum;
(function (CubbyholeListListEnum) {
    CubbyholeListListEnum["TRUE"] = "true";
})(CubbyholeListListEnum || (exports.CubbyholeListListEnum = CubbyholeListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var DatabaseListConnectionsListEnum;
(function (DatabaseListConnectionsListEnum) {
    DatabaseListConnectionsListEnum["TRUE"] = "true";
})(DatabaseListConnectionsListEnum || (exports.DatabaseListConnectionsListEnum = DatabaseListConnectionsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var DatabaseListRolesListEnum;
(function (DatabaseListRolesListEnum) {
    DatabaseListRolesListEnum["TRUE"] = "true";
})(DatabaseListRolesListEnum || (exports.DatabaseListRolesListEnum = DatabaseListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var DatabaseListStaticRolesListEnum;
(function (DatabaseListStaticRolesListEnum) {
    DatabaseListStaticRolesListEnum["TRUE"] = "true";
})(DatabaseListStaticRolesListEnum || (exports.DatabaseListStaticRolesListEnum = DatabaseListStaticRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudKmsListKeysListEnum;
(function (GoogleCloudKmsListKeysListEnum) {
    GoogleCloudKmsListKeysListEnum["TRUE"] = "true";
})(GoogleCloudKmsListKeysListEnum || (exports.GoogleCloudKmsListKeysListEnum = GoogleCloudKmsListKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListImpersonatedAccountsListEnum;
(function (GoogleCloudListImpersonatedAccountsListEnum) {
    GoogleCloudListImpersonatedAccountsListEnum["TRUE"] = "true";
})(GoogleCloudListImpersonatedAccountsListEnum || (exports.GoogleCloudListImpersonatedAccountsListEnum = GoogleCloudListImpersonatedAccountsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListImpersonatedAccounts2ListEnum;
(function (GoogleCloudListImpersonatedAccounts2ListEnum) {
    GoogleCloudListImpersonatedAccounts2ListEnum["TRUE"] = "true";
})(GoogleCloudListImpersonatedAccounts2ListEnum || (exports.GoogleCloudListImpersonatedAccounts2ListEnum = GoogleCloudListImpersonatedAccounts2ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListRolesetsListEnum;
(function (GoogleCloudListRolesetsListEnum) {
    GoogleCloudListRolesetsListEnum["TRUE"] = "true";
})(GoogleCloudListRolesetsListEnum || (exports.GoogleCloudListRolesetsListEnum = GoogleCloudListRolesetsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListRolesets2ListEnum;
(function (GoogleCloudListRolesets2ListEnum) {
    GoogleCloudListRolesets2ListEnum["TRUE"] = "true";
})(GoogleCloudListRolesets2ListEnum || (exports.GoogleCloudListRolesets2ListEnum = GoogleCloudListRolesets2ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListStaticAccountsListEnum;
(function (GoogleCloudListStaticAccountsListEnum) {
    GoogleCloudListStaticAccountsListEnum["TRUE"] = "true";
})(GoogleCloudListStaticAccountsListEnum || (exports.GoogleCloudListStaticAccountsListEnum = GoogleCloudListStaticAccountsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var GoogleCloudListStaticAccounts2ListEnum;
(function (GoogleCloudListStaticAccounts2ListEnum) {
    GoogleCloudListStaticAccounts2ListEnum["TRUE"] = "true";
})(GoogleCloudListStaticAccounts2ListEnum || (exports.GoogleCloudListStaticAccounts2ListEnum = GoogleCloudListStaticAccounts2ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var KubernetesListRolesListEnum;
(function (KubernetesListRolesListEnum) {
    KubernetesListRolesListEnum["TRUE"] = "true";
})(KubernetesListRolesListEnum || (exports.KubernetesListRolesListEnum = KubernetesListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var KvV1ListListEnum;
(function (KvV1ListListEnum) {
    KvV1ListListEnum["TRUE"] = "true";
})(KvV1ListListEnum || (exports.KvV1ListListEnum = KvV1ListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var KvV2ListListEnum;
(function (KvV2ListListEnum) {
    KvV2ListListEnum["TRUE"] = "true";
})(KvV2ListListEnum || (exports.KvV2ListListEnum = KvV2ListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapLibraryListListEnum;
(function (LdapLibraryListListEnum) {
    LdapLibraryListListEnum["TRUE"] = "true";
})(LdapLibraryListListEnum || (exports.LdapLibraryListListEnum = LdapLibraryListListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapLibraryListLibraryPathListEnum;
(function (LdapLibraryListLibraryPathListEnum) {
    LdapLibraryListLibraryPathListEnum["TRUE"] = "true";
})(LdapLibraryListLibraryPathListEnum || (exports.LdapLibraryListLibraryPathListEnum = LdapLibraryListLibraryPathListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapLibraryListLibraryPath0ListEnum;
(function (LdapLibraryListLibraryPath0ListEnum) {
    LdapLibraryListLibraryPath0ListEnum["TRUE"] = "true";
})(LdapLibraryListLibraryPath0ListEnum || (exports.LdapLibraryListLibraryPath0ListEnum = LdapLibraryListLibraryPath0ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListDynamicRolesListEnum;
(function (LdapListDynamicRolesListEnum) {
    LdapListDynamicRolesListEnum["TRUE"] = "true";
})(LdapListDynamicRolesListEnum || (exports.LdapListDynamicRolesListEnum = LdapListDynamicRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListRolePathListEnum;
(function (LdapListRolePathListEnum) {
    LdapListRolePathListEnum["TRUE"] = "true";
})(LdapListRolePathListEnum || (exports.LdapListRolePathListEnum = LdapListRolePathListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListRolePath0ListEnum;
(function (LdapListRolePath0ListEnum) {
    LdapListRolePath0ListEnum["TRUE"] = "true";
})(LdapListRolePath0ListEnum || (exports.LdapListRolePath0ListEnum = LdapListRolePath0ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListStaticRolePathListEnum;
(function (LdapListStaticRolePathListEnum) {
    LdapListStaticRolePathListEnum["TRUE"] = "true";
})(LdapListStaticRolePathListEnum || (exports.LdapListStaticRolePathListEnum = LdapListStaticRolePathListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListStaticRolePath0ListEnum;
(function (LdapListStaticRolePath0ListEnum) {
    LdapListStaticRolePath0ListEnum["TRUE"] = "true";
})(LdapListStaticRolePath0ListEnum || (exports.LdapListStaticRolePath0ListEnum = LdapListStaticRolePath0ListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var LdapListStaticRolesListEnum;
(function (LdapListStaticRolesListEnum) {
    LdapListStaticRolesListEnum["TRUE"] = "true";
})(LdapListStaticRolesListEnum || (exports.LdapListStaticRolesListEnum = LdapListStaticRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var MongoDbAtlasListRolesListEnum;
(function (MongoDbAtlasListRolesListEnum) {
    MongoDbAtlasListRolesListEnum["TRUE"] = "true";
})(MongoDbAtlasListRolesListEnum || (exports.MongoDbAtlasListRolesListEnum = MongoDbAtlasListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var NomadListRolesListEnum;
(function (NomadListRolesListEnum) {
    NomadListRolesListEnum["TRUE"] = "true";
})(NomadListRolesListEnum || (exports.NomadListRolesListEnum = NomadListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiGenerateIntermediateExportedEnum;
(function (PkiGenerateIntermediateExportedEnum) {
    PkiGenerateIntermediateExportedEnum["INTERNAL"] = "internal";
    PkiGenerateIntermediateExportedEnum["EXTERNAL"] = "external";
    PkiGenerateIntermediateExportedEnum["KMS"] = "kms";
})(PkiGenerateIntermediateExportedEnum || (exports.PkiGenerateIntermediateExportedEnum = PkiGenerateIntermediateExportedEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiGenerateRootExportedEnum;
(function (PkiGenerateRootExportedEnum) {
    PkiGenerateRootExportedEnum["INTERNAL"] = "internal";
    PkiGenerateRootExportedEnum["EXTERNAL"] = "external";
    PkiGenerateRootExportedEnum["KMS"] = "kms";
})(PkiGenerateRootExportedEnum || (exports.PkiGenerateRootExportedEnum = PkiGenerateRootExportedEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiIssuersGenerateIntermediateExportedEnum;
(function (PkiIssuersGenerateIntermediateExportedEnum) {
    PkiIssuersGenerateIntermediateExportedEnum["INTERNAL"] = "internal";
    PkiIssuersGenerateIntermediateExportedEnum["EXTERNAL"] = "external";
    PkiIssuersGenerateIntermediateExportedEnum["KMS"] = "kms";
})(PkiIssuersGenerateIntermediateExportedEnum || (exports.PkiIssuersGenerateIntermediateExportedEnum = PkiIssuersGenerateIntermediateExportedEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiIssuersGenerateRootExportedEnum;
(function (PkiIssuersGenerateRootExportedEnum) {
    PkiIssuersGenerateRootExportedEnum["INTERNAL"] = "internal";
    PkiIssuersGenerateRootExportedEnum["EXTERNAL"] = "external";
    PkiIssuersGenerateRootExportedEnum["KMS"] = "kms";
})(PkiIssuersGenerateRootExportedEnum || (exports.PkiIssuersGenerateRootExportedEnum = PkiIssuersGenerateRootExportedEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListAcmeAccountKeysListEnum;
(function (PkiListAcmeAccountKeysListEnum) {
    PkiListAcmeAccountKeysListEnum["TRUE"] = "true";
})(PkiListAcmeAccountKeysListEnum || (exports.PkiListAcmeAccountKeysListEnum = PkiListAcmeAccountKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListCertMetadataListEnum;
(function (PkiListCertMetadataListEnum) {
    PkiListCertMetadataListEnum["TRUE"] = "true";
})(PkiListCertMetadataListEnum || (exports.PkiListCertMetadataListEnum = PkiListCertMetadataListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListCertsListEnum;
(function (PkiListCertsListEnum) {
    PkiListCertsListEnum["TRUE"] = "true";
})(PkiListCertsListEnum || (exports.PkiListCertsListEnum = PkiListCertsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListCertsRevocationQueueListEnum;
(function (PkiListCertsRevocationQueueListEnum) {
    PkiListCertsRevocationQueueListEnum["TRUE"] = "true";
})(PkiListCertsRevocationQueueListEnum || (exports.PkiListCertsRevocationQueueListEnum = PkiListCertsRevocationQueueListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListEabKeysListEnum;
(function (PkiListEabKeysListEnum) {
    PkiListEabKeysListEnum["TRUE"] = "true";
})(PkiListEabKeysListEnum || (exports.PkiListEabKeysListEnum = PkiListEabKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListIssuersListEnum;
(function (PkiListIssuersListEnum) {
    PkiListIssuersListEnum["TRUE"] = "true";
})(PkiListIssuersListEnum || (exports.PkiListIssuersListEnum = PkiListIssuersListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListKeysListEnum;
(function (PkiListKeysListEnum) {
    PkiListKeysListEnum["TRUE"] = "true";
})(PkiListKeysListEnum || (exports.PkiListKeysListEnum = PkiListKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListRevokedCertsListEnum;
(function (PkiListRevokedCertsListEnum) {
    PkiListRevokedCertsListEnum["TRUE"] = "true";
})(PkiListRevokedCertsListEnum || (exports.PkiListRevokedCertsListEnum = PkiListRevokedCertsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListRolesListEnum;
(function (PkiListRolesListEnum) {
    PkiListRolesListEnum["TRUE"] = "true";
})(PkiListRolesListEnum || (exports.PkiListRolesListEnum = PkiListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiListUnifiedRevokedCertsListEnum;
(function (PkiListUnifiedRevokedCertsListEnum) {
    PkiListUnifiedRevokedCertsListEnum["TRUE"] = "true";
})(PkiListUnifiedRevokedCertsListEnum || (exports.PkiListUnifiedRevokedCertsListEnum = PkiListUnifiedRevokedCertsListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var PkiRotateRootExportedEnum;
(function (PkiRotateRootExportedEnum) {
    PkiRotateRootExportedEnum["INTERNAL"] = "internal";
    PkiRotateRootExportedEnum["EXTERNAL"] = "external";
    PkiRotateRootExportedEnum["KMS"] = "kms";
})(PkiRotateRootExportedEnum || (exports.PkiRotateRootExportedEnum = PkiRotateRootExportedEnum = {}));
/**
  * @export
  * @enum {string}
  */
var RabbitMqListRolesListEnum;
(function (RabbitMqListRolesListEnum) {
    RabbitMqListRolesListEnum["TRUE"] = "true";
})(RabbitMqListRolesListEnum || (exports.RabbitMqListRolesListEnum = RabbitMqListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var SshListRolesListEnum;
(function (SshListRolesListEnum) {
    SshListRolesListEnum["TRUE"] = "true";
})(SshListRolesListEnum || (exports.SshListRolesListEnum = SshListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var TerraformCloudListRolesListEnum;
(function (TerraformCloudListRolesListEnum) {
    TerraformCloudListRolesListEnum["TRUE"] = "true";
})(TerraformCloudListRolesListEnum || (exports.TerraformCloudListRolesListEnum = TerraformCloudListRolesListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var TotpListKeysListEnum;
(function (TotpListKeysListEnum) {
    TotpListKeysListEnum["TRUE"] = "true";
})(TotpListKeysListEnum || (exports.TotpListKeysListEnum = TotpListKeysListEnum = {}));
/**
  * @export
  * @enum {string}
  */
var TransitListKeysListEnum;
(function (TransitListKeysListEnum) {
    TransitListKeysListEnum["TRUE"] = "true";
})(TransitListKeysListEnum || (exports.TransitListKeysListEnum = TransitListKeysListEnum = {}));
