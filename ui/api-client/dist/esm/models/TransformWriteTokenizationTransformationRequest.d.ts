/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransformWriteTokenizationTransformationRequest
 */
export interface TransformWriteTokenizationTransformationRequest {
    /**
     * Specifies a list of allowed roles that this transformation can be assigned to. A role using this transformation must exist in this list in order for encode and decode operations to properly function.
     * @type {Array<string>}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    allowedRoles?: Array<string>;
    /**
     * Specifies whether to use convergent tokenization, which produces consistent tokens given consistent plaintext and expiration inputs.
     * @type {boolean}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    convergent?: boolean;
    /**
     * If false, deletion of this transform is prevented.
     * @type {boolean}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    deletionAllowed?: boolean;
    /**
     * Specifies the mapping mode for stored tokenization values. 'default', the default is strongly recommended for high security. 'exportable' allows for all plaintexts to be decoded simultaneously in an emergency.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    mappingMode?: string;
    /**
     * The maximum TTL of a token. If 0 or unspecified, tokens may have no expiration.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    maxTtl?: string;
    /**
     * The store or stores which will contain tokenized state.
     * @type {Array<string>}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    stores?: Array<string>;
    /**
     * Specifies the template name to use for matching value on encode and decode operations when using this transformation.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    template?: string;
}
/**
 * Check if a given object implements the TransformWriteTokenizationTransformationRequest interface.
 */
export declare function instanceOfTransformWriteTokenizationTransformationRequest(value: object): value is TransformWriteTokenizationTransformationRequest;
export declare function TransformWriteTokenizationTransformationRequestFromJSON(json: any): TransformWriteTokenizationTransformationRequest;
export declare function TransformWriteTokenizationTransformationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformWriteTokenizationTransformationRequest;
export declare function TransformWriteTokenizationTransformationRequestToJSON(json: any): TransformWriteTokenizationTransformationRequest;
export declare function TransformWriteTokenizationTransformationRequestToJSONTyped(value?: TransformWriteTokenizationTransformationRequest | null, ignoreDiscriminator?: boolean): any;
