/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AppRoleWriteRoleRequest
 */
export interface AppRoleWriteRoleRequest {
    /**
     * Impose secret_id to be presented when logging in using this role. Defaults to 'true'.
     * @type {boolean}
     * @memberof AppRoleWriteRoleRequest
     */
    bindSecretId?: boolean;
    /**
     * Use "secret_id_bound_cidrs" instead.
     * @type {Array<string>}
     * @memberof AppRoleWriteRoleRequest
     * @deprecated
     */
    boundCidrList?: Array<string>;
    /**
     * If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
     * @type {boolean}
     * @memberof AppRoleWriteRoleRequest
     */
    localSecretIds?: boolean;
    /**
     * Use "token_period" instead. If this and "token_period" are both specified, only "token_period" will be used.
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     * @deprecated
     */
    period?: string;
    /**
     * Use "token_policies" instead. If this and "token_policies" are both specified, only "token_policies" will be used.
     * @type {Array<string>}
     * @memberof AppRoleWriteRoleRequest
     * @deprecated
     */
    policies?: Array<string>;
    /**
     * Identifier of the role. Defaults to a UUID.
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    roleId?: string;
    /**
     * Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can perform the login operation.
     * @type {Array<string>}
     * @memberof AppRoleWriteRoleRequest
     */
    secretIdBoundCidrs?: Array<string>;
    /**
     * Number of times a SecretID can access the role, after which the SecretID will expire. Defaults to 0 meaning that the the secret_id is of unlimited use.
     * @type {number}
     * @memberof AppRoleWriteRoleRequest
     */
    secretIdNumUses?: number;
    /**
     * Duration in seconds after which the issued SecretID should expire. Defaults to 0, meaning no expiration.
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    secretIdTtl?: string;
    /**
     * Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
     * @type {Array<string>}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenBoundCidrs?: Array<string>;
    /**
     * If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenExplicitMaxTtl?: string;
    /**
     * The maximum lifetime of the generated token
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenMaxTtl?: string;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     * @type {boolean}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenNoDefaultPolicy?: boolean;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     * @type {number}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenNumUses?: number;
    /**
     * If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. "24h").
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenPeriod?: string;
    /**
     * Comma-separated list of policies
     * @type {Array<string>}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenPolicies?: Array<string>;
    /**
     * The initial ttl of the token to generate
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenTtl?: string;
    /**
     * The type of token to generate, service or batch
     * @type {string}
     * @memberof AppRoleWriteRoleRequest
     */
    tokenType?: string;
}
/**
 * Check if a given object implements the AppRoleWriteRoleRequest interface.
 */
export declare function instanceOfAppRoleWriteRoleRequest(value: object): value is AppRoleWriteRoleRequest;
export declare function AppRoleWriteRoleRequestFromJSON(json: any): AppRoleWriteRoleRequest;
export declare function AppRoleWriteRoleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppRoleWriteRoleRequest;
export declare function AppRoleWriteRoleRequestToJSON(json: any): AppRoleWriteRoleRequest;
export declare function AppRoleWriteRoleRequestToJSONTyped(value?: AppRoleWriteRoleRequest | null, ignoreDiscriminator?: boolean): any;
