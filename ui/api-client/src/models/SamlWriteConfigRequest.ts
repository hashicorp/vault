/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SamlWriteConfigRequest
 */
export interface SamlWriteConfigRequest {
    /**
     * The Assertion Consumer Service URLs to which the responses from the Identity Provider will be sent. Must be well-formatted URLs. A warning will be provided if any of the given URLs are not TLS protected.
     * @type {Array<string>}
     * @memberof SamlWriteConfigRequest
     */
    acsUrls: Array<string>;
    /**
     * The role to use if no role is provided during login. If not set, a role is required during login.
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    defaultRole?: string;
    /**
     * The entity ID of this authentication method as a SAML Service Provider
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    entityId: string;
    /**
     * The PEM-encoded certificate of the Identity Provider used to verify response and assertion signatures. Mutually exclusive with 'idp_metadata_url'.
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    idpCert?: string;
    /**
     * The entity ID of the Identity Provider. Mutually exclusive with 'idp_metadata_url'.
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    idpEntityId?: string;
    /**
     * The metadata URL of the Identity Provider. Mutually exclusive with 'idp_sso_url', 'idp_issuer' and 'idp_cert'. Must be a well-formatted URL.
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    idpMetadataUrl?: string;
    /**
     * The SSO URL of the Identity Provider. Mutually exclusive with 'idp_metadata_url'. Must be a well-formatted URL.
     * @type {string}
     * @memberof SamlWriteConfigRequest
     */
    idpSsoUrl?: string;
    /**
     * Enables validation of signature for at least assertion in the SAML response. If IDP allows signing both response and assertion, then recommendation is to opt for validating signatures of both by enabling individual options
     * @type {boolean}
     * @memberof SamlWriteConfigRequest
     */
    validateAssertionSignature?: boolean;
    /**
     * Enables validation of signature for at least response in the SAML response. If IDP allows signing both response and assertion, then recommendation is to opt for validating signatures of both by enabling individual options
     * @type {boolean}
     * @memberof SamlWriteConfigRequest
     */
    validateResponseSignature?: boolean;
    /**
     * Log additional information during the SAML exchange. The user data will be logged when debug-level logging is active and the full SAML response will be logged when trace-level logging is active
     * @type {boolean}
     * @memberof SamlWriteConfigRequest
     */
    verboseLogging?: boolean;
}

/**
 * Check if a given object implements the SamlWriteConfigRequest interface.
 */
export function instanceOfSamlWriteConfigRequest(value: object): value is SamlWriteConfigRequest {
    if (!('acsUrls' in value) || value['acsUrls'] === undefined) return false;
    if (!('entityId' in value) || value['entityId'] === undefined) return false;
    return true;
}

export function SamlWriteConfigRequestFromJSON(json: any): SamlWriteConfigRequest {
    return SamlWriteConfigRequestFromJSONTyped(json, false);
}

export function SamlWriteConfigRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SamlWriteConfigRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'acsUrls': json['acs_urls'],
        'defaultRole': json['default_role'] == null ? undefined : json['default_role'],
        'entityId': json['entity_id'],
        'idpCert': json['idp_cert'] == null ? undefined : json['idp_cert'],
        'idpEntityId': json['idp_entity_id'] == null ? undefined : json['idp_entity_id'],
        'idpMetadataUrl': json['idp_metadata_url'] == null ? undefined : json['idp_metadata_url'],
        'idpSsoUrl': json['idp_sso_url'] == null ? undefined : json['idp_sso_url'],
        'validateAssertionSignature': json['validate_assertion_signature'] == null ? undefined : json['validate_assertion_signature'],
        'validateResponseSignature': json['validate_response_signature'] == null ? undefined : json['validate_response_signature'],
        'verboseLogging': json['verbose_logging'] == null ? undefined : json['verbose_logging'],
    };
}

export function SamlWriteConfigRequestToJSON(json: any): SamlWriteConfigRequest {
    return SamlWriteConfigRequestToJSONTyped(json, false);
}

export function SamlWriteConfigRequestToJSONTyped(value?: SamlWriteConfigRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'acs_urls': value['acsUrls'],
        'default_role': value['defaultRole'],
        'entity_id': value['entityId'],
        'idp_cert': value['idpCert'],
        'idp_entity_id': value['idpEntityId'],
        'idp_metadata_url': value['idpMetadataUrl'],
        'idp_sso_url': value['idpSsoUrl'],
        'validate_assertion_signature': value['validateAssertionSignature'],
        'validate_response_signature': value['validateResponseSignature'],
        'verbose_logging': value['verboseLogging'],
    };
}

