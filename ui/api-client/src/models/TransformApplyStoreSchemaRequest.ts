/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformApplyStoreSchemaRequest
 */
export interface TransformApplyStoreSchemaRequest {
    /**
     * For the `sql` store type, the password to use in populating the connection string for this operation.
     * @type {string}
     * @memberof TransformApplyStoreSchemaRequest
     */
    password?: string;
    /**
     * The transformation type to configure the store to handle.
     * @type {string}
     * @memberof TransformApplyStoreSchemaRequest
     */
    transformationType?: string;
    /**
     * For the `sql` store type, the username to use in populating the connection string for this operation.
     * @type {string}
     * @memberof TransformApplyStoreSchemaRequest
     */
    username?: string;
}

/**
 * Check if a given object implements the TransformApplyStoreSchemaRequest interface.
 */
export function instanceOfTransformApplyStoreSchemaRequest(value: object): value is TransformApplyStoreSchemaRequest {
    return true;
}

export function TransformApplyStoreSchemaRequestFromJSON(json: any): TransformApplyStoreSchemaRequest {
    return TransformApplyStoreSchemaRequestFromJSONTyped(json, false);
}

export function TransformApplyStoreSchemaRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformApplyStoreSchemaRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'password': json['password'] == null ? undefined : json['password'],
        'transformationType': json['transformation_type'] == null ? undefined : json['transformation_type'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function TransformApplyStoreSchemaRequestToJSON(json: any): TransformApplyStoreSchemaRequest {
    return TransformApplyStoreSchemaRequestToJSONTyped(json, false);
}

export function TransformApplyStoreSchemaRequestToJSONTyped(value?: TransformApplyStoreSchemaRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'password': value['password'],
        'transformation_type': value['transformationType'],
        'username': value['username'],
    };
}

