/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PkiConfigureExternalPolicyResponse
 */
export interface PkiConfigureExternalPolicyResponse {
    /**
     * Whether the external validation engine is enabled at all for this mount
     * @type {boolean}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    enabled?: boolean;
    /**
     * A JMESPath search string that will extract the entity meta data to be sent to the CIEPS service. If blank, none of the entity metadata will be sent to the service.
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    entityJmespath?: string;
    /**
     * Timestamp of the last update of the external policy engine configuration, (empty if never configured)
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    externalServiceLastUpdated?: string;
    /**
     * The URL where the external policy service is accessible to vault
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    externalServiceUrl?: string;
    /**
     * Has the current user configuration been successfully used since the last update
     * @type {boolean}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    externalServiceValidated?: boolean;
    /**
     * A JMESPath search string that will extract the entity group information to be sent to the CIEPS service. If blank, none of the group entity metadata will be sent to the service.
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    groupJmespath?: string;
    /**
     * Timestamp of the last successful request with the policy engine (empty if no request has succeeded on this mount)
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    lastSuccessfulRequest?: string;
    /**
     * This is how long any particular request should wait for a timeout
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    timeout?: string;
    /**
     * If this is set, vault will trust any leaf-certificate issued by this certificate to be the external policy service
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    trustedCa?: string;
    /**
     * This is the PEM of the leaf certificate(s) that vault will expect to do certificate pinning
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    trustedLeafCertificateBundle?: string;
    /**
     * The vault client certificate used to authenticate vault to the external policy engine
     * @type {string}
     * @memberof PkiConfigureExternalPolicyResponse
     */
    vaultClientCertBundleNoKeys?: string;
}

/**
 * Check if a given object implements the PkiConfigureExternalPolicyResponse interface.
 */
export function instanceOfPkiConfigureExternalPolicyResponse(value: object): value is PkiConfigureExternalPolicyResponse {
    return true;
}

export function PkiConfigureExternalPolicyResponseFromJSON(json: any): PkiConfigureExternalPolicyResponse {
    return PkiConfigureExternalPolicyResponseFromJSONTyped(json, false);
}

export function PkiConfigureExternalPolicyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PkiConfigureExternalPolicyResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'entityJmespath': json['entity_jmespath'] == null ? undefined : json['entity_jmespath'],
        'externalServiceLastUpdated': json['external_service_last_updated'] == null ? undefined : json['external_service_last_updated'],
        'externalServiceUrl': json['external_service_url'] == null ? undefined : json['external_service_url'],
        'externalServiceValidated': json['external_service_validated'] == null ? undefined : json['external_service_validated'],
        'groupJmespath': json['group_jmespath'] == null ? undefined : json['group_jmespath'],
        'lastSuccessfulRequest': json['last_successful_request'] == null ? undefined : json['last_successful_request'],
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'trustedCa': json['trusted_ca'] == null ? undefined : json['trusted_ca'],
        'trustedLeafCertificateBundle': json['trusted_leaf_certificate_bundle'] == null ? undefined : json['trusted_leaf_certificate_bundle'],
        'vaultClientCertBundleNoKeys': json['vault_client_cert_bundle_no_keys'] == null ? undefined : json['vault_client_cert_bundle_no_keys'],
    };
}

export function PkiConfigureExternalPolicyResponseToJSON(json: any): PkiConfigureExternalPolicyResponse {
    return PkiConfigureExternalPolicyResponseToJSONTyped(json, false);
}

export function PkiConfigureExternalPolicyResponseToJSONTyped(value?: PkiConfigureExternalPolicyResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'enabled': value['enabled'],
        'entity_jmespath': value['entityJmespath'],
        'external_service_last_updated': value['externalServiceLastUpdated'],
        'external_service_url': value['externalServiceUrl'],
        'external_service_validated': value['externalServiceValidated'],
        'group_jmespath': value['groupJmespath'],
        'last_successful_request': value['lastSuccessfulRequest'],
        'timeout': value['timeout'],
        'trusted_ca': value['trustedCa'],
        'trusted_leaf_certificate_bundle': value['trustedLeafCertificateBundle'],
        'vault_client_cert_bundle_no_keys': value['vaultClientCertBundleNoKeys'],
    };
}

