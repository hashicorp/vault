/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformCreateTokenizationTransformationWithImportedKeysRequest
 */
export interface TransformCreateTokenizationTransformationWithImportedKeysRequest {
    /**
     * True if the imported key may be rotated within Vault; false otherwise.
     * @type {boolean}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    allowRotation?: boolean;
    /**
     * Specifies a list of allowed roles that this transformation can be assigned to. A role using this transformation must exist in this list in order for encode and decode operations to properly function.
     * @type {Array<string>}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    allowedRoles?: Array<string>;
    /**
     * The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key.
     * @type {string}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    ciphertext?: string;
    /**
     * The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of "SHA1", "SHA224", "SHA256" (default), "SHA384", or "SHA512"
     * @type {string}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    hashFunction?: string;
    /**
     * Specifies the mapping mode for stored tokenization values. 'default', the default is strongly recommended for high security. 'exportable' allows for all plaintexts to be decoded simultaneously in an emergency.
     * @type {string}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    mappingMode?: string;
    /**
     * The maximum TTL of a token. If 0 or unspecified, tokens may have no expiration.
     * @type {string}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    maxTtl?: string;
    /**
     * The store or stores which will contain tokenized state.
     * @type {Array<string>}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    stores?: Array<string>;
    /**
     * Specifies the template name to use for matching value on encode and decode operations when using this transformation.
     * @type {string}
     * @memberof TransformCreateTokenizationTransformationWithImportedKeysRequest
     */
    template?: string;
}

/**
 * Check if a given object implements the TransformCreateTokenizationTransformationWithImportedKeysRequest interface.
 */
export function instanceOfTransformCreateTokenizationTransformationWithImportedKeysRequest(value: object): value is TransformCreateTokenizationTransformationWithImportedKeysRequest {
    return true;
}

export function TransformCreateTokenizationTransformationWithImportedKeysRequestFromJSON(json: any): TransformCreateTokenizationTransformationWithImportedKeysRequest {
    return TransformCreateTokenizationTransformationWithImportedKeysRequestFromJSONTyped(json, false);
}

export function TransformCreateTokenizationTransformationWithImportedKeysRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformCreateTokenizationTransformationWithImportedKeysRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowRotation': json['allow_rotation'] == null ? undefined : json['allow_rotation'],
        'allowedRoles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'ciphertext': json['ciphertext'] == null ? undefined : json['ciphertext'],
        'hashFunction': json['hash_function'] == null ? undefined : json['hash_function'],
        'mappingMode': json['mapping_mode'] == null ? undefined : json['mapping_mode'],
        'maxTtl': json['max_ttl'] == null ? undefined : json['max_ttl'],
        'stores': json['stores'] == null ? undefined : json['stores'],
        'template': json['template'] == null ? undefined : json['template'],
    };
}

export function TransformCreateTokenizationTransformationWithImportedKeysRequestToJSON(json: any): TransformCreateTokenizationTransformationWithImportedKeysRequest {
    return TransformCreateTokenizationTransformationWithImportedKeysRequestToJSONTyped(json, false);
}

export function TransformCreateTokenizationTransformationWithImportedKeysRequestToJSONTyped(value?: TransformCreateTokenizationTransformationWithImportedKeysRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allow_rotation': value['allowRotation'],
        'allowed_roles': value['allowedRoles'],
        'ciphertext': value['ciphertext'],
        'hash_function': value['hashFunction'],
        'mapping_mode': value['mappingMode'],
        'max_ttl': value['maxTtl'],
        'stores': value['stores'],
        'template': value['template'],
    };
}

