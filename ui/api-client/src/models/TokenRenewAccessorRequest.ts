/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenRenewAccessorRequest
 */
export interface TokenRenewAccessorRequest {
    /**
     * Accessor of the token to renew (request body)
     * @type {string}
     * @memberof TokenRenewAccessorRequest
     */
    accessor?: string;
    /**
     * The desired increment in seconds to the token expiration
     * @type {string}
     * @memberof TokenRenewAccessorRequest
     */
    increment?: string;
}

/**
 * Check if a given object implements the TokenRenewAccessorRequest interface.
 */
export function instanceOfTokenRenewAccessorRequest(value: object): value is TokenRenewAccessorRequest {
    return true;
}

export function TokenRenewAccessorRequestFromJSON(json: any): TokenRenewAccessorRequest {
    return TokenRenewAccessorRequestFromJSONTyped(json, false);
}

export function TokenRenewAccessorRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRenewAccessorRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'accessor': json['accessor'] == null ? undefined : json['accessor'],
        'increment': json['increment'] == null ? undefined : json['increment'],
    };
}

export function TokenRenewAccessorRequestToJSON(json: any): TokenRenewAccessorRequest {
    return TokenRenewAccessorRequestToJSONTyped(json, false);
}

export function TokenRenewAccessorRequestToJSONTyped(value?: TokenRenewAccessorRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessor': value['accessor'],
        'increment': value['increment'],
    };
}

