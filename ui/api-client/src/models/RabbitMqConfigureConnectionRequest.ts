/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RabbitMqConfigureConnectionRequest
 */
export interface RabbitMqConfigureConnectionRequest {
    /**
     * RabbitMQ Management URI
     * @type {string}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    connectionUri?: string;
    /**
     * Password of the provided RabbitMQ management user
     * @type {string}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    password?: string;
    /**
     * Name of the password policy to use to generate passwords for dynamic credentials.
     * @type {string}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    passwordPolicy?: string;
    /**
     * Username of a RabbitMQ management administrator
     * @type {string}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    username?: string;
    /**
     * Template describing how dynamic usernames are generated.
     * @type {string}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    usernameTemplate?: string;
    /**
     * If set, connection_uri is verified by actually connecting to the RabbitMQ management API
     * @type {boolean}
     * @memberof RabbitMqConfigureConnectionRequest
     */
    verifyConnection?: boolean;
}

/**
 * Check if a given object implements the RabbitMqConfigureConnectionRequest interface.
 */
export function instanceOfRabbitMqConfigureConnectionRequest(value: object): value is RabbitMqConfigureConnectionRequest {
    return true;
}

export function RabbitMqConfigureConnectionRequestFromJSON(json: any): RabbitMqConfigureConnectionRequest {
    return RabbitMqConfigureConnectionRequestFromJSONTyped(json, false);
}

export function RabbitMqConfigureConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RabbitMqConfigureConnectionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'connectionUri': json['connection_uri'] == null ? undefined : json['connection_uri'],
        'password': json['password'] == null ? undefined : json['password'],
        'passwordPolicy': json['password_policy'] == null ? undefined : json['password_policy'],
        'username': json['username'] == null ? undefined : json['username'],
        'usernameTemplate': json['username_template'] == null ? undefined : json['username_template'],
        'verifyConnection': json['verify_connection'] == null ? undefined : json['verify_connection'],
    };
}

export function RabbitMqConfigureConnectionRequestToJSON(json: any): RabbitMqConfigureConnectionRequest {
    return RabbitMqConfigureConnectionRequestToJSONTyped(json, false);
}

export function RabbitMqConfigureConnectionRequestToJSONTyped(value?: RabbitMqConfigureConnectionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'connection_uri': value['connectionUri'],
        'password': value['password'],
        'password_policy': value['passwordPolicy'],
        'username': value['username'],
        'username_template': value['usernameTemplate'],
        'verify_connection': value['verifyConnection'],
    };
}

