/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MountsReadConfigurationResponse
 */
export interface MountsReadConfigurationResponse {
    /**
     * 
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    accessor?: string;
    /**
     * Configuration for this mount, such as default_lease_ttl and max_lease_ttl.
     * @type {object}
     * @memberof MountsReadConfigurationResponse
     */
    config?: object;
    /**
     * 
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    deprecationStatus?: string;
    /**
     * User-friendly description for this mount.
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MountsReadConfigurationResponse
     */
    externalEntropyAccess?: boolean;
    /**
     * Mark the mount as a local mount, which is not replicated and is unaffected by replication.
     * @type {boolean}
     * @memberof MountsReadConfigurationResponse
     */
    local?: boolean;
    /**
     * The options to pass into the backend. Should be a json object with string keys and values.
     * @type {object}
     * @memberof MountsReadConfigurationResponse
     */
    options?: object;
    /**
     * The semantic version of the plugin to use, or image tag if oci_image is provided.
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    pluginVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    runningPluginVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    runningSha256?: string;
    /**
     * Whether to turn on seal wrapping for the mount.
     * @type {boolean}
     * @memberof MountsReadConfigurationResponse
     */
    sealWrap?: boolean;
    /**
     * The type of the backend. Example: "passthrough"
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof MountsReadConfigurationResponse
     */
    uuid?: string;
}

/**
 * Check if a given object implements the MountsReadConfigurationResponse interface.
 */
export function instanceOfMountsReadConfigurationResponse(value: object): value is MountsReadConfigurationResponse {
    return true;
}

export function MountsReadConfigurationResponseFromJSON(json: any): MountsReadConfigurationResponse {
    return MountsReadConfigurationResponseFromJSONTyped(json, false);
}

export function MountsReadConfigurationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MountsReadConfigurationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'accessor': json['accessor'] == null ? undefined : json['accessor'],
        'config': json['config'] == null ? undefined : json['config'],
        'deprecationStatus': json['deprecation_status'] == null ? undefined : json['deprecation_status'],
        'description': json['description'] == null ? undefined : json['description'],
        'externalEntropyAccess': json['external_entropy_access'] == null ? undefined : json['external_entropy_access'],
        'local': json['local'] == null ? undefined : json['local'],
        'options': json['options'] == null ? undefined : json['options'],
        'pluginVersion': json['plugin_version'] == null ? undefined : json['plugin_version'],
        'runningPluginVersion': json['running_plugin_version'] == null ? undefined : json['running_plugin_version'],
        'runningSha256': json['running_sha256'] == null ? undefined : json['running_sha256'],
        'sealWrap': json['seal_wrap'] == null ? undefined : json['seal_wrap'],
        'type': json['type'] == null ? undefined : json['type'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function MountsReadConfigurationResponseToJSON(json: any): MountsReadConfigurationResponse {
    return MountsReadConfigurationResponseToJSONTyped(json, false);
}

export function MountsReadConfigurationResponseToJSONTyped(value?: MountsReadConfigurationResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessor': value['accessor'],
        'config': value['config'],
        'deprecation_status': value['deprecationStatus'],
        'description': value['description'],
        'external_entropy_access': value['externalEntropyAccess'],
        'local': value['local'],
        'options': value['options'],
        'plugin_version': value['pluginVersion'],
        'running_plugin_version': value['runningPluginVersion'],
        'running_sha256': value['runningSha256'],
        'seal_wrap': value['sealWrap'],
        'type': value['type'],
        'uuid': value['uuid'],
    };
}

