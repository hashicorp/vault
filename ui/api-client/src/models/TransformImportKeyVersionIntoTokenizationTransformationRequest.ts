/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformImportKeyVersionIntoTokenizationTransformationRequest
 */
export interface TransformImportKeyVersionIntoTokenizationTransformationRequest {
    /**
     * The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key.
     * @type {string}
     * @memberof TransformImportKeyVersionIntoTokenizationTransformationRequest
     */
    ciphertext?: string;
    /**
     * The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of "SHA1", "SHA224", "SHA256" (default), "SHA384", or "SHA512"
     * @type {string}
     * @memberof TransformImportKeyVersionIntoTokenizationTransformationRequest
     */
    hashFunction?: string;
}

/**
 * Check if a given object implements the TransformImportKeyVersionIntoTokenizationTransformationRequest interface.
 */
export function instanceOfTransformImportKeyVersionIntoTokenizationTransformationRequest(value: object): value is TransformImportKeyVersionIntoTokenizationTransformationRequest {
    return true;
}

export function TransformImportKeyVersionIntoTokenizationTransformationRequestFromJSON(json: any): TransformImportKeyVersionIntoTokenizationTransformationRequest {
    return TransformImportKeyVersionIntoTokenizationTransformationRequestFromJSONTyped(json, false);
}

export function TransformImportKeyVersionIntoTokenizationTransformationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformImportKeyVersionIntoTokenizationTransformationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'ciphertext': json['ciphertext'] == null ? undefined : json['ciphertext'],
        'hashFunction': json['hash_function'] == null ? undefined : json['hash_function'],
    };
}

export function TransformImportKeyVersionIntoTokenizationTransformationRequestToJSON(json: any): TransformImportKeyVersionIntoTokenizationTransformationRequest {
    return TransformImportKeyVersionIntoTokenizationTransformationRequestToJSONTyped(json, false);
}

export function TransformImportKeyVersionIntoTokenizationTransformationRequestToJSONTyped(value?: TransformImportKeyVersionIntoTokenizationTransformationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ciphertext': value['ciphertext'],
        'hash_function': value['hashFunction'],
    };
}

