/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformCreateFpeTransformationWithImportedKeysRequest
 */
export interface TransformCreateFpeTransformationWithImportedKeysRequest {
    /**
     * The set of roles allowed to perform this transformation.
     * @type {Array<string>}
     * @memberof TransformCreateFpeTransformationWithImportedKeysRequest
     */
    allowedRoles?: Array<string>;
    /**
     * The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key.
     * @type {string}
     * @memberof TransformCreateFpeTransformationWithImportedKeysRequest
     */
    ciphertext?: string;
    /**
     * The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of "SHA1", "SHA224", "SHA256" (default), "SHA384", or "SHA512"
     * @type {string}
     * @memberof TransformCreateFpeTransformationWithImportedKeysRequest
     */
    hashFunction?: string;
    /**
     * The name of the template to use.
     * @type {string}
     * @memberof TransformCreateFpeTransformationWithImportedKeysRequest
     */
    template?: string;
    /**
     * The source of where the tweak value comes from. Only valid when in FPE mode.
     * @type {string}
     * @memberof TransformCreateFpeTransformationWithImportedKeysRequest
     */
    tweakSource?: string;
}

/**
 * Check if a given object implements the TransformCreateFpeTransformationWithImportedKeysRequest interface.
 */
export function instanceOfTransformCreateFpeTransformationWithImportedKeysRequest(value: object): value is TransformCreateFpeTransformationWithImportedKeysRequest {
    return true;
}

export function TransformCreateFpeTransformationWithImportedKeysRequestFromJSON(json: any): TransformCreateFpeTransformationWithImportedKeysRequest {
    return TransformCreateFpeTransformationWithImportedKeysRequestFromJSONTyped(json, false);
}

export function TransformCreateFpeTransformationWithImportedKeysRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformCreateFpeTransformationWithImportedKeysRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowedRoles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'ciphertext': json['ciphertext'] == null ? undefined : json['ciphertext'],
        'hashFunction': json['hash_function'] == null ? undefined : json['hash_function'],
        'template': json['template'] == null ? undefined : json['template'],
        'tweakSource': json['tweak_source'] == null ? undefined : json['tweak_source'],
    };
}

export function TransformCreateFpeTransformationWithImportedKeysRequestToJSON(json: any): TransformCreateFpeTransformationWithImportedKeysRequest {
    return TransformCreateFpeTransformationWithImportedKeysRequestToJSONTyped(json, false);
}

export function TransformCreateFpeTransformationWithImportedKeysRequestToJSONTyped(value?: TransformCreateFpeTransformationWithImportedKeysRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_roles': value['allowedRoles'],
        'ciphertext': value['ciphertext'],
        'hash_function': value['hashFunction'],
        'template': value['template'],
        'tweak_source': value['tweakSource'],
    };
}

