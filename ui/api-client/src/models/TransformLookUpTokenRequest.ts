/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformLookUpTokenRequest
 */
export interface TransformLookUpTokenRequest {
    /**
     * Specifies a list of items to be checked if tokenized or not in a single batch. If this parameter is set, the top-level parameters 'value', and 'transformation' will be ignored. Each batch item within the list can specify these parameters instead.
     * @type {Array<object>}
     * @memberof TransformLookUpTokenRequest
     */
    batchInput?: Array<object>;
    /**
     * For lookup, the specific expiration time of the token to retrieve. Can be omitted to look for a token with no expiration, or `any` for all tokens regardless of expiration. This and min/max expiration cannot be used simultaneously.
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    expiration?: string;
    /**
     * For ranged lookup of expirable tokens, the maximum expiration time of the token (in RFC3339 format), inclusive. This and expiration cannot be used simultaneously.
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    maxExpiration?: string;
    /**
     * For ranged lookup of expirable tokens, the minimum expiration time of the token (in RFC3339 format), inclusive. This and expiration cannot be used simultaneously.
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    minExpiration?: string;
    /**
     * For DELETE, the value of the token to delete
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    token?: string;
    /**
     * Name of the transformation.
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    transformation?: string;
    /**
     * For lookup, the plaintext value for which to retrieve a stored token.
     * @type {string}
     * @memberof TransformLookUpTokenRequest
     */
    value?: string;
}

/**
 * Check if a given object implements the TransformLookUpTokenRequest interface.
 */
export function instanceOfTransformLookUpTokenRequest(value: object): value is TransformLookUpTokenRequest {
    return true;
}

export function TransformLookUpTokenRequestFromJSON(json: any): TransformLookUpTokenRequest {
    return TransformLookUpTokenRequestFromJSONTyped(json, false);
}

export function TransformLookUpTokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformLookUpTokenRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'batchInput': json['batch_input'] == null ? undefined : json['batch_input'],
        'expiration': json['expiration'] == null ? undefined : json['expiration'],
        'maxExpiration': json['max_expiration'] == null ? undefined : json['max_expiration'],
        'minExpiration': json['min_expiration'] == null ? undefined : json['min_expiration'],
        'token': json['token'] == null ? undefined : json['token'],
        'transformation': json['transformation'] == null ? undefined : json['transformation'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function TransformLookUpTokenRequestToJSON(json: any): TransformLookUpTokenRequest {
    return TransformLookUpTokenRequestToJSONTyped(json, false);
}

export function TransformLookUpTokenRequestToJSONTyped(value?: TransformLookUpTokenRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'batch_input': value['batchInput'],
        'expiration': value['expiration'],
        'max_expiration': value['maxExpiration'],
        'min_expiration': value['minExpiration'],
        'token': value['token'],
        'transformation': value['transformation'],
        'value': value['value'],
    };
}

