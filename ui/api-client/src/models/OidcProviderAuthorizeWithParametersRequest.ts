/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OidcProviderAuthorizeWithParametersRequest
 */
export interface OidcProviderAuthorizeWithParametersRequest {
    /**
     * The ID of the requesting client.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    clientId: string;
    /**
     * The code challenge derived from the code verifier.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    codeChallenge?: string;
    /**
     * The method that was used to derive the code challenge. The following methods are supported: 'S256', 'plain'. Defaults to 'plain'.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    codeChallengeMethod?: string;
    /**
     * The allowable elapsed time in seconds since the last time the end-user was actively authenticated.
     * @type {number}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    maxAge?: number;
    /**
     * The value that will be returned in the ID token nonce claim after a token exchange.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    nonce?: string;
    /**
     * The redirection URI to which the response will be sent.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    redirectUri: string;
    /**
     * The OIDC authentication flow to be used. The following response types are supported: 'code'
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    responseType: string;
    /**
     * A space-delimited, case-sensitive list of scopes to be requested. The 'openid' scope is required.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    scope: string;
    /**
     * The value used to maintain state between the authentication request and client.
     * @type {string}
     * @memberof OidcProviderAuthorizeWithParametersRequest
     */
    state?: string;
}

/**
 * Check if a given object implements the OidcProviderAuthorizeWithParametersRequest interface.
 */
export function instanceOfOidcProviderAuthorizeWithParametersRequest(value: object): value is OidcProviderAuthorizeWithParametersRequest {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('redirectUri' in value) || value['redirectUri'] === undefined) return false;
    if (!('responseType' in value) || value['responseType'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    return true;
}

export function OidcProviderAuthorizeWithParametersRequestFromJSON(json: any): OidcProviderAuthorizeWithParametersRequest {
    return OidcProviderAuthorizeWithParametersRequestFromJSONTyped(json, false);
}

export function OidcProviderAuthorizeWithParametersRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OidcProviderAuthorizeWithParametersRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'clientId': json['client_id'],
        'codeChallenge': json['code_challenge'] == null ? undefined : json['code_challenge'],
        'codeChallengeMethod': json['code_challenge_method'] == null ? undefined : json['code_challenge_method'],
        'maxAge': json['max_age'] == null ? undefined : json['max_age'],
        'nonce': json['nonce'] == null ? undefined : json['nonce'],
        'redirectUri': json['redirect_uri'],
        'responseType': json['response_type'],
        'scope': json['scope'],
        'state': json['state'] == null ? undefined : json['state'],
    };
}

export function OidcProviderAuthorizeWithParametersRequestToJSON(json: any): OidcProviderAuthorizeWithParametersRequest {
    return OidcProviderAuthorizeWithParametersRequestToJSONTyped(json, false);
}

export function OidcProviderAuthorizeWithParametersRequestToJSONTyped(value?: OidcProviderAuthorizeWithParametersRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'client_id': value['clientId'],
        'code_challenge': value['codeChallenge'],
        'code_challenge_method': value['codeChallengeMethod'],
        'max_age': value['maxAge'],
        'nonce': value['nonce'],
        'redirect_uri': value['redirectUri'],
        'response_type': value['responseType'],
        'scope': value['scope'],
        'state': value['state'],
    };
}

