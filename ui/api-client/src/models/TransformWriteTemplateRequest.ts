/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformWriteTemplateRequest
 */
export interface TransformWriteTemplateRequest {
    /**
     * The alphabet to use for this template. This is only used during FPE transformations.
     * @type {string}
     * @memberof TransformWriteTemplateRequest
     */
    alphabet?: string;
    /**
     * An optional map of regular expression templates that can be used to customize decoded output. This is only used during FPE transformations.
     * @type {object}
     * @memberof TransformWriteTemplateRequest
     */
    decodeFormats?: object;
    /**
     * The regular expression template to use to format encoded values. This is only used during FPE transformations.
     * @type {string}
     * @memberof TransformWriteTemplateRequest
     */
    encodeFormat?: string;
    /**
     * The pattern used for matching. Currently, only regular expression pattern is supported.
     * @type {string}
     * @memberof TransformWriteTemplateRequest
     */
    pattern?: string;
    /**
     * The pattern type to use for match detection. Currently, only regex is supported.
     * @type {string}
     * @memberof TransformWriteTemplateRequest
     */
    type?: string;
}

/**
 * Check if a given object implements the TransformWriteTemplateRequest interface.
 */
export function instanceOfTransformWriteTemplateRequest(value: object): value is TransformWriteTemplateRequest {
    return true;
}

export function TransformWriteTemplateRequestFromJSON(json: any): TransformWriteTemplateRequest {
    return TransformWriteTemplateRequestFromJSONTyped(json, false);
}

export function TransformWriteTemplateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformWriteTemplateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'alphabet': json['alphabet'] == null ? undefined : json['alphabet'],
        'decodeFormats': json['decode_formats'] == null ? undefined : json['decode_formats'],
        'encodeFormat': json['encode_format'] == null ? undefined : json['encode_format'],
        'pattern': json['pattern'] == null ? undefined : json['pattern'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function TransformWriteTemplateRequestToJSON(json: any): TransformWriteTemplateRequest {
    return TransformWriteTemplateRequestToJSONTyped(json, false);
}

export function TransformWriteTemplateRequestToJSONTyped(value?: TransformWriteTemplateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alphabet': value['alphabet'],
        'decode_formats': value['decodeFormats'],
        'encode_format': value['encodeFormat'],
        'pattern': value['pattern'],
        'type': value['type'],
    };
}

