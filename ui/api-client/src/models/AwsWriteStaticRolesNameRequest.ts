/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AwsWriteStaticRolesNameRequest
 */
export interface AwsWriteStaticRolesNameRequest {
    /**
     * The AWS ARN for the role to be assumed when interacting with the account specified.
     * @type {string}
     * @memberof AwsWriteStaticRolesNameRequest
     */
    assumeRoleArn?: string;
    /**
     * An identifier for the assumed role session.
     * @type {string}
     * @memberof AwsWriteStaticRolesNameRequest
     */
    assumeRoleSessionName?: string;
    /**
     * An external ID to be passed to the assumed role session.
     * @type {string}
     * @memberof AwsWriteStaticRolesNameRequest
     */
    externalId?: string;
    /**
     * Period by which to rotate the backing credential of the adopted user. This can be a Go duration (e.g, '1m', 24h'), or an integer number of seconds.
     * @type {string}
     * @memberof AwsWriteStaticRolesNameRequest
     */
    rotationPeriod?: string;
    /**
     * The IAM user to adopt as a static role.
     * @type {string}
     * @memberof AwsWriteStaticRolesNameRequest
     */
    username?: string;
}

/**
 * Check if a given object implements the AwsWriteStaticRolesNameRequest interface.
 */
export function instanceOfAwsWriteStaticRolesNameRequest(value: object): value is AwsWriteStaticRolesNameRequest {
    return true;
}

export function AwsWriteStaticRolesNameRequestFromJSON(json: any): AwsWriteStaticRolesNameRequest {
    return AwsWriteStaticRolesNameRequestFromJSONTyped(json, false);
}

export function AwsWriteStaticRolesNameRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwsWriteStaticRolesNameRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'assumeRoleArn': json['assume_role_arn'] == null ? undefined : json['assume_role_arn'],
        'assumeRoleSessionName': json['assume_role_session_name'] == null ? undefined : json['assume_role_session_name'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'rotationPeriod': json['rotation_period'] == null ? undefined : json['rotation_period'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function AwsWriteStaticRolesNameRequestToJSON(json: any): AwsWriteStaticRolesNameRequest {
    return AwsWriteStaticRolesNameRequestToJSONTyped(json, false);
}

export function AwsWriteStaticRolesNameRequestToJSONTyped(value?: AwsWriteStaticRolesNameRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assume_role_arn': value['assumeRoleArn'],
        'assume_role_session_name': value['assumeRoleSessionName'],
        'external_id': value['externalId'],
        'rotation_period': value['rotationPeriod'],
        'username': value['username'],
    };
}

