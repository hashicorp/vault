/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AwsConfigureCertificateRequest
 */
export interface AwsConfigureCertificateRequest {
    /**
     * Base64 encoded AWS Public cert required to verify PKCS7 signature of the EC2 instance metadata.
     * @type {string}
     * @memberof AwsConfigureCertificateRequest
     */
    awsPublicCert?: string;
    /**
     * Takes the value of either "pkcs7" or "identity", indicating the type of document which can be verified using the given certificate. The reason is that the PKCS#7 document will have a DSA digest and the identity signature will have an RSA signature, and accordingly the public certificates to verify those also vary. Defaults to "pkcs7".
     * @type {string}
     * @memberof AwsConfigureCertificateRequest
     */
    type?: string;
}

/**
 * Check if a given object implements the AwsConfigureCertificateRequest interface.
 */
export function instanceOfAwsConfigureCertificateRequest(value: object): value is AwsConfigureCertificateRequest {
    return true;
}

export function AwsConfigureCertificateRequestFromJSON(json: any): AwsConfigureCertificateRequest {
    return AwsConfigureCertificateRequestFromJSONTyped(json, false);
}

export function AwsConfigureCertificateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwsConfigureCertificateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'awsPublicCert': json['aws_public_cert'] == null ? undefined : json['aws_public_cert'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function AwsConfigureCertificateRequestToJSON(json: any): AwsConfigureCertificateRequest {
    return AwsConfigureCertificateRequestToJSONTyped(json, false);
}

export function AwsConfigureCertificateRequestToJSONTyped(value?: AwsConfigureCertificateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aws_public_cert': value['awsPublicCert'],
        'type': value['type'],
    };
}

