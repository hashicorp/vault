/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliCloudConfigureRequest,
  AliCloudWriteRoleRequest,
  AwsConfigureLeaseRequest,
  AwsConfigureRootIamCredentialsRequest,
  AwsGenerateCredentialsWithParametersRequest,
  AwsGenerateStsCredentialsWithParametersRequest,
  AwsReadStaticCredsNameResponse,
  AwsReadStaticRolesNameResponse,
  AwsWriteRoleRequest,
  AwsWriteStaticRolesNameRequest,
  AwsWriteStaticRolesNameResponse,
  AzureConfigureRequest,
  AzureWriteRoleRequest,
  ConsulConfigureAccessRequest,
  ConsulWriteRoleRequest,
  DatabaseConfigureConnectionRequest,
  DatabaseWriteRoleRequest,
  DatabaseWriteStaticRoleRequest,
  GoogleCloudConfigureRequest,
  GoogleCloudGenerateRolesetKey3Request,
  GoogleCloudGenerateRolesetKeyRequest,
  GoogleCloudGenerateStaticAccountKeyRequest,
  GoogleCloudKmsConfigureKeyRequest,
  GoogleCloudKmsConfigureRequest,
  GoogleCloudKmsDecryptRequest,
  GoogleCloudKmsEncryptRequest,
  GoogleCloudKmsReencryptRequest,
  GoogleCloudKmsRegisterKeyRequest,
  GoogleCloudKmsSignRequest,
  GoogleCloudKmsVerifyRequest,
  GoogleCloudKmsWriteKeyRequest,
  GoogleCloudWriteImpersonatedAccountRequest,
  GoogleCloudWriteRolesetRequest,
  GoogleCloudWriteStaticAccountRequest,
  KubernetesConfigureRequest,
  KubernetesGenerateCredentialsRequest,
  KubernetesWriteRoleRequest,
  KvV2ConfigureRequest,
  KvV2DeleteVersionsRequest,
  KvV2DestroyVersionsRequest,
  KvV2ReadConfigurationResponse,
  KvV2ReadMetadataResponse,
  KvV2ReadResponse,
  KvV2ReadSubkeysResponse,
  KvV2UndeleteVersionsRequest,
  KvV2WriteMetadataRequest,
  KvV2WriteRequest,
  KvV2WriteResponse,
  LdapConfigureRequest,
  LdapLibraryCheckInRequest,
  LdapLibraryCheckOutRequest,
  LdapLibraryConfigureRequest,
  LdapLibraryForceCheckInRequest,
  LdapRotateStaticRoleRequest,
  LdapWriteDynamicRoleRequest,
  LdapWriteStaticRoleRequest,
  MongoDbAtlasConfigureRequest,
  MongoDbAtlasWriteRoleRequest,
  NomadConfigureAccessRequest,
  NomadConfigureLeaseRequest,
  NomadWriteRoleRequest,
  PkiConfigureAcmeRequest,
  PkiConfigureAutoTidyRequest,
  PkiConfigureAutoTidyResponse,
  PkiConfigureCaRequest,
  PkiConfigureCaResponse,
  PkiConfigureClusterRequest,
  PkiConfigureClusterResponse,
  PkiConfigureCmpRequest,
  PkiConfigureCrlRequest,
  PkiConfigureCrlResponse,
  PkiConfigureEstRequest,
  PkiConfigureExternalPolicyRequest,
  PkiConfigureExternalPolicyResponse,
  PkiConfigureIssuersRequest,
  PkiConfigureIssuersResponse,
  PkiConfigureKeysRequest,
  PkiConfigureKeysResponse,
  PkiConfigureScepRequest,
  PkiConfigureUrlsRequest,
  PkiConfigureUrlsResponse,
  PkiCrossSignIntermediateRequest,
  PkiCrossSignIntermediateResponse,
  PkiGenerateEabKeyForIssuerAndRoleResponse,
  PkiGenerateEabKeyForIssuerResponse,
  PkiGenerateEabKeyForRoleResponse,
  PkiGenerateEabKeyResponse,
  PkiGenerateExportedKeyRequest,
  PkiGenerateExportedKeyResponse,
  PkiGenerateIntermediateRequest,
  PkiGenerateIntermediateResponse,
  PkiGenerateInternalKeyRequest,
  PkiGenerateInternalKeyResponse,
  PkiGenerateKmsKeyRequest,
  PkiGenerateKmsKeyResponse,
  PkiGenerateRootRequest,
  PkiGenerateRootResponse,
  PkiImportKeyRequest,
  PkiImportKeyResponse,
  PkiIssueWithRoleRequest,
  PkiIssueWithRoleResponse,
  PkiIssuerIssueWithRoleRequest,
  PkiIssuerIssueWithRoleResponse,
  PkiIssuerReadCrlDeltaDerResponse,
  PkiIssuerReadCrlDeltaPemResponse,
  PkiIssuerReadCrlDeltaResponse,
  PkiIssuerReadCrlDerResponse,
  PkiIssuerReadCrlPemResponse,
  PkiIssuerReadCrlResponse,
  PkiIssuerReadUnifiedCrlDeltaDerResponse,
  PkiIssuerReadUnifiedCrlDeltaPemResponse,
  PkiIssuerReadUnifiedCrlDeltaResponse,
  PkiIssuerReadUnifiedCrlDerResponse,
  PkiIssuerReadUnifiedCrlPemResponse,
  PkiIssuerReadUnifiedCrlResponse,
  PkiIssuerResignCrlsRequest,
  PkiIssuerResignCrlsResponse,
  PkiIssuerSignIntermediateRequest,
  PkiIssuerSignIntermediateResponse,
  PkiIssuerSignRevocationListRequest,
  PkiIssuerSignRevocationListResponse,
  PkiIssuerSignSelfIssuedRequest,
  PkiIssuerSignSelfIssuedResponse,
  PkiIssuerSignVerbatimRequest,
  PkiIssuerSignVerbatimResponse,
  PkiIssuerSignVerbatimWithRoleRequest,
  PkiIssuerSignVerbatimWithRoleResponse,
  PkiIssuerSignWithRoleRequest,
  PkiIssuerSignWithRoleResponse,
  PkiIssuersGenerateIntermediateRequest,
  PkiIssuersGenerateIntermediateResponse,
  PkiIssuersGenerateRootRequest,
  PkiIssuersGenerateRootResponse,
  PkiIssuersImportBundleRequest,
  PkiIssuersImportBundleResponse,
  PkiIssuersImportCertRequest,
  PkiIssuersImportCertResponse,
  PkiListEabKeysResponse,
  PkiListIssuersResponse,
  PkiListKeysResponse,
  PkiListUnifiedRevokedCertsResponse,
  PkiReadAutoTidyConfigurationResponse,
  PkiReadCaChainPemResponse,
  PkiReadCaDerResponse,
  PkiReadCaPemResponse,
  PkiReadCertCaChainResponse,
  PkiReadCertCrlResponse,
  PkiReadCertDeltaCrlResponse,
  PkiReadCertMetadataResponse,
  PkiReadCertRawDerResponse,
  PkiReadCertRawPemResponse,
  PkiReadCertResponse,
  PkiReadCertUnifiedCrlResponse,
  PkiReadCertUnifiedDeltaCrlResponse,
  PkiReadClusterConfigurationResponse,
  PkiReadCrlConfigurationResponse,
  PkiReadCrlDeltaPemResponse,
  PkiReadCrlDeltaResponse,
  PkiReadCrlDerResponse,
  PkiReadCrlPemResponse,
  PkiReadIssuerDerResponse,
  PkiReadIssuerJsonResponse,
  PkiReadIssuerPemResponse,
  PkiReadIssuerResponse,
  PkiReadIssuersConfigurationResponse,
  PkiReadKeyResponse,
  PkiReadKeysConfigurationResponse,
  PkiReadRoleResponse,
  PkiReadUrlsConfigurationResponse,
  PkiReplaceRootRequest,
  PkiReplaceRootResponse,
  PkiRevokeIssuerResponse,
  PkiRevokeRequest,
  PkiRevokeResponse,
  PkiRevokeWithKeyRequest,
  PkiRevokeWithKeyResponse,
  PkiRootSignIntermediateRequest,
  PkiRootSignIntermediateResponse,
  PkiRootSignSelfIssuedRequest,
  PkiRootSignSelfIssuedResponse,
  PkiRotateCrlResponse,
  PkiRotateDeltaCrlResponse,
  PkiRotateRootRequest,
  PkiRotateRootResponse,
  PkiSetSignedIntermediateRequest,
  PkiSetSignedIntermediateResponse,
  PkiSignVerbatimRequest,
  PkiSignVerbatimResponse,
  PkiSignVerbatimWithRoleRequest,
  PkiSignVerbatimWithRoleResponse,
  PkiSignWithRoleRequest,
  PkiSignWithRoleResponse,
  PkiTidyCancelResponse,
  PkiTidyRequest,
  PkiTidyStatusResponse,
  PkiWriteAcmeAccountKidRequest,
  PkiWriteAcmeAuthorizationAuthIdRequest,
  PkiWriteAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteAcmeKeyIdRequest,
  PkiWriteAcmeNewAccountRequest,
  PkiWriteAcmeNewOrderRequest,
  PkiWriteAcmeOrderOrderIdCertRequest,
  PkiWriteAcmeOrderOrderIdFinalizeRequest,
  PkiWriteAcmeOrderOrderIdRequest,
  PkiWriteAcmeOrdersRequest,
  PkiWriteAcmeRevokeCertRequest,
  PkiWriteExternalPolicyAcmeAccountKidRequest,
  PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteExternalPolicyAcmeNewAccountRequest,
  PkiWriteExternalPolicyAcmeNewOrderRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdRequest,
  PkiWriteExternalPolicyAcmeOrdersRequest,
  PkiWriteExternalPolicyAcmeRevokeCertRequest,
  PkiWriteExternalPolicyIssuePolicyRequest,
  PkiWriteExternalPolicyIssuePolicyResponse,
  PkiWriteExternalPolicyIssueRequest,
  PkiWriteExternalPolicyIssueResponse,
  PkiWriteExternalPolicyPolicyAcmeAccountKidRequest,
  PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteExternalPolicyPolicyAcmeNewAccountRequest,
  PkiWriteExternalPolicyPolicyAcmeNewOrderRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest,
  PkiWriteExternalPolicyPolicyAcmeOrdersRequest,
  PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest,
  PkiWriteExternalPolicySignIntermediatePolicyRequest,
  PkiWriteExternalPolicySignIntermediatePolicyResponse,
  PkiWriteExternalPolicySignIntermediateRequest,
  PkiWriteExternalPolicySignIntermediateResponse,
  PkiWriteExternalPolicySignPolicyRequest,
  PkiWriteExternalPolicySignPolicyResponse,
  PkiWriteExternalPolicySignRequest,
  PkiWriteExternalPolicySignResponse,
  PkiWriteIssuerIssuerRefAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicyIssueRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssueResponse,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignResponse,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest,
  PkiWriteIssuerRequest,
  PkiWriteIssuerResponse,
  PkiWriteKeyRequest,
  PkiWriteKeyResponse,
  PkiWriteRoleRequest,
  PkiWriteRoleResponse,
  PkiWriteRolesRoleAcmeAccountKidRequest,
  PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteRolesRoleAcmeNewAccountRequest,
  PkiWriteRolesRoleAcmeNewOrderRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteRolesRoleAcmeOrdersRequest,
  PkiWriteRolesRoleAcmeRevokeCertRequest,
  RabbitMqConfigureConnectionRequest,
  RabbitMqConfigureLeaseRequest,
  RabbitMqWriteRoleRequest,
  SshConfigureCaRequest,
  SshConfigureZeroAddressRequest,
  SshGenerateCredentialsRequest,
  SshIssueCertificateRequest,
  SshListRolesByIpRequest,
  SshSignCertificateRequest,
  SshVerifyOtpRequest,
  SshWriteRoleRequest,
  StandardListResponse,
  TerraformCloudConfigureRequest,
  TerraformCloudWriteRoleRequest,
  TotpCreateKeyRequest,
  TotpValidateCodeRequest,
  TransitConfigureCacheRequest,
  TransitConfigureKeyRequest,
  TransitConfigureKeysRequest,
  TransitCreateKeyRequest,
  TransitDecryptRequest,
  TransitEncryptRequest,
  TransitGenerateCmacRequest,
  TransitGenerateCmacWithMacLengthRequest,
  TransitGenerateCsrForKeyRequest,
  TransitGenerateDataKeyRequest,
  TransitGenerateHmacRequest,
  TransitGenerateHmacWithAlgorithmRequest,
  TransitGenerateRandomRequest,
  TransitGenerateRandomWithBytesRequest,
  TransitGenerateRandomWithSourceAndBytesRequest,
  TransitGenerateRandomWithSourceRequest,
  TransitHashRequest,
  TransitHashWithAlgorithmRequest,
  TransitImportKeyRequest,
  TransitImportKeyVersionRequest,
  TransitRestoreAndRenameKeyRequest,
  TransitRestoreKeyRequest,
  TransitRewrapRequest,
  TransitRotateKeyRequest,
  TransitSetCertificateForKeyRequest,
  TransitSignRequest,
  TransitSignWithAlgorithmRequest,
  TransitTrimKeyRequest,
  TransitVerifyRequest,
  TransitVerifyWithAlgorithmRequest,
} from '../models/index';
import {
    AliCloudConfigureRequestFromJSON,
    AliCloudConfigureRequestToJSON,
    AliCloudWriteRoleRequestFromJSON,
    AliCloudWriteRoleRequestToJSON,
    AwsConfigureLeaseRequestFromJSON,
    AwsConfigureLeaseRequestToJSON,
    AwsConfigureRootIamCredentialsRequestFromJSON,
    AwsConfigureRootIamCredentialsRequestToJSON,
    AwsGenerateCredentialsWithParametersRequestFromJSON,
    AwsGenerateCredentialsWithParametersRequestToJSON,
    AwsGenerateStsCredentialsWithParametersRequestFromJSON,
    AwsGenerateStsCredentialsWithParametersRequestToJSON,
    AwsReadStaticCredsNameResponseFromJSON,
    AwsReadStaticCredsNameResponseToJSON,
    AwsReadStaticRolesNameResponseFromJSON,
    AwsReadStaticRolesNameResponseToJSON,
    AwsWriteRoleRequestFromJSON,
    AwsWriteRoleRequestToJSON,
    AwsWriteStaticRolesNameRequestFromJSON,
    AwsWriteStaticRolesNameRequestToJSON,
    AwsWriteStaticRolesNameResponseFromJSON,
    AwsWriteStaticRolesNameResponseToJSON,
    AzureConfigureRequestFromJSON,
    AzureConfigureRequestToJSON,
    AzureWriteRoleRequestFromJSON,
    AzureWriteRoleRequestToJSON,
    ConsulConfigureAccessRequestFromJSON,
    ConsulConfigureAccessRequestToJSON,
    ConsulWriteRoleRequestFromJSON,
    ConsulWriteRoleRequestToJSON,
    DatabaseConfigureConnectionRequestFromJSON,
    DatabaseConfigureConnectionRequestToJSON,
    DatabaseWriteRoleRequestFromJSON,
    DatabaseWriteRoleRequestToJSON,
    DatabaseWriteStaticRoleRequestFromJSON,
    DatabaseWriteStaticRoleRequestToJSON,
    GoogleCloudConfigureRequestFromJSON,
    GoogleCloudConfigureRequestToJSON,
    GoogleCloudGenerateRolesetKey3RequestFromJSON,
    GoogleCloudGenerateRolesetKey3RequestToJSON,
    GoogleCloudGenerateRolesetKeyRequestFromJSON,
    GoogleCloudGenerateRolesetKeyRequestToJSON,
    GoogleCloudGenerateStaticAccountKeyRequestFromJSON,
    GoogleCloudGenerateStaticAccountKeyRequestToJSON,
    GoogleCloudKmsConfigureKeyRequestFromJSON,
    GoogleCloudKmsConfigureKeyRequestToJSON,
    GoogleCloudKmsConfigureRequestFromJSON,
    GoogleCloudKmsConfigureRequestToJSON,
    GoogleCloudKmsDecryptRequestFromJSON,
    GoogleCloudKmsDecryptRequestToJSON,
    GoogleCloudKmsEncryptRequestFromJSON,
    GoogleCloudKmsEncryptRequestToJSON,
    GoogleCloudKmsReencryptRequestFromJSON,
    GoogleCloudKmsReencryptRequestToJSON,
    GoogleCloudKmsRegisterKeyRequestFromJSON,
    GoogleCloudKmsRegisterKeyRequestToJSON,
    GoogleCloudKmsSignRequestFromJSON,
    GoogleCloudKmsSignRequestToJSON,
    GoogleCloudKmsVerifyRequestFromJSON,
    GoogleCloudKmsVerifyRequestToJSON,
    GoogleCloudKmsWriteKeyRequestFromJSON,
    GoogleCloudKmsWriteKeyRequestToJSON,
    GoogleCloudWriteImpersonatedAccountRequestFromJSON,
    GoogleCloudWriteImpersonatedAccountRequestToJSON,
    GoogleCloudWriteRolesetRequestFromJSON,
    GoogleCloudWriteRolesetRequestToJSON,
    GoogleCloudWriteStaticAccountRequestFromJSON,
    GoogleCloudWriteStaticAccountRequestToJSON,
    KubernetesConfigureRequestFromJSON,
    KubernetesConfigureRequestToJSON,
    KubernetesGenerateCredentialsRequestFromJSON,
    KubernetesGenerateCredentialsRequestToJSON,
    KubernetesWriteRoleRequestFromJSON,
    KubernetesWriteRoleRequestToJSON,
    KvV2ConfigureRequestFromJSON,
    KvV2ConfigureRequestToJSON,
    KvV2DeleteVersionsRequestFromJSON,
    KvV2DeleteVersionsRequestToJSON,
    KvV2DestroyVersionsRequestFromJSON,
    KvV2DestroyVersionsRequestToJSON,
    KvV2ReadConfigurationResponseFromJSON,
    KvV2ReadConfigurationResponseToJSON,
    KvV2ReadMetadataResponseFromJSON,
    KvV2ReadMetadataResponseToJSON,
    KvV2ReadResponseFromJSON,
    KvV2ReadResponseToJSON,
    KvV2ReadSubkeysResponseFromJSON,
    KvV2ReadSubkeysResponseToJSON,
    KvV2UndeleteVersionsRequestFromJSON,
    KvV2UndeleteVersionsRequestToJSON,
    KvV2WriteMetadataRequestFromJSON,
    KvV2WriteMetadataRequestToJSON,
    KvV2WriteRequestFromJSON,
    KvV2WriteRequestToJSON,
    KvV2WriteResponseFromJSON,
    KvV2WriteResponseToJSON,
    LdapConfigureRequestFromJSON,
    LdapConfigureRequestToJSON,
    LdapLibraryCheckInRequestFromJSON,
    LdapLibraryCheckInRequestToJSON,
    LdapLibraryCheckOutRequestFromJSON,
    LdapLibraryCheckOutRequestToJSON,
    LdapLibraryConfigureRequestFromJSON,
    LdapLibraryConfigureRequestToJSON,
    LdapLibraryForceCheckInRequestFromJSON,
    LdapLibraryForceCheckInRequestToJSON,
    LdapRotateStaticRoleRequestFromJSON,
    LdapRotateStaticRoleRequestToJSON,
    LdapWriteDynamicRoleRequestFromJSON,
    LdapWriteDynamicRoleRequestToJSON,
    LdapWriteStaticRoleRequestFromJSON,
    LdapWriteStaticRoleRequestToJSON,
    MongoDbAtlasConfigureRequestFromJSON,
    MongoDbAtlasConfigureRequestToJSON,
    MongoDbAtlasWriteRoleRequestFromJSON,
    MongoDbAtlasWriteRoleRequestToJSON,
    NomadConfigureAccessRequestFromJSON,
    NomadConfigureAccessRequestToJSON,
    NomadConfigureLeaseRequestFromJSON,
    NomadConfigureLeaseRequestToJSON,
    NomadWriteRoleRequestFromJSON,
    NomadWriteRoleRequestToJSON,
    PkiConfigureAcmeRequestFromJSON,
    PkiConfigureAcmeRequestToJSON,
    PkiConfigureAutoTidyRequestFromJSON,
    PkiConfigureAutoTidyRequestToJSON,
    PkiConfigureAutoTidyResponseFromJSON,
    PkiConfigureAutoTidyResponseToJSON,
    PkiConfigureCaRequestFromJSON,
    PkiConfigureCaRequestToJSON,
    PkiConfigureCaResponseFromJSON,
    PkiConfigureCaResponseToJSON,
    PkiConfigureClusterRequestFromJSON,
    PkiConfigureClusterRequestToJSON,
    PkiConfigureClusterResponseFromJSON,
    PkiConfigureClusterResponseToJSON,
    PkiConfigureCmpRequestFromJSON,
    PkiConfigureCmpRequestToJSON,
    PkiConfigureCrlRequestFromJSON,
    PkiConfigureCrlRequestToJSON,
    PkiConfigureCrlResponseFromJSON,
    PkiConfigureCrlResponseToJSON,
    PkiConfigureEstRequestFromJSON,
    PkiConfigureEstRequestToJSON,
    PkiConfigureExternalPolicyRequestFromJSON,
    PkiConfigureExternalPolicyRequestToJSON,
    PkiConfigureExternalPolicyResponseFromJSON,
    PkiConfigureExternalPolicyResponseToJSON,
    PkiConfigureIssuersRequestFromJSON,
    PkiConfigureIssuersRequestToJSON,
    PkiConfigureIssuersResponseFromJSON,
    PkiConfigureIssuersResponseToJSON,
    PkiConfigureKeysRequestFromJSON,
    PkiConfigureKeysRequestToJSON,
    PkiConfigureKeysResponseFromJSON,
    PkiConfigureKeysResponseToJSON,
    PkiConfigureScepRequestFromJSON,
    PkiConfigureScepRequestToJSON,
    PkiConfigureUrlsRequestFromJSON,
    PkiConfigureUrlsRequestToJSON,
    PkiConfigureUrlsResponseFromJSON,
    PkiConfigureUrlsResponseToJSON,
    PkiCrossSignIntermediateRequestFromJSON,
    PkiCrossSignIntermediateRequestToJSON,
    PkiCrossSignIntermediateResponseFromJSON,
    PkiCrossSignIntermediateResponseToJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseToJSON,
    PkiGenerateEabKeyForIssuerResponseFromJSON,
    PkiGenerateEabKeyForIssuerResponseToJSON,
    PkiGenerateEabKeyForRoleResponseFromJSON,
    PkiGenerateEabKeyForRoleResponseToJSON,
    PkiGenerateEabKeyResponseFromJSON,
    PkiGenerateEabKeyResponseToJSON,
    PkiGenerateExportedKeyRequestFromJSON,
    PkiGenerateExportedKeyRequestToJSON,
    PkiGenerateExportedKeyResponseFromJSON,
    PkiGenerateExportedKeyResponseToJSON,
    PkiGenerateIntermediateRequestFromJSON,
    PkiGenerateIntermediateRequestToJSON,
    PkiGenerateIntermediateResponseFromJSON,
    PkiGenerateIntermediateResponseToJSON,
    PkiGenerateInternalKeyRequestFromJSON,
    PkiGenerateInternalKeyRequestToJSON,
    PkiGenerateInternalKeyResponseFromJSON,
    PkiGenerateInternalKeyResponseToJSON,
    PkiGenerateKmsKeyRequestFromJSON,
    PkiGenerateKmsKeyRequestToJSON,
    PkiGenerateKmsKeyResponseFromJSON,
    PkiGenerateKmsKeyResponseToJSON,
    PkiGenerateRootRequestFromJSON,
    PkiGenerateRootRequestToJSON,
    PkiGenerateRootResponseFromJSON,
    PkiGenerateRootResponseToJSON,
    PkiImportKeyRequestFromJSON,
    PkiImportKeyRequestToJSON,
    PkiImportKeyResponseFromJSON,
    PkiImportKeyResponseToJSON,
    PkiIssueWithRoleRequestFromJSON,
    PkiIssueWithRoleRequestToJSON,
    PkiIssueWithRoleResponseFromJSON,
    PkiIssueWithRoleResponseToJSON,
    PkiIssuerIssueWithRoleRequestFromJSON,
    PkiIssuerIssueWithRoleRequestToJSON,
    PkiIssuerIssueWithRoleResponseFromJSON,
    PkiIssuerIssueWithRoleResponseToJSON,
    PkiIssuerReadCrlDeltaDerResponseFromJSON,
    PkiIssuerReadCrlDeltaDerResponseToJSON,
    PkiIssuerReadCrlDeltaPemResponseFromJSON,
    PkiIssuerReadCrlDeltaPemResponseToJSON,
    PkiIssuerReadCrlDeltaResponseFromJSON,
    PkiIssuerReadCrlDeltaResponseToJSON,
    PkiIssuerReadCrlDerResponseFromJSON,
    PkiIssuerReadCrlDerResponseToJSON,
    PkiIssuerReadCrlPemResponseFromJSON,
    PkiIssuerReadCrlPemResponseToJSON,
    PkiIssuerReadCrlResponseFromJSON,
    PkiIssuerReadCrlResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaDerResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaDerResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaPemResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaPemResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaResponseToJSON,
    PkiIssuerReadUnifiedCrlDerResponseFromJSON,
    PkiIssuerReadUnifiedCrlDerResponseToJSON,
    PkiIssuerReadUnifiedCrlPemResponseFromJSON,
    PkiIssuerReadUnifiedCrlPemResponseToJSON,
    PkiIssuerReadUnifiedCrlResponseFromJSON,
    PkiIssuerReadUnifiedCrlResponseToJSON,
    PkiIssuerResignCrlsRequestFromJSON,
    PkiIssuerResignCrlsRequestToJSON,
    PkiIssuerResignCrlsResponseFromJSON,
    PkiIssuerResignCrlsResponseToJSON,
    PkiIssuerSignIntermediateRequestFromJSON,
    PkiIssuerSignIntermediateRequestToJSON,
    PkiIssuerSignIntermediateResponseFromJSON,
    PkiIssuerSignIntermediateResponseToJSON,
    PkiIssuerSignRevocationListRequestFromJSON,
    PkiIssuerSignRevocationListRequestToJSON,
    PkiIssuerSignRevocationListResponseFromJSON,
    PkiIssuerSignRevocationListResponseToJSON,
    PkiIssuerSignSelfIssuedRequestFromJSON,
    PkiIssuerSignSelfIssuedRequestToJSON,
    PkiIssuerSignSelfIssuedResponseFromJSON,
    PkiIssuerSignSelfIssuedResponseToJSON,
    PkiIssuerSignVerbatimRequestFromJSON,
    PkiIssuerSignVerbatimRequestToJSON,
    PkiIssuerSignVerbatimResponseFromJSON,
    PkiIssuerSignVerbatimResponseToJSON,
    PkiIssuerSignVerbatimWithRoleRequestFromJSON,
    PkiIssuerSignVerbatimWithRoleRequestToJSON,
    PkiIssuerSignVerbatimWithRoleResponseFromJSON,
    PkiIssuerSignVerbatimWithRoleResponseToJSON,
    PkiIssuerSignWithRoleRequestFromJSON,
    PkiIssuerSignWithRoleRequestToJSON,
    PkiIssuerSignWithRoleResponseFromJSON,
    PkiIssuerSignWithRoleResponseToJSON,
    PkiIssuersGenerateIntermediateRequestFromJSON,
    PkiIssuersGenerateIntermediateRequestToJSON,
    PkiIssuersGenerateIntermediateResponseFromJSON,
    PkiIssuersGenerateIntermediateResponseToJSON,
    PkiIssuersGenerateRootRequestFromJSON,
    PkiIssuersGenerateRootRequestToJSON,
    PkiIssuersGenerateRootResponseFromJSON,
    PkiIssuersGenerateRootResponseToJSON,
    PkiIssuersImportBundleRequestFromJSON,
    PkiIssuersImportBundleRequestToJSON,
    PkiIssuersImportBundleResponseFromJSON,
    PkiIssuersImportBundleResponseToJSON,
    PkiIssuersImportCertRequestFromJSON,
    PkiIssuersImportCertRequestToJSON,
    PkiIssuersImportCertResponseFromJSON,
    PkiIssuersImportCertResponseToJSON,
    PkiListEabKeysResponseFromJSON,
    PkiListEabKeysResponseToJSON,
    PkiListIssuersResponseFromJSON,
    PkiListIssuersResponseToJSON,
    PkiListKeysResponseFromJSON,
    PkiListKeysResponseToJSON,
    PkiListUnifiedRevokedCertsResponseFromJSON,
    PkiListUnifiedRevokedCertsResponseToJSON,
    PkiReadAutoTidyConfigurationResponseFromJSON,
    PkiReadAutoTidyConfigurationResponseToJSON,
    PkiReadCaChainPemResponseFromJSON,
    PkiReadCaChainPemResponseToJSON,
    PkiReadCaDerResponseFromJSON,
    PkiReadCaDerResponseToJSON,
    PkiReadCaPemResponseFromJSON,
    PkiReadCaPemResponseToJSON,
    PkiReadCertCaChainResponseFromJSON,
    PkiReadCertCaChainResponseToJSON,
    PkiReadCertCrlResponseFromJSON,
    PkiReadCertCrlResponseToJSON,
    PkiReadCertDeltaCrlResponseFromJSON,
    PkiReadCertDeltaCrlResponseToJSON,
    PkiReadCertMetadataResponseFromJSON,
    PkiReadCertMetadataResponseToJSON,
    PkiReadCertRawDerResponseFromJSON,
    PkiReadCertRawDerResponseToJSON,
    PkiReadCertRawPemResponseFromJSON,
    PkiReadCertRawPemResponseToJSON,
    PkiReadCertResponseFromJSON,
    PkiReadCertResponseToJSON,
    PkiReadCertUnifiedCrlResponseFromJSON,
    PkiReadCertUnifiedCrlResponseToJSON,
    PkiReadCertUnifiedDeltaCrlResponseFromJSON,
    PkiReadCertUnifiedDeltaCrlResponseToJSON,
    PkiReadClusterConfigurationResponseFromJSON,
    PkiReadClusterConfigurationResponseToJSON,
    PkiReadCrlConfigurationResponseFromJSON,
    PkiReadCrlConfigurationResponseToJSON,
    PkiReadCrlDeltaPemResponseFromJSON,
    PkiReadCrlDeltaPemResponseToJSON,
    PkiReadCrlDeltaResponseFromJSON,
    PkiReadCrlDeltaResponseToJSON,
    PkiReadCrlDerResponseFromJSON,
    PkiReadCrlDerResponseToJSON,
    PkiReadCrlPemResponseFromJSON,
    PkiReadCrlPemResponseToJSON,
    PkiReadIssuerDerResponseFromJSON,
    PkiReadIssuerDerResponseToJSON,
    PkiReadIssuerJsonResponseFromJSON,
    PkiReadIssuerJsonResponseToJSON,
    PkiReadIssuerPemResponseFromJSON,
    PkiReadIssuerPemResponseToJSON,
    PkiReadIssuerResponseFromJSON,
    PkiReadIssuerResponseToJSON,
    PkiReadIssuersConfigurationResponseFromJSON,
    PkiReadIssuersConfigurationResponseToJSON,
    PkiReadKeyResponseFromJSON,
    PkiReadKeyResponseToJSON,
    PkiReadKeysConfigurationResponseFromJSON,
    PkiReadKeysConfigurationResponseToJSON,
    PkiReadRoleResponseFromJSON,
    PkiReadRoleResponseToJSON,
    PkiReadUrlsConfigurationResponseFromJSON,
    PkiReadUrlsConfigurationResponseToJSON,
    PkiReplaceRootRequestFromJSON,
    PkiReplaceRootRequestToJSON,
    PkiReplaceRootResponseFromJSON,
    PkiReplaceRootResponseToJSON,
    PkiRevokeIssuerResponseFromJSON,
    PkiRevokeIssuerResponseToJSON,
    PkiRevokeRequestFromJSON,
    PkiRevokeRequestToJSON,
    PkiRevokeResponseFromJSON,
    PkiRevokeResponseToJSON,
    PkiRevokeWithKeyRequestFromJSON,
    PkiRevokeWithKeyRequestToJSON,
    PkiRevokeWithKeyResponseFromJSON,
    PkiRevokeWithKeyResponseToJSON,
    PkiRootSignIntermediateRequestFromJSON,
    PkiRootSignIntermediateRequestToJSON,
    PkiRootSignIntermediateResponseFromJSON,
    PkiRootSignIntermediateResponseToJSON,
    PkiRootSignSelfIssuedRequestFromJSON,
    PkiRootSignSelfIssuedRequestToJSON,
    PkiRootSignSelfIssuedResponseFromJSON,
    PkiRootSignSelfIssuedResponseToJSON,
    PkiRotateCrlResponseFromJSON,
    PkiRotateCrlResponseToJSON,
    PkiRotateDeltaCrlResponseFromJSON,
    PkiRotateDeltaCrlResponseToJSON,
    PkiRotateRootRequestFromJSON,
    PkiRotateRootRequestToJSON,
    PkiRotateRootResponseFromJSON,
    PkiRotateRootResponseToJSON,
    PkiSetSignedIntermediateRequestFromJSON,
    PkiSetSignedIntermediateRequestToJSON,
    PkiSetSignedIntermediateResponseFromJSON,
    PkiSetSignedIntermediateResponseToJSON,
    PkiSignVerbatimRequestFromJSON,
    PkiSignVerbatimRequestToJSON,
    PkiSignVerbatimResponseFromJSON,
    PkiSignVerbatimResponseToJSON,
    PkiSignVerbatimWithRoleRequestFromJSON,
    PkiSignVerbatimWithRoleRequestToJSON,
    PkiSignVerbatimWithRoleResponseFromJSON,
    PkiSignVerbatimWithRoleResponseToJSON,
    PkiSignWithRoleRequestFromJSON,
    PkiSignWithRoleRequestToJSON,
    PkiSignWithRoleResponseFromJSON,
    PkiSignWithRoleResponseToJSON,
    PkiTidyCancelResponseFromJSON,
    PkiTidyCancelResponseToJSON,
    PkiTidyRequestFromJSON,
    PkiTidyRequestToJSON,
    PkiTidyStatusResponseFromJSON,
    PkiTidyStatusResponseToJSON,
    PkiWriteAcmeAccountKidRequestFromJSON,
    PkiWriteAcmeAccountKidRequestToJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteAcmeKeyIdRequestFromJSON,
    PkiWriteAcmeKeyIdRequestToJSON,
    PkiWriteAcmeNewAccountRequestFromJSON,
    PkiWriteAcmeNewAccountRequestToJSON,
    PkiWriteAcmeNewOrderRequestFromJSON,
    PkiWriteAcmeNewOrderRequestToJSON,
    PkiWriteAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteAcmeOrderOrderIdRequestFromJSON,
    PkiWriteAcmeOrderOrderIdRequestToJSON,
    PkiWriteAcmeOrdersRequestFromJSON,
    PkiWriteAcmeOrdersRequestToJSON,
    PkiWriteAcmeRevokeCertRequestFromJSON,
    PkiWriteAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteExternalPolicyAcmeAccountKidRequestToJSON,
    PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteExternalPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteExternalPolicyAcmeNewAccountRequestToJSON,
    PkiWriteExternalPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteExternalPolicyAcmeNewOrderRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteExternalPolicyAcmeOrdersRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrdersRequestToJSON,
    PkiWriteExternalPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteExternalPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicyIssuePolicyRequestFromJSON,
    PkiWriteExternalPolicyIssuePolicyRequestToJSON,
    PkiWriteExternalPolicyIssuePolicyResponseFromJSON,
    PkiWriteExternalPolicyIssuePolicyResponseToJSON,
    PkiWriteExternalPolicyIssueRequestFromJSON,
    PkiWriteExternalPolicyIssueRequestToJSON,
    PkiWriteExternalPolicyIssueResponseFromJSON,
    PkiWriteExternalPolicyIssueResponseToJSON,
    PkiWriteExternalPolicyPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeAccountKidRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeNewAccountRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeNewOrderRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrdersRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrdersRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicySignIntermediatePolicyRequestFromJSON,
    PkiWriteExternalPolicySignIntermediatePolicyRequestToJSON,
    PkiWriteExternalPolicySignIntermediatePolicyResponseFromJSON,
    PkiWriteExternalPolicySignIntermediatePolicyResponseToJSON,
    PkiWriteExternalPolicySignIntermediateRequestFromJSON,
    PkiWriteExternalPolicySignIntermediateRequestToJSON,
    PkiWriteExternalPolicySignIntermediateResponseFromJSON,
    PkiWriteExternalPolicySignIntermediateResponseToJSON,
    PkiWriteExternalPolicySignPolicyRequestFromJSON,
    PkiWriteExternalPolicySignPolicyRequestToJSON,
    PkiWriteExternalPolicySignPolicyResponseFromJSON,
    PkiWriteExternalPolicySignPolicyResponseToJSON,
    PkiWriteExternalPolicySignRequestFromJSON,
    PkiWriteExternalPolicySignRequestToJSON,
    PkiWriteExternalPolicySignResponseFromJSON,
    PkiWriteExternalPolicySignResponseToJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignResponseToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerRequestFromJSON,
    PkiWriteIssuerRequestToJSON,
    PkiWriteIssuerResponseFromJSON,
    PkiWriteIssuerResponseToJSON,
    PkiWriteKeyRequestFromJSON,
    PkiWriteKeyRequestToJSON,
    PkiWriteKeyResponseFromJSON,
    PkiWriteKeyResponseToJSON,
    PkiWriteRoleRequestFromJSON,
    PkiWriteRoleRequestToJSON,
    PkiWriteRoleResponseFromJSON,
    PkiWriteRoleResponseToJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestToJSON,
    RabbitMqConfigureConnectionRequestFromJSON,
    RabbitMqConfigureConnectionRequestToJSON,
    RabbitMqConfigureLeaseRequestFromJSON,
    RabbitMqConfigureLeaseRequestToJSON,
    RabbitMqWriteRoleRequestFromJSON,
    RabbitMqWriteRoleRequestToJSON,
    SshConfigureCaRequestFromJSON,
    SshConfigureCaRequestToJSON,
    SshConfigureZeroAddressRequestFromJSON,
    SshConfigureZeroAddressRequestToJSON,
    SshGenerateCredentialsRequestFromJSON,
    SshGenerateCredentialsRequestToJSON,
    SshIssueCertificateRequestFromJSON,
    SshIssueCertificateRequestToJSON,
    SshListRolesByIpRequestFromJSON,
    SshListRolesByIpRequestToJSON,
    SshSignCertificateRequestFromJSON,
    SshSignCertificateRequestToJSON,
    SshVerifyOtpRequestFromJSON,
    SshVerifyOtpRequestToJSON,
    SshWriteRoleRequestFromJSON,
    SshWriteRoleRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    TerraformCloudConfigureRequestFromJSON,
    TerraformCloudConfigureRequestToJSON,
    TerraformCloudWriteRoleRequestFromJSON,
    TerraformCloudWriteRoleRequestToJSON,
    TotpCreateKeyRequestFromJSON,
    TotpCreateKeyRequestToJSON,
    TotpValidateCodeRequestFromJSON,
    TotpValidateCodeRequestToJSON,
    TransitConfigureCacheRequestFromJSON,
    TransitConfigureCacheRequestToJSON,
    TransitConfigureKeyRequestFromJSON,
    TransitConfigureKeyRequestToJSON,
    TransitConfigureKeysRequestFromJSON,
    TransitConfigureKeysRequestToJSON,
    TransitCreateKeyRequestFromJSON,
    TransitCreateKeyRequestToJSON,
    TransitDecryptRequestFromJSON,
    TransitDecryptRequestToJSON,
    TransitEncryptRequestFromJSON,
    TransitEncryptRequestToJSON,
    TransitGenerateCmacRequestFromJSON,
    TransitGenerateCmacRequestToJSON,
    TransitGenerateCmacWithMacLengthRequestFromJSON,
    TransitGenerateCmacWithMacLengthRequestToJSON,
    TransitGenerateCsrForKeyRequestFromJSON,
    TransitGenerateCsrForKeyRequestToJSON,
    TransitGenerateDataKeyRequestFromJSON,
    TransitGenerateDataKeyRequestToJSON,
    TransitGenerateHmacRequestFromJSON,
    TransitGenerateHmacRequestToJSON,
    TransitGenerateHmacWithAlgorithmRequestFromJSON,
    TransitGenerateHmacWithAlgorithmRequestToJSON,
    TransitGenerateRandomRequestFromJSON,
    TransitGenerateRandomRequestToJSON,
    TransitGenerateRandomWithBytesRequestFromJSON,
    TransitGenerateRandomWithBytesRequestToJSON,
    TransitGenerateRandomWithSourceAndBytesRequestFromJSON,
    TransitGenerateRandomWithSourceAndBytesRequestToJSON,
    TransitGenerateRandomWithSourceRequestFromJSON,
    TransitGenerateRandomWithSourceRequestToJSON,
    TransitHashRequestFromJSON,
    TransitHashRequestToJSON,
    TransitHashWithAlgorithmRequestFromJSON,
    TransitHashWithAlgorithmRequestToJSON,
    TransitImportKeyRequestFromJSON,
    TransitImportKeyRequestToJSON,
    TransitImportKeyVersionRequestFromJSON,
    TransitImportKeyVersionRequestToJSON,
    TransitRestoreAndRenameKeyRequestFromJSON,
    TransitRestoreAndRenameKeyRequestToJSON,
    TransitRestoreKeyRequestFromJSON,
    TransitRestoreKeyRequestToJSON,
    TransitRewrapRequestFromJSON,
    TransitRewrapRequestToJSON,
    TransitRotateKeyRequestFromJSON,
    TransitRotateKeyRequestToJSON,
    TransitSetCertificateForKeyRequestFromJSON,
    TransitSetCertificateForKeyRequestToJSON,
    TransitSignRequestFromJSON,
    TransitSignRequestToJSON,
    TransitSignWithAlgorithmRequestFromJSON,
    TransitSignWithAlgorithmRequestToJSON,
    TransitTrimKeyRequestFromJSON,
    TransitTrimKeyRequestToJSON,
    TransitVerifyRequestFromJSON,
    TransitVerifyRequestToJSON,
    TransitVerifyWithAlgorithmRequestFromJSON,
    TransitVerifyWithAlgorithmRequestToJSON,
} from '../models/index';

export interface SecretsApiAliCloudConfigureOperationRequest {
    alicloudMountPath: string;
    aliCloudConfigureRequest: AliCloudConfigureRequest;
}

export interface SecretsApiAliCloudDeleteConfigurationRequest {
    alicloudMountPath: string;
}

export interface SecretsApiAliCloudDeleteRoleRequest {
    name: string;
    alicloudMountPath: string;
}

export interface SecretsApiAliCloudGenerateCredentialsRequest {
    name: string;
    alicloudMountPath: string;
}

export interface SecretsApiAliCloudListRolesRequest {
    alicloudMountPath: string;
    list: AliCloudListRolesListEnum;
}

export interface SecretsApiAliCloudReadConfigurationRequest {
    alicloudMountPath: string;
}

export interface SecretsApiAliCloudReadRoleRequest {
    name: string;
    alicloudMountPath: string;
}

export interface SecretsApiAliCloudWriteRoleOperationRequest {
    name: string;
    alicloudMountPath: string;
    aliCloudWriteRoleRequest: AliCloudWriteRoleRequest;
}

export interface SecretsApiAwsConfigureLeaseOperationRequest {
    awsMountPath: string;
    awsConfigureLeaseRequest: AwsConfigureLeaseRequest;
}

export interface SecretsApiAwsConfigureRootIamCredentialsOperationRequest {
    awsMountPath: string;
    awsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest;
}

export interface SecretsApiAwsDeleteRoleRequest {
    name: string;
    awsMountPath: string;
}

export interface SecretsApiAwsDeleteStaticRolesNameRequest {
    name: string;
    awsMountPath: string;
}

export interface SecretsApiAwsGenerateCredentialsRequest {
    name: string;
    awsMountPath: string;
    roleArn?: string;
    roleSessionName?: string;
    ttl?: string;
}

export interface SecretsApiAwsGenerateCredentialsWithParametersOperationRequest {
    name: string;
    awsMountPath: string;
    awsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest;
}

export interface SecretsApiAwsGenerateStsCredentialsRequest {
    name: string;
    awsMountPath: string;
    roleArn?: string;
    roleSessionName?: string;
    ttl?: string;
}

export interface SecretsApiAwsGenerateStsCredentialsWithParametersOperationRequest {
    name: string;
    awsMountPath: string;
    awsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest;
}

export interface SecretsApiAwsListRolesRequest {
    awsMountPath: string;
    list: AwsListRolesListEnum;
}

export interface SecretsApiAwsListStaticRolesRequest {
    awsMountPath: string;
    list: AwsListStaticRolesListEnum;
}

export interface SecretsApiAwsReadLeaseConfigurationRequest {
    awsMountPath: string;
}

export interface SecretsApiAwsReadRoleRequest {
    name: string;
    awsMountPath: string;
}

export interface SecretsApiAwsReadRootIamCredentialsConfigurationRequest {
    awsMountPath: string;
}

export interface SecretsApiAwsReadStaticCredsNameRequest {
    name: string;
    awsMountPath: string;
}

export interface SecretsApiAwsReadStaticRolesNameRequest {
    name: string;
    awsMountPath: string;
}

export interface SecretsApiAwsRotateRootIamCredentialsRequest {
    awsMountPath: string;
}

export interface SecretsApiAwsWriteRoleOperationRequest {
    name: string;
    awsMountPath: string;
    awsWriteRoleRequest: AwsWriteRoleRequest;
}

export interface SecretsApiAwsWriteStaticRolesNameOperationRequest {
    name: string;
    awsMountPath: string;
    awsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest;
}

export interface SecretsApiAzureConfigureOperationRequest {
    azureMountPath: string;
    azureConfigureRequest: AzureConfigureRequest;
}

export interface SecretsApiAzureDeleteConfigurationRequest {
    azureMountPath: string;
}

export interface SecretsApiAzureDeleteRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface SecretsApiAzureListRolesRequest {
    azureMountPath: string;
    list: AzureListRolesListEnum;
}

export interface SecretsApiAzureReadConfigurationRequest {
    azureMountPath: string;
}

export interface SecretsApiAzureReadRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface SecretsApiAzureRequestServicePrincipalCredentialsRequest {
    role: string;
    azureMountPath: string;
}

export interface SecretsApiAzureRotateRootRequest {
    azureMountPath: string;
}

export interface SecretsApiAzureWriteRoleOperationRequest {
    name: string;
    azureMountPath: string;
    azureWriteRoleRequest: AzureWriteRoleRequest;
}

export interface SecretsApiConsulConfigureAccessOperationRequest {
    consulMountPath: string;
    consulConfigureAccessRequest: ConsulConfigureAccessRequest;
}

export interface SecretsApiConsulDeleteRoleRequest {
    name: string;
    consulMountPath: string;
}

export interface SecretsApiConsulGenerateCredentialsRequest {
    role: string;
    consulMountPath: string;
}

export interface SecretsApiConsulListRolesRequest {
    consulMountPath: string;
    list: ConsulListRolesListEnum;
}

export interface SecretsApiConsulReadAccessConfigurationRequest {
    consulMountPath: string;
}

export interface SecretsApiConsulReadRoleRequest {
    name: string;
    consulMountPath: string;
}

export interface SecretsApiConsulWriteRoleOperationRequest {
    name: string;
    consulMountPath: string;
    consulWriteRoleRequest: ConsulWriteRoleRequest;
}

export interface SecretsApiCubbyholeDeleteRequest {
    path: string;
}

export interface SecretsApiCubbyholeListRequest {
    path: string;
    list: CubbyholeListListEnum;
}

export interface SecretsApiCubbyholeReadRequest {
    path: string;
}

export interface SecretsApiCubbyholeWriteRequest {
    path: string;
    requestBody: { [key: string]: any; };
}

export interface SecretsApiDatabaseConfigureConnectionOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest;
}

export interface SecretsApiDatabaseDeleteConnectionConfigurationRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseDeleteRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseDeleteStaticRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseGenerateCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseListConnectionsRequest {
    databaseMountPath: string;
    list: DatabaseListConnectionsListEnum;
}

export interface SecretsApiDatabaseListRolesRequest {
    databaseMountPath: string;
    list: DatabaseListRolesListEnum;
}

export interface SecretsApiDatabaseListStaticRolesRequest {
    databaseMountPath: string;
    list: DatabaseListStaticRolesListEnum;
}

export interface SecretsApiDatabaseReadConnectionConfigurationRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseReadRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseReadStaticRoleRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseReadStaticRoleCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseReloadPluginRequest {
    pluginName: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseResetConnectionRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseRotateRootCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseRotateStaticRoleCredentialsRequest {
    name: string;
    databaseMountPath: string;
}

export interface SecretsApiDatabaseWriteRoleOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseWriteRoleRequest: DatabaseWriteRoleRequest;
}

export interface SecretsApiDatabaseWriteStaticRoleOperationRequest {
    name: string;
    databaseMountPath: string;
    databaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest;
}

export interface SecretsApiGoogleCloudConfigureOperationRequest {
    gcpMountPath: string;
    googleCloudConfigureRequest: GoogleCloudConfigureRequest;
}

export interface SecretsApiGoogleCloudDeleteImpersonatedAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudDeleteRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudDeleteStaticAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateImpersonatedAccountAccessTokenRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateImpersonatedAccountAccessToken2Request {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessTokenRequest {
    roleset: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken2Request {
    roleset: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken3Request {
    roleset: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken4Request {
    roleset: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetKeyOperationRequest {
    roleset: string;
    gcpMountPath: string;
    googleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey2Request {
    roleset: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey3OperationRequest {
    roleset: string;
    gcpMountPath: string;
    googleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey4Request {
    roleset: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountAccessTokenRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountAccessToken2Request {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountKeyOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountKey2Request {
    name: string;
    gcpMountPath: string;
    keyAlgorithm?: string;
    keyType?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudKmsConfigureOperationRequest {
    gcpkmsMountPath: string;
    googleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest;
}

export interface SecretsApiGoogleCloudKmsConfigureKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest;
}

export interface SecretsApiGoogleCloudKmsDecryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest;
}

export interface SecretsApiGoogleCloudKmsDeleteConfigurationRequest {
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsDeleteKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsDeregisterKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsDeregisterKey2Request {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsEncryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest;
}

export interface SecretsApiGoogleCloudKmsListKeysRequest {
    gcpkmsMountPath: string;
    list: GoogleCloudKmsListKeysListEnum;
}

export interface SecretsApiGoogleCloudKmsReadConfigurationRequest {
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsReadKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsReadKeyConfigurationRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsReencryptOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest;
}

export interface SecretsApiGoogleCloudKmsRegisterKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest;
}

export interface SecretsApiGoogleCloudKmsRetrievePublicKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsRotateKeyRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsSignOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsSignRequest: GoogleCloudKmsSignRequest;
}

export interface SecretsApiGoogleCloudKmsTrimKeyVersionsRequest {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsTrimKeyVersions2Request {
    key: string;
    gcpkmsMountPath: string;
}

export interface SecretsApiGoogleCloudKmsVerifyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest;
}

export interface SecretsApiGoogleCloudKmsWriteKeyOperationRequest {
    key: string;
    gcpkmsMountPath: string;
    googleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest;
}

export interface SecretsApiGoogleCloudListImpersonatedAccountsRequest {
    gcpMountPath: string;
    list: GoogleCloudListImpersonatedAccountsListEnum;
}

export interface SecretsApiGoogleCloudListImpersonatedAccounts2Request {
    gcpMountPath: string;
    list: GoogleCloudListImpersonatedAccounts2ListEnum;
}

export interface SecretsApiGoogleCloudListRolesetsRequest {
    gcpMountPath: string;
    list: GoogleCloudListRolesetsListEnum;
}

export interface SecretsApiGoogleCloudListRolesets2Request {
    gcpMountPath: string;
    list: GoogleCloudListRolesets2ListEnum;
}

export interface SecretsApiGoogleCloudListStaticAccountsRequest {
    gcpMountPath: string;
    list: GoogleCloudListStaticAccountsListEnum;
}

export interface SecretsApiGoogleCloudListStaticAccounts2Request {
    gcpMountPath: string;
    list: GoogleCloudListStaticAccounts2ListEnum;
}

export interface SecretsApiGoogleCloudReadConfigurationRequest {
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudReadImpersonatedAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudReadRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudReadStaticAccountRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudRotateRolesetRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudRotateRolesetKeyRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudRotateRootCredentialsRequest {
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudRotateStaticAccountKeyRequest {
    name: string;
    gcpMountPath: string;
}

export interface SecretsApiGoogleCloudWriteImpersonatedAccountOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest;
}

export interface SecretsApiGoogleCloudWriteRolesetOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest;
}

export interface SecretsApiGoogleCloudWriteStaticAccountOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest;
}

export interface SecretsApiKubernetesCheckConfigurationRequest {
    kubernetesMountPath: string;
}

export interface SecretsApiKubernetesConfigureOperationRequest {
    kubernetesMountPath: string;
    kubernetesConfigureRequest: KubernetesConfigureRequest;
}

export interface SecretsApiKubernetesDeleteConfigurationRequest {
    kubernetesMountPath: string;
}

export interface SecretsApiKubernetesDeleteRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface SecretsApiKubernetesGenerateCredentialsOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest;
}

export interface SecretsApiKubernetesListRolesRequest {
    kubernetesMountPath: string;
    list: KubernetesListRolesListEnum;
}

export interface SecretsApiKubernetesReadConfigurationRequest {
    kubernetesMountPath: string;
}

export interface SecretsApiKubernetesReadRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface SecretsApiKubernetesWriteRoleOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesWriteRoleRequest: KubernetesWriteRoleRequest;
}

export interface SecretsApiKvV1DeleteRequest {
    path: string;
    kvV1MountPath: string;
}

export interface SecretsApiKvV1ListRequest {
    path: string;
    kvV1MountPath: string;
    list: KvV1ListListEnum;
}

export interface SecretsApiKvV1ReadRequest {
    path: string;
    kvV1MountPath: string;
}

export interface SecretsApiKvV1WriteRequest {
    path: string;
    kvV1MountPath: string;
    requestBody: { [key: string]: any; };
}

export interface SecretsApiKvV2ConfigureOperationRequest {
    kvV2MountPath: string;
    kvV2ConfigureRequest: KvV2ConfigureRequest;
}

export interface SecretsApiKvV2DeleteRequest {
    path: string;
    kvV2MountPath: string;
}

export interface SecretsApiKvV2DeleteMetadataAndAllVersionsRequest {
    path: string;
    kvV2MountPath: string;
}

export interface SecretsApiKvV2DeleteVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest;
}

export interface SecretsApiKvV2DestroyVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest;
}

export interface SecretsApiKvV2ListRequest {
    path: string;
    kvV2MountPath: string;
    list: KvV2ListListEnum;
}

export interface SecretsApiKvV2ReadRequest {
    path: string;
    kvV2MountPath: string;
}

export interface SecretsApiKvV2ReadConfigurationRequest {
    kvV2MountPath: string;
}

export interface SecretsApiKvV2ReadMetadataRequest {
    path: string;
    kvV2MountPath: string;
}

export interface SecretsApiKvV2ReadSubkeysRequest {
    path: string;
    kvV2MountPath: string;
}

export interface SecretsApiKvV2UndeleteVersionsOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest;
}

export interface SecretsApiKvV2WriteOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2WriteRequest: KvV2WriteRequest;
}

export interface SecretsApiKvV2WriteMetadataOperationRequest {
    path: string;
    kvV2MountPath: string;
    kvV2WriteMetadataRequest: KvV2WriteMetadataRequest;
}

export interface SecretsApiLdapConfigureOperationRequest {
    ldapMountPath: string;
    ldapConfigureRequest: LdapConfigureRequest;
}

export interface SecretsApiLdapDeleteConfigurationRequest {
    ldapMountPath: string;
}

export interface SecretsApiLdapDeleteDynamicRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapDeleteStaticRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapLibraryCheckInOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryCheckInRequest: LdapLibraryCheckInRequest;
}

export interface SecretsApiLdapLibraryCheckOutOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryCheckOutRequest: LdapLibraryCheckOutRequest;
}

export interface SecretsApiLdapLibraryCheckStatusRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapLibraryConfigureOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryConfigureRequest: LdapLibraryConfigureRequest;
}

export interface SecretsApiLdapLibraryDeleteRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapLibraryForceCheckInOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest;
}

export interface SecretsApiLdapLibraryListRequest {
    ldapMountPath: string;
    list: LdapLibraryListListEnum;
}

export interface SecretsApiLdapLibraryListLibraryPathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapLibraryListLibraryPathListEnum;
}

export interface SecretsApiLdapLibraryListLibraryPath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapLibraryListLibraryPath0ListEnum;
}

export interface SecretsApiLdapLibraryReadRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapListDynamicRolesRequest {
    ldapMountPath: string;
    list: LdapListDynamicRolesListEnum;
}

export interface SecretsApiLdapListRolePathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapListRolePathListEnum;
}

export interface SecretsApiLdapListRolePath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapListRolePath0ListEnum;
}

export interface SecretsApiLdapListStaticRolePathRequest {
    path: string;
    ldapMountPath: string;
    list: LdapListStaticRolePathListEnum;
}

export interface SecretsApiLdapListStaticRolePath0Request {
    path: string;
    ldapMountPath: string;
    list: LdapListStaticRolePath0ListEnum;
}

export interface SecretsApiLdapListStaticRolesRequest {
    ldapMountPath: string;
    list: LdapListStaticRolesListEnum;
}

export interface SecretsApiLdapReadConfigurationRequest {
    ldapMountPath: string;
}

export interface SecretsApiLdapReadDynamicRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapReadStaticRoleRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapRequestDynamicRoleCredentialsRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapRequestStaticRoleCredentialsRequest {
    name: string;
    ldapMountPath: string;
}

export interface SecretsApiLdapRotateRootCredentialsRequest {
    ldapMountPath: string;
}

export interface SecretsApiLdapRotateStaticRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapRotateStaticRoleRequest: LdapRotateStaticRoleRequest;
}

export interface SecretsApiLdapWriteDynamicRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest;
}

export interface SecretsApiLdapWriteStaticRoleOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteStaticRoleRequest: LdapWriteStaticRoleRequest;
}

export interface SecretsApiMongoDbAtlasConfigureOperationRequest {
    mongodbatlasMountPath: string;
    mongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest;
}

export interface SecretsApiMongoDbAtlasDeleteRoleRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface SecretsApiMongoDbAtlasGenerateCredentialsRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface SecretsApiMongoDbAtlasGenerateCredentials2Request {
    name: string;
    mongodbatlasMountPath: string;
}

export interface SecretsApiMongoDbAtlasListRolesRequest {
    mongodbatlasMountPath: string;
    list: MongoDbAtlasListRolesListEnum;
}

export interface SecretsApiMongoDbAtlasReadConfigurationRequest {
    mongodbatlasMountPath: string;
}

export interface SecretsApiMongoDbAtlasReadRoleRequest {
    name: string;
    mongodbatlasMountPath: string;
}

export interface SecretsApiMongoDbAtlasWriteRoleOperationRequest {
    name: string;
    mongodbatlasMountPath: string;
    mongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest;
}

export interface SecretsApiNomadConfigureAccessOperationRequest {
    nomadMountPath: string;
    nomadConfigureAccessRequest: NomadConfigureAccessRequest;
}

export interface SecretsApiNomadConfigureLeaseOperationRequest {
    nomadMountPath: string;
    nomadConfigureLeaseRequest: NomadConfigureLeaseRequest;
}

export interface SecretsApiNomadDeleteAccessConfigurationRequest {
    nomadMountPath: string;
}

export interface SecretsApiNomadDeleteLeaseConfigurationRequest {
    nomadMountPath: string;
}

export interface SecretsApiNomadDeleteRoleRequest {
    name: string;
    nomadMountPath: string;
}

export interface SecretsApiNomadGenerateCredentialsRequest {
    name: string;
    nomadMountPath: string;
}

export interface SecretsApiNomadListRolesRequest {
    nomadMountPath: string;
    list: NomadListRolesListEnum;
}

export interface SecretsApiNomadReadAccessConfigurationRequest {
    nomadMountPath: string;
}

export interface SecretsApiNomadReadLeaseConfigurationRequest {
    nomadMountPath: string;
}

export interface SecretsApiNomadReadRoleRequest {
    name: string;
    nomadMountPath: string;
}

export interface SecretsApiNomadWriteRoleOperationRequest {
    name: string;
    nomadMountPath: string;
    nomadWriteRoleRequest: NomadWriteRoleRequest;
}

export interface SecretsApiPkiConfigureAcmeOperationRequest {
    pkiMountPath: string;
    pkiConfigureAcmeRequest: PkiConfigureAcmeRequest;
}

export interface SecretsApiPkiConfigureAutoTidyOperationRequest {
    pkiMountPath: string;
    pkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest;
}

export interface SecretsApiPkiConfigureCaOperationRequest {
    pkiMountPath: string;
    pkiConfigureCaRequest: PkiConfigureCaRequest;
}

export interface SecretsApiPkiConfigureClusterOperationRequest {
    pkiMountPath: string;
    pkiConfigureClusterRequest: PkiConfigureClusterRequest;
}

export interface SecretsApiPkiConfigureCmpOperationRequest {
    pkiMountPath: string;
    pkiConfigureCmpRequest: PkiConfigureCmpRequest;
}

export interface SecretsApiPkiConfigureCrlOperationRequest {
    pkiMountPath: string;
    pkiConfigureCrlRequest: PkiConfigureCrlRequest;
}

export interface SecretsApiPkiConfigureEstOperationRequest {
    pkiMountPath: string;
    pkiConfigureEstRequest: PkiConfigureEstRequest;
}

export interface SecretsApiPkiConfigureExternalPolicyRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiConfigureExternalPolicy0Request {
    pkiMountPath: string;
    pkiConfigureExternalPolicyRequest: PkiConfigureExternalPolicyRequest;
}

export interface SecretsApiPkiConfigureIssuersOperationRequest {
    pkiMountPath: string;
    pkiConfigureIssuersRequest: PkiConfigureIssuersRequest;
}

export interface SecretsApiPkiConfigureKeysOperationRequest {
    pkiMountPath: string;
    pkiConfigureKeysRequest: PkiConfigureKeysRequest;
}

export interface SecretsApiPkiConfigureScepOperationRequest {
    pkiMountPath: string;
    pkiConfigureScepRequest: PkiConfigureScepRequest;
}

export interface SecretsApiPkiConfigureUrlsOperationRequest {
    pkiMountPath: string;
    pkiConfigureUrlsRequest: PkiConfigureUrlsRequest;
}

export interface SecretsApiPkiCrossSignIntermediateOperationRequest {
    pkiMountPath: string;
    pkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest;
}

export interface SecretsApiPkiDeleteEabKeyRequest {
    keyId: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiDeleteIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiDeleteKeyRequest {
    keyRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiDeleteRoleRequest {
    name: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiDeleteRootRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuerAndRoleRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuer0Request {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuer1Request {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKeyForRoleRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKey0Request {
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateEabKey1Request {
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiGenerateExportedKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest;
}

export interface SecretsApiPkiGenerateIntermediateOperationRequest {
    exported: PkiGenerateIntermediateExportedEnum;
    pkiMountPath: string;
    pkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest;
}

export interface SecretsApiPkiGenerateInternalKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest;
}

export interface SecretsApiPkiGenerateKmsKeyOperationRequest {
    pkiMountPath: string;
    pkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest;
}

export interface SecretsApiPkiGenerateRootOperationRequest {
    exported: PkiGenerateRootExportedEnum;
    pkiMountPath: string;
    pkiGenerateRootRequest: PkiGenerateRootRequest;
}

export interface SecretsApiPkiImportKeyOperationRequest {
    pkiMountPath: string;
    pkiImportKeyRequest: PkiImportKeyRequest;
}

export interface SecretsApiPkiIssueWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiIssueWithRoleRequest: PkiIssueWithRoleRequest;
}

export interface SecretsApiPkiIssuerIssueWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest;
}

export interface SecretsApiPkiIssuerReadCrlRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadCrlDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadCrlPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiIssuerResignCrlsOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest;
}

export interface SecretsApiPkiIssuerSignIntermediateOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest;
}

export interface SecretsApiPkiIssuerSignRevocationListOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest;
}

export interface SecretsApiPkiIssuerSignSelfIssuedOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest;
}

export interface SecretsApiPkiIssuerSignVerbatimOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest;
}

export interface SecretsApiPkiIssuerSignVerbatimWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest;
}

export interface SecretsApiPkiIssuerSignWithRoleOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest;
}

export interface SecretsApiPkiIssuersGenerateIntermediateOperationRequest {
    exported: PkiIssuersGenerateIntermediateExportedEnum;
    pkiMountPath: string;
    pkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest;
}

export interface SecretsApiPkiIssuersGenerateRootOperationRequest {
    exported: PkiIssuersGenerateRootExportedEnum;
    pkiMountPath: string;
    pkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest;
}

export interface SecretsApiPkiIssuersImportBundleOperationRequest {
    pkiMountPath: string;
    pkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest;
}

export interface SecretsApiPkiIssuersImportCertOperationRequest {
    pkiMountPath: string;
    pkiIssuersImportCertRequest: PkiIssuersImportCertRequest;
}

export interface SecretsApiPkiListAcmeAccountKeysRequest {
    pkiMountPath: string;
    list: PkiListAcmeAccountKeysListEnum;
}

export interface SecretsApiPkiListCertMetadataRequest {
    pkiMountPath: string;
    list: PkiListCertMetadataListEnum;
}

export interface SecretsApiPkiListCertsRequest {
    pkiMountPath: string;
    list: PkiListCertsListEnum;
}

export interface SecretsApiPkiListCertsRevocationQueueRequest {
    pkiMountPath: string;
    list: PkiListCertsRevocationQueueListEnum;
}

export interface SecretsApiPkiListEabKeysRequest {
    pkiMountPath: string;
    list: PkiListEabKeysListEnum;
}

export interface SecretsApiPkiListIssuersRequest {
    pkiMountPath: string;
    list: PkiListIssuersListEnum;
}

export interface SecretsApiPkiListKeysRequest {
    pkiMountPath: string;
    list: PkiListKeysListEnum;
}

export interface SecretsApiPkiListRevokedCertsRequest {
    pkiMountPath: string;
    list: PkiListRevokedCertsListEnum;
}

export interface SecretsApiPkiListRolesRequest {
    pkiMountPath: string;
    list: PkiListRolesListEnum;
}

export interface SecretsApiPkiListUnifiedRevokedCertsRequest {
    pkiMountPath: string;
    list: PkiListUnifiedRevokedCertsListEnum;
}

export interface SecretsApiPkiQueryOcspRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiQueryOcspWithGetReqRequest {
    req: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiQueryUnifiedOcspRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiQueryUnifiedOcspWithGetReqRequest {
    req: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadAcmeConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadAcmeDirectoryRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadAcmeKeyIdRequest {
    keyid: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadAcmeNewNonceRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadAutoTidyConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCaChainPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCaDerRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCaPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertRequest {
    serial: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertCaChainRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertDeltaCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertMetadataRequest {
    serial: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertRawDerRequest {
    serial: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertRawPemRequest {
    serial: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertUnifiedCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCertUnifiedDeltaCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadClusterConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCmpv2ConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCrlConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCrlDeltaRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCrlDeltaPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCrlDerRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadCrlPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadEstCacertsRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadEstConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadExternalPolicyAcmeDirectoryRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadExternalPolicyAcmeNewNonceRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadExternalPolicyPolicyAcmeDirectoryRequest {
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadExternalPolicyPolicyAcmeNewNonceRequest {
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerDerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefAcmeDirectoryRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefAcmeNewNonceRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerJsonRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuerPemRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadIssuersConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadKeyRequest {
    keyRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadKeysConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadRoleRequest {
    name: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadRolesRoleAcmeDirectoryRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadRolesRoleAcmeNewNonceRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadRolesRoleEstCacertsRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadRolesRoleScepRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiReadScepRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadScepConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadUnifiedCrlDeltaRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadUnifiedCrlDeltaPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadUnifiedCrlDerRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadUnifiedCrlPemRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReadUrlsConfigurationRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiReplaceRootOperationRequest {
    pkiMountPath: string;
    pkiReplaceRootRequest: PkiReplaceRootRequest;
}

export interface SecretsApiPkiRevokeOperationRequest {
    pkiMountPath: string;
    pkiRevokeRequest: PkiRevokeRequest;
}

export interface SecretsApiPkiRevokeIssuerRequest {
    issuerRef: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiRevokeWithKeyOperationRequest {
    pkiMountPath: string;
    pkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest;
}

export interface SecretsApiPkiRootSignIntermediateOperationRequest {
    pkiMountPath: string;
    pkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest;
}

export interface SecretsApiPkiRootSignSelfIssuedOperationRequest {
    pkiMountPath: string;
    pkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest;
}

export interface SecretsApiPkiRotateCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiRotateDeltaCrlRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiRotateRootOperationRequest {
    exported: PkiRotateRootExportedEnum;
    pkiMountPath: string;
    pkiRotateRootRequest: PkiRotateRootRequest;
}

export interface SecretsApiPkiSetSignedIntermediateOperationRequest {
    pkiMountPath: string;
    pkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest;
}

export interface SecretsApiPkiSignVerbatimOperationRequest {
    pkiMountPath: string;
    pkiSignVerbatimRequest: PkiSignVerbatimRequest;
}

export interface SecretsApiPkiSignVerbatimWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest;
}

export interface SecretsApiPkiSignWithRoleOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiSignWithRoleRequest: PkiSignWithRoleRequest;
}

export interface SecretsApiPkiTidyOperationRequest {
    pkiMountPath: string;
    pkiTidyRequest: PkiTidyRequest;
}

export interface SecretsApiPkiTidyCancelRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiTidyStatusRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteAcmeAccountKidOperationRequest {
    kid: string;
    pkiMountPath: string;
    pkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    pkiMountPath: string;
    pkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    pkiMountPath: string;
    pkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteAcmeKeyIdOperationRequest {
    keyid: string;
    pkiMountPath: string;
    pkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest;
}

export interface SecretsApiPkiWriteAcmeNewAccountOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteAcmeNewOrderOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteAcmeOrdersOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteAcmeRevokeCertOperationRequest {
    pkiMountPath: string;
    pkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteCmpRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteEstSimpleenrollRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteEstSimplereenrollRequest {
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeAccountKidOperationRequest {
    kid: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeNewAccountOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeNewOrderOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrdersOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeOrdersRequest: PkiWriteExternalPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeRevokeCertOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyIssueOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicyIssueRequest: PkiWriteExternalPolicyIssueRequest;
}

export interface SecretsApiPkiWriteExternalPolicyIssuePolicyOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyIssuePolicyRequest: PkiWriteExternalPolicyIssuePolicyRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeAccountKidOperationRequest {
    kid: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeNewAccountOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeNewOrderOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdOperationRequest {
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrdersOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeOrdersRequest: PkiWriteExternalPolicyPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeRevokeCertOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicySignRequest: PkiWriteExternalPolicySignRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignIntermediateOperationRequest {
    pkiMountPath: string;
    pkiWriteExternalPolicySignIntermediateRequest: PkiWriteExternalPolicySignIntermediateRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignIntermediatePolicyOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicySignIntermediatePolicyRequest: PkiWriteExternalPolicySignIntermediatePolicyRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignPolicyOperationRequest {
    policy: string;
    pkiMountPath: string;
    pkiWriteExternalPolicySignPolicyRequest: PkiWriteExternalPolicySignPolicyRequest;
}

export interface SecretsApiPkiWriteIssuerOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerRequest: PkiWriteIssuerRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrdersOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssueOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyIssueRequest: PkiWriteIssuerIssuerRefExternalPolicyIssueRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssuePolicyOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicySignRequest: PkiWriteIssuerIssuerRefExternalPolicySignRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediateOperationRequest {
    issuerRef: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignPolicyOperationRequest {
    issuerRef: string;
    policy: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest {
    issuerRef: string;
    kid: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    issuerRef: string;
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest {
    issuerRef: string;
    role: string;
    pkiMountPath: string;
    pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteKeyOperationRequest {
    keyRef: string;
    pkiMountPath: string;
    pkiWriteKeyRequest: PkiWriteKeyRequest;
}

export interface SecretsApiPkiWriteRoleOperationRequest {
    name: string;
    pkiMountPath: string;
    pkiWriteRoleRequest: PkiWriteRoleRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeAccountKidOperationRequest {
    kid: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    authId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    authId: string;
    challengeType: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeNewAccountOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeNewOrderOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    orderId: string;
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrdersOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeRevokeCertOperationRequest {
    role: string;
    pkiMountPath: string;
    pkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteRolesRoleCmpRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteRolesRoleEstSimpleenrollRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteRolesRoleEstSimplereenrollRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteRolesRoleScepRequest {
    role: string;
    pkiMountPath: string;
}

export interface SecretsApiPkiWriteScepRequest {
    pkiMountPath: string;
}

export interface SecretsApiRabbitMqConfigureConnectionOperationRequest {
    rabbitmqMountPath: string;
    rabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest;
}

export interface SecretsApiRabbitMqConfigureLeaseOperationRequest {
    rabbitmqMountPath: string;
    rabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest;
}

export interface SecretsApiRabbitMqDeleteRoleRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface SecretsApiRabbitMqListRolesRequest {
    rabbitmqMountPath: string;
    list: RabbitMqListRolesListEnum;
}

export interface SecretsApiRabbitMqReadLeaseConfigurationRequest {
    rabbitmqMountPath: string;
}

export interface SecretsApiRabbitMqReadRoleRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface SecretsApiRabbitMqRequestCredentialsRequest {
    name: string;
    rabbitmqMountPath: string;
}

export interface SecretsApiRabbitMqWriteRoleOperationRequest {
    name: string;
    rabbitmqMountPath: string;
    rabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest;
}

export interface SecretsApiSshConfigureCaOperationRequest {
    sshMountPath: string;
    sshConfigureCaRequest: SshConfigureCaRequest;
}

export interface SecretsApiSshConfigureZeroAddressOperationRequest {
    sshMountPath: string;
    sshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest;
}

export interface SecretsApiSshDeleteCaConfigurationRequest {
    sshMountPath: string;
}

export interface SecretsApiSshDeleteRoleRequest {
    role: string;
    sshMountPath: string;
}

export interface SecretsApiSshDeleteZeroAddressConfigurationRequest {
    sshMountPath: string;
}

export interface SecretsApiSshGenerateCredentialsOperationRequest {
    role: string;
    sshMountPath: string;
    sshGenerateCredentialsRequest: SshGenerateCredentialsRequest;
}

export interface SecretsApiSshIssueCertificateOperationRequest {
    role: string;
    sshMountPath: string;
    sshIssueCertificateRequest: SshIssueCertificateRequest;
}

export interface SecretsApiSshListRolesRequest {
    sshMountPath: string;
    list: SshListRolesListEnum;
}

export interface SecretsApiSshListRolesByIpOperationRequest {
    sshMountPath: string;
    sshListRolesByIpRequest: SshListRolesByIpRequest;
}

export interface SecretsApiSshReadCaConfigurationRequest {
    sshMountPath: string;
}

export interface SecretsApiSshReadPublicKeyRequest {
    sshMountPath: string;
}

export interface SecretsApiSshReadRoleRequest {
    role: string;
    sshMountPath: string;
}

export interface SecretsApiSshReadZeroAddressConfigurationRequest {
    sshMountPath: string;
}

export interface SecretsApiSshSignCertificateOperationRequest {
    role: string;
    sshMountPath: string;
    sshSignCertificateRequest: SshSignCertificateRequest;
}

export interface SecretsApiSshTidyDynamicHostKeysRequest {
    sshMountPath: string;
}

export interface SecretsApiSshVerifyOtpOperationRequest {
    sshMountPath: string;
    sshVerifyOtpRequest: SshVerifyOtpRequest;
}

export interface SecretsApiSshWriteRoleOperationRequest {
    role: string;
    sshMountPath: string;
    sshWriteRoleRequest: SshWriteRoleRequest;
}

export interface SecretsApiTerraformCloudConfigureOperationRequest {
    terraformMountPath: string;
    terraformCloudConfigureRequest: TerraformCloudConfigureRequest;
}

export interface SecretsApiTerraformCloudDeleteConfigurationRequest {
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudDeleteRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudGenerateCredentialsRequest {
    name: string;
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudGenerateCredentials2Request {
    name: string;
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudListRolesRequest {
    terraformMountPath: string;
    list: TerraformCloudListRolesListEnum;
}

export interface SecretsApiTerraformCloudReadConfigurationRequest {
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudReadRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudRotateRoleRequest {
    name: string;
    terraformMountPath: string;
}

export interface SecretsApiTerraformCloudWriteRoleOperationRequest {
    name: string;
    terraformMountPath: string;
    terraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest;
}

export interface SecretsApiTotpCreateKeyOperationRequest {
    name: string;
    totpMountPath: string;
    totpCreateKeyRequest: TotpCreateKeyRequest;
}

export interface SecretsApiTotpDeleteKeyRequest {
    name: string;
    totpMountPath: string;
}

export interface SecretsApiTotpGenerateCodeRequest {
    name: string;
    totpMountPath: string;
}

export interface SecretsApiTotpListKeysRequest {
    totpMountPath: string;
    list: TotpListKeysListEnum;
}

export interface SecretsApiTotpReadKeyRequest {
    name: string;
    totpMountPath: string;
}

export interface SecretsApiTotpValidateCodeOperationRequest {
    name: string;
    totpMountPath: string;
    totpValidateCodeRequest: TotpValidateCodeRequest;
}

export interface SecretsApiTransitBackUpKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface SecretsApiTransitByokKeyRequest {
    destination: string;
    source: string;
    transitMountPath: string;
}

export interface SecretsApiTransitByokKeyVersionRequest {
    destination: string;
    source: string;
    version: string;
    transitMountPath: string;
}

export interface SecretsApiTransitConfigureCacheOperationRequest {
    transitMountPath: string;
    transitConfigureCacheRequest: TransitConfigureCacheRequest;
}

export interface SecretsApiTransitConfigureKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitConfigureKeyRequest: TransitConfigureKeyRequest;
}

export interface SecretsApiTransitConfigureKeysOperationRequest {
    transitMountPath: string;
    transitConfigureKeysRequest: TransitConfigureKeysRequest;
}

export interface SecretsApiTransitCreateKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitCreateKeyRequest: TransitCreateKeyRequest;
}

export interface SecretsApiTransitDecryptOperationRequest {
    name: string;
    transitMountPath: string;
    transitDecryptRequest: TransitDecryptRequest;
}

export interface SecretsApiTransitDeleteKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface SecretsApiTransitEncryptOperationRequest {
    name: string;
    transitMountPath: string;
    transitEncryptRequest: TransitEncryptRequest;
}

export interface SecretsApiTransitExportKeyRequest {
    name: string;
    type: string;
    transitMountPath: string;
}

export interface SecretsApiTransitExportKeyVersionRequest {
    name: string;
    type: string;
    version: string;
    transitMountPath: string;
}

export interface SecretsApiTransitGenerateCmacOperationRequest {
    name: string;
    transitMountPath: string;
    transitGenerateCmacRequest: TransitGenerateCmacRequest;
}

export interface SecretsApiTransitGenerateCmacWithMacLengthOperationRequest {
    name: string;
    urlMacLength: string;
    transitMountPath: string;
    transitGenerateCmacWithMacLengthRequest: TransitGenerateCmacWithMacLengthRequest;
}

export interface SecretsApiTransitGenerateCsrForKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest;
}

export interface SecretsApiTransitGenerateDataKeyOperationRequest {
    name: string;
    plaintext: string;
    transitMountPath: string;
    transitGenerateDataKeyRequest: TransitGenerateDataKeyRequest;
}

export interface SecretsApiTransitGenerateHmacOperationRequest {
    name: string;
    transitMountPath: string;
    transitGenerateHmacRequest: TransitGenerateHmacRequest;
}

export interface SecretsApiTransitGenerateHmacWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest;
}

export interface SecretsApiTransitGenerateRandomOperationRequest {
    transitMountPath: string;
    transitGenerateRandomRequest: TransitGenerateRandomRequest;
}

export interface SecretsApiTransitGenerateRandomWithBytesOperationRequest {
    urlbytes: string;
    transitMountPath: string;
    transitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest;
}

export interface SecretsApiTransitGenerateRandomWithSourceOperationRequest {
    source: string;
    transitMountPath: string;
    transitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest;
}

export interface SecretsApiTransitGenerateRandomWithSourceAndBytesOperationRequest {
    source: string;
    urlbytes: string;
    transitMountPath: string;
    transitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest;
}

export interface SecretsApiTransitHashOperationRequest {
    transitMountPath: string;
    transitHashRequest: TransitHashRequest;
}

export interface SecretsApiTransitHashWithAlgorithmOperationRequest {
    urlalgorithm: string;
    transitMountPath: string;
    transitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest;
}

export interface SecretsApiTransitImportKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitImportKeyRequest: TransitImportKeyRequest;
}

export interface SecretsApiTransitImportKeyVersionOperationRequest {
    name: string;
    transitMountPath: string;
    transitImportKeyVersionRequest: TransitImportKeyVersionRequest;
}

export interface SecretsApiTransitListKeysRequest {
    transitMountPath: string;
    list: TransitListKeysListEnum;
}

export interface SecretsApiTransitReadCacheConfigurationRequest {
    transitMountPath: string;
}

export interface SecretsApiTransitReadKeyRequest {
    name: string;
    transitMountPath: string;
}

export interface SecretsApiTransitReadKeysConfigurationRequest {
    transitMountPath: string;
}

export interface SecretsApiTransitReadWrappingKeyRequest {
    transitMountPath: string;
}

export interface SecretsApiTransitRestoreAndRenameKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest;
}

export interface SecretsApiTransitRestoreKeyOperationRequest {
    transitMountPath: string;
    transitRestoreKeyRequest: TransitRestoreKeyRequest;
}

export interface SecretsApiTransitRewrapOperationRequest {
    name: string;
    transitMountPath: string;
    transitRewrapRequest: TransitRewrapRequest;
}

export interface SecretsApiTransitRotateKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitRotateKeyRequest: TransitRotateKeyRequest;
}

export interface SecretsApiTransitSetCertificateForKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest;
}

export interface SecretsApiTransitSignOperationRequest {
    name: string;
    transitMountPath: string;
    transitSignRequest: TransitSignRequest;
}

export interface SecretsApiTransitSignWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest;
}

export interface SecretsApiTransitTrimKeyOperationRequest {
    name: string;
    transitMountPath: string;
    transitTrimKeyRequest: TransitTrimKeyRequest;
}

export interface SecretsApiTransitVerifyOperationRequest {
    name: string;
    transitMountPath: string;
    transitVerifyRequest: TransitVerifyRequest;
}

export interface SecretsApiTransitVerifyWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transitMountPath: string;
    transitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest;
}

/**
 * 
 */
export class SecretsApi extends runtime.BaseAPI {

    /**
     */
    async aliCloudConfigureRaw(requestParameters: SecretsApiAliCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudConfigure().'
            );
        }

        if (requestParameters['aliCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudConfigureRequest',
                'Required parameter "aliCloudConfigureRequest" was null or undefined when calling aliCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudConfigureRequestToJSON(requestParameters['aliCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudConfigure(alicloudMountPath: string, aliCloudConfigureRequest: AliCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudConfigureRaw({ alicloudMountPath: alicloudMountPath, aliCloudConfigureRequest: aliCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliCloudDeleteConfigurationRaw(requestParameters: SecretsApiAliCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudDeleteConfiguration(alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudDeleteConfigurationRaw({ alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRoleRaw(requestParameters: SecretsApiAliCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRole(name: string, alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudDeleteRoleRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentialsRaw(requestParameters: SecretsApiAliCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentials(name: string, alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudGenerateCredentialsRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRolesRaw(requestParameters: SecretsApiAliCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRoles(alicloudMountPath: string, list: AliCloudListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListRolesRaw({ alicloudMountPath: alicloudMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliCloudReadConfigurationRaw(requestParameters: SecretsApiAliCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudReadConfiguration(alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudReadConfigurationRaw({ alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRoleRaw(requestParameters: SecretsApiAliCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudReadRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRole(name: string, alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudReadRoleRaw({ name: name, alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRoleRaw(requestParameters: SecretsApiAliCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['aliCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudWriteRoleRequest',
                'Required parameter "aliCloudWriteRoleRequest" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudWriteRoleRequestToJSON(requestParameters['aliCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRole(name: string, alicloudMountPath: string, aliCloudWriteRoleRequest: AliCloudWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudWriteRoleRaw({ name: name, alicloudMountPath: alicloudMountPath, aliCloudWriteRoleRequest: aliCloudWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureLeaseRaw(requestParameters: SecretsApiAwsConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureLease().'
            );
        }

        if (requestParameters['awsConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureLeaseRequest',
                'Required parameter "awsConfigureLeaseRequest" was null or undefined when calling awsConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureLeaseRequestToJSON(requestParameters['awsConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureLease(awsMountPath: string, awsConfigureLeaseRequest: AwsConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureLeaseRaw({ awsMountPath: awsMountPath, awsConfigureLeaseRequest: awsConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureRootIamCredentialsRaw(requestParameters: SecretsApiAwsConfigureRootIamCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        if (requestParameters['awsConfigureRootIamCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRootIamCredentialsRequest',
                'Required parameter "awsConfigureRootIamCredentialsRequest" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRootIamCredentialsRequestToJSON(requestParameters['awsConfigureRootIamCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRootIamCredentials(awsMountPath: string, awsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureRootIamCredentialsRaw({ awsMountPath: awsMountPath, awsConfigureRootIamCredentialsRequest: awsConfigureRootIamCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRoleRaw(requestParameters: SecretsApiAwsDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRole(name: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteStaticRolesNameRaw(requestParameters: SecretsApiAwsDeleteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteStaticRolesName(name: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateCredentialsRaw(requestParameters: SecretsApiAwsGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roleArn'] != null) {
            queryParameters['role_arn'] = requestParameters['roleArn'];
        }

        if (requestParameters['roleSessionName'] != null) {
            queryParameters['role_session_name'] = requestParameters['roleSessionName'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentials(name: string, awsMountPath: string, roleArn?: string, roleSessionName?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateCredentialsRaw({ name: name, awsMountPath: awsMountPath, roleArn: roleArn, roleSessionName: roleSessionName, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateCredentialsWithParametersRaw(requestParameters: SecretsApiAwsGenerateCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsGenerateCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'awsGenerateCredentialsWithParametersRequest',
                'Required parameter "awsGenerateCredentialsWithParametersRequest" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateCredentialsWithParametersRequestToJSON(requestParameters['awsGenerateCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentialsWithParameters(name: string, awsMountPath: string, awsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateCredentialsWithParametersRaw({ name: name, awsMountPath: awsMountPath, awsGenerateCredentialsWithParametersRequest: awsGenerateCredentialsWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateStsCredentialsRaw(requestParameters: SecretsApiAwsGenerateStsCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roleArn'] != null) {
            queryParameters['role_arn'] = requestParameters['roleArn'];
        }

        if (requestParameters['roleSessionName'] != null) {
            queryParameters['role_session_name'] = requestParameters['roleSessionName'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentials(name: string, awsMountPath: string, roleArn?: string, roleSessionName?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateStsCredentialsRaw({ name: name, awsMountPath: awsMountPath, roleArn: roleArn, roleSessionName: roleSessionName, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateStsCredentialsWithParametersRaw(requestParameters: SecretsApiAwsGenerateStsCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['awsGenerateStsCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'awsGenerateStsCredentialsWithParametersRequest',
                'Required parameter "awsGenerateStsCredentialsWithParametersRequest" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateStsCredentialsWithParametersRequestToJSON(requestParameters['awsGenerateStsCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentialsWithParameters(name: string, awsMountPath: string, awsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateStsCredentialsWithParametersRaw({ name: name, awsMountPath: awsMountPath, awsGenerateStsCredentialsWithParametersRequest: awsGenerateStsCredentialsWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRolesRaw(requestParameters: SecretsApiAwsListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRoles(awsMountPath: string, list: AwsListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRolesRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListStaticRolesRaw(requestParameters: SecretsApiAwsListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListStaticRoles(awsMountPath: string, list: AwsListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListStaticRolesRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadLeaseConfigurationRaw(requestParameters: SecretsApiAwsReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadLeaseConfiguration(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadLeaseConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRoleRaw(requestParameters: SecretsApiAwsReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRole(name: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRootIamCredentialsConfigurationRaw(requestParameters: SecretsApiAwsReadRootIamCredentialsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRootIamCredentialsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRootIamCredentialsConfiguration(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRootIamCredentialsConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStaticCredsNameRaw(requestParameters: SecretsApiAwsReadStaticCredsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticCredsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticCredsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticCredsName(name: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticCredsNameResponse> {
        const response = await this.awsReadStaticCredsNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStaticRolesNameRaw(requestParameters: SecretsApiAwsReadStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticRolesName(name: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticRolesNameResponse> {
        const response = await this.awsReadStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsRotateRootIamCredentialsRaw(requestParameters: SecretsApiAwsRotateRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsRotateRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsRotateRootIamCredentials(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsRotateRootIamCredentialsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRoleRaw(requestParameters: SecretsApiAwsWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['awsWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteRoleRequest',
                'Required parameter "awsWriteRoleRequest" was null or undefined when calling awsWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteRoleRequestToJSON(requestParameters['awsWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRole(name: string, awsMountPath: string, awsWriteRoleRequest: AwsWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteRoleRaw({ name: name, awsMountPath: awsMountPath, awsWriteRoleRequest: awsWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteStaticRolesNameRaw(requestParameters: SecretsApiAwsWriteStaticRolesNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsWriteStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['awsWriteStaticRolesNameRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteStaticRolesNameRequest',
                'Required parameter "awsWriteStaticRolesNameRequest" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteStaticRolesNameRequestToJSON(requestParameters['awsWriteStaticRolesNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsWriteStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsWriteStaticRolesName(name: string, awsMountPath: string, awsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsWriteStaticRolesNameResponse> {
        const response = await this.awsWriteStaticRolesNameRaw({ name: name, awsMountPath: awsMountPath, awsWriteStaticRolesNameRequest: awsWriteStaticRolesNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureConfigureRaw(requestParameters: SecretsApiAzureConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureConfigure().'
            );
        }

        if (requestParameters['azureConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'azureConfigureRequest',
                'Required parameter "azureConfigureRequest" was null or undefined when calling azureConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureConfigureRequestToJSON(requestParameters['azureConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureConfigure(azureMountPath: string, azureConfigureRequest: AzureConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureConfigureRaw({ azureMountPath: azureMountPath, azureConfigureRequest: azureConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureDeleteConfigurationRaw(requestParameters: SecretsApiAzureDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteConfiguration(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRoleRaw(requestParameters: SecretsApiAzureDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureDeleteRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRole(name: string, azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * List existing roles.
     */
    async azureListRolesRaw(requestParameters: SecretsApiAzureListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling azureListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List existing roles.
     */
    async azureListRoles(azureMountPath: string, list: AzureListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.azureListRolesRaw({ azureMountPath: azureMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureReadConfigurationRaw(requestParameters: SecretsApiAzureReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadConfiguration(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRoleRaw(requestParameters: SecretsApiAzureReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureReadRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRole(name: string, azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureRequestServicePrincipalCredentialsRaw(requestParameters: SecretsApiAzureRequestServicePrincipalCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRequestServicePrincipalCredentials(role: string, azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureRequestServicePrincipalCredentialsRaw({ role: role, azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureRotateRootRaw(requestParameters: SecretsApiAzureRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRotateRoot(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureRotateRootRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRoleRaw(requestParameters: SecretsApiAzureWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['azureWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'azureWriteRoleRequest',
                'Required parameter "azureWriteRoleRequest" was null or undefined when calling azureWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureWriteRoleRequestToJSON(requestParameters['azureWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRole(name: string, azureMountPath: string, azureWriteRoleRequest: AzureWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureWriteRoleRaw({ name: name, azureMountPath: azureMountPath, azureWriteRoleRequest: azureWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulConfigureAccessRaw(requestParameters: SecretsApiConsulConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulConfigureAccess().'
            );
        }

        if (requestParameters['consulConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'consulConfigureAccessRequest',
                'Required parameter "consulConfigureAccessRequest" was null or undefined when calling consulConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulConfigureAccessRequestToJSON(requestParameters['consulConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulConfigureAccess(consulMountPath: string, consulConfigureAccessRequest: ConsulConfigureAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulConfigureAccessRaw({ consulMountPath: consulMountPath, consulConfigureAccessRequest: consulConfigureAccessRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulDeleteRoleRaw(requestParameters: SecretsApiConsulDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulDeleteRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulDeleteRole(name: string, consulMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulDeleteRoleRaw({ name: name, consulMountPath: consulMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulGenerateCredentialsRaw(requestParameters: SecretsApiConsulGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulGenerateCredentials(role: string, consulMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulGenerateCredentialsRaw({ role: role, consulMountPath: consulMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulListRolesRaw(requestParameters: SecretsApiConsulListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling consulListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async consulListRoles(consulMountPath: string, list: ConsulListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.consulListRolesRaw({ consulMountPath: consulMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulReadAccessConfigurationRaw(requestParameters: SecretsApiConsulReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadAccessConfiguration(consulMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulReadAccessConfigurationRaw({ consulMountPath: consulMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulReadRoleRaw(requestParameters: SecretsApiConsulReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulReadRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadRole(name: string, consulMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulReadRoleRaw({ name: name, consulMountPath: consulMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulWriteRoleRaw(requestParameters: SecretsApiConsulWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['consulMountPath'] == null) {
            throw new runtime.RequiredError(
                'consulMountPath',
                'Required parameter "consulMountPath" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['consulWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'consulWriteRoleRequest',
                'Required parameter "consulWriteRoleRequest" was null or undefined when calling consulWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consulMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulWriteRoleRequestToJSON(requestParameters['consulWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulWriteRole(name: string, consulMountPath: string, consulWriteRoleRequest: ConsulWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulWriteRoleRaw({ name: name, consulMountPath: consulMountPath, consulWriteRoleRequest: consulWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDeleteRaw(requestParameters: SecretsApiCubbyholeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDelete(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeDeleteRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeListRaw(requestParameters: SecretsApiCubbyholeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling cubbyholeList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeList(path: string, list: CubbyholeListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.cubbyholeListRaw({ path: path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeReadRaw(requestParameters: SecretsApiCubbyholeReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeRead(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeReadRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWriteRaw(requestParameters: SecretsApiCubbyholeWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeWrite().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling cubbyholeWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWrite(path: string, requestBody: { [key: string]: any; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeWriteRaw({ path: path, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseConfigureConnectionRaw(requestParameters: SecretsApiDatabaseConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['databaseConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseConfigureConnectionRequest',
                'Required parameter "databaseConfigureConnectionRequest" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseConfigureConnectionRequestToJSON(requestParameters['databaseConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseConfigureConnection(name: string, databaseMountPath: string, databaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseConfigureConnectionRaw({ name: name, databaseMountPath: databaseMountPath, databaseConfigureConnectionRequest: databaseConfigureConnectionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseDeleteConnectionConfigurationRaw(requestParameters: SecretsApiDatabaseDeleteConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseDeleteConnectionConfiguration(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteConnectionConfigurationRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRoleRaw(requestParameters: SecretsApiDatabaseDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRole(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRoleRaw(requestParameters: SecretsApiDatabaseDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRole(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentialsRaw(requestParameters: SecretsApiDatabaseGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentials(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseGenerateCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnectionsRaw(requestParameters: SecretsApiDatabaseListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListConnections().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListConnections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnections(databaseMountPath: string, list: DatabaseListConnectionsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListConnectionsRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRolesRaw(requestParameters: SecretsApiDatabaseListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRoles(databaseMountPath: string, list: DatabaseListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListRolesRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRolesRaw(requestParameters: SecretsApiDatabaseListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRoles(databaseMountPath: string, list: DatabaseListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListStaticRolesRaw({ databaseMountPath: databaseMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseReadConnectionConfigurationRaw(requestParameters: SecretsApiDatabaseReadConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseReadConnectionConfiguration(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadConnectionConfigurationRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRoleRaw(requestParameters: SecretsApiDatabaseReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRole(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRoleRaw(requestParameters: SecretsApiDatabaseReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRole(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentialsRaw(requestParameters: SecretsApiDatabaseReadStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentials(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadStaticRoleCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPluginRaw(requestParameters: SecretsApiDatabaseReloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pluginName'] == null) {
            throw new runtime.RequiredError(
                'pluginName',
                'Required parameter "pluginName" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reload/{plugin_name}`.replace(`{${"plugin_name"}}`, encodeURIComponent(String(requestParameters['pluginName']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPlugin(pluginName: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReloadPluginRaw({ pluginName: pluginName, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnectionRaw(requestParameters: SecretsApiDatabaseResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseResetConnection().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseResetConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnection(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseResetConnectionRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseRotateRootCredentialsRaw(requestParameters: SecretsApiDatabaseRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-root/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateRootCredentials(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseRotateRootCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseRotateStaticRoleCredentialsRaw(requestParameters: SecretsApiDatabaseRotateStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateStaticRoleCredentials(name: string, databaseMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseRotateStaticRoleCredentialsRaw({ name: name, databaseMountPath: databaseMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRoleRaw(requestParameters: SecretsApiDatabaseWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['databaseWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseWriteRoleRequest',
                'Required parameter "databaseWriteRoleRequest" was null or undefined when calling databaseWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteRoleRequestToJSON(requestParameters['databaseWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRole(name: string, databaseMountPath: string, databaseWriteRoleRequest: DatabaseWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseWriteRoleRaw({ name: name, databaseMountPath: databaseMountPath, databaseWriteRoleRequest: databaseWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRoleRaw(requestParameters: SecretsApiDatabaseWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['databaseMountPath'] == null) {
            throw new runtime.RequiredError(
                'databaseMountPath',
                'Required parameter "databaseMountPath" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['databaseWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'databaseWriteStaticRoleRequest',
                'Required parameter "databaseWriteStaticRoleRequest" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['databaseMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteStaticRoleRequestToJSON(requestParameters['databaseWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRole(name: string, databaseMountPath: string, databaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseWriteStaticRoleRaw({ name: name, databaseMountPath: databaseMountPath, databaseWriteStaticRoleRequest: databaseWriteStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudConfigureRaw(requestParameters: SecretsApiGoogleCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudConfigure().'
            );
        }

        if (requestParameters['googleCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudConfigureRequest',
                'Required parameter "googleCloudConfigureRequest" was null or undefined when calling googleCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudConfigureRequestToJSON(requestParameters['googleCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudConfigure(gcpMountPath: string, googleCloudConfigureRequest: GoogleCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudConfigureRaw({ gcpMountPath: gcpMountPath, googleCloudConfigureRequest: googleCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudDeleteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccount(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteRolesetRaw(requestParameters: SecretsApiGoogleCloudDeleteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteRoleset(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteStaticAccountRaw(requestParameters: SecretsApiGoogleCloudDeleteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteStaticAccount(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateImpersonatedAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateImpersonatedAccountAccessTokenRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateImpersonatedAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateImpersonatedAccountAccessToken2Raw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken(roleset: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessTokenRaw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2(roleset: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken2Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3(roleset: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken3Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4(roleset: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken4Raw({ roleset: roleset, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKeyRaw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['googleCloudGenerateRolesetKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateRolesetKeyRequest',
                'Required parameter "googleCloudGenerateRolesetKeyRequest" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKeyRequestToJSON(requestParameters['googleCloudGenerateRolesetKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey(roleset: string, gcpMountPath: string, googleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKeyRaw({ roleset: roleset, gcpMountPath: gcpMountPath, googleCloudGenerateRolesetKeyRequest: googleCloudGenerateRolesetKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey2Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey2(roleset: string, gcpMountPath: string, keyAlgorithm?: string, keyType?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey2Raw({ roleset: roleset, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey3Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['googleCloudGenerateRolesetKey3Request'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateRolesetKey3Request',
                'Required parameter "googleCloudGenerateRolesetKey3Request" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKey3RequestToJSON(requestParameters['googleCloudGenerateRolesetKey3Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey3(roleset: string, gcpMountPath: string, googleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey3Raw({ roleset: roleset, gcpMountPath: gcpMountPath, googleCloudGenerateRolesetKey3Request: googleCloudGenerateRolesetKey3Request }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey4Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey4(roleset: string, gcpMountPath: string, keyAlgorithm?: string, keyType?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey4Raw({ roleset: roleset, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountAccessTokenRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountAccessToken2Raw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountKeyRaw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['googleCloudGenerateStaticAccountKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudGenerateStaticAccountKeyRequest',
                'Required parameter "googleCloudGenerateStaticAccountKeyRequest" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateStaticAccountKeyRequestToJSON(requestParameters['googleCloudGenerateStaticAccountKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey(name: string, gcpMountPath: string, googleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountKeyRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudGenerateStaticAccountKeyRequest: googleCloudGenerateStaticAccountKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2Raw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyAlgorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['keyAlgorithm'];
        }

        if (requestParameters['keyType'] != null) {
            queryParameters['key_type'] = requestParameters['keyType'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2(name: string, gcpMountPath: string, keyAlgorithm?: string, keyType?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountKey2Raw({ name: name, gcpMountPath: gcpMountPath, keyAlgorithm: keyAlgorithm, keyType: keyType, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsConfigureRaw(requestParameters: SecretsApiGoogleCloudKmsConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        if (requestParameters['googleCloudKmsConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsConfigureRequest',
                'Required parameter "googleCloudKmsConfigureRequest" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureRequestToJSON(requestParameters['googleCloudKmsConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigure(gcpkmsMountPath: string, googleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsConfigureRaw({ gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsConfigureRequest: googleCloudKmsConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsConfigureKeyRaw(requestParameters: SecretsApiGoogleCloudKmsConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['googleCloudKmsConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsConfigureKeyRequest',
                'Required parameter "googleCloudKmsConfigureKeyRequest" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureKeyRequestToJSON(requestParameters['googleCloudKmsConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigureKey(key: string, gcpkmsMountPath: string, googleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsConfigureKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsConfigureKeyRequest: googleCloudKmsConfigureKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecryptRaw(requestParameters: SecretsApiGoogleCloudKmsDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['googleCloudKmsDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsDecryptRequest',
                'Required parameter "googleCloudKmsDecryptRequest" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/decrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsDecryptRequestToJSON(requestParameters['googleCloudKmsDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecrypt(key: string, gcpkmsMountPath: string, googleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDecryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsDecryptRequest: googleCloudKmsDecryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeleteConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeleteConfiguration(gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeleteConfigurationRaw({ gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKeyRaw(requestParameters: SecretsApiGoogleCloudKmsDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKey(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeleteKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeregisterKeyRaw(requestParameters: SecretsApiGoogleCloudKmsDeregisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeregisterKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeregisterKey2Raw(requestParameters: SecretsApiGoogleCloudKmsDeregisterKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey2(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeregisterKey2Raw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncryptRaw(requestParameters: SecretsApiGoogleCloudKmsEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['googleCloudKmsEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsEncryptRequest',
                'Required parameter "googleCloudKmsEncryptRequest" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/encrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsEncryptRequestToJSON(requestParameters['googleCloudKmsEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncrypt(key: string, gcpkmsMountPath: string, googleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsEncryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsEncryptRequest: googleCloudKmsEncryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeysRaw(requestParameters: SecretsApiGoogleCloudKmsListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeys(gcpkmsMountPath: string, list: GoogleCloudKmsListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudKmsListKeysRaw({ gcpkmsMountPath: gcpkmsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsReadConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadConfiguration(gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadConfigurationRaw({ gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKeyRaw(requestParameters: SecretsApiGoogleCloudKmsReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKey(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsReadKeyConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsReadKeyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadKeyConfiguration(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadKeyConfigurationRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencryptRaw(requestParameters: SecretsApiGoogleCloudKmsReencryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['googleCloudKmsReencryptRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsReencryptRequest',
                'Required parameter "googleCloudKmsReencryptRequest" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/reencrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsReencryptRequestToJSON(requestParameters['googleCloudKmsReencryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencrypt(key: string, gcpkmsMountPath: string, googleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReencryptRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsReencryptRequest: googleCloudKmsReencryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRegisterKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['googleCloudKmsRegisterKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsRegisterKeyRequest',
                'Required parameter "googleCloudKmsRegisterKeyRequest" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/register/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsRegisterKeyRequestToJSON(requestParameters['googleCloudKmsRegisterKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKey(key: string, gcpkmsMountPath: string, googleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRegisterKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsRegisterKeyRequest: googleCloudKmsRegisterKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRetrievePublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/pubkey/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKey(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRetrievePublicKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/rotate/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKey(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRotateKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSignRaw(requestParameters: SecretsApiGoogleCloudKmsSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['googleCloudKmsSignRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsSignRequest',
                'Required parameter "googleCloudKmsSignRequest" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/sign/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsSignRequestToJSON(requestParameters['googleCloudKmsSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSign(key: string, gcpkmsMountPath: string, googleCloudKmsSignRequest: GoogleCloudKmsSignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsSignRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsSignRequest: googleCloudKmsSignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsTrimKeyVersionsRaw(requestParameters: SecretsApiGoogleCloudKmsTrimKeyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsTrimKeyVersionsRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2Raw(requestParameters: SecretsApiGoogleCloudKmsTrimKeyVersions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2(key: string, gcpkmsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsTrimKeyVersions2Raw({ key: key, gcpkmsMountPath: gcpkmsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerifyRaw(requestParameters: SecretsApiGoogleCloudKmsVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['googleCloudKmsVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsVerifyRequest',
                'Required parameter "googleCloudKmsVerifyRequest" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/verify/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsVerifyRequestToJSON(requestParameters['googleCloudKmsVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerify(key: string, gcpkmsMountPath: string, googleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsVerifyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsVerifyRequest: googleCloudKmsVerifyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKeyRaw(requestParameters: SecretsApiGoogleCloudKmsWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['gcpkmsMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpkmsMountPath',
                'Required parameter "gcpkmsMountPath" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['googleCloudKmsWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudKmsWriteKeyRequest',
                'Required parameter "googleCloudKmsWriteKeyRequest" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkmsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsWriteKeyRequestToJSON(requestParameters['googleCloudKmsWriteKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKey(key: string, gcpkmsMountPath: string, googleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsWriteKeyRaw({ key: key, gcpkmsMountPath: gcpkmsMountPath, googleCloudKmsWriteKeyRequest: googleCloudKmsWriteKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListImpersonatedAccountsRaw(requestParameters: SecretsApiGoogleCloudListImpersonatedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts(gcpMountPath: string, list: GoogleCloudListImpersonatedAccountsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccountsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2Raw(requestParameters: SecretsApiGoogleCloudListImpersonatedAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2(gcpMountPath: string, list: GoogleCloudListImpersonatedAccounts2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccounts2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesetsRaw(requestParameters: SecretsApiGoogleCloudListRolesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets(gcpMountPath: string, list: GoogleCloudListRolesetsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesetsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesets2Raw(requestParameters: SecretsApiGoogleCloudListRolesets2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/rolesets/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets2(gcpMountPath: string, list: GoogleCloudListRolesets2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesets2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccountsRaw(requestParameters: SecretsApiGoogleCloudListStaticAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts(gcpMountPath: string, list: GoogleCloudListStaticAccountsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccountsRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccounts2Raw(requestParameters: SecretsApiGoogleCloudListStaticAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts2(gcpMountPath: string, list: GoogleCloudListStaticAccounts2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccounts2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadConfigurationRaw(requestParameters: SecretsApiGoogleCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadConfiguration(gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadConfigurationRaw({ gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudReadImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadImpersonatedAccount(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadRolesetRaw(requestParameters: SecretsApiGoogleCloudReadRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadRoleset(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadStaticAccountRaw(requestParameters: SecretsApiGoogleCloudReadStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadStaticAccount(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRolesetRaw(requestParameters: SecretsApiGoogleCloudRotateRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRoleset(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRolesetRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRolesetKeyRaw(requestParameters: SecretsApiGoogleCloudRotateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRolesetKey(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRolesetKeyRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRootCredentialsRaw(requestParameters: SecretsApiGoogleCloudRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config/rotate-root`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRootCredentials(gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRootCredentialsRaw({ gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateStaticAccountKeyRaw(requestParameters: SecretsApiGoogleCloudRotateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateStaticAccountKey(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateStaticAccountKeyRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudWriteImpersonatedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['googleCloudWriteImpersonatedAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteImpersonatedAccountRequest',
                'Required parameter "googleCloudWriteImpersonatedAccountRequest" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteImpersonatedAccountRequestToJSON(requestParameters['googleCloudWriteImpersonatedAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteImpersonatedAccount(name: string, gcpMountPath: string, googleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteImpersonatedAccountRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteImpersonatedAccountRequest: googleCloudWriteImpersonatedAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteRolesetRaw(requestParameters: SecretsApiGoogleCloudWriteRolesetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['googleCloudWriteRolesetRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteRolesetRequest',
                'Required parameter "googleCloudWriteRolesetRequest" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteRolesetRequestToJSON(requestParameters['googleCloudWriteRolesetRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteRoleset(name: string, gcpMountPath: string, googleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteRolesetRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteRolesetRequest: googleCloudWriteRolesetRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteStaticAccountRaw(requestParameters: SecretsApiGoogleCloudWriteStaticAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['googleCloudWriteStaticAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteStaticAccountRequest',
                'Required parameter "googleCloudWriteStaticAccountRequest" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteStaticAccountRequestToJSON(requestParameters['googleCloudWriteStaticAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteStaticAccount(name: string, gcpMountPath: string, googleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteStaticAccountRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteStaticAccountRequest: googleCloudWriteStaticAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesCheckConfigurationRaw(requestParameters: SecretsApiKubernetesCheckConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesCheckConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/check`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesCheckConfiguration(kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesCheckConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesConfigureRaw(requestParameters: SecretsApiKubernetesConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesConfigure().'
            );
        }

        if (requestParameters['kubernetesConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesConfigureRequest',
                'Required parameter "kubernetesConfigureRequest" was null or undefined when calling kubernetesConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesConfigureRequestToJSON(requestParameters['kubernetesConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesConfigure(kubernetesMountPath: string, kubernetesConfigureRequest: KubernetesConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesConfigureRaw({ kubernetesMountPath: kubernetesMountPath, kubernetesConfigureRequest: kubernetesConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesDeleteConfigurationRaw(requestParameters: SecretsApiKubernetesDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteConfiguration(kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesDeleteConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesDeleteRoleRaw(requestParameters: SecretsApiKubernetesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteRole(name: string, kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesDeleteRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesGenerateCredentialsRaw(requestParameters: SecretsApiKubernetesGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['kubernetesGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesGenerateCredentialsRequest',
                'Required parameter "kubernetesGenerateCredentialsRequest" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesGenerateCredentialsRequestToJSON(requestParameters['kubernetesGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesGenerateCredentials(name: string, kubernetesMountPath: string, kubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesGenerateCredentialsRaw({ name: name, kubernetesMountPath: kubernetesMountPath, kubernetesGenerateCredentialsRequest: kubernetesGenerateCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesListRolesRaw(requestParameters: SecretsApiKubernetesListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kubernetesListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kubernetesListRoles(kubernetesMountPath: string, list: KubernetesListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kubernetesListRolesRaw({ kubernetesMountPath: kubernetesMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadConfigurationRaw(requestParameters: SecretsApiKubernetesReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadConfiguration(kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadRoleRaw(requestParameters: SecretsApiKubernetesReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesReadRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadRole(name: string, kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesWriteRoleRaw(requestParameters: SecretsApiKubernetesWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['kubernetesWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesWriteRoleRequest',
                'Required parameter "kubernetesWriteRoleRequest" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesWriteRoleRequestToJSON(requestParameters['kubernetesWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesWriteRole(name: string, kubernetesMountPath: string, kubernetesWriteRoleRequest: KubernetesWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesWriteRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath, kubernetesWriteRoleRequest: kubernetesWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1DeleteRaw(requestParameters: SecretsApiKvV1DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Delete().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Delete(path: string, kvV1MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1DeleteRaw({ path: path, kvV1MountPath: kvV1MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1ListRaw(requestParameters: SecretsApiKvV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV1List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV1List(path: string, kvV1MountPath: string, list: KvV1ListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV1ListRaw({ path: path, kvV1MountPath: kvV1MountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1ReadRaw(requestParameters: SecretsApiKvV1ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Read().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Read(path: string, kvV1MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1ReadRaw({ path: path, kvV1MountPath: kvV1MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1WriteRaw(requestParameters: SecretsApiKvV1WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['kvV1MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV1MountPath',
                'Required parameter "kvV1MountPath" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling kvV1Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV1MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Write(path: string, kvV1MountPath: string, requestBody: { [key: string]: any; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1WriteRaw({ path: path, kvV1MountPath: kvV1MountPath, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2ConfigureRaw(requestParameters: SecretsApiKvV2ConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Configure().'
            );
        }

        if (requestParameters['kvV2ConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2ConfigureRequest',
                'Required parameter "kvV2ConfigureRequest" was null or undefined when calling kvV2Configure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2ConfigureRequestToJSON(requestParameters['kvV2ConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2Configure(kvV2MountPath: string, kvV2ConfigureRequest: KvV2ConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2ConfigureRaw({ kvV2MountPath: kvV2MountPath, kvV2ConfigureRequest: kvV2ConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteRaw(requestParameters: SecretsApiKvV2DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Delete().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2Delete(path: string, kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersionsRaw(requestParameters: SecretsApiKvV2DeleteMetadataAndAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersions(path: string, kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteMetadataAndAllVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteVersionsRaw(requestParameters: SecretsApiKvV2DeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['kvV2DeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2DeleteVersionsRequest',
                'Required parameter "kvV2DeleteVersionsRequest" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/delete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DeleteVersionsRequestToJSON(requestParameters['kvV2DeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteVersions(path: string, kvV2MountPath: string, kvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2DeleteVersionsRequest: kvV2DeleteVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DestroyVersionsRaw(requestParameters: SecretsApiKvV2DestroyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['kvV2DestroyVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2DestroyVersionsRequest',
                'Required parameter "kvV2DestroyVersionsRequest" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/destroy/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DestroyVersionsRequestToJSON(requestParameters['kvV2DestroyVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DestroyVersions(path: string, kvV2MountPath: string, kvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DestroyVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2DestroyVersionsRequest: kvV2DestroyVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ListRaw(requestParameters: SecretsApiKvV2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV2List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2List(path: string, kvV2MountPath: string, list: KvV2ListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV2ListRaw({ path: path, kvV2MountPath: kvV2MountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadRaw(requestParameters: SecretsApiKvV2ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Read().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Read(path: string, kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadResponse> {
        const response = await this.kvV2ReadRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfigurationRaw(requestParameters: SecretsApiKvV2ReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadConfigurationResponse>> {
        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfiguration(kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadConfigurationResponse> {
        const response = await this.kvV2ReadConfigurationRaw({ kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadMetadataRaw(requestParameters: SecretsApiKvV2ReadMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadMetadataResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadMetadataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadMetadata(path: string, kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadMetadataResponse> {
        const response = await this.kvV2ReadMetadataRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadSubkeysRaw(requestParameters: SecretsApiKvV2ReadSubkeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadSubkeysResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/subkeys/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadSubkeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadSubkeys(path: string, kvV2MountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadSubkeysResponse> {
        const response = await this.kvV2ReadSubkeysRaw({ path: path, kvV2MountPath: kvV2MountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2UndeleteVersionsRaw(requestParameters: SecretsApiKvV2UndeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['kvV2UndeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2UndeleteVersionsRequest',
                'Required parameter "kvV2UndeleteVersionsRequest" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/undelete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2UndeleteVersionsRequestToJSON(requestParameters['kvV2UndeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2UndeleteVersions(path: string, kvV2MountPath: string, kvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2UndeleteVersionsRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2UndeleteVersionsRequest: kvV2UndeleteVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2WriteRaw(requestParameters: SecretsApiKvV2WriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2WriteResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['kvV2WriteRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2WriteRequest',
                'Required parameter "kvV2WriteRequest" was null or undefined when calling kvV2Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteRequestToJSON(requestParameters['kvV2WriteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2WriteResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Write(path: string, kvV2MountPath: string, kvV2WriteRequest: KvV2WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2WriteResponse> {
        const response = await this.kvV2WriteRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2WriteRequest: kvV2WriteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2WriteMetadataRaw(requestParameters: SecretsApiKvV2WriteMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['kvV2MountPath'] == null) {
            throw new runtime.RequiredError(
                'kvV2MountPath',
                'Required parameter "kvV2MountPath" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['kvV2WriteMetadataRequest'] == null) {
            throw new runtime.RequiredError(
                'kvV2WriteMetadataRequest',
                'Required parameter "kvV2WriteMetadataRequest" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kvV2MountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteMetadataRequestToJSON(requestParameters['kvV2WriteMetadataRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2WriteMetadata(path: string, kvV2MountPath: string, kvV2WriteMetadataRequest: KvV2WriteMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2WriteMetadataRaw({ path: path, kvV2MountPath: kvV2MountPath, kvV2WriteMetadataRequest: kvV2WriteMetadataRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapConfigureRaw(requestParameters: SecretsApiLdapConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapConfigure().'
            );
        }

        if (requestParameters['ldapConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapConfigureRequest',
                'Required parameter "ldapConfigureRequest" was null or undefined when calling ldapConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapConfigureRequestToJSON(requestParameters['ldapConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapConfigure(ldapMountPath: string, ldapConfigureRequest: LdapConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapConfigureRaw({ ldapMountPath: ldapMountPath, ldapConfigureRequest: ldapConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteConfigurationRaw(requestParameters: SecretsApiLdapDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteConfiguration(ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteConfigurationRaw({ ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteDynamicRoleRaw(requestParameters: SecretsApiLdapDeleteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteDynamicRole(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteStaticRoleRaw(requestParameters: SecretsApiLdapDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteStaticRole(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckInRaw(requestParameters: SecretsApiLdapLibraryCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['ldapLibraryCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryCheckInRequest',
                'Required parameter "ldapLibraryCheckInRequest" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckInRequestToJSON(requestParameters['ldapLibraryCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckIn(name: string, ldapMountPath: string, ldapLibraryCheckInRequest: LdapLibraryCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckInRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryCheckInRequest: ldapLibraryCheckInRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOutRaw(requestParameters: SecretsApiLdapLibraryCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['ldapLibraryCheckOutRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryCheckOutRequest',
                'Required parameter "ldapLibraryCheckOutRequest" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-out`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckOutRequestToJSON(requestParameters['ldapLibraryCheckOutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOut(name: string, ldapMountPath: string, ldapLibraryCheckOutRequest: LdapLibraryCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckOutRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryCheckOutRequest: ldapLibraryCheckOutRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatusRaw(requestParameters: SecretsApiLdapLibraryCheckStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatus(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckStatusRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigureRaw(requestParameters: SecretsApiLdapLibraryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['ldapLibraryConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryConfigureRequest',
                'Required parameter "ldapLibraryConfigureRequest" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryConfigureRequestToJSON(requestParameters['ldapLibraryConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigure(name: string, ldapMountPath: string, ldapLibraryConfigureRequest: LdapLibraryConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryConfigureRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryConfigureRequest: ldapLibraryConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDeleteRaw(requestParameters: SecretsApiLdapLibraryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDelete(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryDeleteRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckInRaw(requestParameters: SecretsApiLdapLibraryForceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['ldapLibraryForceCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLibraryForceCheckInRequest',
                'Required parameter "ldapLibraryForceCheckInRequest" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/manage/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryForceCheckInRequestToJSON(requestParameters['ldapLibraryForceCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckIn(name: string, ldapMountPath: string, ldapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryForceCheckInRaw({ name: name, ldapMountPath: ldapMountPath, ldapLibraryForceCheckInRequest: ldapLibraryForceCheckInRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListRaw(requestParameters: SecretsApiLdapLibraryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryList(ldapMountPath: string, list: LdapLibraryListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPathRaw(requestParameters: SecretsApiLdapLibraryListLibraryPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath(path: string, ldapMountPath: string, list: LdapLibraryListLibraryPathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPath_1Raw(requestParameters: SecretsApiLdapLibraryListLibraryPath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath_1(path: string, ldapMountPath: string, list: LdapLibraryListLibraryPath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPath_1Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read a library set.
     */
    async ldapLibraryReadRaw(requestParameters: SecretsApiLdapLibraryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryRead().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLibraryRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read a library set.
     */
    async ldapLibraryRead(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryReadRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListDynamicRolesRaw(requestParameters: SecretsApiLdapListDynamicRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListDynamicRoles(ldapMountPath: string, list: LdapListDynamicRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListDynamicRolesRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePathRaw(requestParameters: SecretsApiLdapListRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath(path: string, ldapMountPath: string, list: LdapListRolePathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePath_2Raw(requestParameters: SecretsApiLdapListRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath_2(path: string, ldapMountPath: string, list: LdapListRolePath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePath_2Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePathRaw(requestParameters: SecretsApiLdapListStaticRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath(path: string, ldapMountPath: string, list: LdapListStaticRolePathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePathRaw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePath_3Raw(requestParameters: SecretsApiLdapListStaticRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath_3(path: string, ldapMountPath: string, list: LdapListStaticRolePath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePath_3Raw({ path: path, ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolesRaw(requestParameters: SecretsApiLdapListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRoles(ldapMountPath: string, list: LdapListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolesRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadConfigurationRaw(requestParameters: SecretsApiLdapReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadConfiguration(ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadConfigurationRaw({ ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadDynamicRoleRaw(requestParameters: SecretsApiLdapReadDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadDynamicRole(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadStaticRoleRaw(requestParameters: SecretsApiLdapReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadStaticRole(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRequestDynamicRoleCredentialsRaw(requestParameters: SecretsApiLdapRequestDynamicRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestDynamicRoleCredentials(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRequestDynamicRoleCredentialsRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRequestStaticRoleCredentialsRaw(requestParameters: SecretsApiLdapRequestStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-cred/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestStaticRoleCredentials(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRequestStaticRoleCredentialsRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRotateRootCredentialsRaw(requestParameters: SecretsApiLdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateRootCredentials(ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRotateRootCredentialsRaw({ ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRotateStaticRoleRaw(requestParameters: SecretsApiLdapRotateStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['ldapRotateStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapRotateStaticRoleRequest',
                'Required parameter "ldapRotateStaticRoleRequest" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapRotateStaticRoleRequestToJSON(requestParameters['ldapRotateStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateStaticRole(name: string, ldapMountPath: string, ldapRotateStaticRoleRequest: LdapRotateStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRotateStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapRotateStaticRoleRequest: ldapRotateStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapWriteDynamicRoleRaw(requestParameters: SecretsApiLdapWriteDynamicRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['ldapWriteDynamicRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteDynamicRoleRequest',
                'Required parameter "ldapWriteDynamicRoleRequest" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteDynamicRoleRequestToJSON(requestParameters['ldapWriteDynamicRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteDynamicRole(name: string, ldapMountPath: string, ldapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteDynamicRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteDynamicRoleRequest: ldapWriteDynamicRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapWriteStaticRoleRaw(requestParameters: SecretsApiLdapWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['ldapWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteStaticRoleRequest',
                'Required parameter "ldapWriteStaticRoleRequest" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteStaticRoleRequestToJSON(requestParameters['ldapWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteStaticRole(name: string, ldapMountPath: string, ldapWriteStaticRoleRequest: LdapWriteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteStaticRoleRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteStaticRoleRequest: ldapWriteStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasConfigureRaw(requestParameters: SecretsApiMongoDbAtlasConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        if (requestParameters['mongoDbAtlasConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'mongoDbAtlasConfigureRequest',
                'Required parameter "mongoDbAtlasConfigureRequest" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasConfigureRequestToJSON(requestParameters['mongoDbAtlasConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasConfigure(mongodbatlasMountPath: string, mongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasConfigureRaw({ mongodbatlasMountPath: mongodbatlasMountPath, mongoDbAtlasConfigureRequest: mongoDbAtlasConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRoleRaw(requestParameters: SecretsApiMongoDbAtlasDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRole(name: string, mongodbatlasMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasDeleteRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasGenerateCredentialsRaw(requestParameters: SecretsApiMongoDbAtlasGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials(name: string, mongodbatlasMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasGenerateCredentialsRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2Raw(requestParameters: SecretsApiMongoDbAtlasGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2(name: string, mongodbatlasMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasGenerateCredentials2Raw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRolesRaw(requestParameters: SecretsApiMongoDbAtlasListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRoles(mongodbatlasMountPath: string, list: MongoDbAtlasListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mongoDbAtlasListRolesRaw({ mongodbatlasMountPath: mongodbatlasMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasReadConfigurationRaw(requestParameters: SecretsApiMongoDbAtlasReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasReadConfiguration(mongodbatlasMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasReadConfigurationRaw({ mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRoleRaw(requestParameters: SecretsApiMongoDbAtlasReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRole(name: string, mongodbatlasMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasReadRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRoleRaw(requestParameters: SecretsApiMongoDbAtlasWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['mongodbatlasMountPath'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlasMountPath',
                'Required parameter "mongodbatlasMountPath" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['mongoDbAtlasWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'mongoDbAtlasWriteRoleRequest',
                'Required parameter "mongoDbAtlasWriteRoleRequest" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlasMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasWriteRoleRequestToJSON(requestParameters['mongoDbAtlasWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRole(name: string, mongodbatlasMountPath: string, mongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasWriteRoleRaw({ name: name, mongodbatlasMountPath: mongodbatlasMountPath, mongoDbAtlasWriteRoleRequest: mongoDbAtlasWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadConfigureAccessRaw(requestParameters: SecretsApiNomadConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        if (requestParameters['nomadConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadConfigureAccessRequest',
                'Required parameter "nomadConfigureAccessRequest" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureAccessRequestToJSON(requestParameters['nomadConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureAccess(nomadMountPath: string, nomadConfigureAccessRequest: NomadConfigureAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadConfigureAccessRaw({ nomadMountPath: nomadMountPath, nomadConfigureAccessRequest: nomadConfigureAccessRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadConfigureLeaseRaw(requestParameters: SecretsApiNomadConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadConfigureLease().'
            );
        }

        if (requestParameters['nomadConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadConfigureLeaseRequest',
                'Required parameter "nomadConfigureLeaseRequest" was null or undefined when calling nomadConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureLeaseRequestToJSON(requestParameters['nomadConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureLease(nomadMountPath: string, nomadConfigureLeaseRequest: NomadConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadConfigureLeaseRaw({ nomadMountPath: nomadMountPath, nomadConfigureLeaseRequest: nomadConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteAccessConfigurationRaw(requestParameters: SecretsApiNomadDeleteAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteAccessConfiguration(nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteAccessConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteLeaseConfigurationRaw(requestParameters: SecretsApiNomadDeleteLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteLeaseConfiguration(nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteLeaseConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteRoleRaw(requestParameters: SecretsApiNomadDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadDeleteRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteRole(name: string, nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteRoleRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadGenerateCredentialsRaw(requestParameters: SecretsApiNomadGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadGenerateCredentials(name: string, nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadGenerateCredentialsRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadListRolesRaw(requestParameters: SecretsApiNomadListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling nomadListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async nomadListRoles(nomadMountPath: string, list: NomadListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.nomadListRolesRaw({ nomadMountPath: nomadMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadAccessConfigurationRaw(requestParameters: SecretsApiNomadReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadAccessConfiguration(nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadAccessConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadLeaseConfigurationRaw(requestParameters: SecretsApiNomadReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadLeaseConfiguration(nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadLeaseConfigurationRaw({ nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadRoleRaw(requestParameters: SecretsApiNomadReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadReadRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadRole(name: string, nomadMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadRoleRaw({ name: name, nomadMountPath: nomadMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadWriteRoleRaw(requestParameters: SecretsApiNomadWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['nomadMountPath'] == null) {
            throw new runtime.RequiredError(
                'nomadMountPath',
                'Required parameter "nomadMountPath" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['nomadWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'nomadWriteRoleRequest',
                'Required parameter "nomadWriteRoleRequest" was null or undefined when calling nomadWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomadMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadWriteRoleRequestToJSON(requestParameters['nomadWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadWriteRole(name: string, nomadMountPath: string, nomadWriteRoleRequest: NomadWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadWriteRoleRaw({ name: name, nomadMountPath: nomadMountPath, nomadWriteRoleRequest: nomadWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureAcmeRaw(requestParameters: SecretsApiPkiConfigureAcmeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        if (requestParameters['pkiConfigureAcmeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureAcmeRequest',
                'Required parameter "pkiConfigureAcmeRequest" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAcmeRequestToJSON(requestParameters['pkiConfigureAcmeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureAcme(pkiMountPath: string, pkiConfigureAcmeRequest: PkiConfigureAcmeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureAcmeRaw({ pkiMountPath: pkiMountPath, pkiConfigureAcmeRequest: pkiConfigureAcmeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureAutoTidyRaw(requestParameters: SecretsApiPkiConfigureAutoTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureAutoTidyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        if (requestParameters['pkiConfigureAutoTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureAutoTidyRequest',
                'Required parameter "pkiConfigureAutoTidyRequest" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAutoTidyRequestToJSON(requestParameters['pkiConfigureAutoTidyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureAutoTidyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureAutoTidy(pkiMountPath: string, pkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureAutoTidyResponse> {
        const response = await this.pkiConfigureAutoTidyRaw({ pkiMountPath: pkiMountPath, pkiConfigureAutoTidyRequest: pkiConfigureAutoTidyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCaRaw(requestParameters: SecretsApiPkiConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCaResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCa().'
            );
        }

        if (requestParameters['pkiConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureCaRequest',
                'Required parameter "pkiConfigureCaRequest" was null or undefined when calling pkiConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCaRequestToJSON(requestParameters['pkiConfigureCaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCa(pkiMountPath: string, pkiConfigureCaRequest: PkiConfigureCaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCaResponse> {
        const response = await this.pkiConfigureCaRaw({ pkiMountPath: pkiMountPath, pkiConfigureCaRequest: pkiConfigureCaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureClusterRaw(requestParameters: SecretsApiPkiConfigureClusterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureClusterResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        if (requestParameters['pkiConfigureClusterRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureClusterRequest',
                'Required parameter "pkiConfigureClusterRequest" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureClusterRequestToJSON(requestParameters['pkiConfigureClusterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureClusterResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCluster(pkiMountPath: string, pkiConfigureClusterRequest: PkiConfigureClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureClusterResponse> {
        const response = await this.pkiConfigureClusterRaw({ pkiMountPath: pkiMountPath, pkiConfigureClusterRequest: pkiConfigureClusterRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCmpRaw(requestParameters: SecretsApiPkiConfigureCmpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCmp().'
            );
        }

        if (requestParameters['pkiConfigureCmpRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureCmpRequest',
                'Required parameter "pkiConfigureCmpRequest" was null or undefined when calling pkiConfigureCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCmpRequestToJSON(requestParameters['pkiConfigureCmpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureCmp(pkiMountPath: string, pkiConfigureCmpRequest: PkiConfigureCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureCmpRaw({ pkiMountPath: pkiMountPath, pkiConfigureCmpRequest: pkiConfigureCmpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCrlRaw(requestParameters: SecretsApiPkiConfigureCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        if (requestParameters['pkiConfigureCrlRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureCrlRequest',
                'Required parameter "pkiConfigureCrlRequest" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCrlRequestToJSON(requestParameters['pkiConfigureCrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCrl(pkiMountPath: string, pkiConfigureCrlRequest: PkiConfigureCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCrlResponse> {
        const response = await this.pkiConfigureCrlRaw({ pkiMountPath: pkiMountPath, pkiConfigureCrlRequest: pkiConfigureCrlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureEstRaw(requestParameters: SecretsApiPkiConfigureEstOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureEst().'
            );
        }

        if (requestParameters['pkiConfigureEstRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureEstRequest',
                'Required parameter "pkiConfigureEstRequest" was null or undefined when calling pkiConfigureEst().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureEstRequestToJSON(requestParameters['pkiConfigureEstRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureEst(pkiMountPath: string, pkiConfigureEstRequest: PkiConfigureEstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureEstRaw({ pkiMountPath: pkiMountPath, pkiConfigureEstRequest: pkiConfigureEstRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureExternalPolicyRaw(requestParameters: SecretsApiPkiConfigureExternalPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureExternalPolicyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureExternalPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureExternalPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureExternalPolicy(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureExternalPolicyResponse> {
        const response = await this.pkiConfigureExternalPolicyRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureExternalPolicy_4Raw(requestParameters: SecretsApiPkiConfigureExternalPolicy0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureExternalPolicy_4().'
            );
        }

        if (requestParameters['pkiConfigureExternalPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureExternalPolicyRequest',
                'Required parameter "pkiConfigureExternalPolicyRequest" was null or undefined when calling pkiConfigureExternalPolicy_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureExternalPolicyRequestToJSON(requestParameters['pkiConfigureExternalPolicyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureExternalPolicy_4(pkiMountPath: string, pkiConfigureExternalPolicyRequest: PkiConfigureExternalPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureExternalPolicy_4Raw({ pkiMountPath: pkiMountPath, pkiConfigureExternalPolicyRequest: pkiConfigureExternalPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureIssuersRaw(requestParameters: SecretsApiPkiConfigureIssuersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureIssuersResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        if (requestParameters['pkiConfigureIssuersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureIssuersRequest',
                'Required parameter "pkiConfigureIssuersRequest" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureIssuersRequestToJSON(requestParameters['pkiConfigureIssuersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureIssuers(pkiMountPath: string, pkiConfigureIssuersRequest: PkiConfigureIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureIssuersResponse> {
        const response = await this.pkiConfigureIssuersRaw({ pkiMountPath: pkiMountPath, pkiConfigureIssuersRequest: pkiConfigureIssuersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureKeysRaw(requestParameters: SecretsApiPkiConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        if (requestParameters['pkiConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureKeysRequest',
                'Required parameter "pkiConfigureKeysRequest" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureKeysRequestToJSON(requestParameters['pkiConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureKeys(pkiMountPath: string, pkiConfigureKeysRequest: PkiConfigureKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureKeysResponse> {
        const response = await this.pkiConfigureKeysRaw({ pkiMountPath: pkiMountPath, pkiConfigureKeysRequest: pkiConfigureKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureScepRaw(requestParameters: SecretsApiPkiConfigureScepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureScep().'
            );
        }

        if (requestParameters['pkiConfigureScepRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureScepRequest',
                'Required parameter "pkiConfigureScepRequest" was null or undefined when calling pkiConfigureScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureScepRequestToJSON(requestParameters['pkiConfigureScepRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureScep(pkiMountPath: string, pkiConfigureScepRequest: PkiConfigureScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureScepRaw({ pkiMountPath: pkiMountPath, pkiConfigureScepRequest: pkiConfigureScepRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureUrlsRaw(requestParameters: SecretsApiPkiConfigureUrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureUrlsResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        if (requestParameters['pkiConfigureUrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiConfigureUrlsRequest',
                'Required parameter "pkiConfigureUrlsRequest" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureUrlsRequestToJSON(requestParameters['pkiConfigureUrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureUrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureUrls(pkiMountPath: string, pkiConfigureUrlsRequest: PkiConfigureUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureUrlsResponse> {
        const response = await this.pkiConfigureUrlsRaw({ pkiMountPath: pkiMountPath, pkiConfigureUrlsRequest: pkiConfigureUrlsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiCrossSignIntermediateRaw(requestParameters: SecretsApiPkiCrossSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiCrossSignIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        if (requestParameters['pkiCrossSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiCrossSignIntermediateRequest',
                'Required parameter "pkiCrossSignIntermediateRequest" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/cross-sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiCrossSignIntermediateRequestToJSON(requestParameters['pkiCrossSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiCrossSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiCrossSignIntermediate(pkiMountPath: string, pkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiCrossSignIntermediateResponse> {
        const response = await this.pkiCrossSignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiCrossSignIntermediateRequest: pkiCrossSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteEabKeyRaw(requestParameters: SecretsApiPkiDeleteEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/{key_id}`.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteEabKey(keyId: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteEabKeyRaw({ keyId: keyId, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteIssuerRaw(requestParameters: SecretsApiPkiDeleteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteIssuer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteKeyRaw(requestParameters: SecretsApiPkiDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiDeleteKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteKey(keyRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteRoleRaw(requestParameters: SecretsApiPkiDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiDeleteRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRole(name: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteRoleRaw({ name: name, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteRootRaw(requestParameters: SecretsApiPkiDeleteRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiDeleteRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/root`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRoot(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteRootRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyRaw(requestParameters: SecretsApiPkiGenerateEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKeyRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerRaw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRoleRaw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuerAndRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerAndRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRole(issuerRef: string, role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerAndRoleResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerAndRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_5Raw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuer0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_5(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuer_5Raw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_6Raw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_6(issuerRef: string, policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuer_6Raw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForRoleRaw(requestParameters: SecretsApiPkiGenerateEabKeyForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-eab`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForRole(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForRoleResponse> {
        const response = await this.pkiGenerateEabKeyForRoleRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKey_7Raw(requestParameters: SecretsApiPkiGenerateEabKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey_7().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey_7(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKey_7Raw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKey_8Raw(requestParameters: SecretsApiPkiGenerateEabKey1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiGenerateEabKey_8().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateEabKey_8().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-eab`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey_8(policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKey_8Raw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateExportedKeyRaw(requestParameters: SecretsApiPkiGenerateExportedKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateExportedKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        if (requestParameters['pkiGenerateExportedKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateExportedKeyRequest',
                'Required parameter "pkiGenerateExportedKeyRequest" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/exported`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateExportedKeyRequestToJSON(requestParameters['pkiGenerateExportedKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateExportedKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateExportedKey(pkiMountPath: string, pkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateExportedKeyResponse> {
        const response = await this.pkiGenerateExportedKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateExportedKeyRequest: pkiGenerateExportedKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateIntermediateRaw(requestParameters: SecretsApiPkiGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateIntermediateRequest',
                'Required parameter "pkiGenerateIntermediateRequest" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateIntermediateRequestToJSON(requestParameters['pkiGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateIntermediate(exported: PkiGenerateIntermediateExportedEnum, pkiMountPath: string, pkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateIntermediateResponse> {
        const response = await this.pkiGenerateIntermediateRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiGenerateIntermediateRequest: pkiGenerateIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateInternalKeyRaw(requestParameters: SecretsApiPkiGenerateInternalKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateInternalKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        if (requestParameters['pkiGenerateInternalKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateInternalKeyRequest',
                'Required parameter "pkiGenerateInternalKeyRequest" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/internal`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateInternalKeyRequestToJSON(requestParameters['pkiGenerateInternalKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateInternalKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateInternalKey(pkiMountPath: string, pkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateInternalKeyResponse> {
        const response = await this.pkiGenerateInternalKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateInternalKeyRequest: pkiGenerateInternalKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateKmsKeyRaw(requestParameters: SecretsApiPkiGenerateKmsKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateKmsKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        if (requestParameters['pkiGenerateKmsKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateKmsKeyRequest',
                'Required parameter "pkiGenerateKmsKeyRequest" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/kms`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateKmsKeyRequestToJSON(requestParameters['pkiGenerateKmsKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateKmsKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateKmsKey(pkiMountPath: string, pkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateKmsKeyResponse> {
        const response = await this.pkiGenerateKmsKeyRaw({ pkiMountPath: pkiMountPath, pkiGenerateKmsKeyRequest: pkiGenerateKmsKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateRootRaw(requestParameters: SecretsApiPkiGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['pkiGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiGenerateRootRequest',
                'Required parameter "pkiGenerateRootRequest" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateRootRequestToJSON(requestParameters['pkiGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateRoot(exported: PkiGenerateRootExportedEnum, pkiMountPath: string, pkiGenerateRootRequest: PkiGenerateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateRootResponse> {
        const response = await this.pkiGenerateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiGenerateRootRequest: pkiGenerateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiImportKeyRaw(requestParameters: SecretsApiPkiImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiImportKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiImportKey().'
            );
        }

        if (requestParameters['pkiImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiImportKeyRequest',
                'Required parameter "pkiImportKeyRequest" was null or undefined when calling pkiImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/import`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiImportKeyRequestToJSON(requestParameters['pkiImportKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiImportKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiImportKey(pkiMountPath: string, pkiImportKeyRequest: PkiImportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiImportKeyResponse> {
        const response = await this.pkiImportKeyRaw({ pkiMountPath: pkiMountPath, pkiImportKeyRequest: pkiImportKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssueWithRoleRaw(requestParameters: SecretsApiPkiIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssueWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['pkiIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssueWithRoleRequest',
                'Required parameter "pkiIssueWithRoleRequest" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssueWithRoleRequestToJSON(requestParameters['pkiIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssueWithRole(role: string, pkiMountPath: string, pkiIssueWithRoleRequest: PkiIssueWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssueWithRoleResponse> {
        const response = await this.pkiIssueWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiIssueWithRoleRequest: pkiIssueWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerIssueWithRoleRaw(requestParameters: SecretsApiPkiIssuerIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerIssueWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['pkiIssuerIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerIssueWithRoleRequest',
                'Required parameter "pkiIssuerIssueWithRoleRequest" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/issue/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerIssueWithRoleRequestToJSON(requestParameters['pkiIssuerIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerIssueWithRole(issuerRef: string, role: string, pkiMountPath: string, pkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerIssueWithRoleResponse> {
        const response = await this.pkiIssuerIssueWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerIssueWithRoleRequest: pkiIssuerIssueWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlRaw(requestParameters: SecretsApiPkiIssuerReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrl(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlResponse> {
        const response = await this.pkiIssuerReadCrlRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDelta(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaResponse> {
        const response = await this.pkiIssuerReadCrlDeltaRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDerRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaDerResponse> {
        const response = await this.pkiIssuerReadCrlDeltaDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPemRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPem(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaPemResponse> {
        const response = await this.pkiIssuerReadCrlDeltaPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDerRaw(requestParameters: SecretsApiPkiIssuerReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDerResponse> {
        const response = await this.pkiIssuerReadCrlDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlPemRaw(requestParameters: SecretsApiPkiIssuerReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlPem(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlPemResponse> {
        const response = await this.pkiIssuerReadCrlPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrl().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrl(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDelta(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaDerRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaDer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaDerResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaPemRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaPem(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaPemResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDerRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDerResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlPemRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlPem(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlPemResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerResignCrlsRaw(requestParameters: SecretsApiPkiIssuerResignCrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerResignCrlsResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['pkiIssuerResignCrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerResignCrlsRequest',
                'Required parameter "pkiIssuerResignCrlsRequest" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/resign-crls`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerResignCrlsRequestToJSON(requestParameters['pkiIssuerResignCrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerResignCrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerResignCrls(issuerRef: string, pkiMountPath: string, pkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerResignCrlsResponse> {
        const response = await this.pkiIssuerResignCrlsRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerResignCrlsRequest: pkiIssuerResignCrlsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignIntermediateRaw(requestParameters: SecretsApiPkiIssuerSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignIntermediateResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['pkiIssuerSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignIntermediateRequest',
                'Required parameter "pkiIssuerSignIntermediateRequest" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignIntermediateRequestToJSON(requestParameters['pkiIssuerSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignIntermediate(issuerRef: string, pkiMountPath: string, pkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignIntermediateResponse> {
        const response = await this.pkiIssuerSignIntermediateRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignIntermediateRequest: pkiIssuerSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignRevocationListRaw(requestParameters: SecretsApiPkiIssuerSignRevocationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignRevocationListResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['pkiIssuerSignRevocationListRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignRevocationListRequest',
                'Required parameter "pkiIssuerSignRevocationListRequest" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-revocation-list`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignRevocationListRequestToJSON(requestParameters['pkiIssuerSignRevocationListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignRevocationListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignRevocationList(issuerRef: string, pkiMountPath: string, pkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignRevocationListResponse> {
        const response = await this.pkiIssuerSignRevocationListRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignRevocationListRequest: pkiIssuerSignRevocationListRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignSelfIssuedRaw(requestParameters: SecretsApiPkiIssuerSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignSelfIssuedResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['pkiIssuerSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignSelfIssuedRequest',
                'Required parameter "pkiIssuerSignSelfIssuedRequest" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-self-issued`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignSelfIssuedRequestToJSON(requestParameters['pkiIssuerSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignSelfIssued(issuerRef: string, pkiMountPath: string, pkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignSelfIssuedResponse> {
        const response = await this.pkiIssuerSignSelfIssuedRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignSelfIssuedRequest: pkiIssuerSignSelfIssuedRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimRaw(requestParameters: SecretsApiPkiIssuerSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['pkiIssuerSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignVerbatimRequest',
                'Required parameter "pkiIssuerSignVerbatimRequest" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimRequestToJSON(requestParameters['pkiIssuerSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatim(issuerRef: string, pkiMountPath: string, pkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimResponse> {
        const response = await this.pkiIssuerSignVerbatimRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiIssuerSignVerbatimRequest: pkiIssuerSignVerbatimRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRoleRaw(requestParameters: SecretsApiPkiIssuerSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiIssuerSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignVerbatimWithRoleRequest',
                'Required parameter "pkiIssuerSignVerbatimWithRoleRequest" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimWithRoleRequestToJSON(requestParameters['pkiIssuerSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRole(issuerRef: string, role: string, pkiMountPath: string, pkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimWithRoleResponse> {
        const response = await this.pkiIssuerSignVerbatimWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerSignVerbatimWithRoleRequest: pkiIssuerSignVerbatimWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignWithRoleRaw(requestParameters: SecretsApiPkiIssuerSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignWithRoleResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['pkiIssuerSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuerSignWithRoleRequest',
                'Required parameter "pkiIssuerSignWithRoleRequest" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignWithRoleRequestToJSON(requestParameters['pkiIssuerSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignWithRole(issuerRef: string, role: string, pkiMountPath: string, pkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignWithRoleResponse> {
        const response = await this.pkiIssuerSignWithRoleRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiIssuerSignWithRoleRequest: pkiIssuerSignWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateIntermediateRaw(requestParameters: SecretsApiPkiIssuersGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['pkiIssuersGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersGenerateIntermediateRequest',
                'Required parameter "pkiIssuersGenerateIntermediateRequest" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/intermediate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateIntermediateRequestToJSON(requestParameters['pkiIssuersGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateIntermediate(exported: PkiIssuersGenerateIntermediateExportedEnum, pkiMountPath: string, pkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateIntermediateResponse> {
        const response = await this.pkiIssuersGenerateIntermediateRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiIssuersGenerateIntermediateRequest: pkiIssuersGenerateIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateRootRaw(requestParameters: SecretsApiPkiIssuersGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['pkiIssuersGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersGenerateRootRequest',
                'Required parameter "pkiIssuersGenerateRootRequest" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/root/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateRootRequestToJSON(requestParameters['pkiIssuersGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateRoot(exported: PkiIssuersGenerateRootExportedEnum, pkiMountPath: string, pkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateRootResponse> {
        const response = await this.pkiIssuersGenerateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiIssuersGenerateRootRequest: pkiIssuersGenerateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportBundleRaw(requestParameters: SecretsApiPkiIssuersImportBundleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportBundleResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        if (requestParameters['pkiIssuersImportBundleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersImportBundleRequest',
                'Required parameter "pkiIssuersImportBundleRequest" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/bundle`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportBundleRequestToJSON(requestParameters['pkiIssuersImportBundleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportBundleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportBundle(pkiMountPath: string, pkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportBundleResponse> {
        const response = await this.pkiIssuersImportBundleRaw({ pkiMountPath: pkiMountPath, pkiIssuersImportBundleRequest: pkiIssuersImportBundleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportCertRaw(requestParameters: SecretsApiPkiIssuersImportCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportCertResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        if (requestParameters['pkiIssuersImportCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiIssuersImportCertRequest',
                'Required parameter "pkiIssuersImportCertRequest" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportCertRequestToJSON(requestParameters['pkiIssuersImportCertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportCert(pkiMountPath: string, pkiIssuersImportCertRequest: PkiIssuersImportCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportCertResponse> {
        const response = await this.pkiIssuersImportCertRaw({ pkiMountPath: pkiMountPath, pkiIssuersImportCertRequest: pkiIssuersImportCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListAcmeAccountKeysRaw(requestParameters: SecretsApiPkiListAcmeAccountKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListAcmeAccountKeys(pkiMountPath: string, list: PkiListAcmeAccountKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListAcmeAccountKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertMetadataRaw(requestParameters: SecretsApiPkiListCertMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListCertMetadata().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCertMetadata().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert-metadata/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCertMetadata(pkiMountPath: string, list: PkiListCertMetadataListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertMetadataRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertsRaw(requestParameters: SecretsApiPkiListCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCerts(pkiMountPath: string, list: PkiListCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertsRevocationQueueRaw(requestParameters: SecretsApiPkiListCertsRevocationQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListCertsRevocationQueue().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCertsRevocationQueue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/revocation-queue/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCertsRevocationQueue(pkiMountPath: string, list: PkiListCertsRevocationQueueListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertsRevocationQueueRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListEabKeysRaw(requestParameters: SecretsApiPkiListEabKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListEabKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListEabKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListEabKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListEabKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListEabKeys(pkiMountPath: string, list: PkiListEabKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListEabKeysResponse> {
        const response = await this.pkiListEabKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListIssuersRaw(requestParameters: SecretsApiPkiListIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListIssuersResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListIssuers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListIssuers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListIssuers(pkiMountPath: string, list: PkiListIssuersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListIssuersResponse> {
        const response = await this.pkiListIssuersRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListKeysRaw(requestParameters: SecretsApiPkiListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListKeysResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/keys/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListKeys(pkiMountPath: string, list: PkiListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListKeysResponse> {
        const response = await this.pkiListKeysRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRevokedCertsRaw(requestParameters: SecretsApiPkiListRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRevokedCerts(pkiMountPath: string, list: PkiListRevokedCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRevokedCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRolesRaw(requestParameters: SecretsApiPkiListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRoles(pkiMountPath: string, list: PkiListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRolesRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListUnifiedRevokedCertsRaw(requestParameters: SecretsApiPkiListUnifiedRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListUnifiedRevokedCertsResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiListUnifiedRevokedCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListUnifiedRevokedCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/unified-revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListUnifiedRevokedCertsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListUnifiedRevokedCerts(pkiMountPath: string, list: PkiListUnifiedRevokedCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListUnifiedRevokedCertsResponse> {
        const response = await this.pkiListUnifiedRevokedCertsRaw({ pkiMountPath: pkiMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryOcspRaw(requestParameters: SecretsApiPkiQueryOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcsp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcsp(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryOcspRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryOcspWithGetReqRaw(requestParameters: SecretsApiPkiQueryOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcspWithGetReq(req: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryOcspWithGetReqRaw({ req: req, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryUnifiedOcspRaw(requestParameters: SecretsApiPkiQueryUnifiedOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryUnifiedOcsp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryUnifiedOcsp(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryUnifiedOcspRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryUnifiedOcspWithGetReqRaw(requestParameters: SecretsApiPkiQueryUnifiedOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryUnifiedOcspWithGetReq(req: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryUnifiedOcspWithGetReqRaw({ req: req, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeConfigurationRaw(requestParameters: SecretsApiPkiReadAcmeConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeDirectory(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeDirectoryRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeKeyIdRaw(requestParameters: SecretsApiPkiReadAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeKeyId(keyid: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeKeyIdRaw({ keyid: keyid, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeNewNonce(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeNewNonceRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAutoTidyConfigurationRaw(requestParameters: SecretsApiPkiReadAutoTidyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadAutoTidyConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadAutoTidyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadAutoTidyConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadAutoTidyConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadAutoTidyConfigurationResponse> {
        const response = await this.pkiReadAutoTidyConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaChainPemRaw(requestParameters: SecretsApiPkiReadCaChainPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaChainPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaChainPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaChainPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaChainPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaChainPemResponse> {
        const response = await this.pkiReadCaChainPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaDerRaw(requestParameters: SecretsApiPkiReadCaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaDerResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaDer(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaDerResponse> {
        const response = await this.pkiReadCaDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaPemRaw(requestParameters: SecretsApiPkiReadCaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaPemResponse> {
        const response = await this.pkiReadCaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRaw(requestParameters: SecretsApiPkiReadCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCert(serial: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertResponse> {
        const response = await this.pkiReadCertRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCaChainRaw(requestParameters: SecretsApiPkiReadCertCaChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCaChainResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCaChain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCaChainResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCaChain(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCaChainResponse> {
        const response = await this.pkiReadCertCaChainRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCrlRaw(requestParameters: SecretsApiPkiReadCertCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCrlResponse> {
        const response = await this.pkiReadCertCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertDeltaCrlRaw(requestParameters: SecretsApiPkiReadCertDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertDeltaCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertDeltaCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertDeltaCrlResponse> {
        const response = await this.pkiReadCertDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertMetadataRaw(requestParameters: SecretsApiPkiReadCertMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertMetadataResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertMetadata().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert-metadata/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertMetadataResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertMetadata(serial: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertMetadataResponse> {
        const response = await this.pkiReadCertMetadataRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawDerRaw(requestParameters: SecretsApiPkiReadCertRawDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawDerResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawDer(serial: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawDerResponse> {
        const response = await this.pkiReadCertRawDerRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawPemRaw(requestParameters: SecretsApiPkiReadCertRawPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawPemResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw/pem`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawPem(serial: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawPemResponse> {
        const response = await this.pkiReadCertRawPemRaw({ serial: serial, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertUnifiedCrlRaw(requestParameters: SecretsApiPkiReadCertUnifiedCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertUnifiedCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertUnifiedCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertUnifiedCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertUnifiedCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertUnifiedCrlResponse> {
        const response = await this.pkiReadCertUnifiedCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertUnifiedDeltaCrlRaw(requestParameters: SecretsApiPkiReadCertUnifiedDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertUnifiedDeltaCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCertUnifiedDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/unified-delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertUnifiedDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertUnifiedDeltaCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertUnifiedDeltaCrlResponse> {
        const response = await this.pkiReadCertUnifiedDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadClusterConfigurationRaw(requestParameters: SecretsApiPkiReadClusterConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadClusterConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadClusterConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadClusterConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadClusterConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadClusterConfigurationResponse> {
        const response = await this.pkiReadClusterConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCmpv2ConfigurationRaw(requestParameters: SecretsApiPkiReadCmpv2ConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCmpv2Configuration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadCmpv2Configuration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadCmpv2ConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlConfigurationRaw(requestParameters: SecretsApiPkiReadCrlConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlConfigurationResponse> {
        const response = await this.pkiReadCrlConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaRaw(requestParameters: SecretsApiPkiReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDelta(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaResponse> {
        const response = await this.pkiReadCrlDeltaRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaPemRaw(requestParameters: SecretsApiPkiReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDeltaPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaPemResponse> {
        const response = await this.pkiReadCrlDeltaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDerRaw(requestParameters: SecretsApiPkiReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDerResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDer(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDerResponse> {
        const response = await this.pkiReadCrlDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlPemRaw(requestParameters: SecretsApiPkiReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlPemResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlPemResponse> {
        const response = await this.pkiReadCrlPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadEstCacertsRaw(requestParameters: SecretsApiPkiReadEstCacertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadEstCacerts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/cacerts`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadEstCacerts(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadEstCacertsRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadEstConfigurationRaw(requestParameters: SecretsApiPkiReadEstConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadEstConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadEstConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadEstConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadExternalPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyAcmeDirectory(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyAcmeDirectoryRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadExternalPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyAcmeNewNonce(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyAcmeNewNonceRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadExternalPolicyPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/directory`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeDirectory(policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyPolicyAcmeDirectoryRaw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadExternalPolicyPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-nonce`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeNewNonce(policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyPolicyAcmeNewNonceRaw({ policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerRaw(requestParameters: SecretsApiPkiReadIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerResponse> {
        const response = await this.pkiReadIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerDerRaw(requestParameters: SecretsApiPkiReadIssuerDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerDerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerDer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerDerResponse> {
        const response = await this.pkiReadIssuerDerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectory(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefAcmeDirectoryRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonce(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefAcmeNewNonceRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory(issuerRef: string, policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce(issuerRef: string, policy: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectory(issuerRef: string, role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce(issuerRef: string, role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerJsonRaw(requestParameters: SecretsApiPkiReadIssuerJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerJsonResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/json`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerJsonResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerJson(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerJsonResponse> {
        const response = await this.pkiReadIssuerJsonRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerPemRaw(requestParameters: SecretsApiPkiReadIssuerPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerPemResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerPem(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerPemResponse> {
        const response = await this.pkiReadIssuerPemRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuersConfigurationRaw(requestParameters: SecretsApiPkiReadIssuersConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuersConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadIssuersConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuersConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuersConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuersConfigurationResponse> {
        const response = await this.pkiReadIssuersConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeyRaw(requestParameters: SecretsApiPkiReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeyResponse>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiReadKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKey(keyRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeyResponse> {
        const response = await this.pkiReadKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeysConfigurationRaw(requestParameters: SecretsApiPkiReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeysConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeysConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKeysConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeysConfigurationResponse> {
        const response = await this.pkiReadKeysConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRoleRaw(requestParameters: SecretsApiPkiReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiReadRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadRole(name: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadRoleResponse> {
        const response = await this.pkiReadRoleRaw({ name: name, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/directory`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectory(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleAcmeDirectoryRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-nonce`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonce(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleAcmeNewNonceRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleEstCacertsRaw(requestParameters: SecretsApiPkiReadRolesRoleEstCacertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleEstCacerts().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleEstCacerts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/cacerts`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleEstCacerts(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleEstCacertsRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleScepRaw(requestParameters: SecretsApiPkiReadRolesRoleScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleScep().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadRolesRoleScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleScep(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleScepRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadScepRaw(requestParameters: SecretsApiPkiReadScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadScep(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadScepRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadScepConfigurationRaw(requestParameters: SecretsApiPkiReadScepConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadScepConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadScepConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadScepConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDelta(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDeltaRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaPemRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDeltaPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDerRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDer(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDerRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlPemRaw(requestParameters: SecretsApiPkiReadUnifiedCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUnifiedCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlPem(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlPemRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUrlsConfigurationRaw(requestParameters: SecretsApiPkiReadUrlsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadUrlsConfigurationResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReadUrlsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadUrlsConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadUrlsConfiguration(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadUrlsConfigurationResponse> {
        const response = await this.pkiReadUrlsConfigurationRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReplaceRootRaw(requestParameters: SecretsApiPkiReplaceRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReplaceRootResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        if (requestParameters['pkiReplaceRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiReplaceRootRequest',
                'Required parameter "pkiReplaceRootRequest" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/replace`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiReplaceRootRequestToJSON(requestParameters['pkiReplaceRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReplaceRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReplaceRoot(pkiMountPath: string, pkiReplaceRootRequest: PkiReplaceRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReplaceRootResponse> {
        const response = await this.pkiReplaceRootRaw({ pkiMountPath: pkiMountPath, pkiReplaceRootRequest: pkiReplaceRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeRaw(requestParameters: SecretsApiPkiRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevoke().'
            );
        }

        if (requestParameters['pkiRevokeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRevokeRequest',
                'Required parameter "pkiRevokeRequest" was null or undefined when calling pkiRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeRequestToJSON(requestParameters['pkiRevokeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevoke(pkiMountPath: string, pkiRevokeRequest: PkiRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeResponse> {
        const response = await this.pkiRevokeRaw({ pkiMountPath: pkiMountPath, pkiRevokeRequest: pkiRevokeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeIssuerRaw(requestParameters: SecretsApiPkiRevokeIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/revoke`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeIssuer(issuerRef: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeIssuerResponse> {
        const response = await this.pkiRevokeIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeWithKeyRaw(requestParameters: SecretsApiPkiRevokeWithKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeWithKeyResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        if (requestParameters['pkiRevokeWithKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRevokeWithKeyRequest',
                'Required parameter "pkiRevokeWithKeyRequest" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke-with-key`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeWithKeyRequestToJSON(requestParameters['pkiRevokeWithKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeWithKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeWithKey(pkiMountPath: string, pkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeWithKeyResponse> {
        const response = await this.pkiRevokeWithKeyRaw({ pkiMountPath: pkiMountPath, pkiRevokeWithKeyRequest: pkiRevokeWithKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignIntermediateRaw(requestParameters: SecretsApiPkiRootSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        if (requestParameters['pkiRootSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRootSignIntermediateRequest',
                'Required parameter "pkiRootSignIntermediateRequest" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignIntermediateRequestToJSON(requestParameters['pkiRootSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignIntermediate(pkiMountPath: string, pkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignIntermediateResponse> {
        const response = await this.pkiRootSignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiRootSignIntermediateRequest: pkiRootSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignSelfIssuedRaw(requestParameters: SecretsApiPkiRootSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignSelfIssuedResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        if (requestParameters['pkiRootSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRootSignSelfIssuedRequest',
                'Required parameter "pkiRootSignSelfIssuedRequest" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-self-issued`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignSelfIssuedRequestToJSON(requestParameters['pkiRootSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignSelfIssued(pkiMountPath: string, pkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignSelfIssuedResponse> {
        const response = await this.pkiRootSignSelfIssuedRaw({ pkiMountPath: pkiMountPath, pkiRootSignSelfIssuedRequest: pkiRootSignSelfIssuedRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateCrlRaw(requestParameters: SecretsApiPkiRotateCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateCrlResponse> {
        const response = await this.pkiRotateCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateDeltaCrlRaw(requestParameters: SecretsApiPkiRotateDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateDeltaCrlResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate-delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateDeltaCrl(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateDeltaCrlResponse> {
        const response = await this.pkiRotateDeltaCrlRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateRootRaw(requestParameters: SecretsApiPkiRotateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['pkiRotateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiRotateRootRequest',
                'Required parameter "pkiRotateRootRequest" was null or undefined when calling pkiRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/rotate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRotateRootRequestToJSON(requestParameters['pkiRotateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateRoot(exported: PkiRotateRootExportedEnum, pkiMountPath: string, pkiRotateRootRequest: PkiRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateRootResponse> {
        const response = await this.pkiRotateRootRaw({ exported: exported, pkiMountPath: pkiMountPath, pkiRotateRootRequest: pkiRotateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSetSignedIntermediateRaw(requestParameters: SecretsApiPkiSetSignedIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSetSignedIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        if (requestParameters['pkiSetSignedIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSetSignedIntermediateRequest',
                'Required parameter "pkiSetSignedIntermediateRequest" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/set-signed`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSetSignedIntermediateRequestToJSON(requestParameters['pkiSetSignedIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSetSignedIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSetSignedIntermediate(pkiMountPath: string, pkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSetSignedIntermediateResponse> {
        const response = await this.pkiSetSignedIntermediateRaw({ pkiMountPath: pkiMountPath, pkiSetSignedIntermediateRequest: pkiSetSignedIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimRaw(requestParameters: SecretsApiPkiSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        if (requestParameters['pkiSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignVerbatimRequest',
                'Required parameter "pkiSignVerbatimRequest" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimRequestToJSON(requestParameters['pkiSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatim(pkiMountPath: string, pkiSignVerbatimRequest: PkiSignVerbatimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimResponse> {
        const response = await this.pkiSignVerbatimRaw({ pkiMountPath: pkiMountPath, pkiSignVerbatimRequest: pkiSignVerbatimRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimWithRoleRaw(requestParameters: SecretsApiPkiSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pkiSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignVerbatimWithRoleRequest',
                'Required parameter "pkiSignVerbatimWithRoleRequest" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimWithRoleRequestToJSON(requestParameters['pkiSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatimWithRole(role: string, pkiMountPath: string, pkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimWithRoleResponse> {
        const response = await this.pkiSignVerbatimWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiSignVerbatimWithRoleRequest: pkiSignVerbatimWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignWithRoleRaw(requestParameters: SecretsApiPkiSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['pkiSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiSignWithRoleRequest',
                'Required parameter "pkiSignWithRoleRequest" was null or undefined when calling pkiSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignWithRoleRequestToJSON(requestParameters['pkiSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignWithRole(role: string, pkiMountPath: string, pkiSignWithRoleRequest: PkiSignWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignWithRoleResponse> {
        const response = await this.pkiSignWithRoleRaw({ role: role, pkiMountPath: pkiMountPath, pkiSignWithRoleRequest: pkiSignWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyRaw(requestParameters: SecretsApiPkiTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidy().'
            );
        }

        if (requestParameters['pkiTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiTidyRequest',
                'Required parameter "pkiTidyRequest" was null or undefined when calling pkiTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiTidyRequestToJSON(requestParameters['pkiTidyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiTidy(pkiMountPath: string, pkiTidyRequest: PkiTidyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiTidyRaw({ pkiMountPath: pkiMountPath, pkiTidyRequest: pkiTidyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyCancelRaw(requestParameters: SecretsApiPkiTidyCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyCancelResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-cancel`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyCancelResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyCancel(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyCancelResponse> {
        const response = await this.pkiTidyCancelRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyStatusRaw(requestParameters: SecretsApiPkiTidyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyStatusResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiTidyStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-status`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyStatus(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyStatusResponse> {
        const response = await this.pkiTidyStatusRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeAccountKidRequest',
                'Required parameter "pkiWriteAcmeAccountKidRequest" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAccountKidRequestToJSON(requestParameters['pkiWriteAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAccountKid(kid: string, pkiMountPath: string, pkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeAccountKidRaw({ kid: kid, pkiMountPath: pkiMountPath, pkiWriteAcmeAccountKidRequest: pkiWriteAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthId(authId: string, pkiMountPath: string, pkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeAuthorizationAuthIdRaw({ authId: authId, pkiMountPath: pkiMountPath, pkiWriteAcmeAuthorizationAuthIdRequest: pkiWriteAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, pkiMountPath: string, pkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, pkiMountPath: pkiMountPath, pkiWriteAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeKeyIdRaw(requestParameters: SecretsApiPkiWriteAcmeKeyIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['pkiWriteAcmeKeyIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeKeyIdRequest',
                'Required parameter "pkiWriteAcmeKeyIdRequest" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeKeyIdRequestToJSON(requestParameters['pkiWriteAcmeKeyIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeKeyId(keyid: string, pkiMountPath: string, pkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeKeyIdRaw({ keyid: keyid, pkiMountPath: pkiMountPath, pkiWriteAcmeKeyIdRequest: pkiWriteAcmeKeyIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeNewAccountRequest',
                'Required parameter "pkiWriteAcmeNewAccountRequest" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewAccountRequestToJSON(requestParameters['pkiWriteAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewAccount(pkiMountPath: string, pkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeNewAccountRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeNewAccountRequest: pkiWriteAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeNewOrderRequest',
                'Required parameter "pkiWriteAcmeNewOrderRequest" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewOrderRequestToJSON(requestParameters['pkiWriteAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewOrder(pkiMountPath: string, pkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeNewOrderRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeNewOrderRequest: pkiWriteAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderId(orderId: string, pkiMountPath: string, pkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdRequest: pkiWriteAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCert(orderId: string, pkiMountPath: string, pkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdCertRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdCertRequest: pkiWriteAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalize(orderId: string, pkiMountPath: string, pkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteAcmeOrderOrderIdFinalizeRequest: pkiWriteAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeOrdersRequest',
                'Required parameter "pkiWriteAcmeOrdersRequest" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrdersRequestToJSON(requestParameters['pkiWriteAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrders(pkiMountPath: string, pkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrdersRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeOrdersRequest: pkiWriteAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteAcmeRevokeCertRequest',
                'Required parameter "pkiWriteAcmeRevokeCertRequest" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeRevokeCert(pkiMountPath: string, pkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeRevokeCertRaw({ pkiMountPath: pkiMountPath, pkiWriteAcmeRevokeCertRequest: pkiWriteAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteCmpRaw(requestParameters: SecretsApiPkiWriteCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteCmp(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteCmpRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteEstSimpleenrollRaw(requestParameters: SecretsApiPkiWriteEstSimpleenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteEstSimpleenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/simpleenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteEstSimpleenroll(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteEstSimpleenrollRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteEstSimplereenrollRaw(requestParameters: SecretsApiPkiWriteEstSimplereenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteEstSimplereenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/simplereenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteEstSimplereenroll(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteEstSimplereenrollRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeAccountKidRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeAccountKidRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAccountKid(kid: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeAccountKidRaw({ kid: kid, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeAccountKidRequest: pkiWriteExternalPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAuthorizationAuthId(authId: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: pkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeNewAccountRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeNewAccountRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewAccount(pkiMountPath: string, pkiWriteExternalPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeNewAccountRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeNewAccountRequest: pkiWriteExternalPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeNewOrderRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeNewOrderRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewOrder(pkiMountPath: string, pkiWriteExternalPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeNewOrderRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeNewOrderRequest: pkiWriteExternalPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderId(orderId: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdRequest: pkiWriteExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdCert(orderId: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: pkiWriteExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdFinalize(orderId: string, pkiMountPath: string, pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeOrdersRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrdersRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrders(pkiMountPath: string, pkiWriteExternalPolicyAcmeOrdersRequest: PkiWriteExternalPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrdersRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeOrdersRequest: pkiWriteExternalPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyAcmeRevokeCertRequest',
                'Required parameter "pkiWriteExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteExternalPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeRevokeCert(pkiMountPath: string, pkiWriteExternalPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeRevokeCertRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyAcmeRevokeCertRequest: pkiWriteExternalPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyIssueRaw(requestParameters: SecretsApiPkiWriteExternalPolicyIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicyIssueResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyIssue().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyIssueRequest',
                'Required parameter "pkiWriteExternalPolicyIssueRequest" was null or undefined when calling pkiWriteExternalPolicyIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/issue`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyIssueRequestToJSON(requestParameters['pkiWriteExternalPolicyIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicyIssueResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicyIssue(pkiMountPath: string, pkiWriteExternalPolicyIssueRequest: PkiWriteExternalPolicyIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicyIssueResponse> {
        const response = await this.pkiWriteExternalPolicyIssueRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicyIssueRequest: pkiWriteExternalPolicyIssueRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyIssuePolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicyIssuePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicyIssuePolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyIssuePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyIssuePolicyRequest',
                'Required parameter "pkiWriteExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/issue/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyIssuePolicyRequestToJSON(requestParameters['pkiWriteExternalPolicyIssuePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicyIssuePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicyIssuePolicy(policy: string, pkiMountPath: string, pkiWriteExternalPolicyIssuePolicyRequest: PkiWriteExternalPolicyIssuePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicyIssuePolicyResponse> {
        const response = await this.pkiWriteExternalPolicyIssuePolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyIssuePolicyRequest: pkiWriteExternalPolicyIssuePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeAccountKidRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeAccountKidRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAccountKid(kid: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeAccountKidRaw({ kid: kid, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAccountKidRequest: pkiWriteExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId(authId: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeNewAccountRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-account`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeNewAccountRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewAccount(policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeNewAccountRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewAccountRequest: pkiWriteExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeNewOrderRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-order`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeNewOrderRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewOrder(policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeNewOrderRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeNewOrderRequest: pkiWriteExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderId(orderId: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert(orderId: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize(orderId: string, policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeOrdersRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/orders`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrdersRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrders(policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeOrdersRequest: PkiWriteExternalPolicyPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrdersRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeOrdersRequest: pkiWriteExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest',
                'Required parameter "pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeRevokeCert(policy: string, pkiMountPath: string, pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: pkiWriteExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySign().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicySignRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicySignRequest',
                'Required parameter "pkiWriteExternalPolicySignRequest" was null or undefined when calling pkiWriteExternalPolicySign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignRequestToJSON(requestParameters['pkiWriteExternalPolicySignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySign(pkiMountPath: string, pkiWriteExternalPolicySignRequest: PkiWriteExternalPolicySignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignResponse> {
        const response = await this.pkiWriteExternalPolicySignRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignRequest: pkiWriteExternalPolicySignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediateRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignIntermediateResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicySignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicySignIntermediateRequest',
                'Required parameter "pkiWriteExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignIntermediateRequestToJSON(requestParameters['pkiWriteExternalPolicySignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediate(pkiMountPath: string, pkiWriteExternalPolicySignIntermediateRequest: PkiWriteExternalPolicySignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignIntermediateResponse> {
        const response = await this.pkiWriteExternalPolicySignIntermediateRaw({ pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignIntermediateRequest: pkiWriteExternalPolicySignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediatePolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignIntermediatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignIntermediatePolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicySignIntermediatePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicySignIntermediatePolicyRequest',
                'Required parameter "pkiWriteExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign-intermediate/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignIntermediatePolicyRequestToJSON(requestParameters['pkiWriteExternalPolicySignIntermediatePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignIntermediatePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediatePolicy(policy: string, pkiMountPath: string, pkiWriteExternalPolicySignIntermediatePolicyRequest: PkiWriteExternalPolicySignIntermediatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignIntermediatePolicyResponse> {
        const response = await this.pkiWriteExternalPolicySignIntermediatePolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignIntermediatePolicyRequest: pkiWriteExternalPolicySignIntermediatePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignPolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignPolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pkiWriteExternalPolicySignPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteExternalPolicySignPolicyRequest',
                'Required parameter "pkiWriteExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignPolicyRequestToJSON(requestParameters['pkiWriteExternalPolicySignPolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignPolicy(policy: string, pkiMountPath: string, pkiWriteExternalPolicySignPolicyRequest: PkiWriteExternalPolicySignPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignPolicyResponse> {
        const response = await this.pkiWriteExternalPolicySignPolicyRaw({ policy: policy, pkiMountPath: pkiMountPath, pkiWriteExternalPolicySignPolicyRequest: pkiWriteExternalPolicySignPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerRaw(requestParameters: SecretsApiPkiWriteIssuerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['pkiWriteIssuerRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerRequest',
                'Required parameter "pkiWriteIssuerRequest" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerRequestToJSON(requestParameters['pkiWriteIssuerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuer(issuerRef: string, pkiMountPath: string, pkiWriteIssuerRequest: PkiWriteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerResponse> {
        const response = await this.pkiWriteIssuerRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerRequest: pkiWriteIssuerRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKid(issuerRef: string, kid: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeAccountKidRequest: pkiWriteIssuerIssuerRefAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId(authId: string, issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccount(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeNewAccountRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewAccountRequest: pkiWriteIssuerIssuerRefAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrder(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeNewOrderRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeNewOrderRequest: pkiWriteIssuerIssuerRefAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderId(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrders(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrdersRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeOrdersRequest: pkiWriteIssuerIssuerRefAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCert(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeRevokeCertRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid(issuerRef: string, kid: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId(authId: string, issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize(issuerRef: string, orderId: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssueRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicyIssueResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyIssueRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyIssueRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyIssueRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicyIssueResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssue(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyIssueRequest: PkiWriteIssuerIssuerRefExternalPolicyIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicyIssueResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyIssueRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssueRequest: pkiWriteIssuerIssuerRefExternalPolicyIssueRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssuePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid(issuerRef: string, kid: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId(authId: string, issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId(issuerRef: string, orderId: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert(issuerRef: string, orderId: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize(issuerRef: string, orderId: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicySignRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySign(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicySignRequest: PkiWriteIssuerIssuerRefExternalPolicySignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignRequest: pkiWriteIssuerIssuerRefExternalPolicySignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediate(issuerRef: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw({ issuerRef: issuerRef, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest',
                'Required parameter "pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignPolicy(issuerRef: string, policy: string, pkiMountPath: string, pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw({ issuerRef: issuerRef, policy: policy, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: pkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid(issuerRef: string, kid: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw({ issuerRef: issuerRef, kid: kid, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId(authId: string, issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw({ authId: authId, issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount(issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder(issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId(issuerRef: string, orderId: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert(issuerRef: string, orderId: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize(issuerRef: string, orderId: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw({ issuerRef: issuerRef, orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrders(issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuerRef'] == null) {
            throw new runtime.RequiredError(
                'issuerRef',
                'Required parameter "issuerRef" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest',
                'Required parameter "pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuerRef']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert(issuerRef: string, role: string, pkiMountPath: string, pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw({ issuerRef: issuerRef, role: role, pkiMountPath: pkiMountPath, pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteKeyRaw(requestParameters: SecretsApiPkiWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteKeyResponse>> {
        if (requestParameters['keyRef'] == null) {
            throw new runtime.RequiredError(
                'keyRef',
                'Required parameter "keyRef" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['pkiWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteKeyRequest',
                'Required parameter "pkiWriteKeyRequest" was null or undefined when calling pkiWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['keyRef']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteKeyRequestToJSON(requestParameters['pkiWriteKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteKey(keyRef: string, pkiMountPath: string, pkiWriteKeyRequest: PkiWriteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteKeyResponse> {
        const response = await this.pkiWriteKeyRaw({ keyRef: keyRef, pkiMountPath: pkiMountPath, pkiWriteKeyRequest: pkiWriteKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRoleRaw(requestParameters: SecretsApiPkiWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['pkiWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRoleRequest',
                'Required parameter "pkiWriteRoleRequest" was null or undefined when calling pkiWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRoleRequestToJSON(requestParameters['pkiWriteRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteRole(name: string, pkiMountPath: string, pkiWriteRoleRequest: PkiWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteRoleResponse> {
        const response = await this.pkiWriteRoleRaw({ name: name, pkiMountPath: pkiMountPath, pkiWriteRoleRequest: pkiWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeAccountKidRequest',
                'Required parameter "pkiWriteRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAccountKidRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKid(kid: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeAccountKidRaw({ kid: kid, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeAccountKidRequest: pkiWriteRolesRoleAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthId(authId: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw({ authId: authId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: pkiWriteRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['authId'] == null) {
            throw new runtime.RequiredError(
                'authId',
                'Required parameter "authId" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challengeType'] == null) {
            throw new runtime.RequiredError(
                'challengeType',
                'Required parameter "challengeType" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['authId']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challengeType']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType(authId: string, challengeType: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ authId: authId, challengeType: challengeType, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeNewAccountRequest',
                'Required parameter "pkiWriteRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-account`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewAccountRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccount(role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeNewAccountRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeNewAccountRequest: pkiWriteRolesRoleAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeNewOrderRequest',
                'Required parameter "pkiWriteRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-order`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewOrderRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrder(role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeNewOrderRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeNewOrderRequest: pkiWriteRolesRoleAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderId(orderId: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdRequest: pkiWriteRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCert(orderId: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdCertRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdCertRequest: pkiWriteRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalize(orderId: string, role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw({ orderId: orderId, role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeOrdersRequest',
                'Required parameter "pkiWriteRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/orders`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrdersRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrders(role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrdersRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeOrdersRequest: pkiWriteRolesRoleAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'pkiWriteRolesRoleAcmeRevokeCertRequest',
                'Required parameter "pkiWriteRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/revoke-cert`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['pkiWriteRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCert(role: string, pkiMountPath: string, pkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeRevokeCertRaw({ role: role, pkiMountPath: pkiMountPath, pkiWriteRolesRoleAcmeRevokeCertRequest: pkiWriteRolesRoleAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleCmpRaw(requestParameters: SecretsApiPkiWriteRolesRoleCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleCmp().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/cmp`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleCmp(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleCmpRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleEstSimpleenrollRaw(requestParameters: SecretsApiPkiWriteRolesRoleEstSimpleenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/simpleenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleEstSimpleenroll(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleEstSimpleenrollRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleEstSimplereenrollRaw(requestParameters: SecretsApiPkiWriteRolesRoleEstSimplereenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/simplereenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleEstSimplereenroll(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleEstSimplereenrollRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleScepRaw(requestParameters: SecretsApiPkiWriteRolesRoleScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleScep().'
            );
        }

        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteRolesRoleScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleScep(role: string, pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleScepRaw({ role: role, pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteScepRaw(requestParameters: SecretsApiPkiWriteScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pkiMountPath'] == null) {
            throw new runtime.RequiredError(
                'pkiMountPath',
                'Required parameter "pkiMountPath" was null or undefined when calling pkiWriteScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pkiMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteScep(pkiMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteScepRaw({ pkiMountPath: pkiMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnectionRaw(requestParameters: SecretsApiRabbitMqConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        if (requestParameters['rabbitMqConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqConfigureConnectionRequest',
                'Required parameter "rabbitMqConfigureConnectionRequest" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/connection`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureConnectionRequestToJSON(requestParameters['rabbitMqConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnection(rabbitmqMountPath: string, rabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqConfigureConnectionRaw({ rabbitmqMountPath: rabbitmqMountPath, rabbitMqConfigureConnectionRequest: rabbitMqConfigureConnectionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rabbitMqConfigureLeaseRaw(requestParameters: SecretsApiRabbitMqConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        if (requestParameters['rabbitMqConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqConfigureLeaseRequest',
                'Required parameter "rabbitMqConfigureLeaseRequest" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureLeaseRequestToJSON(requestParameters['rabbitMqConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqConfigureLease(rabbitmqMountPath: string, rabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqConfigureLeaseRaw({ rabbitmqMountPath: rabbitmqMountPath, rabbitMqConfigureLeaseRequest: rabbitMqConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRoleRaw(requestParameters: SecretsApiRabbitMqDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRole(name: string, rabbitmqMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqDeleteRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRolesRaw(requestParameters: SecretsApiRabbitMqListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRoles(rabbitmqMountPath: string, list: RabbitMqListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.rabbitMqListRolesRaw({ rabbitmqMountPath: rabbitmqMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rabbitMqReadLeaseConfigurationRaw(requestParameters: SecretsApiRabbitMqReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqReadLeaseConfiguration(rabbitmqMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqReadLeaseConfigurationRaw({ rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRoleRaw(requestParameters: SecretsApiRabbitMqReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRole(name: string, rabbitmqMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqReadRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentialsRaw(requestParameters: SecretsApiRabbitMqRequestCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentials(name: string, rabbitmqMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqRequestCredentialsRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRoleRaw(requestParameters: SecretsApiRabbitMqWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['rabbitmqMountPath'] == null) {
            throw new runtime.RequiredError(
                'rabbitmqMountPath',
                'Required parameter "rabbitmqMountPath" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['rabbitMqWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'rabbitMqWriteRoleRequest',
                'Required parameter "rabbitMqWriteRoleRequest" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmqMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqWriteRoleRequestToJSON(requestParameters['rabbitMqWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRole(name: string, rabbitmqMountPath: string, rabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqWriteRoleRaw({ name: name, rabbitmqMountPath: rabbitmqMountPath, rabbitMqWriteRoleRequest: rabbitMqWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshConfigureCaRaw(requestParameters: SecretsApiSshConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshConfigureCa().'
            );
        }

        if (requestParameters['sshConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'sshConfigureCaRequest',
                'Required parameter "sshConfigureCaRequest" was null or undefined when calling sshConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureCaRequestToJSON(requestParameters['sshConfigureCaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureCa(sshMountPath: string, sshConfigureCaRequest: SshConfigureCaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshConfigureCaRaw({ sshMountPath: sshMountPath, sshConfigureCaRequest: sshConfigureCaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshConfigureZeroAddressRaw(requestParameters: SecretsApiSshConfigureZeroAddressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        if (requestParameters['sshConfigureZeroAddressRequest'] == null) {
            throw new runtime.RequiredError(
                'sshConfigureZeroAddressRequest',
                'Required parameter "sshConfigureZeroAddressRequest" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureZeroAddressRequestToJSON(requestParameters['sshConfigureZeroAddressRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureZeroAddress(sshMountPath: string, sshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshConfigureZeroAddressRaw({ sshMountPath: sshMountPath, sshConfigureZeroAddressRequest: sshConfigureZeroAddressRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshDeleteCaConfigurationRaw(requestParameters: SecretsApiSshDeleteCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteCaConfiguration(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteCaConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRoleRaw(requestParameters: SecretsApiSshDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshDeleteRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRole(role: string, sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteRoleRaw({ role: role, sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshDeleteZeroAddressConfigurationRaw(requestParameters: SecretsApiSshDeleteZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshDeleteZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteZeroAddressConfiguration(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteZeroAddressConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentialsRaw(requestParameters: SecretsApiSshGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['sshGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'sshGenerateCredentialsRequest',
                'Required parameter "sshGenerateCredentialsRequest" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshGenerateCredentialsRequestToJSON(requestParameters['sshGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentials(role: string, sshMountPath: string, sshGenerateCredentialsRequest: SshGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshGenerateCredentialsRaw({ role: role, sshMountPath: sshMountPath, sshGenerateCredentialsRequest: sshGenerateCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshIssueCertificateRaw(requestParameters: SecretsApiSshIssueCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['sshIssueCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshIssueCertificateRequest',
                'Required parameter "sshIssueCertificateRequest" was null or undefined when calling sshIssueCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshIssueCertificateRequestToJSON(requestParameters['sshIssueCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshIssueCertificate(role: string, sshMountPath: string, sshIssueCertificateRequest: SshIssueCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshIssueCertificateRaw({ role: role, sshMountPath: sshMountPath, sshIssueCertificateRequest: sshIssueCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRolesRaw(requestParameters: SecretsApiSshListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling sshListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRoles(sshMountPath: string, list: SshListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.sshListRolesRaw({ sshMountPath: sshMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIpRaw(requestParameters: SecretsApiSshListRolesByIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshListRolesByIp().'
            );
        }

        if (requestParameters['sshListRolesByIpRequest'] == null) {
            throw new runtime.RequiredError(
                'sshListRolesByIpRequest',
                'Required parameter "sshListRolesByIpRequest" was null or undefined when calling sshListRolesByIp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/lookup`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshListRolesByIpRequestToJSON(requestParameters['sshListRolesByIpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIp(sshMountPath: string, sshListRolesByIpRequest: SshListRolesByIpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshListRolesByIpRaw({ sshMountPath: sshMountPath, sshListRolesByIpRequest: sshListRolesByIpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshReadCaConfigurationRaw(requestParameters: SecretsApiSshReadCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadCaConfiguration(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadCaConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKeyRaw(requestParameters: SecretsApiSshReadPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadPublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/public_key`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKey(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadPublicKeyRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRoleRaw(requestParameters: SecretsApiSshReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshReadRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRole(role: string, sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadRoleRaw({ role: role, sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshReadZeroAddressConfigurationRaw(requestParameters: SecretsApiSshReadZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshReadZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadZeroAddressConfiguration(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadZeroAddressConfigurationRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificateRaw(requestParameters: SecretsApiSshSignCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['sshSignCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshSignCertificateRequest',
                'Required parameter "sshSignCertificateRequest" was null or undefined when calling sshSignCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshSignCertificateRequestToJSON(requestParameters['sshSignCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificate(role: string, sshMountPath: string, sshSignCertificateRequest: SshSignCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshSignCertificateRaw({ role: role, sshMountPath: sshMountPath, sshSignCertificateRequest: sshSignCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeysRaw(requestParameters: SecretsApiSshTidyDynamicHostKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshTidyDynamicHostKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/tidy/dynamic-keys`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeys(sshMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshTidyDynamicHostKeysRaw({ sshMountPath: sshMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtpRaw(requestParameters: SecretsApiSshVerifyOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshVerifyOtp().'
            );
        }

        if (requestParameters['sshVerifyOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'sshVerifyOtpRequest',
                'Required parameter "sshVerifyOtpRequest" was null or undefined when calling sshVerifyOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/verify`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshVerifyOtpRequestToJSON(requestParameters['sshVerifyOtpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtp(sshMountPath: string, sshVerifyOtpRequest: SshVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshVerifyOtpRaw({ sshMountPath: sshMountPath, sshVerifyOtpRequest: sshVerifyOtpRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRoleRaw(requestParameters: SecretsApiSshWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['sshMountPath'] == null) {
            throw new runtime.RequiredError(
                'sshMountPath',
                'Required parameter "sshMountPath" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['sshWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'sshWriteRoleRequest',
                'Required parameter "sshWriteRoleRequest" was null or undefined when calling sshWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['sshMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshWriteRoleRequestToJSON(requestParameters['sshWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRole(role: string, sshMountPath: string, sshWriteRoleRequest: SshWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshWriteRoleRaw({ role: role, sshMountPath: sshMountPath, sshWriteRoleRequest: sshWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudConfigureRaw(requestParameters: SecretsApiTerraformCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        if (requestParameters['terraformCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'terraformCloudConfigureRequest',
                'Required parameter "terraformCloudConfigureRequest" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudConfigureRequestToJSON(requestParameters['terraformCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudConfigure(terraformMountPath: string, terraformCloudConfigureRequest: TerraformCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudConfigureRaw({ terraformMountPath: terraformMountPath, terraformCloudConfigureRequest: terraformCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudDeleteConfigurationRaw(requestParameters: SecretsApiTerraformCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteConfiguration(terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudDeleteConfigurationRaw({ terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudDeleteRoleRaw(requestParameters: SecretsApiTerraformCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteRole(name: string, terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudDeleteRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudGenerateCredentialsRaw(requestParameters: SecretsApiTerraformCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials(name: string, terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudGenerateCredentialsRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudGenerateCredentials2Raw(requestParameters: SecretsApiTerraformCloudGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials2(name: string, terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudGenerateCredentials2Raw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudListRolesRaw(requestParameters: SecretsApiTerraformCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async terraformCloudListRoles(terraformMountPath: string, list: TerraformCloudListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.terraformCloudListRolesRaw({ terraformMountPath: terraformMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudReadConfigurationRaw(requestParameters: SecretsApiTerraformCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadConfiguration(terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudReadConfigurationRaw({ terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudReadRoleRaw(requestParameters: SecretsApiTerraformCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadRole(name: string, terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudReadRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudRotateRoleRaw(requestParameters: SecretsApiTerraformCloudRotateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudRotateRole(name: string, terraformMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudRotateRoleRaw({ name: name, terraformMountPath: terraformMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudWriteRoleRaw(requestParameters: SecretsApiTerraformCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['terraformMountPath'] == null) {
            throw new runtime.RequiredError(
                'terraformMountPath',
                'Required parameter "terraformMountPath" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['terraformCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'terraformCloudWriteRoleRequest',
                'Required parameter "terraformCloudWriteRoleRequest" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraformMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudWriteRoleRequestToJSON(requestParameters['terraformCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudWriteRole(name: string, terraformMountPath: string, terraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudWriteRoleRaw({ name: name, terraformMountPath: terraformMountPath, terraformCloudWriteRoleRequest: terraformCloudWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpCreateKeyRaw(requestParameters: SecretsApiTotpCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['totpCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'totpCreateKeyRequest',
                'Required parameter "totpCreateKeyRequest" was null or undefined when calling totpCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpCreateKeyRequestToJSON(requestParameters['totpCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpCreateKey(name: string, totpMountPath: string, totpCreateKeyRequest: TotpCreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpCreateKeyRaw({ name: name, totpMountPath: totpMountPath, totpCreateKeyRequest: totpCreateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpDeleteKeyRaw(requestParameters: SecretsApiTotpDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpDeleteKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpDeleteKey(name: string, totpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpDeleteKeyRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpGenerateCodeRaw(requestParameters: SecretsApiTotpGenerateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpGenerateCode().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpGenerateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpGenerateCode(name: string, totpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpGenerateCodeRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeysRaw(requestParameters: SecretsApiTotpListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling totpListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/`.replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeys(totpMountPath: string, list: TotpListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.totpListKeysRaw({ totpMountPath: totpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpReadKeyRaw(requestParameters: SecretsApiTotpReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpReadKey().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpReadKey(name: string, totpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpReadKeyRaw({ name: name, totpMountPath: totpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpValidateCodeRaw(requestParameters: SecretsApiTotpValidateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['totpMountPath'] == null) {
            throw new runtime.RequiredError(
                'totpMountPath',
                'Required parameter "totpMountPath" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['totpValidateCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'totpValidateCodeRequest',
                'Required parameter "totpValidateCodeRequest" was null or undefined when calling totpValidateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpValidateCodeRequestToJSON(requestParameters['totpValidateCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpValidateCode(name: string, totpMountPath: string, totpValidateCodeRequest: TotpValidateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpValidateCodeRaw({ name: name, totpMountPath: totpMountPath, totpValidateCodeRequest: totpValidateCodeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Backup the named key
     */
    async transitBackUpKeyRaw(requestParameters: SecretsApiTransitBackUpKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitBackUpKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitBackUpKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/backup/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Backup the named key
     */
    async transitBackUpKey(name: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitBackUpKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyRaw(requestParameters: SecretsApiTransitByokKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitByokKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKey(destination: string, source: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitByokKeyRaw({ destination: destination, source: source, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersionRaw(requestParameters: SecretsApiTransitByokKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}/{version}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersion(destination: string, source: string, version: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitByokKeyVersionRaw({ destination: destination, source: source, version: version, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCacheRaw(requestParameters: SecretsApiTransitConfigureCacheOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureCache().'
            );
        }

        if (requestParameters['transitConfigureCacheRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureCacheRequest',
                'Required parameter "transitConfigureCacheRequest" was null or undefined when calling transitConfigureCache().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureCacheRequestToJSON(requestParameters['transitConfigureCacheRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCache(transitMountPath: string, transitConfigureCacheRequest: TransitConfigureCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureCacheRaw({ transitMountPath: transitMountPath, transitConfigureCacheRequest: transitConfigureCacheRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKeyRaw(requestParameters: SecretsApiTransitConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['transitConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureKeyRequest',
                'Required parameter "transitConfigureKeyRequest" was null or undefined when calling transitConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/config`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeyRequestToJSON(requestParameters['transitConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKey(name: string, transitMountPath: string, transitConfigureKeyRequest: TransitConfigureKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureKeyRaw({ name: name, transitMountPath: transitMountPath, transitConfigureKeyRequest: transitConfigureKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitConfigureKeysRaw(requestParameters: SecretsApiTransitConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitConfigureKeys().'
            );
        }

        if (requestParameters['transitConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'transitConfigureKeysRequest',
                'Required parameter "transitConfigureKeysRequest" was null or undefined when calling transitConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeysRequestToJSON(requestParameters['transitConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitConfigureKeys(transitMountPath: string, transitConfigureKeysRequest: TransitConfigureKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureKeysRaw({ transitMountPath: transitMountPath, transitConfigureKeysRequest: transitConfigureKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitCreateKeyRaw(requestParameters: SecretsApiTransitCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['transitCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitCreateKeyRequest',
                'Required parameter "transitCreateKeyRequest" was null or undefined when calling transitCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitCreateKeyRequestToJSON(requestParameters['transitCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitCreateKey(name: string, transitMountPath: string, transitCreateKeyRequest: TransitCreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitCreateKeyRaw({ name: name, transitMountPath: transitMountPath, transitCreateKeyRequest: transitCreateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecryptRaw(requestParameters: SecretsApiTransitDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['transitDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'transitDecryptRequest',
                'Required parameter "transitDecryptRequest" was null or undefined when calling transitDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/decrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitDecryptRequestToJSON(requestParameters['transitDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecrypt(name: string, transitMountPath: string, transitDecryptRequest: TransitDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitDecryptRaw({ name: name, transitMountPath: transitMountPath, transitDecryptRequest: transitDecryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitDeleteKeyRaw(requestParameters: SecretsApiTransitDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDeleteKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitDeleteKey(name: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitDeleteKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncryptRaw(requestParameters: SecretsApiTransitEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['transitEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'transitEncryptRequest',
                'Required parameter "transitEncryptRequest" was null or undefined when calling transitEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/encrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitEncryptRequestToJSON(requestParameters['transitEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncrypt(name: string, transitMountPath: string, transitEncryptRequest: TransitEncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitEncryptRaw({ name: name, transitMountPath: transitMountPath, transitEncryptRequest: transitEncryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyRaw(requestParameters: SecretsApiTransitExportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitExportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKey(name: string, type: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitExportKeyRaw({ name: name, type: type, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersionRaw(requestParameters: SecretsApiTransitExportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}/{version}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersion(name: string, type: string, version: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitExportKeyVersionRaw({ name: name, type: type, version: version, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCmacRaw(requestParameters: SecretsApiTransitGenerateCmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCmac().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCmac().'
            );
        }

        if (requestParameters['transitGenerateCmacRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateCmacRequest',
                'Required parameter "transitGenerateCmacRequest" was null or undefined when calling transitGenerateCmac().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCmacRequestToJSON(requestParameters['transitGenerateCmacRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCmac(name: string, transitMountPath: string, transitGenerateCmacRequest: TransitGenerateCmacRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCmacRaw({ name: name, transitMountPath: transitMountPath, transitGenerateCmacRequest: transitGenerateCmacRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCmacWithMacLengthRaw(requestParameters: SecretsApiTransitGenerateCmacWithMacLengthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['urlMacLength'] == null) {
            throw new runtime.RequiredError(
                'urlMacLength',
                'Required parameter "urlMacLength" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['transitGenerateCmacWithMacLengthRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateCmacWithMacLengthRequest',
                'Required parameter "transitGenerateCmacWithMacLengthRequest" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cmac/{name}/{url_mac_length}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"url_mac_length"}}`, encodeURIComponent(String(requestParameters['urlMacLength']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCmacWithMacLengthRequestToJSON(requestParameters['transitGenerateCmacWithMacLengthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCmacWithMacLength(name: string, urlMacLength: string, transitMountPath: string, transitGenerateCmacWithMacLengthRequest: TransitGenerateCmacWithMacLengthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCmacWithMacLengthRaw({ name: name, urlMacLength: urlMacLength, transitMountPath: transitMountPath, transitGenerateCmacWithMacLengthRequest: transitGenerateCmacWithMacLengthRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCsrForKeyRaw(requestParameters: SecretsApiTransitGenerateCsrForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['transitGenerateCsrForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateCsrForKeyRequest',
                'Required parameter "transitGenerateCsrForKeyRequest" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/csr`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCsrForKeyRequestToJSON(requestParameters['transitGenerateCsrForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCsrForKey(name: string, transitMountPath: string, transitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCsrForKeyRaw({ name: name, transitMountPath: transitMountPath, transitGenerateCsrForKeyRequest: transitGenerateCsrForKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKeyRaw(requestParameters: SecretsApiTransitGenerateDataKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['plaintext'] == null) {
            throw new runtime.RequiredError(
                'plaintext',
                'Required parameter "plaintext" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['transitGenerateDataKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateDataKeyRequest',
                'Required parameter "transitGenerateDataKeyRequest" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/datakey/{plaintext}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"plaintext"}}`, encodeURIComponent(String(requestParameters['plaintext']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateDataKeyRequestToJSON(requestParameters['transitGenerateDataKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKey(name: string, plaintext: string, transitMountPath: string, transitGenerateDataKeyRequest: TransitGenerateDataKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateDataKeyRaw({ name: name, plaintext: plaintext, transitMountPath: transitMountPath, transitGenerateDataKeyRequest: transitGenerateDataKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacRaw(requestParameters: SecretsApiTransitGenerateHmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['transitGenerateHmacRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateHmacRequest',
                'Required parameter "transitGenerateHmacRequest" was null or undefined when calling transitGenerateHmac().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacRequestToJSON(requestParameters['transitGenerateHmacRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmac(name: string, transitMountPath: string, transitGenerateHmacRequest: TransitGenerateHmacRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateHmacRaw({ name: name, transitMountPath: transitMountPath, transitGenerateHmacRequest: transitGenerateHmacRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithmRaw(requestParameters: SecretsApiTransitGenerateHmacWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['transitGenerateHmacWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateHmacWithAlgorithmRequest',
                'Required parameter "transitGenerateHmacWithAlgorithmRequest" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacWithAlgorithmRequestToJSON(requestParameters['transitGenerateHmacWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithm(name: string, urlalgorithm: string, transitMountPath: string, transitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateHmacWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitGenerateHmacWithAlgorithmRequest: transitGenerateHmacWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomRaw(requestParameters: SecretsApiTransitGenerateRandomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandom().'
            );
        }

        if (requestParameters['transitGenerateRandomRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomRequest',
                'Required parameter "transitGenerateRandomRequest" was null or undefined when calling transitGenerateRandom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomRequestToJSON(requestParameters['transitGenerateRandomRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandom(transitMountPath: string, transitGenerateRandomRequest: TransitGenerateRandomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomRaw({ transitMountPath: transitMountPath, transitGenerateRandomRequest: transitGenerateRandomRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytesRaw(requestParameters: SecretsApiTransitGenerateRandomWithBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['transitGenerateRandomWithBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithBytesRequest',
                'Required parameter "transitGenerateRandomWithBytesRequest" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithBytesRequestToJSON(requestParameters['transitGenerateRandomWithBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytes(urlbytes: string, transitMountPath: string, transitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithBytesRaw({ urlbytes: urlbytes, transitMountPath: transitMountPath, transitGenerateRandomWithBytesRequest: transitGenerateRandomWithBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceRaw(requestParameters: SecretsApiTransitGenerateRandomWithSourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['transitGenerateRandomWithSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithSourceRequest',
                'Required parameter "transitGenerateRandomWithSourceRequest" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceRequestToJSON(requestParameters['transitGenerateRandomWithSourceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSource(source: string, transitMountPath: string, transitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithSourceRaw({ source: source, transitMountPath: transitMountPath, transitGenerateRandomWithSourceRequest: transitGenerateRandomWithSourceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytesRaw(requestParameters: SecretsApiTransitGenerateRandomWithSourceAndBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['transitGenerateRandomWithSourceAndBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'transitGenerateRandomWithSourceAndBytesRequest',
                'Required parameter "transitGenerateRandomWithSourceAndBytesRequest" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceAndBytesRequestToJSON(requestParameters['transitGenerateRandomWithSourceAndBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytes(source: string, urlbytes: string, transitMountPath: string, transitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithSourceAndBytesRaw({ source: source, urlbytes: urlbytes, transitMountPath: transitMountPath, transitGenerateRandomWithSourceAndBytesRequest: transitGenerateRandomWithSourceAndBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashRaw(requestParameters: SecretsApiTransitHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitHash().'
            );
        }

        if (requestParameters['transitHashRequest'] == null) {
            throw new runtime.RequiredError(
                'transitHashRequest',
                'Required parameter "transitHashRequest" was null or undefined when calling transitHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashRequestToJSON(requestParameters['transitHashRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHash(transitMountPath: string, transitHashRequest: TransitHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitHashRaw({ transitMountPath: transitMountPath, transitHashRequest: transitHashRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithmRaw(requestParameters: SecretsApiTransitHashWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['transitHashWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitHashWithAlgorithmRequest',
                'Required parameter "transitHashWithAlgorithmRequest" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashWithAlgorithmRequestToJSON(requestParameters['transitHashWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithm(urlalgorithm: string, transitMountPath: string, transitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitHashWithAlgorithmRaw({ urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitHashWithAlgorithmRequest: transitHashWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKeyRaw(requestParameters: SecretsApiTransitImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['transitImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitImportKeyRequest',
                'Required parameter "transitImportKeyRequest" was null or undefined when calling transitImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyRequestToJSON(requestParameters['transitImportKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKey(name: string, transitMountPath: string, transitImportKeyRequest: TransitImportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitImportKeyRaw({ name: name, transitMountPath: transitMountPath, transitImportKeyRequest: transitImportKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersionRaw(requestParameters: SecretsApiTransitImportKeyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['transitImportKeyVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'transitImportKeyVersionRequest',
                'Required parameter "transitImportKeyVersionRequest" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import_version`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyVersionRequestToJSON(requestParameters['transitImportKeyVersionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersion(name: string, transitMountPath: string, transitImportKeyVersionRequest: TransitImportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitImportKeyVersionRaw({ name: name, transitMountPath: transitMountPath, transitImportKeyVersionRequest: transitImportKeyVersionRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeysRaw(requestParameters: SecretsApiTransitListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transitListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeys(transitMountPath: string, list: TransitListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transitListKeysRaw({ transitMountPath: transitMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfigurationRaw(requestParameters: SecretsApiTransitReadCacheConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadCacheConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfiguration(transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadCacheConfigurationRaw({ transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitReadKeyRaw(requestParameters: SecretsApiTransitReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitReadKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKey(name: string, transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadKeyRaw({ name: name, transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitReadKeysConfigurationRaw(requestParameters: SecretsApiTransitReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKeysConfiguration(transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadKeysConfigurationRaw({ transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKeyRaw(requestParameters: SecretsApiTransitReadWrappingKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitReadWrappingKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/wrapping_key`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKey(transitMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadWrappingKeyRaw({ transitMountPath: transitMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKeyRaw(requestParameters: SecretsApiTransitRestoreAndRenameKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['transitRestoreAndRenameKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRestoreAndRenameKeyRequest',
                'Required parameter "transitRestoreAndRenameKeyRequest" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreAndRenameKeyRequestToJSON(requestParameters['transitRestoreAndRenameKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKey(name: string, transitMountPath: string, transitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRestoreAndRenameKeyRaw({ name: name, transitMountPath: transitMountPath, transitRestoreAndRenameKeyRequest: transitRestoreAndRenameKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Restore the named key
     */
    async transitRestoreKeyRaw(requestParameters: SecretsApiTransitRestoreKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRestoreKey().'
            );
        }

        if (requestParameters['transitRestoreKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRestoreKeyRequest',
                'Required parameter "transitRestoreKeyRequest" was null or undefined when calling transitRestoreKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreKeyRequestToJSON(requestParameters['transitRestoreKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreKey(transitMountPath: string, transitRestoreKeyRequest: TransitRestoreKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRestoreKeyRaw({ transitMountPath: transitMountPath, transitRestoreKeyRequest: transitRestoreKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrapRaw(requestParameters: SecretsApiTransitRewrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['transitRewrapRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRewrapRequest',
                'Required parameter "transitRewrapRequest" was null or undefined when calling transitRewrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/rewrap/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRewrapRequestToJSON(requestParameters['transitRewrapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrap(name: string, transitMountPath: string, transitRewrapRequest: TransitRewrapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRewrapRaw({ name: name, transitMountPath: transitMountPath, transitRewrapRequest: transitRewrapRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKeyRaw(requestParameters: SecretsApiTransitRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['transitRotateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitRotateKeyRequest',
                'Required parameter "transitRotateKeyRequest" was null or undefined when calling transitRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRotateKeyRequestToJSON(requestParameters['transitRotateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKey(name: string, transitMountPath: string, transitRotateKeyRequest: TransitRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRotateKeyRaw({ name: name, transitMountPath: transitMountPath, transitRotateKeyRequest: transitRotateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitSetCertificateForKeyRaw(requestParameters: SecretsApiTransitSetCertificateForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['transitSetCertificateForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSetCertificateForKeyRequest',
                'Required parameter "transitSetCertificateForKeyRequest" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/set-certificate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSetCertificateForKeyRequestToJSON(requestParameters['transitSetCertificateForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitSetCertificateForKey(name: string, transitMountPath: string, transitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSetCertificateForKeyRaw({ name: name, transitMountPath: transitMountPath, transitSetCertificateForKeyRequest: transitSetCertificateForKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignRaw(requestParameters: SecretsApiTransitSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['transitSignRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSignRequest',
                'Required parameter "transitSignRequest" was null or undefined when calling transitSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignRequestToJSON(requestParameters['transitSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSign(name: string, transitMountPath: string, transitSignRequest: TransitSignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSignRaw({ name: name, transitMountPath: transitMountPath, transitSignRequest: transitSignRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithmRaw(requestParameters: SecretsApiTransitSignWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['transitSignWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitSignWithAlgorithmRequest',
                'Required parameter "transitSignWithAlgorithmRequest" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignWithAlgorithmRequestToJSON(requestParameters['transitSignWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithm(name: string, urlalgorithm: string, transitMountPath: string, transitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSignWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitSignWithAlgorithmRequest: transitSignWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKeyRaw(requestParameters: SecretsApiTransitTrimKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['transitTrimKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitTrimKeyRequest',
                'Required parameter "transitTrimKeyRequest" was null or undefined when calling transitTrimKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/trim`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitTrimKeyRequestToJSON(requestParameters['transitTrimKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKey(name: string, transitMountPath: string, transitTrimKeyRequest: TransitTrimKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitTrimKeyRaw({ name: name, transitMountPath: transitMountPath, transitTrimKeyRequest: transitTrimKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyRaw(requestParameters: SecretsApiTransitVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['transitVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'transitVerifyRequest',
                'Required parameter "transitVerifyRequest" was null or undefined when calling transitVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyRequestToJSON(requestParameters['transitVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerify(name: string, transitMountPath: string, transitVerifyRequest: TransitVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitVerifyRaw({ name: name, transitMountPath: transitMountPath, transitVerifyRequest: transitVerifyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithmRaw(requestParameters: SecretsApiTransitVerifyWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['transitMountPath'] == null) {
            throw new runtime.RequiredError(
                'transitMountPath',
                'Required parameter "transitMountPath" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['transitVerifyWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'transitVerifyWithAlgorithmRequest',
                'Required parameter "transitVerifyWithAlgorithmRequest" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transitMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyWithAlgorithmRequestToJSON(requestParameters['transitVerifyWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithm(name: string, urlalgorithm: string, transitMountPath: string, transitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitVerifyWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transitMountPath: transitMountPath, transitVerifyWithAlgorithmRequest: transitVerifyWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AliCloudListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AzureListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum ConsulListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum CubbyholeListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListConnectionsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudKmsListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListImpersonatedAccountsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListImpersonatedAccounts2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRolesetsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRolesets2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListStaticAccountsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListStaticAccounts2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KubernetesListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KvV1ListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KvV2ListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListLibraryPathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListLibraryPath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListDynamicRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListRolePathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListRolePath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolePathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolePath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MongoDbAtlasListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum NomadListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiGenerateIntermediateExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiGenerateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiIssuersGenerateIntermediateExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiIssuersGenerateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListAcmeAccountKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertMetadataListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertsRevocationQueueListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListEabKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListIssuersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListRevokedCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListUnifiedRevokedCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiRotateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum RabbitMqListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SshListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TerraformCloudListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TotpListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransitListKeysListEnum {
    TRUE = 'true'
}
