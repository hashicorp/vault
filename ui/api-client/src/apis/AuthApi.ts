/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliCloudLoginRequest,
  AliCloudWriteAuthRoleRequest,
  AppRoleDestroySecretIdByAccessorRequest,
  AppRoleDestroySecretIdRequest,
  AppRoleLoginRequest,
  AppRoleLookUpSecretIdByAccessorRequest,
  AppRoleLookUpSecretIdByAccessorResponse,
  AppRoleLookUpSecretIdRequest,
  AppRoleLookUpSecretIdResponse,
  AppRoleReadBindSecretIdResponse,
  AppRoleReadBoundCidrListResponse,
  AppRoleReadLocalSecretIdsResponse,
  AppRoleReadPeriodResponse,
  AppRoleReadPoliciesResponse,
  AppRoleReadRoleIdResponse,
  AppRoleReadRoleResponse,
  AppRoleReadSecretIdBoundCidrsResponse,
  AppRoleReadSecretIdNumUsesResponse,
  AppRoleReadSecretIdTtlResponse,
  AppRoleReadTokenBoundCidrsResponse,
  AppRoleReadTokenMaxTtlResponse,
  AppRoleReadTokenNumUsesResponse,
  AppRoleReadTokenTtlResponse,
  AppRoleWriteBindSecretIdRequest,
  AppRoleWriteBoundCidrListRequest,
  AppRoleWriteCustomSecretIdRequest,
  AppRoleWriteCustomSecretIdResponse,
  AppRoleWritePeriodRequest,
  AppRoleWritePoliciesRequest,
  AppRoleWriteRoleIdRequest,
  AppRoleWriteRoleRequest,
  AppRoleWriteSecretIdBoundCidrsRequest,
  AppRoleWriteSecretIdNumUsesRequest,
  AppRoleWriteSecretIdRequest,
  AppRoleWriteSecretIdResponse,
  AppRoleWriteSecretIdTtlRequest,
  AppRoleWriteTokenBoundCidrsRequest,
  AppRoleWriteTokenMaxTtlRequest,
  AppRoleWriteTokenNumUsesRequest,
  AppRoleWriteTokenTtlRequest,
  AwsConfigureCertificateRequest,
  AwsConfigureClientRequest,
  AwsConfigureIdentityAccessListTidyOperationRequest,
  AwsConfigureIdentityIntegrationRequest,
  AwsConfigureIdentityWhitelistTidyOperationRequest,
  AwsConfigureRoleTagBlacklistTidyOperationRequest,
  AwsConfigureRoleTagDenyListTidyOperationRequest,
  AwsLoginRequest,
  AwsTidyIdentityAccessListRequest,
  AwsTidyIdentityWhitelistRequest,
  AwsTidyRoleTagBlacklistRequest,
  AwsTidyRoleTagDenyListRequest,
  AwsWriteAuthRoleRequest,
  AwsWriteRoleTagRequest,
  AwsWriteStsRoleRequest,
  AzureConfigureAuthRequest,
  AzureLoginRequest,
  AzureWriteAuthRoleRequest,
  CertConfigureRequest,
  CertLoginRequest,
  CertWriteCertificateRequest,
  CertWriteCrlRequest,
  CloudFoundryConfigureRequest,
  CloudFoundryLoginRequest,
  CloudFoundryWriteRoleRequest,
  GithubConfigureRequest,
  GithubLoginRequest,
  GithubWriteTeamMappingRequest,
  GithubWriteUserMappingRequest,
  GoogleCloudConfigureAuthRequest,
  GoogleCloudEditLabelsForRoleRequest,
  GoogleCloudEditServiceAccountsForRoleRequest,
  GoogleCloudLoginRequest,
  GoogleCloudWriteRoleRequest,
  JwtConfigureRequest,
  JwtLoginRequest,
  JwtOidcCallbackFormPostRequest,
  JwtOidcRequestAuthorizationUrlRequest,
  JwtWriteRoleRequest,
  KerberosConfigureLdapRequest,
  KerberosConfigureRequest,
  KerberosLoginRequest,
  KerberosWriteGroupRequest,
  KubernetesConfigureAuthRequest,
  KubernetesLoginRequest,
  KubernetesWriteAuthRoleRequest,
  LdapConfigureAuthRequest,
  LdapLoginRequest,
  LdapWriteGroupRequest,
  LdapWriteUserRequest,
  OciConfigureRequest,
  OciLoginRequest,
  OciWriteRoleRequest,
  OktaConfigureRequest,
  OktaLoginRequest,
  OktaWriteGroupRequest,
  OktaWriteUserRequest,
  RadiusConfigureRequest,
  RadiusLoginRequest,
  RadiusLoginWithUsernameRequest,
  RadiusWriteUserRequest,
  StandardListResponse,
  TokenCreateAgainstRoleRequest,
  TokenCreateOrphanRequest,
  TokenCreateRequest,
  TokenLookUpAccessorRequest,
  TokenLookUpRequest,
  TokenLookUpSelf2Request,
  TokenRenewAccessorRequest,
  TokenRenewRequest,
  TokenRenewSelfRequest,
  TokenRevokeAccessorRequest,
  TokenRevokeOrphanRequest,
  TokenRevokeRequest,
  TokenWriteRoleRequest,
  UserpassLoginRequest,
  UserpassResetPasswordRequest,
  UserpassUpdatePoliciesRequest,
  UserpassWriteUserRequest,
} from '../models/index';
import {
    AliCloudLoginRequestFromJSON,
    AliCloudLoginRequestToJSON,
    AliCloudWriteAuthRoleRequestFromJSON,
    AliCloudWriteAuthRoleRequestToJSON,
    AppRoleDestroySecretIdByAccessorRequestFromJSON,
    AppRoleDestroySecretIdByAccessorRequestToJSON,
    AppRoleDestroySecretIdRequestFromJSON,
    AppRoleDestroySecretIdRequestToJSON,
    AppRoleLoginRequestFromJSON,
    AppRoleLoginRequestToJSON,
    AppRoleLookUpSecretIdByAccessorRequestFromJSON,
    AppRoleLookUpSecretIdByAccessorRequestToJSON,
    AppRoleLookUpSecretIdByAccessorResponseFromJSON,
    AppRoleLookUpSecretIdByAccessorResponseToJSON,
    AppRoleLookUpSecretIdRequestFromJSON,
    AppRoleLookUpSecretIdRequestToJSON,
    AppRoleLookUpSecretIdResponseFromJSON,
    AppRoleLookUpSecretIdResponseToJSON,
    AppRoleReadBindSecretIdResponseFromJSON,
    AppRoleReadBindSecretIdResponseToJSON,
    AppRoleReadBoundCidrListResponseFromJSON,
    AppRoleReadBoundCidrListResponseToJSON,
    AppRoleReadLocalSecretIdsResponseFromJSON,
    AppRoleReadLocalSecretIdsResponseToJSON,
    AppRoleReadPeriodResponseFromJSON,
    AppRoleReadPeriodResponseToJSON,
    AppRoleReadPoliciesResponseFromJSON,
    AppRoleReadPoliciesResponseToJSON,
    AppRoleReadRoleIdResponseFromJSON,
    AppRoleReadRoleIdResponseToJSON,
    AppRoleReadRoleResponseFromJSON,
    AppRoleReadRoleResponseToJSON,
    AppRoleReadSecretIdBoundCidrsResponseFromJSON,
    AppRoleReadSecretIdBoundCidrsResponseToJSON,
    AppRoleReadSecretIdNumUsesResponseFromJSON,
    AppRoleReadSecretIdNumUsesResponseToJSON,
    AppRoleReadSecretIdTtlResponseFromJSON,
    AppRoleReadSecretIdTtlResponseToJSON,
    AppRoleReadTokenBoundCidrsResponseFromJSON,
    AppRoleReadTokenBoundCidrsResponseToJSON,
    AppRoleReadTokenMaxTtlResponseFromJSON,
    AppRoleReadTokenMaxTtlResponseToJSON,
    AppRoleReadTokenNumUsesResponseFromJSON,
    AppRoleReadTokenNumUsesResponseToJSON,
    AppRoleReadTokenTtlResponseFromJSON,
    AppRoleReadTokenTtlResponseToJSON,
    AppRoleWriteBindSecretIdRequestFromJSON,
    AppRoleWriteBindSecretIdRequestToJSON,
    AppRoleWriteBoundCidrListRequestFromJSON,
    AppRoleWriteBoundCidrListRequestToJSON,
    AppRoleWriteCustomSecretIdRequestFromJSON,
    AppRoleWriteCustomSecretIdRequestToJSON,
    AppRoleWriteCustomSecretIdResponseFromJSON,
    AppRoleWriteCustomSecretIdResponseToJSON,
    AppRoleWritePeriodRequestFromJSON,
    AppRoleWritePeriodRequestToJSON,
    AppRoleWritePoliciesRequestFromJSON,
    AppRoleWritePoliciesRequestToJSON,
    AppRoleWriteRoleIdRequestFromJSON,
    AppRoleWriteRoleIdRequestToJSON,
    AppRoleWriteRoleRequestFromJSON,
    AppRoleWriteRoleRequestToJSON,
    AppRoleWriteSecretIdBoundCidrsRequestFromJSON,
    AppRoleWriteSecretIdBoundCidrsRequestToJSON,
    AppRoleWriteSecretIdNumUsesRequestFromJSON,
    AppRoleWriteSecretIdNumUsesRequestToJSON,
    AppRoleWriteSecretIdRequestFromJSON,
    AppRoleWriteSecretIdRequestToJSON,
    AppRoleWriteSecretIdResponseFromJSON,
    AppRoleWriteSecretIdResponseToJSON,
    AppRoleWriteSecretIdTtlRequestFromJSON,
    AppRoleWriteSecretIdTtlRequestToJSON,
    AppRoleWriteTokenBoundCidrsRequestFromJSON,
    AppRoleWriteTokenBoundCidrsRequestToJSON,
    AppRoleWriteTokenMaxTtlRequestFromJSON,
    AppRoleWriteTokenMaxTtlRequestToJSON,
    AppRoleWriteTokenNumUsesRequestFromJSON,
    AppRoleWriteTokenNumUsesRequestToJSON,
    AppRoleWriteTokenTtlRequestFromJSON,
    AppRoleWriteTokenTtlRequestToJSON,
    AwsConfigureCertificateRequestFromJSON,
    AwsConfigureCertificateRequestToJSON,
    AwsConfigureClientRequestFromJSON,
    AwsConfigureClientRequestToJSON,
    AwsConfigureIdentityAccessListTidyOperationRequestFromJSON,
    AwsConfigureIdentityAccessListTidyOperationRequestToJSON,
    AwsConfigureIdentityIntegrationRequestFromJSON,
    AwsConfigureIdentityIntegrationRequestToJSON,
    AwsConfigureIdentityWhitelistTidyOperationRequestFromJSON,
    AwsConfigureIdentityWhitelistTidyOperationRequestToJSON,
    AwsConfigureRoleTagBlacklistTidyOperationRequestFromJSON,
    AwsConfigureRoleTagBlacklistTidyOperationRequestToJSON,
    AwsConfigureRoleTagDenyListTidyOperationRequestFromJSON,
    AwsConfigureRoleTagDenyListTidyOperationRequestToJSON,
    AwsLoginRequestFromJSON,
    AwsLoginRequestToJSON,
    AwsTidyIdentityAccessListRequestFromJSON,
    AwsTidyIdentityAccessListRequestToJSON,
    AwsTidyIdentityWhitelistRequestFromJSON,
    AwsTidyIdentityWhitelistRequestToJSON,
    AwsTidyRoleTagBlacklistRequestFromJSON,
    AwsTidyRoleTagBlacklistRequestToJSON,
    AwsTidyRoleTagDenyListRequestFromJSON,
    AwsTidyRoleTagDenyListRequestToJSON,
    AwsWriteAuthRoleRequestFromJSON,
    AwsWriteAuthRoleRequestToJSON,
    AwsWriteRoleTagRequestFromJSON,
    AwsWriteRoleTagRequestToJSON,
    AwsWriteStsRoleRequestFromJSON,
    AwsWriteStsRoleRequestToJSON,
    AzureConfigureAuthRequestFromJSON,
    AzureConfigureAuthRequestToJSON,
    AzureLoginRequestFromJSON,
    AzureLoginRequestToJSON,
    AzureWriteAuthRoleRequestFromJSON,
    AzureWriteAuthRoleRequestToJSON,
    CertConfigureRequestFromJSON,
    CertConfigureRequestToJSON,
    CertLoginRequestFromJSON,
    CertLoginRequestToJSON,
    CertWriteCertificateRequestFromJSON,
    CertWriteCertificateRequestToJSON,
    CertWriteCrlRequestFromJSON,
    CertWriteCrlRequestToJSON,
    CloudFoundryConfigureRequestFromJSON,
    CloudFoundryConfigureRequestToJSON,
    CloudFoundryLoginRequestFromJSON,
    CloudFoundryLoginRequestToJSON,
    CloudFoundryWriteRoleRequestFromJSON,
    CloudFoundryWriteRoleRequestToJSON,
    GithubConfigureRequestFromJSON,
    GithubConfigureRequestToJSON,
    GithubLoginRequestFromJSON,
    GithubLoginRequestToJSON,
    GithubWriteTeamMappingRequestFromJSON,
    GithubWriteTeamMappingRequestToJSON,
    GithubWriteUserMappingRequestFromJSON,
    GithubWriteUserMappingRequestToJSON,
    GoogleCloudConfigureAuthRequestFromJSON,
    GoogleCloudConfigureAuthRequestToJSON,
    GoogleCloudEditLabelsForRoleRequestFromJSON,
    GoogleCloudEditLabelsForRoleRequestToJSON,
    GoogleCloudEditServiceAccountsForRoleRequestFromJSON,
    GoogleCloudEditServiceAccountsForRoleRequestToJSON,
    GoogleCloudLoginRequestFromJSON,
    GoogleCloudLoginRequestToJSON,
    GoogleCloudWriteRoleRequestFromJSON,
    GoogleCloudWriteRoleRequestToJSON,
    JwtConfigureRequestFromJSON,
    JwtConfigureRequestToJSON,
    JwtLoginRequestFromJSON,
    JwtLoginRequestToJSON,
    JwtOidcCallbackFormPostRequestFromJSON,
    JwtOidcCallbackFormPostRequestToJSON,
    JwtOidcRequestAuthorizationUrlRequestFromJSON,
    JwtOidcRequestAuthorizationUrlRequestToJSON,
    JwtWriteRoleRequestFromJSON,
    JwtWriteRoleRequestToJSON,
    KerberosConfigureLdapRequestFromJSON,
    KerberosConfigureLdapRequestToJSON,
    KerberosConfigureRequestFromJSON,
    KerberosConfigureRequestToJSON,
    KerberosLoginRequestFromJSON,
    KerberosLoginRequestToJSON,
    KerberosWriteGroupRequestFromJSON,
    KerberosWriteGroupRequestToJSON,
    KubernetesConfigureAuthRequestFromJSON,
    KubernetesConfigureAuthRequestToJSON,
    KubernetesLoginRequestFromJSON,
    KubernetesLoginRequestToJSON,
    KubernetesWriteAuthRoleRequestFromJSON,
    KubernetesWriteAuthRoleRequestToJSON,
    LdapConfigureAuthRequestFromJSON,
    LdapConfigureAuthRequestToJSON,
    LdapLoginRequestFromJSON,
    LdapLoginRequestToJSON,
    LdapWriteGroupRequestFromJSON,
    LdapWriteGroupRequestToJSON,
    LdapWriteUserRequestFromJSON,
    LdapWriteUserRequestToJSON,
    OciConfigureRequestFromJSON,
    OciConfigureRequestToJSON,
    OciLoginRequestFromJSON,
    OciLoginRequestToJSON,
    OciWriteRoleRequestFromJSON,
    OciWriteRoleRequestToJSON,
    OktaConfigureRequestFromJSON,
    OktaConfigureRequestToJSON,
    OktaLoginRequestFromJSON,
    OktaLoginRequestToJSON,
    OktaWriteGroupRequestFromJSON,
    OktaWriteGroupRequestToJSON,
    OktaWriteUserRequestFromJSON,
    OktaWriteUserRequestToJSON,
    RadiusConfigureRequestFromJSON,
    RadiusConfigureRequestToJSON,
    RadiusLoginRequestFromJSON,
    RadiusLoginRequestToJSON,
    RadiusLoginWithUsernameRequestFromJSON,
    RadiusLoginWithUsernameRequestToJSON,
    RadiusWriteUserRequestFromJSON,
    RadiusWriteUserRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    TokenCreateAgainstRoleRequestFromJSON,
    TokenCreateAgainstRoleRequestToJSON,
    TokenCreateOrphanRequestFromJSON,
    TokenCreateOrphanRequestToJSON,
    TokenCreateRequestFromJSON,
    TokenCreateRequestToJSON,
    TokenLookUpAccessorRequestFromJSON,
    TokenLookUpAccessorRequestToJSON,
    TokenLookUpRequestFromJSON,
    TokenLookUpRequestToJSON,
    TokenLookUpSelf2RequestFromJSON,
    TokenLookUpSelf2RequestToJSON,
    TokenRenewAccessorRequestFromJSON,
    TokenRenewAccessorRequestToJSON,
    TokenRenewRequestFromJSON,
    TokenRenewRequestToJSON,
    TokenRenewSelfRequestFromJSON,
    TokenRenewSelfRequestToJSON,
    TokenRevokeAccessorRequestFromJSON,
    TokenRevokeAccessorRequestToJSON,
    TokenRevokeOrphanRequestFromJSON,
    TokenRevokeOrphanRequestToJSON,
    TokenRevokeRequestFromJSON,
    TokenRevokeRequestToJSON,
    TokenWriteRoleRequestFromJSON,
    TokenWriteRoleRequestToJSON,
    UserpassLoginRequestFromJSON,
    UserpassLoginRequestToJSON,
    UserpassResetPasswordRequestFromJSON,
    UserpassResetPasswordRequestToJSON,
    UserpassUpdatePoliciesRequestFromJSON,
    UserpassUpdatePoliciesRequestToJSON,
    UserpassWriteUserRequestFromJSON,
    UserpassWriteUserRequestToJSON,
} from '../models/index';

export interface AuthApiAliCloudDeleteAuthRoleRequest {
    role: string;
    alicloudMountPath: string;
}

export interface AuthApiAliCloudListAuthRolesRequest {
    alicloudMountPath: string;
    list: AliCloudListAuthRolesListEnum;
}

export interface AuthApiAliCloudListAuthRoles2Request {
    alicloudMountPath: string;
    list: AliCloudListAuthRoles2ListEnum;
}

export interface AuthApiAliCloudLoginOperationRequest {
    alicloudMountPath: string;
    aliCloudLoginRequest: AliCloudLoginRequest;
}

export interface AuthApiAliCloudReadAuthRoleRequest {
    role: string;
    alicloudMountPath: string;
}

export interface AuthApiAliCloudWriteAuthRoleOperationRequest {
    role: string;
    alicloudMountPath: string;
    aliCloudWriteAuthRoleRequest: AliCloudWriteAuthRoleRequest;
}

export interface AuthApiAppRoleDeleteBindSecretIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteBoundCidrListRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeletePeriodRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeletePoliciesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteRoleRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteSecretIdBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteSecretIdNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteSecretIdTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteTokenBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteTokenMaxTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteTokenNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDeleteTokenTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleDestroySecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleDestroySecretIdRequest: AppRoleDestroySecretIdRequest;
}

export interface AuthApiAppRoleDestroySecretId2Request {
    roleName: string;
    approleMountPath: string;
    secretId?: string;
}

export interface AuthApiAppRoleDestroySecretIdByAccessorOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleDestroySecretIdByAccessorRequest: AppRoleDestroySecretIdByAccessorRequest;
}

export interface AuthApiAppRoleDestroySecretIdByAccessor2Request {
    roleName: string;
    approleMountPath: string;
    secretIdAccessor?: string;
}

export interface AuthApiAppRoleListRolesRequest {
    approleMountPath: string;
    list: AppRoleListRolesListEnum;
}

export interface AuthApiAppRoleListSecretIdsRequest {
    roleName: string;
    approleMountPath: string;
    list: AppRoleListSecretIdsListEnum;
}

export interface AuthApiAppRoleLoginOperationRequest {
    approleMountPath: string;
    appRoleLoginRequest: AppRoleLoginRequest;
}

export interface AuthApiAppRoleLookUpSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleLookUpSecretIdRequest: AppRoleLookUpSecretIdRequest;
}

export interface AuthApiAppRoleLookUpSecretIdByAccessorOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleLookUpSecretIdByAccessorRequest: AppRoleLookUpSecretIdByAccessorRequest;
}

export interface AuthApiAppRoleReadBindSecretIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadBoundCidrListRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadLocalSecretIdsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadPeriodRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadPoliciesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadRoleRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadRoleIdRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadSecretIdBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadSecretIdNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadSecretIdTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadTokenBoundCidrsRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadTokenMaxTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadTokenNumUsesRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleReadTokenTtlRequest {
    roleName: string;
    approleMountPath: string;
}

export interface AuthApiAppRoleTidySecretIdRequest {
    approleMountPath: string;
}

export interface AuthApiAppRoleWriteBindSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteBindSecretIdRequest: AppRoleWriteBindSecretIdRequest;
}

export interface AuthApiAppRoleWriteBoundCidrListOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteBoundCidrListRequest: AppRoleWriteBoundCidrListRequest;
}

export interface AuthApiAppRoleWriteCustomSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteCustomSecretIdRequest: AppRoleWriteCustomSecretIdRequest;
}

export interface AuthApiAppRoleWritePeriodOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWritePeriodRequest: AppRoleWritePeriodRequest;
}

export interface AuthApiAppRoleWritePoliciesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWritePoliciesRequest: AppRoleWritePoliciesRequest;
}

export interface AuthApiAppRoleWriteRoleOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteRoleRequest: AppRoleWriteRoleRequest;
}

export interface AuthApiAppRoleWriteRoleIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteRoleIdRequest: AppRoleWriteRoleIdRequest;
}

export interface AuthApiAppRoleWriteSecretIdOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdRequest: AppRoleWriteSecretIdRequest;
}

export interface AuthApiAppRoleWriteSecretIdBoundCidrsOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdBoundCidrsRequest: AppRoleWriteSecretIdBoundCidrsRequest;
}

export interface AuthApiAppRoleWriteSecretIdNumUsesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdNumUsesRequest: AppRoleWriteSecretIdNumUsesRequest;
}

export interface AuthApiAppRoleWriteSecretIdTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteSecretIdTtlRequest: AppRoleWriteSecretIdTtlRequest;
}

export interface AuthApiAppRoleWriteTokenBoundCidrsOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenBoundCidrsRequest: AppRoleWriteTokenBoundCidrsRequest;
}

export interface AuthApiAppRoleWriteTokenMaxTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenMaxTtlRequest: AppRoleWriteTokenMaxTtlRequest;
}

export interface AuthApiAppRoleWriteTokenNumUsesOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenNumUsesRequest: AppRoleWriteTokenNumUsesRequest;
}

export interface AuthApiAppRoleWriteTokenTtlOperationRequest {
    roleName: string;
    approleMountPath: string;
    appRoleWriteTokenTtlRequest: AppRoleWriteTokenTtlRequest;
}

export interface AuthApiAwsConfigureCertificateOperationRequest {
    certName: string;
    awsMountPath: string;
    awsConfigureCertificateRequest: AwsConfigureCertificateRequest;
}

export interface AuthApiAwsConfigureClientOperationRequest {
    awsMountPath: string;
    awsConfigureClientRequest: AwsConfigureClientRequest;
}

export interface AuthApiAwsConfigureIdentityAccessListTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityAccessListTidyOperationRequest: AwsConfigureIdentityAccessListTidyOperationRequest;
}

export interface AuthApiAwsConfigureIdentityIntegrationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityIntegrationRequest: AwsConfigureIdentityIntegrationRequest;
}

export interface AuthApiAwsConfigureIdentityWhitelistTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureIdentityWhitelistTidyOperationRequest: AwsConfigureIdentityWhitelistTidyOperationRequest;
}

export interface AuthApiAwsConfigureRoleTagBlacklistTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureRoleTagBlacklistTidyOperationRequest: AwsConfigureRoleTagBlacklistTidyOperationRequest;
}

export interface AuthApiAwsConfigureRoleTagDenyListTidyOperationOperationRequest {
    awsMountPath: string;
    awsConfigureRoleTagDenyListTidyOperationRequest: AwsConfigureRoleTagDenyListTidyOperationRequest;
}

export interface AuthApiAwsDeleteAuthRoleRequest {
    role: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteCertificateConfigurationRequest {
    certName: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteClientConfigurationRequest {
    awsMountPath: string;
}

export interface AuthApiAwsDeleteIdentityAccessListRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteIdentityAccessListTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsDeleteIdentityWhitelistRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteIdentityWhitelistTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsDeleteRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteRoleTagBlacklistTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsDeleteRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsDeleteRoleTagDenyListTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsDeleteStsRoleRequest {
    accountId: string;
    awsMountPath: string;
}

export interface AuthApiAwsListAuthRolesRequest {
    awsMountPath: string;
    list: AwsListAuthRolesListEnum;
}

export interface AuthApiAwsListAuthRoles2Request {
    awsMountPath: string;
    list: AwsListAuthRoles2ListEnum;
}

export interface AuthApiAwsListCertificateConfigurationsRequest {
    awsMountPath: string;
    list: AwsListCertificateConfigurationsListEnum;
}

export interface AuthApiAwsListIdentityAccessListRequest {
    awsMountPath: string;
    list: AwsListIdentityAccessListListEnum;
}

export interface AuthApiAwsListIdentityWhitelistRequest {
    awsMountPath: string;
    list: AwsListIdentityWhitelistListEnum;
}

export interface AuthApiAwsListRoleTagBlacklistsRequest {
    awsMountPath: string;
    list: AwsListRoleTagBlacklistsListEnum;
}

export interface AuthApiAwsListRoleTagDenyListsRequest {
    awsMountPath: string;
    list: AwsListRoleTagDenyListsListEnum;
}

export interface AuthApiAwsListStsRoleRelationshipsRequest {
    awsMountPath: string;
    list: AwsListStsRoleRelationshipsListEnum;
}

export interface AuthApiAwsLoginOperationRequest {
    awsMountPath: string;
    awsLoginRequest: AwsLoginRequest;
}

export interface AuthApiAwsReadAuthRoleRequest {
    role: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadCertificateConfigurationRequest {
    certName: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadClientConfigurationRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadIdentityAccessListRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadIdentityAccessListTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadIdentityIntegrationConfigurationRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadIdentityWhitelistRequest {
    instanceId: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadIdentityWhitelistTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadRoleTagBlacklistTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsReadRoleTagDenyListTidySettingsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsReadStsRoleRequest {
    accountId: string;
    awsMountPath: string;
}

export interface AuthApiAwsRotateRootCredentialsRequest {
    awsMountPath: string;
}

export interface AuthApiAwsTidyIdentityAccessListOperationRequest {
    awsMountPath: string;
    awsTidyIdentityAccessListRequest: AwsTidyIdentityAccessListRequest;
}

export interface AuthApiAwsTidyIdentityWhitelistOperationRequest {
    awsMountPath: string;
    awsTidyIdentityWhitelistRequest: AwsTidyIdentityWhitelistRequest;
}

export interface AuthApiAwsTidyRoleTagBlacklistOperationRequest {
    awsMountPath: string;
    awsTidyRoleTagBlacklistRequest: AwsTidyRoleTagBlacklistRequest;
}

export interface AuthApiAwsTidyRoleTagDenyListOperationRequest {
    awsMountPath: string;
    awsTidyRoleTagDenyListRequest: AwsTidyRoleTagDenyListRequest;
}

export interface AuthApiAwsWriteAuthRoleOperationRequest {
    role: string;
    awsMountPath: string;
    awsWriteAuthRoleRequest: AwsWriteAuthRoleRequest;
}

export interface AuthApiAwsWriteRoleTagOperationRequest {
    role: string;
    awsMountPath: string;
    awsWriteRoleTagRequest: AwsWriteRoleTagRequest;
}

export interface AuthApiAwsWriteRoleTagBlacklistRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsWriteRoleTagDenyListRequest {
    roleTag: string;
    awsMountPath: string;
}

export interface AuthApiAwsWriteStsRoleOperationRequest {
    accountId: string;
    awsMountPath: string;
    awsWriteStsRoleRequest: AwsWriteStsRoleRequest;
}

export interface AuthApiAzureConfigureAuthOperationRequest {
    azureMountPath: string;
    azureConfigureAuthRequest: AzureConfigureAuthRequest;
}

export interface AuthApiAzureDeleteAuthConfigurationRequest {
    azureMountPath: string;
}

export interface AuthApiAzureDeleteAuthRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AuthApiAzureListAuthRolesRequest {
    azureMountPath: string;
    list: AzureListAuthRolesListEnum;
}

export interface AuthApiAzureLoginOperationRequest {
    azureMountPath: string;
    azureLoginRequest: AzureLoginRequest;
}

export interface AuthApiAzureReadAuthConfigurationRequest {
    azureMountPath: string;
}

export interface AuthApiAzureReadAuthRoleRequest {
    name: string;
    azureMountPath: string;
}

export interface AuthApiAzureRotateRootCredentialsRequest {
    azureMountPath: string;
}

export interface AuthApiAzureWriteAuthRoleOperationRequest {
    name: string;
    azureMountPath: string;
    azureWriteAuthRoleRequest: AzureWriteAuthRoleRequest;
}

export interface AuthApiCertConfigureOperationRequest {
    certMountPath: string;
    certConfigureRequest: CertConfigureRequest;
}

export interface AuthApiCertDeleteCertificateRequest {
    name: string;
    certMountPath: string;
}

export interface AuthApiCertDeleteCrlRequest {
    name: string;
    certMountPath: string;
}

export interface AuthApiCertListCertificatesRequest {
    certMountPath: string;
    list: CertListCertificatesListEnum;
}

export interface AuthApiCertListCrlsRequest {
    certMountPath: string;
    list: CertListCrlsListEnum;
}

export interface AuthApiCertLoginOperationRequest {
    certMountPath: string;
    certLoginRequest: CertLoginRequest;
}

export interface AuthApiCertReadCertificateRequest {
    name: string;
    certMountPath: string;
}

export interface AuthApiCertReadConfigurationRequest {
    certMountPath: string;
}

export interface AuthApiCertReadCrlRequest {
    name: string;
    certMountPath: string;
}

export interface AuthApiCertWriteCertificateOperationRequest {
    name: string;
    certMountPath: string;
    certWriteCertificateRequest: CertWriteCertificateRequest;
}

export interface AuthApiCertWriteCrlOperationRequest {
    name: string;
    certMountPath: string;
    certWriteCrlRequest: CertWriteCrlRequest;
}

export interface AuthApiCloudFoundryConfigureOperationRequest {
    cfMountPath: string;
    cloudFoundryConfigureRequest: CloudFoundryConfigureRequest;
}

export interface AuthApiCloudFoundryDeleteConfigurationRequest {
    cfMountPath: string;
}

export interface AuthApiCloudFoundryDeleteRoleRequest {
    role: string;
    cfMountPath: string;
}

export interface AuthApiCloudFoundryListRolesRequest {
    cfMountPath: string;
    list: CloudFoundryListRolesListEnum;
}

export interface AuthApiCloudFoundryLoginOperationRequest {
    cfMountPath: string;
    cloudFoundryLoginRequest: CloudFoundryLoginRequest;
}

export interface AuthApiCloudFoundryReadConfigurationRequest {
    cfMountPath: string;
}

export interface AuthApiCloudFoundryReadRoleRequest {
    role: string;
    cfMountPath: string;
}

export interface AuthApiCloudFoundryWriteRoleOperationRequest {
    role: string;
    cfMountPath: string;
    cloudFoundryWriteRoleRequest: CloudFoundryWriteRoleRequest;
}

export interface AuthApiGithubConfigureOperationRequest {
    githubMountPath: string;
    githubConfigureRequest: GithubConfigureRequest;
}

export interface AuthApiGithubDeleteTeamMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface AuthApiGithubDeleteUserMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface AuthApiGithubListTeamsRequest {
    githubMountPath: string;
    list: GithubListTeamsListEnum;
}

export interface AuthApiGithubListTeams2Request {
    githubMountPath: string;
}

export interface AuthApiGithubListUsersRequest {
    githubMountPath: string;
    list: GithubListUsersListEnum;
}

export interface AuthApiGithubListUsers2Request {
    githubMountPath: string;
}

export interface AuthApiGithubLoginOperationRequest {
    githubMountPath: string;
    githubLoginRequest: GithubLoginRequest;
}

export interface AuthApiGithubReadConfigurationRequest {
    githubMountPath: string;
}

export interface AuthApiGithubReadTeamMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface AuthApiGithubReadUserMappingRequest {
    key: string;
    githubMountPath: string;
}

export interface AuthApiGithubWriteTeamMappingOperationRequest {
    key: string;
    githubMountPath: string;
    githubWriteTeamMappingRequest: GithubWriteTeamMappingRequest;
}

export interface AuthApiGithubWriteUserMappingOperationRequest {
    key: string;
    githubMountPath: string;
    githubWriteUserMappingRequest: GithubWriteUserMappingRequest;
}

export interface AuthApiGoogleCloudConfigureAuthOperationRequest {
    gcpMountPath: string;
    googleCloudConfigureAuthRequest: GoogleCloudConfigureAuthRequest;
}

export interface AuthApiGoogleCloudDeleteRoleRequest {
    name: string;
    gcpMountPath: string;
}

export interface AuthApiGoogleCloudEditLabelsForRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudEditLabelsForRoleRequest: GoogleCloudEditLabelsForRoleRequest;
}

export interface AuthApiGoogleCloudEditServiceAccountsForRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudEditServiceAccountsForRoleRequest: GoogleCloudEditServiceAccountsForRoleRequest;
}

export interface AuthApiGoogleCloudListRolesRequest {
    gcpMountPath: string;
    list: GoogleCloudListRolesListEnum;
}

export interface AuthApiGoogleCloudListRoles2Request {
    gcpMountPath: string;
    list: GoogleCloudListRoles2ListEnum;
}

export interface AuthApiGoogleCloudLoginOperationRequest {
    gcpMountPath: string;
    googleCloudLoginRequest: GoogleCloudLoginRequest;
}

export interface AuthApiGoogleCloudReadAuthConfigurationRequest {
    gcpMountPath: string;
}

export interface AuthApiGoogleCloudReadRoleRequest {
    name: string;
    gcpMountPath: string;
}

export interface AuthApiGoogleCloudRotateRootCredentialsRequest {
    gcpMountPath: string;
}

export interface AuthApiGoogleCloudWriteRoleOperationRequest {
    name: string;
    gcpMountPath: string;
    googleCloudWriteRoleRequest: GoogleCloudWriteRoleRequest;
}

export interface AuthApiJwtConfigureOperationRequest {
    jwtMountPath: string;
    jwtConfigureRequest: JwtConfigureRequest;
}

export interface AuthApiJwtDeleteRoleRequest {
    name: string;
    jwtMountPath: string;
}

export interface AuthApiJwtListRolesRequest {
    jwtMountPath: string;
    list: JwtListRolesListEnum;
}

export interface AuthApiJwtLoginOperationRequest {
    jwtMountPath: string;
    jwtLoginRequest: JwtLoginRequest;
}

export interface AuthApiJwtOidcCallbackRequest {
    jwtMountPath: string;
    clientNonce?: string;
    code?: string;
    state?: string;
}

export interface AuthApiJwtOidcCallbackFormPostOperationRequest {
    jwtMountPath: string;
    jwtOidcCallbackFormPostRequest: JwtOidcCallbackFormPostRequest;
}

export interface AuthApiJwtOidcRequestAuthorizationUrlOperationRequest {
    jwtMountPath: string;
    jwtOidcRequestAuthorizationUrlRequest: JwtOidcRequestAuthorizationUrlRequest;
}

export interface AuthApiJwtReadConfigurationRequest {
    jwtMountPath: string;
}

export interface AuthApiJwtReadRoleRequest {
    name: string;
    jwtMountPath: string;
}

export interface AuthApiJwtWriteRoleOperationRequest {
    name: string;
    jwtMountPath: string;
    jwtWriteRoleRequest: JwtWriteRoleRequest;
}

export interface AuthApiKerberosConfigureOperationRequest {
    kerberosMountPath: string;
    kerberosConfigureRequest: KerberosConfigureRequest;
}

export interface AuthApiKerberosConfigureLdapOperationRequest {
    kerberosMountPath: string;
    kerberosConfigureLdapRequest: KerberosConfigureLdapRequest;
}

export interface AuthApiKerberosDeleteGroupRequest {
    name: string;
    kerberosMountPath: string;
}

export interface AuthApiKerberosListGroupsRequest {
    kerberosMountPath: string;
    list: KerberosListGroupsListEnum;
}

export interface AuthApiKerberosLoginOperationRequest {
    kerberosMountPath: string;
    kerberosLoginRequest: KerberosLoginRequest;
}

export interface AuthApiKerberosLogin2Request {
    kerberosMountPath: string;
}

export interface AuthApiKerberosReadConfigurationRequest {
    kerberosMountPath: string;
}

export interface AuthApiKerberosReadGroupRequest {
    name: string;
    kerberosMountPath: string;
}

export interface AuthApiKerberosReadLdapConfigurationRequest {
    kerberosMountPath: string;
}

export interface AuthApiKerberosWriteGroupOperationRequest {
    name: string;
    kerberosMountPath: string;
    kerberosWriteGroupRequest: KerberosWriteGroupRequest;
}

export interface AuthApiKubernetesConfigureAuthOperationRequest {
    kubernetesMountPath: string;
    kubernetesConfigureAuthRequest: KubernetesConfigureAuthRequest;
}

export interface AuthApiKubernetesDeleteAuthRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface AuthApiKubernetesListAuthRolesRequest {
    kubernetesMountPath: string;
    list: KubernetesListAuthRolesListEnum;
}

export interface AuthApiKubernetesLoginOperationRequest {
    kubernetesMountPath: string;
    kubernetesLoginRequest: KubernetesLoginRequest;
}

export interface AuthApiKubernetesReadAuthConfigurationRequest {
    kubernetesMountPath: string;
}

export interface AuthApiKubernetesReadAuthRoleRequest {
    name: string;
    kubernetesMountPath: string;
}

export interface AuthApiKubernetesWriteAuthRoleOperationRequest {
    name: string;
    kubernetesMountPath: string;
    kubernetesWriteAuthRoleRequest: KubernetesWriteAuthRoleRequest;
}

export interface AuthApiLdapConfigureAuthOperationRequest {
    ldapMountPath: string;
    ldapConfigureAuthRequest: LdapConfigureAuthRequest;
}

export interface AuthApiLdapDeleteGroupRequest {
    name: string;
    ldapMountPath: string;
}

export interface AuthApiLdapDeleteUserRequest {
    name: string;
    ldapMountPath: string;
}

export interface AuthApiLdapListGroupsRequest {
    ldapMountPath: string;
    list: LdapListGroupsListEnum;
}

export interface AuthApiLdapListUsersRequest {
    ldapMountPath: string;
    list: LdapListUsersListEnum;
}

export interface AuthApiLdapLoginOperationRequest {
    username: string;
    ldapMountPath: string;
    ldapLoginRequest: LdapLoginRequest;
}

export interface AuthApiLdapReadAuthConfigurationRequest {
    ldapMountPath: string;
}

export interface AuthApiLdapReadGroupRequest {
    name: string;
    ldapMountPath: string;
}

export interface AuthApiLdapReadUserRequest {
    name: string;
    ldapMountPath: string;
}

export interface AuthApiLdapRotateRootCredentialsRequest {
    ldapMountPath: string;
}

export interface AuthApiLdapWriteGroupOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteGroupRequest: LdapWriteGroupRequest;
}

export interface AuthApiLdapWriteUserOperationRequest {
    name: string;
    ldapMountPath: string;
    ldapWriteUserRequest: LdapWriteUserRequest;
}

export interface AuthApiOciConfigureOperationRequest {
    ociMountPath: string;
    ociConfigureRequest: OciConfigureRequest;
}

export interface AuthApiOciDeleteConfigurationRequest {
    ociMountPath: string;
}

export interface AuthApiOciDeleteRoleRequest {
    role: string;
    ociMountPath: string;
}

export interface AuthApiOciListRolesRequest {
    ociMountPath: string;
    list: OciListRolesListEnum;
}

export interface AuthApiOciLoginOperationRequest {
    role: string;
    ociMountPath: string;
    ociLoginRequest: OciLoginRequest;
}

export interface AuthApiOciReadConfigurationRequest {
    ociMountPath: string;
}

export interface AuthApiOciReadRoleRequest {
    role: string;
    ociMountPath: string;
}

export interface AuthApiOciWriteRoleOperationRequest {
    role: string;
    ociMountPath: string;
    ociWriteRoleRequest: OciWriteRoleRequest;
}

export interface AuthApiOktaConfigureOperationRequest {
    oktaMountPath: string;
    oktaConfigureRequest: OktaConfigureRequest;
}

export interface AuthApiOktaDeleteGroupRequest {
    name: string;
    oktaMountPath: string;
}

export interface AuthApiOktaDeleteUserRequest {
    name: string;
    oktaMountPath: string;
}

export interface AuthApiOktaListGroupsRequest {
    oktaMountPath: string;
    list: OktaListGroupsListEnum;
}

export interface AuthApiOktaListUsersRequest {
    oktaMountPath: string;
    list: OktaListUsersListEnum;
}

export interface AuthApiOktaLoginOperationRequest {
    username: string;
    oktaMountPath: string;
    oktaLoginRequest: OktaLoginRequest;
}

export interface AuthApiOktaReadConfigurationRequest {
    oktaMountPath: string;
}

export interface AuthApiOktaReadGroupRequest {
    name: string;
    oktaMountPath: string;
}

export interface AuthApiOktaReadUserRequest {
    name: string;
    oktaMountPath: string;
}

export interface AuthApiOktaVerifyRequest {
    nonce: string;
    oktaMountPath: string;
}

export interface AuthApiOktaWriteGroupOperationRequest {
    name: string;
    oktaMountPath: string;
    oktaWriteGroupRequest: OktaWriteGroupRequest;
}

export interface AuthApiOktaWriteUserOperationRequest {
    name: string;
    oktaMountPath: string;
    oktaWriteUserRequest: OktaWriteUserRequest;
}

export interface AuthApiRadiusConfigureOperationRequest {
    radiusMountPath: string;
    radiusConfigureRequest: RadiusConfigureRequest;
}

export interface AuthApiRadiusDeleteUserRequest {
    name: string;
    radiusMountPath: string;
}

export interface AuthApiRadiusListUsersRequest {
    radiusMountPath: string;
    list: RadiusListUsersListEnum;
}

export interface AuthApiRadiusLoginOperationRequest {
    radiusMountPath: string;
    radiusLoginRequest: RadiusLoginRequest;
}

export interface AuthApiRadiusLoginWithUsernameOperationRequest {
    urlusername: string;
    radiusMountPath: string;
    radiusLoginWithUsernameRequest: RadiusLoginWithUsernameRequest;
}

export interface AuthApiRadiusReadConfigurationRequest {
    radiusMountPath: string;
}

export interface AuthApiRadiusReadUserRequest {
    name: string;
    radiusMountPath: string;
}

export interface AuthApiRadiusWriteUserOperationRequest {
    name: string;
    radiusMountPath: string;
    radiusWriteUserRequest: RadiusWriteUserRequest;
}

export interface AuthApiTokenCreateOperationRequest {
    tokenCreateRequest: TokenCreateRequest;
}

export interface AuthApiTokenCreateAgainstRoleOperationRequest {
    roleName: string;
    tokenCreateAgainstRoleRequest: TokenCreateAgainstRoleRequest;
}

export interface AuthApiTokenCreateOrphanOperationRequest {
    tokenCreateOrphanRequest: TokenCreateOrphanRequest;
}

export interface AuthApiTokenDeleteRoleRequest {
    roleName: string;
}

export interface AuthApiTokenListAccessorsRequest {
    list: TokenListAccessorsListEnum;
}

export interface AuthApiTokenListRolesRequest {
    list: TokenListRolesListEnum;
}

export interface AuthApiTokenLookUpOperationRequest {
    tokenLookUpRequest: TokenLookUpRequest;
}

export interface AuthApiTokenLookUp2Request {
    token?: string;
}

export interface AuthApiTokenLookUpAccessorOperationRequest {
    tokenLookUpAccessorRequest: TokenLookUpAccessorRequest;
}

export interface AuthApiTokenLookUpSelf2OperationRequest {
    tokenLookUpSelf2Request: TokenLookUpSelf2Request;
}

export interface AuthApiTokenReadRoleRequest {
    roleName: string;
}

export interface AuthApiTokenRenewOperationRequest {
    tokenRenewRequest: TokenRenewRequest;
}

export interface AuthApiTokenRenewAccessorOperationRequest {
    tokenRenewAccessorRequest: TokenRenewAccessorRequest;
}

export interface AuthApiTokenRenewSelfOperationRequest {
    tokenRenewSelfRequest: TokenRenewSelfRequest;
}

export interface AuthApiTokenRevokeOperationRequest {
    tokenRevokeRequest: TokenRevokeRequest;
}

export interface AuthApiTokenRevokeAccessorOperationRequest {
    tokenRevokeAccessorRequest: TokenRevokeAccessorRequest;
}

export interface AuthApiTokenRevokeOrphanOperationRequest {
    tokenRevokeOrphanRequest: TokenRevokeOrphanRequest;
}

export interface AuthApiTokenWriteRoleOperationRequest {
    roleName: string;
    tokenWriteRoleRequest: TokenWriteRoleRequest;
}

export interface AuthApiUserpassDeleteUserRequest {
    username: string;
    userpassMountPath: string;
}

export interface AuthApiUserpassListUsersRequest {
    userpassMountPath: string;
    list: UserpassListUsersListEnum;
}

export interface AuthApiUserpassLoginOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassLoginRequest: UserpassLoginRequest;
}

export interface AuthApiUserpassReadUserRequest {
    username: string;
    userpassMountPath: string;
}

export interface AuthApiUserpassResetPasswordOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassResetPasswordRequest: UserpassResetPasswordRequest;
}

export interface AuthApiUserpassUpdatePoliciesOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassUpdatePoliciesRequest: UserpassUpdatePoliciesRequest;
}

export interface AuthApiUserpassWriteUserOperationRequest {
    username: string;
    userpassMountPath: string;
    userpassWriteUserRequest: UserpassWriteUserRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudDeleteAuthRoleRaw(requestParameters: AuthApiAliCloudDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudDeleteAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudDeleteAuthRole(role: string, alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudDeleteAuthRoleRaw({ role: role, alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRolesRaw(requestParameters: AuthApiAliCloudListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles(alicloudMountPath: string, list: AliCloudListAuthRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListAuthRolesRaw({ alicloudMountPath: alicloudMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles2Raw(requestParameters: AuthApiAliCloudListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudListAuthRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListAuthRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/roles/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async aliCloudListAuthRoles2(alicloudMountPath: string, list: AliCloudListAuthRoles2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListAuthRoles2Raw({ alicloudMountPath: alicloudMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates an RAM entity with Vault.
     */
    async aliCloudLoginRaw(requestParameters: AuthApiAliCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudLogin().'
            );
        }

        if (requestParameters['aliCloudLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudLoginRequest',
                'Required parameter "aliCloudLoginRequest" was null or undefined when calling aliCloudLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/login`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudLoginRequestToJSON(requestParameters['aliCloudLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates an RAM entity with Vault.
     */
    async aliCloudLogin(alicloudMountPath: string, aliCloudLoginRequest: AliCloudLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudLoginRaw({ alicloudMountPath: alicloudMountPath, aliCloudLoginRequest: aliCloudLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudReadAuthRoleRaw(requestParameters: AuthApiAliCloudReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudReadAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudReadAuthRole(role: string, alicloudMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudReadAuthRoleRaw({ role: role, alicloudMountPath: alicloudMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudWriteAuthRoleRaw(requestParameters: AuthApiAliCloudWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        if (requestParameters['alicloudMountPath'] == null) {
            throw new runtime.RequiredError(
                'alicloudMountPath',
                'Required parameter "alicloudMountPath" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        if (requestParameters['aliCloudWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'aliCloudWriteAuthRoleRequest',
                'Required parameter "aliCloudWriteAuthRoleRequest" was null or undefined when calling aliCloudWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{alicloud_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloudMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudWriteAuthRoleRequestToJSON(requestParameters['aliCloudWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async aliCloudWriteAuthRole(role: string, alicloudMountPath: string, aliCloudWriteAuthRoleRequest: AliCloudWriteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudWriteAuthRoleRaw({ role: role, alicloudMountPath: alicloudMountPath, aliCloudWriteAuthRoleRequest: aliCloudWriteAuthRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteBindSecretIdRaw(requestParameters: AuthApiAppRoleDeleteBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteBindSecretId(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteBindSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteBoundCidrListRaw(requestParameters: AuthApiAppRoleDeleteBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteBoundCidrList(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteBoundCidrListRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeletePeriodRaw(requestParameters: AuthApiAppRoleDeletePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeletePeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeletePeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeletePeriod(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeletePeriodRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeletePoliciesRaw(requestParameters: AuthApiAppRoleDeletePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeletePolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeletePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeletePolicies(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeletePoliciesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteRoleRaw(requestParameters: AuthApiAppRoleDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteRole(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteRoleRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteSecretIdBoundCidrsRaw(requestParameters: AuthApiAppRoleDeleteSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdBoundCidrs(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteSecretIdBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteSecretIdNumUsesRaw(requestParameters: AuthApiAppRoleDeleteSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdNumUses(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteSecretIdNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteSecretIdTtlRaw(requestParameters: AuthApiAppRoleDeleteSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteSecretIdTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteSecretIdTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteTokenBoundCidrsRaw(requestParameters: AuthApiAppRoleDeleteTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenBoundCidrs(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteTokenBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteTokenMaxTtlRaw(requestParameters: AuthApiAppRoleDeleteTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenMaxTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteTokenMaxTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteTokenNumUsesRaw(requestParameters: AuthApiAppRoleDeleteTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenNumUses(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteTokenNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDeleteTokenTtlRaw(requestParameters: AuthApiAppRoleDeleteTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDeleteTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDeleteTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDeleteTokenTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDeleteTokenTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDestroySecretIdRaw(requestParameters: AuthApiAppRoleDestroySecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        if (requestParameters['appRoleDestroySecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleDestroySecretIdRequest',
                'Required parameter "appRoleDestroySecretIdRequest" was null or undefined when calling appRoleDestroySecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleDestroySecretIdRequestToJSON(requestParameters['appRoleDestroySecretIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretId(roleName: string, approleMountPath: string, appRoleDestroySecretIdRequest: AppRoleDestroySecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDestroySecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleDestroySecretIdRequest: appRoleDestroySecretIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDestroySecretId2Raw(requestParameters: AuthApiAppRoleDestroySecretId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretId2().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretId2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['secretId'] != null) {
            queryParameters['secret_id'] = requestParameters['secretId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretId2(roleName: string, approleMountPath: string, secretId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDestroySecretId2Raw({ roleName: roleName, approleMountPath: approleMountPath, secretId: secretId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDestroySecretIdByAccessorRaw(requestParameters: AuthApiAppRoleDestroySecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        if (requestParameters['appRoleDestroySecretIdByAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleDestroySecretIdByAccessorRequest',
                'Required parameter "appRoleDestroySecretIdByAccessorRequest" was null or undefined when calling appRoleDestroySecretIdByAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleDestroySecretIdByAccessorRequestToJSON(requestParameters['appRoleDestroySecretIdByAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor(roleName: string, approleMountPath: string, appRoleDestroySecretIdByAccessorRequest: AppRoleDestroySecretIdByAccessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDestroySecretIdByAccessorRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleDestroySecretIdByAccessorRequest: appRoleDestroySecretIdByAccessorRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor2Raw(requestParameters: AuthApiAppRoleDestroySecretIdByAccessor2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleDestroySecretIdByAccessor2().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleDestroySecretIdByAccessor2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['secretIdAccessor'] != null) {
            queryParameters['secret_id_accessor'] = requestParameters['secretIdAccessor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleDestroySecretIdByAccessor2(roleName: string, approleMountPath: string, secretIdAccessor?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleDestroySecretIdByAccessor2Raw({ roleName: roleName, approleMountPath: approleMountPath, secretIdAccessor: secretIdAccessor }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleListRolesRaw(requestParameters: AuthApiAppRoleListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling appRoleListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleListRoles(approleMountPath: string, list: AppRoleListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.appRoleListRolesRaw({ approleMountPath: approleMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleListSecretIdsRaw(requestParameters: AuthApiAppRoleListSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling appRoleListSecretIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleListSecretIds(roleName: string, approleMountPath: string, list: AppRoleListSecretIdsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.appRoleListSecretIdsRaw({ roleName: roleName, approleMountPath: approleMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleLoginRaw(requestParameters: AuthApiAppRoleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLogin().'
            );
        }

        if (requestParameters['appRoleLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLoginRequest',
                'Required parameter "appRoleLoginRequest" was null or undefined when calling appRoleLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/login`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLoginRequestToJSON(requestParameters['appRoleLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleLogin(approleMountPath: string, appRoleLoginRequest: AppRoleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleLoginRaw({ approleMountPath: approleMountPath, appRoleLoginRequest: appRoleLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleLookUpSecretIdRaw(requestParameters: AuthApiAppRoleLookUpSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleLookUpSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        if (requestParameters['appRoleLookUpSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLookUpSecretIdRequest',
                'Required parameter "appRoleLookUpSecretIdRequest" was null or undefined when calling appRoleLookUpSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id/lookup`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLookUpSecretIdRequestToJSON(requestParameters['appRoleLookUpSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleLookUpSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleLookUpSecretId(roleName: string, approleMountPath: string, appRoleLookUpSecretIdRequest: AppRoleLookUpSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleLookUpSecretIdResponse> {
        const response = await this.appRoleLookUpSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleLookUpSecretIdRequest: appRoleLookUpSecretIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleLookUpSecretIdByAccessorRaw(requestParameters: AuthApiAppRoleLookUpSecretIdByAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleLookUpSecretIdByAccessorResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        if (requestParameters['appRoleLookUpSecretIdByAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleLookUpSecretIdByAccessorRequest',
                'Required parameter "appRoleLookUpSecretIdByAccessorRequest" was null or undefined when calling appRoleLookUpSecretIdByAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/lookup`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleLookUpSecretIdByAccessorRequestToJSON(requestParameters['appRoleLookUpSecretIdByAccessorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleLookUpSecretIdByAccessorResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleLookUpSecretIdByAccessor(roleName: string, approleMountPath: string, appRoleLookUpSecretIdByAccessorRequest: AppRoleLookUpSecretIdByAccessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleLookUpSecretIdByAccessorResponse> {
        const response = await this.appRoleLookUpSecretIdByAccessorRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleLookUpSecretIdByAccessorRequest: appRoleLookUpSecretIdByAccessorRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadBindSecretIdRaw(requestParameters: AuthApiAppRoleReadBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadBindSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadBindSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadBindSecretId(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadBindSecretIdResponse> {
        const response = await this.appRoleReadBindSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadBoundCidrListRaw(requestParameters: AuthApiAppRoleReadBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadBoundCidrListResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadBoundCidrListResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadBoundCidrList(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadBoundCidrListResponse> {
        const response = await this.appRoleReadBoundCidrListRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadLocalSecretIdsRaw(requestParameters: AuthApiAppRoleReadLocalSecretIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadLocalSecretIdsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadLocalSecretIds().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadLocalSecretIds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/local-secret-ids`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadLocalSecretIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadLocalSecretIds(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadLocalSecretIdsResponse> {
        const response = await this.appRoleReadLocalSecretIdsRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadPeriodRaw(requestParameters: AuthApiAppRoleReadPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadPeriodResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadPeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadPeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadPeriodResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadPeriod(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadPeriodResponse> {
        const response = await this.appRoleReadPeriodRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadPoliciesRaw(requestParameters: AuthApiAppRoleReadPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadPoliciesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadPolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadPolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadPolicies(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadPoliciesResponse> {
        const response = await this.appRoleReadPoliciesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadRoleRaw(requestParameters: AuthApiAppRoleReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadRoleResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadRole(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadRoleResponse> {
        const response = await this.appRoleReadRoleRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadRoleIdRaw(requestParameters: AuthApiAppRoleReadRoleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadRoleIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadRoleId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadRoleId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/role-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadRoleIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadRoleId(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadRoleIdResponse> {
        const response = await this.appRoleReadRoleIdRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdBoundCidrsRaw(requestParameters: AuthApiAppRoleReadSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdBoundCidrsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdBoundCidrsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdBoundCidrs(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdBoundCidrsResponse> {
        const response = await this.appRoleReadSecretIdBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdNumUsesRaw(requestParameters: AuthApiAppRoleReadSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdNumUsesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdNumUsesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdNumUses(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdNumUsesResponse> {
        const response = await this.appRoleReadSecretIdNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadSecretIdTtlRaw(requestParameters: AuthApiAppRoleReadSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadSecretIdTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadSecretIdTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadSecretIdTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadSecretIdTtlResponse> {
        const response = await this.appRoleReadSecretIdTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenBoundCidrsRaw(requestParameters: AuthApiAppRoleReadTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenBoundCidrsResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenBoundCidrsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenBoundCidrs(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenBoundCidrsResponse> {
        const response = await this.appRoleReadTokenBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenMaxTtlRaw(requestParameters: AuthApiAppRoleReadTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenMaxTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenMaxTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenMaxTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenMaxTtlResponse> {
        const response = await this.appRoleReadTokenMaxTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenNumUsesRaw(requestParameters: AuthApiAppRoleReadTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenNumUsesResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenNumUsesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenNumUses(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenNumUsesResponse> {
        const response = await this.appRoleReadTokenNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleReadTokenTtlRaw(requestParameters: AuthApiAppRoleReadTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleReadTokenTtlResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleReadTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleReadTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleReadTokenTtlResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleReadTokenTtl(roleName: string, approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleReadTokenTtlResponse> {
        const response = await this.appRoleReadTokenTtlRaw({ roleName: roleName, approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleTidySecretIdRaw(requestParameters: AuthApiAppRoleTidySecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleTidySecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{approle_mount_path}/tidy/secret-id`.replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleTidySecretId(approleMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleTidySecretIdRaw({ approleMountPath: approleMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteBindSecretIdRaw(requestParameters: AuthApiAppRoleWriteBindSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        if (requestParameters['appRoleWriteBindSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteBindSecretIdRequest',
                'Required parameter "appRoleWriteBindSecretIdRequest" was null or undefined when calling appRoleWriteBindSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bind-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteBindSecretIdRequestToJSON(requestParameters['appRoleWriteBindSecretIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteBindSecretId(roleName: string, approleMountPath: string, appRoleWriteBindSecretIdRequest: AppRoleWriteBindSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteBindSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteBindSecretIdRequest: appRoleWriteBindSecretIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteBoundCidrListRaw(requestParameters: AuthApiAppRoleWriteBoundCidrListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        if (requestParameters['appRoleWriteBoundCidrListRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteBoundCidrListRequest',
                'Required parameter "appRoleWriteBoundCidrListRequest" was null or undefined when calling appRoleWriteBoundCidrList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteBoundCidrListRequestToJSON(requestParameters['appRoleWriteBoundCidrListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteBoundCidrList(roleName: string, approleMountPath: string, appRoleWriteBoundCidrListRequest: AppRoleWriteBoundCidrListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteBoundCidrListRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteBoundCidrListRequest: appRoleWriteBoundCidrListRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteCustomSecretIdRaw(requestParameters: AuthApiAppRoleWriteCustomSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleWriteCustomSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        if (requestParameters['appRoleWriteCustomSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteCustomSecretIdRequest',
                'Required parameter "appRoleWriteCustomSecretIdRequest" was null or undefined when calling appRoleWriteCustomSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/custom-secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteCustomSecretIdRequestToJSON(requestParameters['appRoleWriteCustomSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleWriteCustomSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleWriteCustomSecretId(roleName: string, approleMountPath: string, appRoleWriteCustomSecretIdRequest: AppRoleWriteCustomSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleWriteCustomSecretIdResponse> {
        const response = await this.appRoleWriteCustomSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteCustomSecretIdRequest: appRoleWriteCustomSecretIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWritePeriodRaw(requestParameters: AuthApiAppRoleWritePeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        if (requestParameters['appRoleWritePeriodRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWritePeriodRequest',
                'Required parameter "appRoleWritePeriodRequest" was null or undefined when calling appRoleWritePeriod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/period`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWritePeriodRequestToJSON(requestParameters['appRoleWritePeriodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWritePeriod(roleName: string, approleMountPath: string, appRoleWritePeriodRequest: AppRoleWritePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWritePeriodRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWritePeriodRequest: appRoleWritePeriodRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWritePoliciesRaw(requestParameters: AuthApiAppRoleWritePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        if (requestParameters['appRoleWritePoliciesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWritePoliciesRequest',
                'Required parameter "appRoleWritePoliciesRequest" was null or undefined when calling appRoleWritePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/policies`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWritePoliciesRequestToJSON(requestParameters['appRoleWritePoliciesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWritePolicies(roleName: string, approleMountPath: string, appRoleWritePoliciesRequest: AppRoleWritePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWritePoliciesRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWritePoliciesRequest: appRoleWritePoliciesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteRoleRaw(requestParameters: AuthApiAppRoleWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteRole().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteRole().'
            );
        }

        if (requestParameters['appRoleWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteRoleRequest',
                'Required parameter "appRoleWriteRoleRequest" was null or undefined when calling appRoleWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteRoleRequestToJSON(requestParameters['appRoleWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteRole(roleName: string, approleMountPath: string, appRoleWriteRoleRequest: AppRoleWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteRoleRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteRoleRequest: appRoleWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteRoleIdRaw(requestParameters: AuthApiAppRoleWriteRoleIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        if (requestParameters['appRoleWriteRoleIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteRoleIdRequest',
                'Required parameter "appRoleWriteRoleIdRequest" was null or undefined when calling appRoleWriteRoleId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/role-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteRoleIdRequestToJSON(requestParameters['appRoleWriteRoleIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteRoleId(roleName: string, approleMountPath: string, appRoleWriteRoleIdRequest: AppRoleWriteRoleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteRoleIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteRoleIdRequest: appRoleWriteRoleIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteSecretIdRaw(requestParameters: AuthApiAppRoleWriteSecretIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRoleWriteSecretIdResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdRequest',
                'Required parameter "appRoleWriteSecretIdRequest" was null or undefined when calling appRoleWriteSecretId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdRequestToJSON(requestParameters['appRoleWriteSecretIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRoleWriteSecretIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async appRoleWriteSecretId(roleName: string, approleMountPath: string, appRoleWriteSecretIdRequest: AppRoleWriteSecretIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRoleWriteSecretIdResponse> {
        const response = await this.appRoleWriteSecretIdRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteSecretIdRequest: appRoleWriteSecretIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteSecretIdBoundCidrsRaw(requestParameters: AuthApiAppRoleWriteSecretIdBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdBoundCidrsRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdBoundCidrsRequest',
                'Required parameter "appRoleWriteSecretIdBoundCidrsRequest" was null or undefined when calling appRoleWriteSecretIdBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdBoundCidrsRequestToJSON(requestParameters['appRoleWriteSecretIdBoundCidrsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdBoundCidrs(roleName: string, approleMountPath: string, appRoleWriteSecretIdBoundCidrsRequest: AppRoleWriteSecretIdBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteSecretIdBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteSecretIdBoundCidrsRequest: appRoleWriteSecretIdBoundCidrsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteSecretIdNumUsesRaw(requestParameters: AuthApiAppRoleWriteSecretIdNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdNumUsesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdNumUsesRequest',
                'Required parameter "appRoleWriteSecretIdNumUsesRequest" was null or undefined when calling appRoleWriteSecretIdNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdNumUsesRequestToJSON(requestParameters['appRoleWriteSecretIdNumUsesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdNumUses(roleName: string, approleMountPath: string, appRoleWriteSecretIdNumUsesRequest: AppRoleWriteSecretIdNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteSecretIdNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteSecretIdNumUsesRequest: appRoleWriteSecretIdNumUsesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteSecretIdTtlRaw(requestParameters: AuthApiAppRoleWriteSecretIdTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        if (requestParameters['appRoleWriteSecretIdTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteSecretIdTtlRequest',
                'Required parameter "appRoleWriteSecretIdTtlRequest" was null or undefined when calling appRoleWriteSecretIdTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteSecretIdTtlRequestToJSON(requestParameters['appRoleWriteSecretIdTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteSecretIdTtl(roleName: string, approleMountPath: string, appRoleWriteSecretIdTtlRequest: AppRoleWriteSecretIdTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteSecretIdTtlRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteSecretIdTtlRequest: appRoleWriteSecretIdTtlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteTokenBoundCidrsRaw(requestParameters: AuthApiAppRoleWriteTokenBoundCidrsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        if (requestParameters['appRoleWriteTokenBoundCidrsRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenBoundCidrsRequest',
                'Required parameter "appRoleWriteTokenBoundCidrsRequest" was null or undefined when calling appRoleWriteTokenBoundCidrs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenBoundCidrsRequestToJSON(requestParameters['appRoleWriteTokenBoundCidrsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenBoundCidrs(roleName: string, approleMountPath: string, appRoleWriteTokenBoundCidrsRequest: AppRoleWriteTokenBoundCidrsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteTokenBoundCidrsRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteTokenBoundCidrsRequest: appRoleWriteTokenBoundCidrsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteTokenMaxTtlRaw(requestParameters: AuthApiAppRoleWriteTokenMaxTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        if (requestParameters['appRoleWriteTokenMaxTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenMaxTtlRequest',
                'Required parameter "appRoleWriteTokenMaxTtlRequest" was null or undefined when calling appRoleWriteTokenMaxTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-max-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenMaxTtlRequestToJSON(requestParameters['appRoleWriteTokenMaxTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenMaxTtl(roleName: string, approleMountPath: string, appRoleWriteTokenMaxTtlRequest: AppRoleWriteTokenMaxTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteTokenMaxTtlRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteTokenMaxTtlRequest: appRoleWriteTokenMaxTtlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteTokenNumUsesRaw(requestParameters: AuthApiAppRoleWriteTokenNumUsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        if (requestParameters['appRoleWriteTokenNumUsesRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenNumUsesRequest',
                'Required parameter "appRoleWriteTokenNumUsesRequest" was null or undefined when calling appRoleWriteTokenNumUses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-num-uses`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenNumUsesRequestToJSON(requestParameters['appRoleWriteTokenNumUsesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenNumUses(roleName: string, approleMountPath: string, appRoleWriteTokenNumUsesRequest: AppRoleWriteTokenNumUsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteTokenNumUsesRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteTokenNumUsesRequest: appRoleWriteTokenNumUsesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async appRoleWriteTokenTtlRaw(requestParameters: AuthApiAppRoleWriteTokenTtlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        if (requestParameters['approleMountPath'] == null) {
            throw new runtime.RequiredError(
                'approleMountPath',
                'Required parameter "approleMountPath" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        if (requestParameters['appRoleWriteTokenTtlRequest'] == null) {
            throw new runtime.RequiredError(
                'appRoleWriteTokenTtlRequest',
                'Required parameter "appRoleWriteTokenTtlRequest" was null or undefined when calling appRoleWriteTokenTtl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{approle_mount_path}/role/{role_name}/token-ttl`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))).replace(`{${"approle_mount_path"}}`, encodeURIComponent(String(requestParameters['approleMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppRoleWriteTokenTtlRequestToJSON(requestParameters['appRoleWriteTokenTtlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appRoleWriteTokenTtl(roleName: string, approleMountPath: string, appRoleWriteTokenTtlRequest: AppRoleWriteTokenTtlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.appRoleWriteTokenTtlRaw({ roleName: roleName, approleMountPath: approleMountPath, appRoleWriteTokenTtlRequest: appRoleWriteTokenTtlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureCertificateRaw(requestParameters: AuthApiAwsConfigureCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        if (requestParameters['awsConfigureCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureCertificateRequest',
                'Required parameter "awsConfigureCertificateRequest" was null or undefined when calling awsConfigureCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureCertificateRequestToJSON(requestParameters['awsConfigureCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureCertificate(certName: string, awsMountPath: string, awsConfigureCertificateRequest: AwsConfigureCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureCertificateRaw({ certName: certName, awsMountPath: awsMountPath, awsConfigureCertificateRequest: awsConfigureCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureClientRaw(requestParameters: AuthApiAwsConfigureClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureClient().'
            );
        }

        if (requestParameters['awsConfigureClientRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureClientRequest',
                'Required parameter "awsConfigureClientRequest" was null or undefined when calling awsConfigureClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureClientRequestToJSON(requestParameters['awsConfigureClientRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureClient(awsMountPath: string, awsConfigureClientRequest: AwsConfigureClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureClientRaw({ awsMountPath: awsMountPath, awsConfigureClientRequest: awsConfigureClientRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureIdentityAccessListTidyOperationRaw(requestParameters: AuthApiAwsConfigureIdentityAccessListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityAccessListTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureIdentityAccessListTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityAccessListTidyOperationRequest',
                'Required parameter "awsConfigureIdentityAccessListTidyOperationRequest" was null or undefined when calling awsConfigureIdentityAccessListTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityAccessListTidyOperationRequestToJSON(requestParameters['awsConfigureIdentityAccessListTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityAccessListTidyOperation(awsMountPath: string, awsConfigureIdentityAccessListTidyOperationRequest: AwsConfigureIdentityAccessListTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureIdentityAccessListTidyOperationRaw({ awsMountPath: awsMountPath, awsConfigureIdentityAccessListTidyOperationRequest: awsConfigureIdentityAccessListTidyOperationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureIdentityIntegrationRaw(requestParameters: AuthApiAwsConfigureIdentityIntegrationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityIntegration().'
            );
        }

        if (requestParameters['awsConfigureIdentityIntegrationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityIntegrationRequest',
                'Required parameter "awsConfigureIdentityIntegrationRequest" was null or undefined when calling awsConfigureIdentityIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/identity`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityIntegrationRequestToJSON(requestParameters['awsConfigureIdentityIntegrationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityIntegration(awsMountPath: string, awsConfigureIdentityIntegrationRequest: AwsConfigureIdentityIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureIdentityIntegrationRaw({ awsMountPath: awsMountPath, awsConfigureIdentityIntegrationRequest: awsConfigureIdentityIntegrationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureIdentityWhitelistTidyOperationRaw(requestParameters: AuthApiAwsConfigureIdentityWhitelistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureIdentityWhitelistTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureIdentityWhitelistTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureIdentityWhitelistTidyOperationRequest',
                'Required parameter "awsConfigureIdentityWhitelistTidyOperationRequest" was null or undefined when calling awsConfigureIdentityWhitelistTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureIdentityWhitelistTidyOperationRequestToJSON(requestParameters['awsConfigureIdentityWhitelistTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureIdentityWhitelistTidyOperation(awsMountPath: string, awsConfigureIdentityWhitelistTidyOperationRequest: AwsConfigureIdentityWhitelistTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureIdentityWhitelistTidyOperationRaw({ awsMountPath: awsMountPath, awsConfigureIdentityWhitelistTidyOperationRequest: awsConfigureIdentityWhitelistTidyOperationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureRoleTagBlacklistTidyOperationRaw(requestParameters: AuthApiAwsConfigureRoleTagBlacklistTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRoleTagBlacklistTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureRoleTagBlacklistTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRoleTagBlacklistTidyOperationRequest',
                'Required parameter "awsConfigureRoleTagBlacklistTidyOperationRequest" was null or undefined when calling awsConfigureRoleTagBlacklistTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRoleTagBlacklistTidyOperationRequestToJSON(requestParameters['awsConfigureRoleTagBlacklistTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRoleTagBlacklistTidyOperation(awsMountPath: string, awsConfigureRoleTagBlacklistTidyOperationRequest: AwsConfigureRoleTagBlacklistTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureRoleTagBlacklistTidyOperationRaw({ awsMountPath: awsMountPath, awsConfigureRoleTagBlacklistTidyOperationRequest: awsConfigureRoleTagBlacklistTidyOperationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureRoleTagDenyListTidyOperationRaw(requestParameters: AuthApiAwsConfigureRoleTagDenyListTidyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsConfigureRoleTagDenyListTidyOperation().'
            );
        }

        if (requestParameters['awsConfigureRoleTagDenyListTidyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'awsConfigureRoleTagDenyListTidyOperationRequest',
                'Required parameter "awsConfigureRoleTagDenyListTidyOperationRequest" was null or undefined when calling awsConfigureRoleTagDenyListTidyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRoleTagDenyListTidyOperationRequestToJSON(requestParameters['awsConfigureRoleTagDenyListTidyOperationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRoleTagDenyListTidyOperation(awsMountPath: string, awsConfigureRoleTagDenyListTidyOperationRequest: AwsConfigureRoleTagDenyListTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureRoleTagDenyListTidyOperationRaw({ awsMountPath: awsMountPath, awsConfigureRoleTagDenyListTidyOperationRequest: awsConfigureRoleTagDenyListTidyOperationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteAuthRoleRaw(requestParameters: AuthApiAwsDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsDeleteAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteAuthRole(role: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteAuthRoleRaw({ role: role, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteCertificateConfigurationRaw(requestParameters: AuthApiAwsDeleteCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsDeleteCertificateConfiguration().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteCertificateConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteCertificateConfiguration(certName: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteCertificateConfigurationRaw({ certName: certName, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteClientConfigurationRaw(requestParameters: AuthApiAwsDeleteClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteClientConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteClientConfiguration(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteClientConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteIdentityAccessListRaw(requestParameters: AuthApiAwsDeleteIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsDeleteIdentityAccessList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityAccessList(instanceId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteIdentityAccessListRaw({ instanceId: instanceId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteIdentityAccessListTidySettingsRaw(requestParameters: AuthApiAwsDeleteIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityAccessListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityAccessListTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteIdentityAccessListTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteIdentityWhitelistRaw(requestParameters: AuthApiAwsDeleteIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsDeleteIdentityWhitelist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityWhitelist(instanceId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteIdentityWhitelistRaw({ instanceId: instanceId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteIdentityWhitelistTidySettingsRaw(requestParameters: AuthApiAwsDeleteIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteIdentityWhitelistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteIdentityWhitelistTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteIdentityWhitelistTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteRoleTagBlacklistRaw(requestParameters: AuthApiAwsDeleteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsDeleteRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagBlacklist(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleTagBlacklistRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteRoleTagBlacklistTidySettingsRaw(requestParameters: AuthApiAwsDeleteRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagBlacklistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagBlacklistTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleTagBlacklistTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteRoleTagDenyListRaw(requestParameters: AuthApiAwsDeleteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsDeleteRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagDenyList(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleTagDenyListRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteRoleTagDenyListTidySettingsRaw(requestParameters: AuthApiAwsDeleteRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteRoleTagDenyListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteRoleTagDenyListTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleTagDenyListTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteStsRoleRaw(requestParameters: AuthApiAwsDeleteStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsDeleteStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsDeleteStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteStsRole(accountId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteStsRoleRaw({ accountId: accountId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListAuthRolesRaw(requestParameters: AuthApiAwsListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListAuthRoles(awsMountPath: string, list: AwsListAuthRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListAuthRolesRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListAuthRoles2Raw(requestParameters: AuthApiAwsListAuthRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListAuthRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListAuthRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListAuthRoles2(awsMountPath: string, list: AwsListAuthRoles2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListAuthRoles2Raw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListCertificateConfigurationsRaw(requestParameters: AuthApiAwsListCertificateConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListCertificateConfigurations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListCertificateConfigurations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificates/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListCertificateConfigurations(awsMountPath: string, list: AwsListCertificateConfigurationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListCertificateConfigurationsRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListIdentityAccessListRaw(requestParameters: AuthApiAwsListIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListIdentityAccessList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListIdentityAccessList(awsMountPath: string, list: AwsListIdentityAccessListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListIdentityAccessListRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListIdentityWhitelistRaw(requestParameters: AuthApiAwsListIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListIdentityWhitelist().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListIdentityWhitelist(awsMountPath: string, list: AwsListIdentityWhitelistListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListIdentityWhitelistRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListRoleTagBlacklistsRaw(requestParameters: AuthApiAwsListRoleTagBlacklistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoleTagBlacklists().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoleTagBlacklists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListRoleTagBlacklists(awsMountPath: string, list: AwsListRoleTagBlacklistsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRoleTagBlacklistsRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListRoleTagDenyListsRaw(requestParameters: AuthApiAwsListRoleTagDenyListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListRoleTagDenyLists().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoleTagDenyLists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListRoleTagDenyLists(awsMountPath: string, list: AwsListRoleTagDenyListsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRoleTagDenyListsRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListStsRoleRelationshipsRaw(requestParameters: AuthApiAwsListStsRoleRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsListStsRoleRelationships().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListStsRoleRelationships().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListStsRoleRelationships(awsMountPath: string, list: AwsListStsRoleRelationshipsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListStsRoleRelationshipsRaw({ awsMountPath: awsMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsLoginRaw(requestParameters: AuthApiAwsLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsLogin().'
            );
        }

        if (requestParameters['awsLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'awsLoginRequest',
                'Required parameter "awsLoginRequest" was null or undefined when calling awsLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/login`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsLoginRequestToJSON(requestParameters['awsLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsLogin(awsMountPath: string, awsLoginRequest: AwsLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsLoginRaw({ awsMountPath: awsMountPath, awsLoginRequest: awsLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadAuthRoleRaw(requestParameters: AuthApiAwsReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsReadAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadAuthRole(role: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadAuthRoleRaw({ role: role, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadCertificateConfigurationRaw(requestParameters: AuthApiAwsReadCertificateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certName'] == null) {
            throw new runtime.RequiredError(
                'certName',
                'Required parameter "certName" was null or undefined when calling awsReadCertificateConfiguration().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadCertificateConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/certificate/{cert_name}`.replace(`{${"cert_name"}}`, encodeURIComponent(String(requestParameters['certName']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadCertificateConfiguration(certName: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadCertificateConfigurationRaw({ certName: certName, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadClientConfigurationRaw(requestParameters: AuthApiAwsReadClientConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadClientConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/client`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadClientConfiguration(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadClientConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadIdentityAccessListRaw(requestParameters: AuthApiAwsReadIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsReadIdentityAccessList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-accesslist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityAccessList(instanceId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadIdentityAccessListRaw({ instanceId: instanceId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadIdentityAccessListTidySettingsRaw(requestParameters: AuthApiAwsReadIdentityAccessListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityAccessListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityAccessListTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadIdentityAccessListTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadIdentityIntegrationConfigurationRaw(requestParameters: AuthApiAwsReadIdentityIntegrationConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityIntegrationConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/identity`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityIntegrationConfiguration(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadIdentityIntegrationConfigurationRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadIdentityWhitelistRaw(requestParameters: AuthApiAwsReadIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['instanceId'] == null) {
            throw new runtime.RequiredError(
                'instanceId',
                'Required parameter "instanceId" was null or undefined when calling awsReadIdentityWhitelist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/identity-whitelist/{instance_id}`.replace(`{${"instance_id"}}`, encodeURIComponent(String(requestParameters['instanceId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityWhitelist(instanceId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadIdentityWhitelistRaw({ instanceId: instanceId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadIdentityWhitelistTidySettingsRaw(requestParameters: AuthApiAwsReadIdentityWhitelistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadIdentityWhitelistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadIdentityWhitelistTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadIdentityWhitelistTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRoleTagBlacklistRaw(requestParameters: AuthApiAwsReadRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsReadRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagBlacklist(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleTagBlacklistRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRoleTagBlacklistTidySettingsRaw(requestParameters: AuthApiAwsReadRoleTagBlacklistTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagBlacklistTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagBlacklistTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleTagBlacklistTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRoleTagDenyListRaw(requestParameters: AuthApiAwsReadRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsReadRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagDenyList(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleTagDenyListRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRoleTagDenyListTidySettingsRaw(requestParameters: AuthApiAwsReadRoleTagDenyListTidySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadRoleTagDenyListTidySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRoleTagDenyListTidySettings(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleTagDenyListTidySettingsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStsRoleRaw(requestParameters: AuthApiAwsReadStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsReadStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsReadStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadStsRole(accountId: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadStsRoleRaw({ accountId: accountId, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsRotateRootCredentialsRaw(requestParameters: AuthApiAwsRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsRotateRootCredentials(awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsRotateRootCredentialsRaw({ awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsTidyIdentityAccessListRaw(requestParameters: AuthApiAwsTidyIdentityAccessListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyIdentityAccessList().'
            );
        }

        if (requestParameters['awsTidyIdentityAccessListRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyIdentityAccessListRequest',
                'Required parameter "awsTidyIdentityAccessListRequest" was null or undefined when calling awsTidyIdentityAccessList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/identity-accesslist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyIdentityAccessListRequestToJSON(requestParameters['awsTidyIdentityAccessListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyIdentityAccessList(awsMountPath: string, awsTidyIdentityAccessListRequest: AwsTidyIdentityAccessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsTidyIdentityAccessListRaw({ awsMountPath: awsMountPath, awsTidyIdentityAccessListRequest: awsTidyIdentityAccessListRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsTidyIdentityWhitelistRaw(requestParameters: AuthApiAwsTidyIdentityWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyIdentityWhitelist().'
            );
        }

        if (requestParameters['awsTidyIdentityWhitelistRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyIdentityWhitelistRequest',
                'Required parameter "awsTidyIdentityWhitelistRequest" was null or undefined when calling awsTidyIdentityWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/identity-whitelist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyIdentityWhitelistRequestToJSON(requestParameters['awsTidyIdentityWhitelistRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyIdentityWhitelist(awsMountPath: string, awsTidyIdentityWhitelistRequest: AwsTidyIdentityWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsTidyIdentityWhitelistRaw({ awsMountPath: awsMountPath, awsTidyIdentityWhitelistRequest: awsTidyIdentityWhitelistRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsTidyRoleTagBlacklistRaw(requestParameters: AuthApiAwsTidyRoleTagBlacklistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsTidyRoleTagBlacklistRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyRoleTagBlacklistRequest',
                'Required parameter "awsTidyRoleTagBlacklistRequest" was null or undefined when calling awsTidyRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/roletag-blacklist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyRoleTagBlacklistRequestToJSON(requestParameters['awsTidyRoleTagBlacklistRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyRoleTagBlacklist(awsMountPath: string, awsTidyRoleTagBlacklistRequest: AwsTidyRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsTidyRoleTagBlacklistRaw({ awsMountPath: awsMountPath, awsTidyRoleTagBlacklistRequest: awsTidyRoleTagBlacklistRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsTidyRoleTagDenyListRaw(requestParameters: AuthApiAwsTidyRoleTagDenyListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsTidyRoleTagDenyList().'
            );
        }

        if (requestParameters['awsTidyRoleTagDenyListRequest'] == null) {
            throw new runtime.RequiredError(
                'awsTidyRoleTagDenyListRequest',
                'Required parameter "awsTidyRoleTagDenyListRequest" was null or undefined when calling awsTidyRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/tidy/roletag-denylist`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsTidyRoleTagDenyListRequestToJSON(requestParameters['awsTidyRoleTagDenyListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsTidyRoleTagDenyList(awsMountPath: string, awsTidyRoleTagDenyListRequest: AwsTidyRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsTidyRoleTagDenyListRaw({ awsMountPath: awsMountPath, awsTidyRoleTagDenyListRequest: awsTidyRoleTagDenyListRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteAuthRoleRaw(requestParameters: AuthApiAwsWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        if (requestParameters['awsWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteAuthRoleRequest',
                'Required parameter "awsWriteAuthRoleRequest" was null or undefined when calling awsWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteAuthRoleRequestToJSON(requestParameters['awsWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteAuthRole(role: string, awsMountPath: string, awsWriteAuthRoleRequest: AwsWriteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteAuthRoleRaw({ role: role, awsMountPath: awsMountPath, awsWriteAuthRoleRequest: awsWriteAuthRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteRoleTagRaw(requestParameters: AuthApiAwsWriteRoleTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        if (requestParameters['awsWriteRoleTagRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteRoleTagRequest',
                'Required parameter "awsWriteRoleTagRequest" was null or undefined when calling awsWriteRoleTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/role/{role}/tag`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteRoleTagRequestToJSON(requestParameters['awsWriteRoleTagRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTag(role: string, awsMountPath: string, awsWriteRoleTagRequest: AwsWriteRoleTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteRoleTagRaw({ role: role, awsMountPath: awsMountPath, awsWriteRoleTagRequest: awsWriteRoleTagRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteRoleTagBlacklistRaw(requestParameters: AuthApiAwsWriteRoleTagBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsWriteRoleTagBlacklist().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTagBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-blacklist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTagBlacklist(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteRoleTagBlacklistRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteRoleTagDenyListRaw(requestParameters: AuthApiAwsWriteRoleTagDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleTag'] == null) {
            throw new runtime.RequiredError(
                'roleTag',
                'Required parameter "roleTag" was null or undefined when calling awsWriteRoleTagDenyList().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteRoleTagDenyList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{aws_mount_path}/roletag-denylist/{role_tag}`.replace(`{${"role_tag"}}`, encodeURIComponent(String(requestParameters['roleTag']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteRoleTagDenyList(roleTag: string, awsMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteRoleTagDenyListRaw({ roleTag: roleTag, awsMountPath: awsMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteStsRoleRaw(requestParameters: AuthApiAwsWriteStsRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling awsWriteStsRole().'
            );
        }

        if (requestParameters['awsMountPath'] == null) {
            throw new runtime.RequiredError(
                'awsMountPath',
                'Required parameter "awsMountPath" was null or undefined when calling awsWriteStsRole().'
            );
        }

        if (requestParameters['awsWriteStsRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'awsWriteStsRoleRequest',
                'Required parameter "awsWriteStsRoleRequest" was null or undefined when calling awsWriteStsRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{aws_mount_path}/config/sts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['awsMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteStsRoleRequestToJSON(requestParameters['awsWriteStsRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsWriteStsRole(accountId: string, awsMountPath: string, awsWriteStsRoleRequest: AwsWriteStsRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteStsRoleRaw({ accountId: accountId, awsMountPath: awsMountPath, awsWriteStsRoleRequest: awsWriteStsRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureConfigureAuthRaw(requestParameters: AuthApiAzureConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureConfigureAuth().'
            );
        }

        if (requestParameters['azureConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'azureConfigureAuthRequest',
                'Required parameter "azureConfigureAuthRequest" was null or undefined when calling azureConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureConfigureAuthRequestToJSON(requestParameters['azureConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureConfigureAuth(azureMountPath: string, azureConfigureAuthRequest: AzureConfigureAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureConfigureAuthRaw({ azureMountPath: azureMountPath, azureConfigureAuthRequest: azureConfigureAuthRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureDeleteAuthConfigurationRaw(requestParameters: AuthApiAzureDeleteAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteAuthConfiguration(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteAuthConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureDeleteAuthRoleRaw(requestParameters: AuthApiAzureDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureDeleteAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteAuthRole(name: string, azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteAuthRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureListAuthRolesRaw(requestParameters: AuthApiAzureListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling azureListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async azureListAuthRoles(azureMountPath: string, list: AzureListAuthRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.azureListAuthRolesRaw({ azureMountPath: azureMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureLoginRaw(requestParameters: AuthApiAzureLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureLogin().'
            );
        }

        if (requestParameters['azureLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'azureLoginRequest',
                'Required parameter "azureLoginRequest" was null or undefined when calling azureLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/login`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureLoginRequestToJSON(requestParameters['azureLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureLogin(azureMountPath: string, azureLoginRequest: AzureLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureLoginRaw({ azureMountPath: azureMountPath, azureLoginRequest: azureLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureReadAuthConfigurationRaw(requestParameters: AuthApiAzureReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadAuthConfiguration(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadAuthConfigurationRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureReadAuthRoleRaw(requestParameters: AuthApiAzureReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureReadAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadAuthRole(name: string, azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadAuthRoleRaw({ name: name, azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureRotateRootCredentialsRaw(requestParameters: AuthApiAzureRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRotateRootCredentials(azureMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureRotateRootCredentialsRaw({ azureMountPath: azureMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureWriteAuthRoleRaw(requestParameters: AuthApiAzureWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        if (requestParameters['azureMountPath'] == null) {
            throw new runtime.RequiredError(
                'azureMountPath',
                'Required parameter "azureMountPath" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        if (requestParameters['azureWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'azureWriteAuthRoleRequest',
                'Required parameter "azureWriteAuthRoleRequest" was null or undefined when calling azureWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{azure_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azureMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureWriteAuthRoleRequestToJSON(requestParameters['azureWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureWriteAuthRole(name: string, azureMountPath: string, azureWriteAuthRoleRequest: AzureWriteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureWriteAuthRoleRaw({ name: name, azureMountPath: azureMountPath, azureWriteAuthRoleRequest: azureWriteAuthRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async certConfigureRaw(requestParameters: AuthApiCertConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certConfigure().'
            );
        }

        if (requestParameters['certConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'certConfigureRequest',
                'Required parameter "certConfigureRequest" was null or undefined when calling certConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/config`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertConfigureRequestToJSON(requestParameters['certConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certConfigure(certMountPath: string, certConfigureRequest: CertConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certConfigureRaw({ certMountPath: certMountPath, certConfigureRequest: certConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certDeleteCertificateRaw(requestParameters: AuthApiCertDeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certDeleteCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certDeleteCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certDeleteCertificate(name: string, certMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certDeleteCertificateRaw({ name: name, certMountPath: certMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certDeleteCrlRaw(requestParameters: AuthApiCertDeleteCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certDeleteCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certDeleteCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certDeleteCrl(name: string, certMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certDeleteCrlRaw({ name: name, certMountPath: certMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certListCertificatesRaw(requestParameters: AuthApiCertListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certListCertificates().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling certListCertificates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certListCertificates(certMountPath: string, list: CertListCertificatesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.certListCertificatesRaw({ certMountPath: certMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async certListCrlsRaw(requestParameters: AuthApiCertListCrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certListCrls().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling certListCrls().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async certListCrls(certMountPath: string, list: CertListCrlsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.certListCrlsRaw({ certMountPath: certMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async certLoginRaw(requestParameters: AuthApiCertLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certLogin().'
            );
        }

        if (requestParameters['certLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'certLoginRequest',
                'Required parameter "certLoginRequest" was null or undefined when calling certLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/login`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertLoginRequestToJSON(requestParameters['certLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certLogin(certMountPath: string, certLoginRequest: CertLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certLoginRaw({ certMountPath: certMountPath, certLoginRequest: certLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certReadCertificateRaw(requestParameters: AuthApiCertReadCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certReadCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certReadCertificate(name: string, certMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certReadCertificateRaw({ name: name, certMountPath: certMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async certReadConfigurationRaw(requestParameters: AuthApiCertReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/config`.replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certReadConfiguration(certMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certReadConfigurationRaw({ certMountPath: certMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certReadCrlRaw(requestParameters: AuthApiCertReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certReadCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certReadCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certReadCrl(name: string, certMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certReadCrlRaw({ name: name, certMountPath: certMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certWriteCertificateRaw(requestParameters: AuthApiCertWriteCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certWriteCertificate().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certWriteCertificate().'
            );
        }

        if (requestParameters['certWriteCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'certWriteCertificateRequest',
                'Required parameter "certWriteCertificateRequest" was null or undefined when calling certWriteCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/certs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertWriteCertificateRequestToJSON(requestParameters['certWriteCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage trusted certificates used for authentication.
     */
    async certWriteCertificate(name: string, certMountPath: string, certWriteCertificateRequest: CertWriteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certWriteCertificateRaw({ name: name, certMountPath: certMountPath, certWriteCertificateRequest: certWriteCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certWriteCrlRaw(requestParameters: AuthApiCertWriteCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling certWriteCrl().'
            );
        }

        if (requestParameters['certMountPath'] == null) {
            throw new runtime.RequiredError(
                'certMountPath',
                'Required parameter "certMountPath" was null or undefined when calling certWriteCrl().'
            );
        }

        if (requestParameters['certWriteCrlRequest'] == null) {
            throw new runtime.RequiredError(
                'certWriteCrlRequest',
                'Required parameter "certWriteCrlRequest" was null or undefined when calling certWriteCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cert_mount_path}/crls/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"cert_mount_path"}}`, encodeURIComponent(String(requestParameters['certMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertWriteCrlRequestToJSON(requestParameters['certWriteCrlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Certificate Revocation Lists checked during authentication.
     */
    async certWriteCrl(name: string, certMountPath: string, certWriteCrlRequest: CertWriteCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.certWriteCrlRaw({ name: name, certMountPath: certMountPath, certWriteCrlRequest: certWriteCrlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryConfigureRaw(requestParameters: AuthApiCloudFoundryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryConfigure().'
            );
        }

        if (requestParameters['cloudFoundryConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryConfigureRequest',
                'Required parameter "cloudFoundryConfigureRequest" was null or undefined when calling cloudFoundryConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryConfigureRequestToJSON(requestParameters['cloudFoundryConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryConfigure(cfMountPath: string, cloudFoundryConfigureRequest: CloudFoundryConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryConfigureRaw({ cfMountPath: cfMountPath, cloudFoundryConfigureRequest: cloudFoundryConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryDeleteConfigurationRaw(requestParameters: AuthApiCloudFoundryDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryDeleteConfiguration(cfMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryDeleteConfigurationRaw({ cfMountPath: cfMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryDeleteRoleRaw(requestParameters: AuthApiCloudFoundryDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryDeleteRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryDeleteRole(role: string, cfMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryDeleteRoleRaw({ role: role, cfMountPath: cfMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryListRolesRaw(requestParameters: AuthApiCloudFoundryListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling cloudFoundryListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async cloudFoundryListRoles(cfMountPath: string, list: CloudFoundryListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.cloudFoundryListRolesRaw({ cfMountPath: cfMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryLoginRaw(requestParameters: AuthApiCloudFoundryLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryLogin().'
            );
        }

        if (requestParameters['cloudFoundryLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryLoginRequest',
                'Required parameter "cloudFoundryLoginRequest" was null or undefined when calling cloudFoundryLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/login`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryLoginRequestToJSON(requestParameters['cloudFoundryLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryLogin(cfMountPath: string, cloudFoundryLoginRequest: CloudFoundryLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryLoginRaw({ cfMountPath: cfMountPath, cloudFoundryLoginRequest: cloudFoundryLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryReadConfigurationRaw(requestParameters: AuthApiCloudFoundryReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/config`.replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryReadConfiguration(cfMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryReadConfigurationRaw({ cfMountPath: cfMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryReadRoleRaw(requestParameters: AuthApiCloudFoundryReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryReadRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryReadRole(role: string, cfMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryReadRoleRaw({ role: role, cfMountPath: cfMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async cloudFoundryWriteRoleRaw(requestParameters: AuthApiCloudFoundryWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        if (requestParameters['cfMountPath'] == null) {
            throw new runtime.RequiredError(
                'cfMountPath',
                'Required parameter "cfMountPath" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        if (requestParameters['cloudFoundryWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'cloudFoundryWriteRoleRequest',
                'Required parameter "cloudFoundryWriteRoleRequest" was null or undefined when calling cloudFoundryWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{cf_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"cf_mount_path"}}`, encodeURIComponent(String(requestParameters['cfMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudFoundryWriteRoleRequestToJSON(requestParameters['cloudFoundryWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cloudFoundryWriteRole(role: string, cfMountPath: string, cloudFoundryWriteRoleRequest: CloudFoundryWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cloudFoundryWriteRoleRaw({ role: role, cfMountPath: cfMountPath, cloudFoundryWriteRoleRequest: cloudFoundryWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async githubConfigureRaw(requestParameters: AuthApiGithubConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubConfigure().'
            );
        }

        if (requestParameters['githubConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'githubConfigureRequest',
                'Required parameter "githubConfigureRequest" was null or undefined when calling githubConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/config`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubConfigureRequestToJSON(requestParameters['githubConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubConfigure(githubMountPath: string, githubConfigureRequest: GithubConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubConfigureRaw({ githubMountPath: githubMountPath, githubConfigureRequest: githubConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubDeleteTeamMappingRaw(requestParameters: AuthApiGithubDeleteTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubDeleteTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubDeleteTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubDeleteTeamMapping(key: string, githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubDeleteTeamMappingRaw({ key: key, githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubDeleteUserMappingRaw(requestParameters: AuthApiGithubDeleteUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubDeleteUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubDeleteUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubDeleteUserMapping(key: string, githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubDeleteUserMappingRaw({ key: key, githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for teams
     */
    async githubListTeamsRaw(requestParameters: AuthApiGithubListTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListTeams().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling githubListTeams().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams(githubMountPath: string, list: GithubListTeamsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.githubListTeamsRaw({ githubMountPath: githubMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams2Raw(requestParameters: AuthApiGithubListTeams2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListTeams2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read mappings for teams
     */
    async githubListTeams2(githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubListTeams2Raw({ githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for users
     */
    async githubListUsersRaw(requestParameters: AuthApiGithubListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling githubListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Read mappings for users
     */
    async githubListUsers(githubMountPath: string, list: GithubListUsersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.githubListUsersRaw({ githubMountPath: githubMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read mappings for users
     */
    async githubListUsers2Raw(requestParameters: AuthApiGithubListUsers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubListUsers2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read mappings for users
     */
    async githubListUsers2(githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubListUsers2Raw({ githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async githubLoginRaw(requestParameters: AuthApiGithubLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubLogin().'
            );
        }

        if (requestParameters['githubLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'githubLoginRequest',
                'Required parameter "githubLoginRequest" was null or undefined when calling githubLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/login`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubLoginRequestToJSON(requestParameters['githubLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubLogin(githubMountPath: string, githubLoginRequest: GithubLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubLoginRaw({ githubMountPath: githubMountPath, githubLoginRequest: githubLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async githubReadConfigurationRaw(requestParameters: AuthApiGithubReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/config`.replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubReadConfiguration(githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubReadConfigurationRaw({ githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubReadTeamMappingRaw(requestParameters: AuthApiGithubReadTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubReadTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubReadTeamMapping(key: string, githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubReadTeamMappingRaw({ key: key, githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubReadUserMappingRaw(requestParameters: AuthApiGithubReadUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubReadUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubReadUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubReadUserMapping(key: string, githubMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubReadUserMappingRaw({ key: key, githubMountPath: githubMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubWriteTeamMappingRaw(requestParameters: AuthApiGithubWriteTeamMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        if (requestParameters['githubWriteTeamMappingRequest'] == null) {
            throw new runtime.RequiredError(
                'githubWriteTeamMappingRequest',
                'Required parameter "githubWriteTeamMappingRequest" was null or undefined when calling githubWriteTeamMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/teams/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubWriteTeamMappingRequestToJSON(requestParameters['githubWriteTeamMappingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single teams mapping
     */
    async githubWriteTeamMapping(key: string, githubMountPath: string, githubWriteTeamMappingRequest: GithubWriteTeamMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubWriteTeamMappingRaw({ key: key, githubMountPath: githubMountPath, githubWriteTeamMappingRequest: githubWriteTeamMappingRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubWriteUserMappingRaw(requestParameters: AuthApiGithubWriteUserMappingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        if (requestParameters['githubMountPath'] == null) {
            throw new runtime.RequiredError(
                'githubMountPath',
                'Required parameter "githubMountPath" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        if (requestParameters['githubWriteUserMappingRequest'] == null) {
            throw new runtime.RequiredError(
                'githubWriteUserMappingRequest',
                'Required parameter "githubWriteUserMappingRequest" was null or undefined when calling githubWriteUserMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{github_mount_path}/map/users/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"github_mount_path"}}`, encodeURIComponent(String(requestParameters['githubMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubWriteUserMappingRequestToJSON(requestParameters['githubWriteUserMappingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read/write/delete a single users mapping
     */
    async githubWriteUserMapping(key: string, githubMountPath: string, githubWriteUserMappingRequest: GithubWriteUserMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.githubWriteUserMappingRaw({ key: key, githubMountPath: githubMountPath, githubWriteUserMappingRequest: githubWriteUserMappingRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudConfigureAuthRaw(requestParameters: AuthApiGoogleCloudConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudConfigureAuth().'
            );
        }

        if (requestParameters['googleCloudConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudConfigureAuthRequest',
                'Required parameter "googleCloudConfigureAuthRequest" was null or undefined when calling googleCloudConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudConfigureAuthRequestToJSON(requestParameters['googleCloudConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudConfigureAuth(gcpMountPath: string, googleCloudConfigureAuthRequest: GoogleCloudConfigureAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudConfigureAuthRaw({ gcpMountPath: gcpMountPath, googleCloudConfigureAuthRequest: googleCloudConfigureAuthRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudDeleteRoleRaw(requestParameters: AuthApiGoogleCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudDeleteRole(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteRoleRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove labels for an existing \'gce\' role
     */
    async googleCloudEditLabelsForRoleRaw(requestParameters: AuthApiGoogleCloudEditLabelsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        if (requestParameters['googleCloudEditLabelsForRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudEditLabelsForRoleRequest',
                'Required parameter "googleCloudEditLabelsForRoleRequest" was null or undefined when calling googleCloudEditLabelsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}/labels`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudEditLabelsForRoleRequestToJSON(requestParameters['googleCloudEditLabelsForRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove labels for an existing \'gce\' role
     */
    async googleCloudEditLabelsForRole(name: string, gcpMountPath: string, googleCloudEditLabelsForRoleRequest: GoogleCloudEditLabelsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudEditLabelsForRoleRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudEditLabelsForRoleRequest: googleCloudEditLabelsForRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Add or remove service accounts for an existing `iam` role
     */
    async googleCloudEditServiceAccountsForRoleRaw(requestParameters: AuthApiGoogleCloudEditServiceAccountsForRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        if (requestParameters['googleCloudEditServiceAccountsForRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudEditServiceAccountsForRoleRequest',
                'Required parameter "googleCloudEditServiceAccountsForRoleRequest" was null or undefined when calling googleCloudEditServiceAccountsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}/service-accounts`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudEditServiceAccountsForRoleRequestToJSON(requestParameters['googleCloudEditServiceAccountsForRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or remove service accounts for an existing `iam` role
     */
    async googleCloudEditServiceAccountsForRole(name: string, gcpMountPath: string, googleCloudEditServiceAccountsForRoleRequest: GoogleCloudEditServiceAccountsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudEditServiceAccountsForRoleRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudEditServiceAccountsForRoleRequest: googleCloudEditServiceAccountsForRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRolesRaw(requestParameters: AuthApiGoogleCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles(gcpMountPath: string, list: GoogleCloudListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesRaw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles2Raw(requestParameters: AuthApiGoogleCloudListRoles2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudListRoles2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRoles2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/roles/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async googleCloudListRoles2(gcpMountPath: string, list: GoogleCloudListRoles2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRoles2Raw({ gcpMountPath: gcpMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudLoginRaw(requestParameters: AuthApiGoogleCloudLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudLogin().'
            );
        }

        if (requestParameters['googleCloudLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudLoginRequest',
                'Required parameter "googleCloudLoginRequest" was null or undefined when calling googleCloudLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/login`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudLoginRequestToJSON(requestParameters['googleCloudLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudLogin(gcpMountPath: string, googleCloudLoginRequest: GoogleCloudLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudLoginRaw({ gcpMountPath: gcpMountPath, googleCloudLoginRequest: googleCloudLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadAuthConfigurationRaw(requestParameters: AuthApiGoogleCloudReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadAuthConfiguration(gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadAuthConfigurationRaw({ gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudReadRoleRaw(requestParameters: AuthApiGoogleCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudReadRole(name: string, gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadRoleRaw({ name: name, gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRootCredentialsRaw(requestParameters: AuthApiGoogleCloudRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/config/rotate-root`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRootCredentials(gcpMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRootCredentialsRaw({ gcpMountPath: gcpMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudWriteRoleRaw(requestParameters: AuthApiGoogleCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        if (requestParameters['gcpMountPath'] == null) {
            throw new runtime.RequiredError(
                'gcpMountPath',
                'Required parameter "gcpMountPath" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        if (requestParameters['googleCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'googleCloudWriteRoleRequest',
                'Required parameter "googleCloudWriteRoleRequest" was null or undefined when calling googleCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{gcp_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteRoleRequestToJSON(requestParameters['googleCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a GCP role with associated policies and required attributes.
     */
    async googleCloudWriteRole(name: string, gcpMountPath: string, googleCloudWriteRoleRequest: GoogleCloudWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteRoleRaw({ name: name, gcpMountPath: gcpMountPath, googleCloudWriteRoleRequest: googleCloudWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
     * Configure the JWT authentication backend.
     */
    async jwtConfigureRaw(requestParameters: AuthApiJwtConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtConfigure().'
            );
        }

        if (requestParameters['jwtConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtConfigureRequest',
                'Required parameter "jwtConfigureRequest" was null or undefined when calling jwtConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/config`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtConfigureRequestToJSON(requestParameters['jwtConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
     * Configure the JWT authentication backend.
     */
    async jwtConfigure(jwtMountPath: string, jwtConfigureRequest: JwtConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtConfigureRaw({ jwtMountPath: jwtMountPath, jwtConfigureRequest: jwtConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing role.
     */
    async jwtDeleteRoleRaw(requestParameters: AuthApiJwtDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtDeleteRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing role.
     */
    async jwtDeleteRole(name: string, jwtMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtDeleteRoleRaw({ name: name, jwtMountPath: jwtMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * The list will contain the names of the roles.
     * Lists all the roles registered with the backend.
     */
    async jwtListRolesRaw(requestParameters: AuthApiJwtListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling jwtListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * The list will contain the names of the roles.
     * Lists all the roles registered with the backend.
     */
    async jwtListRoles(jwtMountPath: string, list: JwtListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.jwtListRolesRaw({ jwtMountPath: jwtMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates to Vault using a JWT (or OIDC) token.
     */
    async jwtLoginRaw(requestParameters: AuthApiJwtLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtLogin().'
            );
        }

        if (requestParameters['jwtLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtLoginRequest',
                'Required parameter "jwtLoginRequest" was null or undefined when calling jwtLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/login`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtLoginRequestToJSON(requestParameters['jwtLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates to Vault using a JWT (or OIDC) token.
     */
    async jwtLogin(jwtMountPath: string, jwtLoginRequest: JwtLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtLoginRaw({ jwtMountPath: jwtMountPath, jwtLoginRequest: jwtLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Callback endpoint to complete an OIDC login.
     */
    async jwtOidcCallbackRaw(requestParameters: AuthApiJwtOidcCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientNonce'] != null) {
            queryParameters['client_nonce'] = requestParameters['clientNonce'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/callback`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Callback endpoint to complete an OIDC login.
     */
    async jwtOidcCallback(jwtMountPath: string, clientNonce?: string, code?: string, state?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtOidcCallbackRaw({ jwtMountPath: jwtMountPath, clientNonce: clientNonce, code: code, state: state }, initOverrides);
        return await response.value();
    }

    /**
     * Callback endpoint to handle form_posts.
     */
    async jwtOidcCallbackFormPostRaw(requestParameters: AuthApiJwtOidcCallbackFormPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcCallbackFormPost().'
            );
        }

        if (requestParameters['jwtOidcCallbackFormPostRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtOidcCallbackFormPostRequest',
                'Required parameter "jwtOidcCallbackFormPostRequest" was null or undefined when calling jwtOidcCallbackFormPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/callback`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtOidcCallbackFormPostRequestToJSON(requestParameters['jwtOidcCallbackFormPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Callback endpoint to handle form_posts.
     */
    async jwtOidcCallbackFormPost(jwtMountPath: string, jwtOidcCallbackFormPostRequest: JwtOidcCallbackFormPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtOidcCallbackFormPostRaw({ jwtMountPath: jwtMountPath, jwtOidcCallbackFormPostRequest: jwtOidcCallbackFormPostRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Request an authorization URL to start an OIDC login flow.
     */
    async jwtOidcRequestAuthorizationUrlRaw(requestParameters: AuthApiJwtOidcRequestAuthorizationUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtOidcRequestAuthorizationUrl().'
            );
        }

        if (requestParameters['jwtOidcRequestAuthorizationUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtOidcRequestAuthorizationUrlRequest',
                'Required parameter "jwtOidcRequestAuthorizationUrlRequest" was null or undefined when calling jwtOidcRequestAuthorizationUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/oidc/auth_url`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtOidcRequestAuthorizationUrlRequestToJSON(requestParameters['jwtOidcRequestAuthorizationUrlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request an authorization URL to start an OIDC login flow.
     */
    async jwtOidcRequestAuthorizationUrl(jwtMountPath: string, jwtOidcRequestAuthorizationUrlRequest: JwtOidcRequestAuthorizationUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtOidcRequestAuthorizationUrlRaw({ jwtMountPath: jwtMountPath, jwtOidcRequestAuthorizationUrlRequest: jwtOidcRequestAuthorizationUrlRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current JWT authentication backend configuration.
     */
    async jwtReadConfigurationRaw(requestParameters: AuthApiJwtReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/config`.replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current JWT authentication backend configuration.
     */
    async jwtReadConfiguration(jwtMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtReadConfigurationRaw({ jwtMountPath: jwtMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Read an existing role.
     */
    async jwtReadRoleRaw(requestParameters: AuthApiJwtReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtReadRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read an existing role.
     */
    async jwtReadRole(name: string, jwtMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtReadRoleRaw({ name: name, jwtMountPath: jwtMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
     * Register an role with the backend.
     */
    async jwtWriteRoleRaw(requestParameters: AuthApiJwtWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling jwtWriteRole().'
            );
        }

        if (requestParameters['jwtMountPath'] == null) {
            throw new runtime.RequiredError(
                'jwtMountPath',
                'Required parameter "jwtMountPath" was null or undefined when calling jwtWriteRole().'
            );
        }

        if (requestParameters['jwtWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'jwtWriteRoleRequest',
                'Required parameter "jwtWriteRoleRequest" was null or undefined when calling jwtWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{jwt_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"jwt_mount_path"}}`, encodeURIComponent(String(requestParameters['jwtMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtWriteRoleRequestToJSON(requestParameters['jwtWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
     * Register an role with the backend.
     */
    async jwtWriteRole(name: string, jwtMountPath: string, jwtWriteRoleRequest: JwtWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.jwtWriteRoleRaw({ name: name, jwtMountPath: jwtMountPath, jwtWriteRoleRequest: jwtWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosConfigureRaw(requestParameters: AuthApiKerberosConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosConfigure().'
            );
        }

        if (requestParameters['kerberosConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosConfigureRequest',
                'Required parameter "kerberosConfigureRequest" was null or undefined when calling kerberosConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosConfigureRequestToJSON(requestParameters['kerberosConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosConfigure(kerberosMountPath: string, kerberosConfigureRequest: KerberosConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosConfigureRaw({ kerberosMountPath: kerberosMountPath, kerberosConfigureRequest: kerberosConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosConfigureLdapRaw(requestParameters: AuthApiKerberosConfigureLdapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosConfigureLdap().'
            );
        }

        if (requestParameters['kerberosConfigureLdapRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosConfigureLdapRequest',
                'Required parameter "kerberosConfigureLdapRequest" was null or undefined when calling kerberosConfigureLdap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config/ldap`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosConfigureLdapRequestToJSON(requestParameters['kerberosConfigureLdapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosConfigureLdap(kerberosMountPath: string, kerberosConfigureLdapRequest: KerberosConfigureLdapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosConfigureLdapRaw({ kerberosMountPath: kerberosMountPath, kerberosConfigureLdapRequest: kerberosConfigureLdapRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosDeleteGroupRaw(requestParameters: AuthApiKerberosDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosDeleteGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosDeleteGroup(name: string, kerberosMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosDeleteGroupRaw({ name: name, kerberosMountPath: kerberosMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosListGroupsRaw(requestParameters: AuthApiKerberosListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kerberosListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kerberosListGroups(kerberosMountPath: string, list: KerberosListGroupsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kerberosListGroupsRaw({ kerberosMountPath: kerberosMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosLoginRaw(requestParameters: AuthApiKerberosLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosLogin().'
            );
        }

        if (requestParameters['kerberosLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosLoginRequest',
                'Required parameter "kerberosLoginRequest" was null or undefined when calling kerberosLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/login`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosLoginRequestToJSON(requestParameters['kerberosLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosLogin(kerberosMountPath: string, kerberosLoginRequest: KerberosLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosLoginRaw({ kerberosMountPath: kerberosMountPath, kerberosLoginRequest: kerberosLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosLogin2Raw(requestParameters: AuthApiKerberosLogin2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosLogin2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/login`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosLogin2(kerberosMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosLogin2Raw({ kerberosMountPath: kerberosMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosReadConfigurationRaw(requestParameters: AuthApiKerberosReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadConfiguration(kerberosMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosReadConfigurationRaw({ kerberosMountPath: kerberosMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosReadGroupRaw(requestParameters: AuthApiKerberosReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosReadGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadGroup(name: string, kerberosMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosReadGroupRaw({ name: name, kerberosMountPath: kerberosMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosReadLdapConfigurationRaw(requestParameters: AuthApiKerberosReadLdapConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosReadLdapConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/config/ldap`.replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosReadLdapConfiguration(kerberosMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosReadLdapConfigurationRaw({ kerberosMountPath: kerberosMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kerberosWriteGroupRaw(requestParameters: AuthApiKerberosWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        if (requestParameters['kerberosMountPath'] == null) {
            throw new runtime.RequiredError(
                'kerberosMountPath',
                'Required parameter "kerberosMountPath" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        if (requestParameters['kerberosWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'kerberosWriteGroupRequest',
                'Required parameter "kerberosWriteGroupRequest" was null or undefined when calling kerberosWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kerberos_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kerberos_mount_path"}}`, encodeURIComponent(String(requestParameters['kerberosMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KerberosWriteGroupRequestToJSON(requestParameters['kerberosWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kerberosWriteGroup(name: string, kerberosMountPath: string, kerberosWriteGroupRequest: KerberosWriteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kerberosWriteGroupRaw({ name: name, kerberosMountPath: kerberosMountPath, kerberosWriteGroupRequest: kerberosWriteGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesConfigureAuthRaw(requestParameters: AuthApiKubernetesConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesConfigureAuth().'
            );
        }

        if (requestParameters['kubernetesConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesConfigureAuthRequest',
                'Required parameter "kubernetesConfigureAuthRequest" was null or undefined when calling kubernetesConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesConfigureAuthRequestToJSON(requestParameters['kubernetesConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesConfigureAuth(kubernetesMountPath: string, kubernetesConfigureAuthRequest: KubernetesConfigureAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesConfigureAuthRaw({ kubernetesMountPath: kubernetesMountPath, kubernetesConfigureAuthRequest: kubernetesConfigureAuthRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesDeleteAuthRoleRaw(requestParameters: AuthApiKubernetesDeleteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesDeleteAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesDeleteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesDeleteAuthRole(name: string, kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesDeleteAuthRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles registered with the backend.
     */
    async kubernetesListAuthRolesRaw(requestParameters: AuthApiKubernetesListAuthRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesListAuthRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kubernetesListAuthRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles registered with the backend.
     */
    async kubernetesListAuthRoles(kubernetesMountPath: string, list: KubernetesListAuthRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kubernetesListAuthRolesRaw({ kubernetesMountPath: kubernetesMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates Kubernetes service accounts with Vault.
     */
    async kubernetesLoginRaw(requestParameters: AuthApiKubernetesLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesLogin().'
            );
        }

        if (requestParameters['kubernetesLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesLoginRequest',
                'Required parameter "kubernetesLoginRequest" was null or undefined when calling kubernetesLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/login`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesLoginRequestToJSON(requestParameters['kubernetesLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates Kubernetes service accounts with Vault.
     */
    async kubernetesLogin(kubernetesMountPath: string, kubernetesLoginRequest: KubernetesLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesLoginRaw({ kubernetesMountPath: kubernetesMountPath, kubernetesLoginRequest: kubernetesLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadAuthConfigurationRaw(requestParameters: AuthApiKubernetesReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadAuthConfiguration(kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadAuthConfigurationRaw({ kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesReadAuthRoleRaw(requestParameters: AuthApiKubernetesReadAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesReadAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesReadAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesReadAuthRole(name: string, kubernetesMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadAuthRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesWriteAuthRoleRaw(requestParameters: AuthApiKubernetesWriteAuthRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        if (requestParameters['kubernetesMountPath'] == null) {
            throw new runtime.RequiredError(
                'kubernetesMountPath',
                'Required parameter "kubernetesMountPath" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        if (requestParameters['kubernetesWriteAuthRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'kubernetesWriteAuthRoleRequest',
                'Required parameter "kubernetesWriteAuthRoleRequest" was null or undefined when calling kubernetesWriteAuthRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{kubernetes_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetesMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesWriteAuthRoleRequestToJSON(requestParameters['kubernetesWriteAuthRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an role with the backend.
     */
    async kubernetesWriteAuthRole(name: string, kubernetesMountPath: string, kubernetesWriteAuthRoleRequest: KubernetesWriteAuthRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesWriteAuthRoleRaw({ name: name, kubernetesMountPath: kubernetesMountPath, kubernetesWriteAuthRoleRequest: kubernetesWriteAuthRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapConfigureAuthRaw(requestParameters: AuthApiLdapConfigureAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapConfigureAuth().'
            );
        }

        if (requestParameters['ldapConfigureAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapConfigureAuthRequest',
                'Required parameter "ldapConfigureAuthRequest" was null or undefined when calling ldapConfigureAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapConfigureAuthRequestToJSON(requestParameters['ldapConfigureAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapConfigureAuth(ldapMountPath: string, ldapConfigureAuthRequest: LdapConfigureAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapConfigureAuthRaw({ ldapMountPath: ldapMountPath, ldapConfigureAuthRequest: ldapConfigureAuthRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapDeleteGroupRaw(requestParameters: AuthApiLdapDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapDeleteGroup(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteGroupRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapDeleteUserRaw(requestParameters: AuthApiLdapDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapDeleteUser(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteUserRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapListGroupsRaw(requestParameters: AuthApiLdapListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapListGroups(ldapMountPath: string, list: LdapListGroupsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListGroupsRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapListUsersRaw(requestParameters: AuthApiLdapListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapListUsers(ldapMountPath: string, list: LdapListUsersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListUsersRaw({ ldapMountPath: ldapMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async ldapLoginRaw(requestParameters: AuthApiLdapLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling ldapLogin().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapLogin().'
            );
        }

        if (requestParameters['ldapLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapLoginRequest',
                'Required parameter "ldapLoginRequest" was null or undefined when calling ldapLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLoginRequestToJSON(requestParameters['ldapLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async ldapLogin(username: string, ldapMountPath: string, ldapLoginRequest: LdapLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLoginRaw({ username: username, ldapMountPath: ldapMountPath, ldapLoginRequest: ldapLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadAuthConfigurationRaw(requestParameters: AuthApiLdapReadAuthConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadAuthConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadAuthConfiguration(ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadAuthConfigurationRaw({ ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapReadGroupRaw(requestParameters: AuthApiLdapReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapReadGroup(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadGroupRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapReadUserRaw(requestParameters: AuthApiLdapReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapReadUser(name: string, ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadUserRaw({ name: name, ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRotateRootCredentialsRaw(requestParameters: AuthApiLdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/config/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateRootCredentials(ldapMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRotateRootCredentialsRaw({ ldapMountPath: ldapMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapWriteGroupRaw(requestParameters: AuthApiLdapWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteGroup().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteGroup().'
            );
        }

        if (requestParameters['ldapWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteGroupRequest',
                'Required parameter "ldapWriteGroupRequest" was null or undefined when calling ldapWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteGroupRequestToJSON(requestParameters['ldapWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async ldapWriteGroup(name: string, ldapMountPath: string, ldapWriteGroupRequest: LdapWriteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteGroupRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteGroupRequest: ldapWriteGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapWriteUserRaw(requestParameters: AuthApiLdapWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteUser().'
            );
        }

        if (requestParameters['ldapMountPath'] == null) {
            throw new runtime.RequiredError(
                'ldapMountPath',
                'Required parameter "ldapMountPath" was null or undefined when calling ldapWriteUser().'
            );
        }

        if (requestParameters['ldapWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'ldapWriteUserRequest',
                'Required parameter "ldapWriteUserRequest" was null or undefined when calling ldapWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{ldap_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldapMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteUserRequestToJSON(requestParameters['ldapWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async ldapWriteUser(name: string, ldapMountPath: string, ldapWriteUserRequest: LdapWriteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteUserRaw({ name: name, ldapMountPath: ldapMountPath, ldapWriteUserRequest: ldapWriteUserRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ociConfigureRaw(requestParameters: AuthApiOciConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociConfigure().'
            );
        }

        if (requestParameters['ociConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'ociConfigureRequest',
                'Required parameter "ociConfigureRequest" was null or undefined when calling ociConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciConfigureRequestToJSON(requestParameters['ociConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociConfigure(ociMountPath: string, ociConfigureRequest: OciConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociConfigureRaw({ ociMountPath: ociMountPath, ociConfigureRequest: ociConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ociDeleteConfigurationRaw(requestParameters: AuthApiOciDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociDeleteConfiguration(ociMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociDeleteConfigurationRaw({ ociMountPath: ociMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociDeleteRoleRaw(requestParameters: AuthApiOciDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociDeleteRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociDeleteRole(role: string, ociMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociDeleteRoleRaw({ role: role, ociMountPath: ociMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async ociListRolesRaw(requestParameters: AuthApiOciListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ociListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the roles that are registered with Vault.
     */
    async ociListRoles(ociMountPath: string, list: OciListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ociListRolesRaw({ ociMountPath: ociMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates to Vault using OCI credentials
     */
    async ociLoginRaw(requestParameters: AuthApiOciLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociLogin().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociLogin().'
            );
        }

        if (requestParameters['ociLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ociLoginRequest',
                'Required parameter "ociLoginRequest" was null or undefined when calling ociLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/login/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciLoginRequestToJSON(requestParameters['ociLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates to Vault using OCI credentials
     */
    async ociLogin(role: string, ociMountPath: string, ociLoginRequest: OciLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociLoginRaw({ role: role, ociMountPath: ociMountPath, ociLoginRequest: ociLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ociReadConfigurationRaw(requestParameters: AuthApiOciReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/config`.replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ociReadConfiguration(ociMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociReadConfigurationRaw({ ociMountPath: ociMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociReadRoleRaw(requestParameters: AuthApiOciReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociReadRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociReadRole(role: string, ociMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociReadRoleRaw({ role: role, ociMountPath: ociMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociWriteRoleRaw(requestParameters: AuthApiOciWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling ociWriteRole().'
            );
        }

        if (requestParameters['ociMountPath'] == null) {
            throw new runtime.RequiredError(
                'ociMountPath',
                'Required parameter "ociMountPath" was null or undefined when calling ociWriteRole().'
            );
        }

        if (requestParameters['ociWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ociWriteRoleRequest',
                'Required parameter "ociWriteRoleRequest" was null or undefined when calling ociWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{oci_mount_path}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"oci_mount_path"}}`, encodeURIComponent(String(requestParameters['ociMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OciWriteRoleRequestToJSON(requestParameters['ociWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a role and associate policies to it.
     */
    async ociWriteRole(role: string, ociMountPath: string, ociWriteRoleRequest: OciWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ociWriteRoleRaw({ role: role, ociMountPath: ociMountPath, ociWriteRoleRequest: ociWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oktaConfigureRaw(requestParameters: AuthApiOktaConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaConfigure().'
            );
        }

        if (requestParameters['oktaConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaConfigureRequest',
                'Required parameter "oktaConfigureRequest" was null or undefined when calling oktaConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/config`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaConfigureRequestToJSON(requestParameters['oktaConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaConfigure(oktaMountPath: string, oktaConfigureRequest: OktaConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaConfigureRaw({ oktaMountPath: oktaMountPath, oktaConfigureRequest: oktaConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaDeleteGroupRaw(requestParameters: AuthApiOktaDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaDeleteGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaDeleteGroup(name: string, oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaDeleteGroupRaw({ name: name, oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaDeleteUserRaw(requestParameters: AuthApiOktaDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaDeleteUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaDeleteUser(name: string, oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaDeleteUserRaw({ name: name, oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaListGroupsRaw(requestParameters: AuthApiOktaListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaListGroups().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oktaListGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaListGroups(oktaMountPath: string, list: OktaListGroupsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oktaListGroupsRaw({ oktaMountPath: oktaMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaListUsersRaw(requestParameters: AuthApiOktaListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oktaListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaListUsers(oktaMountPath: string, list: OktaListUsersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oktaListUsersRaw({ oktaMountPath: oktaMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async oktaLoginRaw(requestParameters: AuthApiOktaLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling oktaLogin().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaLogin().'
            );
        }

        if (requestParameters['oktaLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaLoginRequest',
                'Required parameter "oktaLoginRequest" was null or undefined when calling oktaLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaLoginRequestToJSON(requestParameters['oktaLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async oktaLogin(username: string, oktaMountPath: string, oktaLoginRequest: OktaLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaLoginRaw({ username: username, oktaMountPath: oktaMountPath, oktaLoginRequest: oktaLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oktaReadConfigurationRaw(requestParameters: AuthApiOktaReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/config`.replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaReadConfiguration(oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaReadConfigurationRaw({ oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaReadGroupRaw(requestParameters: AuthApiOktaReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaReadGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaReadGroup(name: string, oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaReadGroupRaw({ name: name, oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaReadUserRaw(requestParameters: AuthApiOktaReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaReadUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaReadUser(name: string, oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaReadUserRaw({ name: name, oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oktaVerifyRaw(requestParameters: AuthApiOktaVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling oktaVerify().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{okta_mount_path}/verify/{nonce}`.replace(`{${"nonce"}}`, encodeURIComponent(String(requestParameters['nonce']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oktaVerify(nonce: string, oktaMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaVerifyRaw({ nonce: nonce, oktaMountPath: oktaMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaWriteGroupRaw(requestParameters: AuthApiOktaWriteGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaWriteGroup().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaWriteGroup().'
            );
        }

        if (requestParameters['oktaWriteGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaWriteGroupRequest',
                'Required parameter "oktaWriteGroupRequest" was null or undefined when calling oktaWriteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaWriteGroupRequestToJSON(requestParameters['oktaWriteGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async oktaWriteGroup(name: string, oktaMountPath: string, oktaWriteGroupRequest: OktaWriteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaWriteGroupRaw({ name: name, oktaMountPath: oktaMountPath, oktaWriteGroupRequest: oktaWriteGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaWriteUserRaw(requestParameters: AuthApiOktaWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oktaWriteUser().'
            );
        }

        if (requestParameters['oktaMountPath'] == null) {
            throw new runtime.RequiredError(
                'oktaMountPath',
                'Required parameter "oktaMountPath" was null or undefined when calling oktaWriteUser().'
            );
        }

        if (requestParameters['oktaWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'oktaWriteUserRequest',
                'Required parameter "oktaWriteUserRequest" was null or undefined when calling oktaWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{okta_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"okta_mount_path"}}`, encodeURIComponent(String(requestParameters['oktaMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OktaWriteUserRequestToJSON(requestParameters['oktaWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage additional groups for users allowed to authenticate.
     */
    async oktaWriteUser(name: string, oktaMountPath: string, oktaWriteUserRequest: OktaWriteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oktaWriteUserRaw({ name: name, oktaMountPath: oktaMountPath, oktaWriteUserRequest: oktaWriteUserRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async radiusConfigureRaw(requestParameters: AuthApiRadiusConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusConfigure().'
            );
        }

        if (requestParameters['radiusConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusConfigureRequest',
                'Required parameter "radiusConfigureRequest" was null or undefined when calling radiusConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/config`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusConfigureRequestToJSON(requestParameters['radiusConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async radiusConfigure(radiusMountPath: string, radiusConfigureRequest: RadiusConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusConfigureRaw({ radiusMountPath: radiusMountPath, radiusConfigureRequest: radiusConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusDeleteUserRaw(requestParameters: AuthApiRadiusDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusDeleteUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusDeleteUser(name: string, radiusMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusDeleteUserRaw({ name: name, radiusMountPath: radiusMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusListUsersRaw(requestParameters: AuthApiRadiusListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling radiusListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusListUsers(radiusMountPath: string, list: RadiusListUsersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.radiusListUsersRaw({ radiusMountPath: radiusMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginRaw(requestParameters: AuthApiRadiusLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusLogin().'
            );
        }

        if (requestParameters['radiusLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusLoginRequest',
                'Required parameter "radiusLoginRequest" was null or undefined when calling radiusLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/login`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusLoginRequestToJSON(requestParameters['radiusLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async radiusLogin(radiusMountPath: string, radiusLoginRequest: RadiusLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusLoginRaw({ radiusMountPath: radiusMountPath, radiusLoginRequest: radiusLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginWithUsernameRaw(requestParameters: AuthApiRadiusLoginWithUsernameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['urlusername'] == null) {
            throw new runtime.RequiredError(
                'urlusername',
                'Required parameter "urlusername" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        if (requestParameters['radiusLoginWithUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusLoginWithUsernameRequest',
                'Required parameter "radiusLoginWithUsernameRequest" was null or undefined when calling radiusLoginWithUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/login/{urlusername}`.replace(`{${"urlusername"}}`, encodeURIComponent(String(requestParameters['urlusername']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusLoginWithUsernameRequestToJSON(requestParameters['radiusLoginWithUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async radiusLoginWithUsername(urlusername: string, radiusMountPath: string, radiusLoginWithUsernameRequest: RadiusLoginWithUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusLoginWithUsernameRaw({ urlusername: urlusername, radiusMountPath: radiusMountPath, radiusLoginWithUsernameRequest: radiusLoginWithUsernameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async radiusReadConfigurationRaw(requestParameters: AuthApiRadiusReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/config`.replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async radiusReadConfiguration(radiusMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusReadConfigurationRaw({ radiusMountPath: radiusMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusReadUserRaw(requestParameters: AuthApiRadiusReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusReadUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusReadUser(name: string, radiusMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusReadUserRaw({ name: name, radiusMountPath: radiusMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusWriteUserRaw(requestParameters: AuthApiRadiusWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling radiusWriteUser().'
            );
        }

        if (requestParameters['radiusMountPath'] == null) {
            throw new runtime.RequiredError(
                'radiusMountPath',
                'Required parameter "radiusMountPath" was null or undefined when calling radiusWriteUser().'
            );
        }

        if (requestParameters['radiusWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'radiusWriteUserRequest',
                'Required parameter "radiusWriteUserRequest" was null or undefined when calling radiusWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{radius_mount_path}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"radius_mount_path"}}`, encodeURIComponent(String(requestParameters['radiusMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusWriteUserRequestToJSON(requestParameters['radiusWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async radiusWriteUser(name: string, radiusMountPath: string, radiusWriteUserRequest: RadiusWriteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.radiusWriteUserRaw({ name: name, radiusMountPath: radiusMountPath, radiusWriteUserRequest: radiusWriteUserRequest }, initOverrides);
        return await response.value();
    }

    /**
     * The token create path is used to create new tokens.
     */
    async tokenCreateRaw(requestParameters: AuthApiTokenCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateRequest',
                'Required parameter "tokenCreateRequest" was null or undefined when calling tokenCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateRequestToJSON(requestParameters['tokenCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The token create path is used to create new tokens.
     */
    async tokenCreate(tokenCreateRequest: TokenCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenCreateRaw({ tokenCreateRequest: tokenCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This token create path is used to create new tokens adhering to the given role.
     */
    async tokenCreateAgainstRoleRaw(requestParameters: AuthApiTokenCreateAgainstRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenCreateAgainstRole().'
            );
        }

        if (requestParameters['tokenCreateAgainstRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateAgainstRoleRequest',
                'Required parameter "tokenCreateAgainstRoleRequest" was null or undefined when calling tokenCreateAgainstRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateAgainstRoleRequestToJSON(requestParameters['tokenCreateAgainstRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This token create path is used to create new tokens adhering to the given role.
     */
    async tokenCreateAgainstRole(roleName: string, tokenCreateAgainstRoleRequest: TokenCreateAgainstRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenCreateAgainstRoleRaw({ roleName: roleName, tokenCreateAgainstRoleRequest: tokenCreateAgainstRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * The token create path is used to create new orphan tokens.
     */
    async tokenCreateOrphanRaw(requestParameters: AuthApiTokenCreateOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenCreateOrphanRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenCreateOrphanRequest',
                'Required parameter "tokenCreateOrphanRequest" was null or undefined when calling tokenCreateOrphan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/create-orphan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCreateOrphanRequestToJSON(requestParameters['tokenCreateOrphanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The token create path is used to create new orphan tokens.
     */
    async tokenCreateOrphan(tokenCreateOrphanRequest: TokenCreateOrphanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenCreateOrphanRaw({ tokenCreateOrphanRequest: tokenCreateOrphanRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenDeleteRoleRaw(requestParameters: AuthApiTokenDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenDeleteRole(roleName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenDeleteRoleRaw({ roleName: roleName }, initOverrides);
        return await response.value();
    }

    /**
     * List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires \'sudo\' capability in addition to \'list\'.
     */
    async tokenListAccessorsRaw(requestParameters: AuthApiTokenListAccessorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling tokenListAccessors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/accessors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires \'sudo\' capability in addition to \'list\'.
     */
    async tokenListAccessors(list: TokenListAccessorsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.tokenListAccessorsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists configured roles.
     */
    async tokenListRolesRaw(requestParameters: AuthApiTokenListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling tokenListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists configured roles.
     */
    async tokenListRoles(list: TokenListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.tokenListRolesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenLookUpRaw(requestParameters: AuthApiTokenLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpRequest',
                'Required parameter "tokenLookUpRequest" was null or undefined when calling tokenLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpRequestToJSON(requestParameters['tokenLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUp(tokenLookUpRequest: TokenLookUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenLookUpRaw({ tokenLookUpRequest: tokenLookUpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenLookUp2Raw(requestParameters: AuthApiTokenLookUp2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUp2(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenLookUp2Raw({ token: token }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenLookUpAccessorRaw(requestParameters: AuthApiTokenLookUpAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenLookUpAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpAccessorRequest',
                'Required parameter "tokenLookUpAccessorRequest" was null or undefined when calling tokenLookUpAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpAccessorRequestToJSON(requestParameters['tokenLookUpAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenLookUpAccessor(tokenLookUpAccessorRequest: TokenLookUpAccessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenLookUpAccessorRaw({ tokenLookUpAccessorRequest: tokenLookUpAccessorRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenLookUpSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/lookup-self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUpSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenLookUpSelfRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenLookUpSelf2Raw(requestParameters: AuthApiTokenLookUpSelf2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenLookUpSelf2Request'] == null) {
            throw new runtime.RequiredError(
                'tokenLookUpSelf2Request',
                'Required parameter "tokenLookUpSelf2Request" was null or undefined when calling tokenLookUpSelf2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/lookup-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenLookUpSelf2RequestToJSON(requestParameters['tokenLookUpSelf2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenLookUpSelf2(tokenLookUpSelf2Request: TokenLookUpSelf2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenLookUpSelf2Raw({ tokenLookUpSelf2Request: tokenLookUpSelf2Request }, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenReadRoleRaw(requestParameters: AuthApiTokenReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenReadRole(roleName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenReadRoleRaw({ roleName: roleName }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will renew the given token and prevent expiration.
     */
    async tokenRenewRaw(requestParameters: AuthApiTokenRenewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRenewRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewRequest',
                'Required parameter "tokenRenewRequest" was null or undefined when calling tokenRenew().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewRequestToJSON(requestParameters['tokenRenewRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew the given token and prevent expiration.
     */
    async tokenRenew(tokenRenewRequest: TokenRenewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRenewRaw({ tokenRenewRequest: tokenRenewRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenRenewAccessorRaw(requestParameters: AuthApiTokenRenewAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRenewAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewAccessorRequest',
                'Required parameter "tokenRenewAccessorRequest" was null or undefined when calling tokenRenewAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewAccessorRequestToJSON(requestParameters['tokenRenewAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
     */
    async tokenRenewAccessor(tokenRenewAccessorRequest: TokenRenewAccessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRenewAccessorRaw({ tokenRenewAccessorRequest: tokenRenewAccessorRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will renew the token used to call it and prevent expiration.
     */
    async tokenRenewSelfRaw(requestParameters: AuthApiTokenRenewSelfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRenewSelfRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRenewSelfRequest',
                'Required parameter "tokenRenewSelfRequest" was null or undefined when calling tokenRenewSelf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/renew-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRenewSelfRequestToJSON(requestParameters['tokenRenewSelfRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will renew the token used to call it and prevent expiration.
     */
    async tokenRenewSelf(tokenRenewSelfRequest: TokenRenewSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRenewSelfRaw({ tokenRenewSelfRequest: tokenRenewSelfRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will delete the given token and all of its child tokens.
     */
    async tokenRevokeRaw(requestParameters: AuthApiTokenRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRevokeRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeRequest',
                'Required parameter "tokenRevokeRequest" was null or undefined when calling tokenRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeRequestToJSON(requestParameters['tokenRevokeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the given token and all of its child tokens.
     */
    async tokenRevoke(tokenRevokeRequest: TokenRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRevokeRaw({ tokenRevokeRequest: tokenRevokeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will delete the token associated with the accessor and all of its child tokens.
     */
    async tokenRevokeAccessorRaw(requestParameters: AuthApiTokenRevokeAccessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRevokeAccessorRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeAccessorRequest',
                'Required parameter "tokenRevokeAccessorRequest" was null or undefined when calling tokenRevokeAccessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeAccessorRequestToJSON(requestParameters['tokenRevokeAccessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token associated with the accessor and all of its child tokens.
     */
    async tokenRevokeAccessor(tokenRevokeAccessorRequest: TokenRevokeAccessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRevokeAccessorRaw({ tokenRevokeAccessorRequest: tokenRevokeAccessorRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will delete the token and orphan its child tokens.
     */
    async tokenRevokeOrphanRaw(requestParameters: AuthApiTokenRevokeOrphanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tokenRevokeOrphanRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRevokeOrphanRequest',
                'Required parameter "tokenRevokeOrphanRequest" was null or undefined when calling tokenRevokeOrphan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/revoke-orphan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRevokeOrphanRequestToJSON(requestParameters['tokenRevokeOrphanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token and orphan its child tokens.
     */
    async tokenRevokeOrphan(tokenRevokeOrphanRequest: TokenRevokeOrphanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRevokeOrphanRaw({ tokenRevokeOrphanRequest: tokenRevokeOrphanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will delete the token used to call it and all of its child tokens.
     */
    async tokenRevokeSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/revoke-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint will delete the token used to call it and all of its child tokens.
     */
    async tokenRevokeSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenRevokeSelfRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
     */
    async tokenTidyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/token/tidy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
     */
    async tokenTidy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenTidyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenWriteRoleRaw(requestParameters: AuthApiTokenWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling tokenWriteRole().'
            );
        }

        if (requestParameters['tokenWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenWriteRoleRequest',
                'Required parameter "tokenWriteRoleRequest" was null or undefined when calling tokenWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token/roles/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenWriteRoleRequestToJSON(requestParameters['tokenWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenWriteRole(roleName: string, tokenWriteRoleRequest: TokenWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.tokenWriteRoleRaw({ roleName: roleName, tokenWriteRoleRequest: tokenWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassDeleteUserRaw(requestParameters: AuthApiUserpassDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassDeleteUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassDeleteUser(username: string, userpassMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassDeleteUserRaw({ username: username, userpassMountPath: userpassMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassListUsersRaw(requestParameters: AuthApiUserpassListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassListUsers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling userpassListUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/`.replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassListUsers(userpassMountPath: string, list: UserpassListUsersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.userpassListUsersRaw({ userpassMountPath: userpassMountPath, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Log in with a username and password.
     */
    async userpassLoginRaw(requestParameters: AuthApiUserpassLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassLogin().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassLogin().'
            );
        }

        if (requestParameters['userpassLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassLoginRequest',
                'Required parameter "userpassLoginRequest" was null or undefined when calling userpassLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/login/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassLoginRequestToJSON(requestParameters['userpassLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with a username and password.
     */
    async userpassLogin(username: string, userpassMountPath: string, userpassLoginRequest: UserpassLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassLoginRaw({ username: username, userpassMountPath: userpassMountPath, userpassLoginRequest: userpassLoginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassReadUserRaw(requestParameters: AuthApiUserpassReadUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassReadUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassReadUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassReadUser(username: string, userpassMountPath: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassReadUserRaw({ username: username, userpassMountPath: userpassMountPath }, initOverrides);
        return await response.value();
    }

    /**
     * Reset user\'s password.
     */
    async userpassResetPasswordRaw(requestParameters: AuthApiUserpassResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassResetPassword().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassResetPassword().'
            );
        }

        if (requestParameters['userpassResetPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassResetPasswordRequest',
                'Required parameter "userpassResetPasswordRequest" was null or undefined when calling userpassResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}/password`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassResetPasswordRequestToJSON(requestParameters['userpassResetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset user\'s password.
     */
    async userpassResetPassword(username: string, userpassMountPath: string, userpassResetPasswordRequest: UserpassResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassResetPasswordRaw({ username: username, userpassMountPath: userpassMountPath, userpassResetPasswordRequest: userpassResetPasswordRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the policies associated with the username.
     */
    async userpassUpdatePoliciesRaw(requestParameters: AuthApiUserpassUpdatePoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        if (requestParameters['userpassUpdatePoliciesRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassUpdatePoliciesRequest',
                'Required parameter "userpassUpdatePoliciesRequest" was null or undefined when calling userpassUpdatePolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}/policies`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassUpdatePoliciesRequestToJSON(requestParameters['userpassUpdatePoliciesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the policies associated with the username.
     */
    async userpassUpdatePolicies(username: string, userpassMountPath: string, userpassUpdatePoliciesRequest: UserpassUpdatePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassUpdatePoliciesRaw({ username: username, userpassMountPath: userpassMountPath, userpassUpdatePoliciesRequest: userpassUpdatePoliciesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassWriteUserRaw(requestParameters: AuthApiUserpassWriteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userpassWriteUser().'
            );
        }

        if (requestParameters['userpassMountPath'] == null) {
            throw new runtime.RequiredError(
                'userpassMountPath',
                'Required parameter "userpassMountPath" was null or undefined when calling userpassWriteUser().'
            );
        }

        if (requestParameters['userpassWriteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'userpassWriteUserRequest',
                'Required parameter "userpassWriteUserRequest" was null or undefined when calling userpassWriteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{userpass_mount_path}/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"userpass_mount_path"}}`, encodeURIComponent(String(requestParameters['userpassMountPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassWriteUserRequestToJSON(requestParameters['userpassWriteUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage users allowed to authenticate.
     */
    async userpassWriteUser(username: string, userpassMountPath: string, userpassWriteUserRequest: UserpassWriteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.userpassWriteUserRaw({ username: username, userpassMountPath: userpassMountPath, userpassWriteUserRequest: userpassWriteUserRequest }, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AliCloudListAuthRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AliCloudListAuthRoles2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AppRoleListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AppRoleListSecretIdsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListAuthRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListAuthRoles2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListCertificateConfigurationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListIdentityAccessListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListIdentityWhitelistListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListRoleTagBlacklistsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListRoleTagDenyListsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListStsRoleRelationshipsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AzureListAuthRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum CertListCertificatesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum CertListCrlsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum CloudFoundryListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GithubListTeamsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GithubListUsersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRoles2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum JwtListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KerberosListGroupsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KubernetesListAuthRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListGroupsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListUsersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OciListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OktaListGroupsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OktaListUsersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum RadiusListUsersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TokenListAccessorsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TokenListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum UserpassListUsersListEnum {
    TRUE = 'true'
}
