{"version":3,"file":"global-lease.js","sources":["../../../../src/components/shared-secure-ui/reporting/global-lease.gts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: BUSL-1.1\n */\n\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { runTask } from 'ember-lifeline';\nimport {\n  HdsCardContainer,\n  HdsTextDisplay,\n} from '@hashicorp/design-system-components/components';\nimport TitleRow from './base/title-row.gts';\n\nimport './global-lease.scss';\n\nexport interface GlobalLeaseSignature {\n  Args: {\n    count: number;\n    quota: number;\n  };\n\n  Blocks: {\n    default: [];\n  };\n\n  Element: HTMLElement;\n}\n\nexport default class GlobalLease extends Component<GlobalLeaseSignature> {\n  @tracked animatedPercentage = 0;\n  @tracked displayPercentage = 0;\n  @tracked initialState = true;\n\n  constructor(owner: unknown, args: GlobalLeaseSignature['Args']) {\n    super(owner, args);\n    runTask(this, () => this.startAnimation(), 50);\n  }\n\n  get actualPercentage() {\n    return Math.round(Math.min((this.args.count / this.args.quota) * 100, 100));\n  }\n\n  get progressFillClass() {\n    if (this.initialState) {\n      return 'ssu-global-lease__progress-fill--initial';\n    }\n    if (this.actualPercentage < 50) {\n      return 'ssu-global-lease__progress-fill--low';\n    }\n    if (this.actualPercentage < 100) {\n      return 'ssu-global-lease__progress-fill--medium';\n    }\n    return 'ssu-global-lease__progress-fill--high';\n  }\n\n  get formattedCount() {\n    const formatter = new Intl.NumberFormat('en-US', {\n      notation: 'compact',\n      compactDisplay: 'short',\n    });\n    const count = formatter.format(this.args.count);\n    const total = formatter.format(this.args.quota);\n\n    return `${count} / ${total}`;\n  }\n\n  @action\n  startAnimation() {\n    this.animatedPercentage = 0;\n    this.displayPercentage = 0;\n    this.initialState = true;\n\n    runTask(\n      this,\n      () => {\n        this.animatePercentageText();\n\n        this.animatedPercentage = this.actualPercentage;\n        this.initialState = false;\n      },\n      100,\n    );\n  }\n\n  @action\n  animatePercentageText() {\n    const targetPercentage = this.actualPercentage;\n    const duration = 1000;\n    const steps = 20;\n    const stepDuration = duration / steps;\n\n    let currentStep = 0;\n\n    const updatePercentage = () => {\n      currentStep++;\n      this.displayPercentage = Math.round(\n        (currentStep / steps) * targetPercentage,\n      );\n\n      if (currentStep < steps) {\n        runTask(this, updatePercentage, stepDuration);\n      } else {\n        this.displayPercentage = targetPercentage;\n      }\n    };\n\n    updatePercentage();\n  }\n\n  <template>\n    <HdsCardContainer\n      data-test-global-lease\n      @hasBorder={{true}}\n      class=\"ssu-global-lease\"\n    >\n      <TitleRow\n        @title=\"Global lease count quota\"\n        @description=\"Snapshot of global lease count quota consumption\"\n        @linkText=\"Documentation\"\n        @linkIcon=\"docs-link\"\n        @linkUrl=\"https://developer.hashicorp.com/vault/docs/enterprise/lease-count-quotas\"\n      />\n\n      <HdsTextDisplay\n        class=\"ssu-global-lease__percentage-text\"\n      >{{this.displayPercentage}}%</HdsTextDisplay>\n\n      <div class=\"ssu-global-lease__progress-wrapper\">\n        <div class=\"ssu-global-lease__progress-bar\">\n          <div\n            class=\"ssu-global-lease__progress-fill {{this.progressFillClass}}\"\n            {{! template-lint-disable no-inline-styles style-concatenation }}\n            style=\"width: {{this.animatedPercentage}}%;\"\n          ></div>\n        </div>\n        <span class=\"ssu-global-lease__count-text\">\n          <HdsTextDisplay @size=\"400\" @weight=\"medium\">\n            {{this.formattedCount}}\n          </HdsTextDisplay>\n        </span>\n      </div>\n\n    </HdsCardContainer>\n  </template>\n}\n"],"names":["GlobalLease","Component","g","prototype","tracked","i","void 0","constructor","owner","args","runTask","startAnimation","actualPercentage","Math","round","min","count","quota","progressFillClass","initialState","formattedCount","formatter","Intl","NumberFormat","notation","compactDisplay","format","total","animatedPercentage","displayPercentage","animatePercentageText","n","action","targetPercentage","duration","steps","stepDuration","currentStep","updatePercentage","setComponentTemplate","precompileTemplate","strictMode","scope","HdsCardContainer","TitleRow","HdsTextDisplay"],"mappings":"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"}