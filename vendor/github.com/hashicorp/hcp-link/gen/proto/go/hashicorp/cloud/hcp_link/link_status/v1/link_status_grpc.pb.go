// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: hashicorp/cloud/hcp_link/link_status/v1/link_status.proto

package link_statusv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkStatusServiceClient is the client API for LinkStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkStatusServiceClient interface {
	// GetLinkStatus will be used to fetch the node’s link specific status.
	GetLinkStatus(ctx context.Context, in *GetLinkStatusRequest, opts ...grpc.CallOption) (*GetLinkStatusResponse, error)
}

type linkStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkStatusServiceClient(cc grpc.ClientConnInterface) LinkStatusServiceClient {
	return &linkStatusServiceClient{cc}
}

func (c *linkStatusServiceClient) GetLinkStatus(ctx context.Context, in *GetLinkStatusRequest, opts ...grpc.CallOption) (*GetLinkStatusResponse, error) {
	out := new(GetLinkStatusResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.cloud.hcp_link.link_status.v1.LinkStatusService/GetLinkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkStatusServiceServer is the server API for LinkStatusService service.
// All implementations must embed UnimplementedLinkStatusServiceServer
// for forward compatibility
type LinkStatusServiceServer interface {
	// GetLinkStatus will be used to fetch the node’s link specific status.
	GetLinkStatus(context.Context, *GetLinkStatusRequest) (*GetLinkStatusResponse, error)
	mustEmbedUnimplementedLinkStatusServiceServer()
}

// UnimplementedLinkStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkStatusServiceServer struct {
}

func (UnimplementedLinkStatusServiceServer) GetLinkStatus(context.Context, *GetLinkStatusRequest) (*GetLinkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkStatus not implemented")
}
func (UnimplementedLinkStatusServiceServer) mustEmbedUnimplementedLinkStatusServiceServer() {}

// UnsafeLinkStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkStatusServiceServer will
// result in compilation errors.
type UnsafeLinkStatusServiceServer interface {
	mustEmbedUnimplementedLinkStatusServiceServer()
}

func RegisterLinkStatusServiceServer(s grpc.ServiceRegistrar, srv LinkStatusServiceServer) {
	s.RegisterService(&LinkStatusService_ServiceDesc, srv)
}

func _LinkStatusService_GetLinkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkStatusServiceServer).GetLinkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.cloud.hcp_link.link_status.v1.LinkStatusService/GetLinkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkStatusServiceServer).GetLinkStatus(ctx, req.(*GetLinkStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkStatusService_ServiceDesc is the grpc.ServiceDesc for LinkStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.cloud.hcp_link.link_status.v1.LinkStatusService",
	HandlerType: (*LinkStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinkStatus",
			Handler:    _LinkStatusService_GetLinkStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hashicorp/cloud/hcp_link/link_status/v1/link_status.proto",
}
