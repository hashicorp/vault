// Code generated by "enumer -type=RenewBehavior -trimprefix=RenewBehavior"; DO NOT EDIT.

package api

import (
	"fmt"
)

const _RenewBehaviorName = "IgnoreErrorsRenewDisabledErrorOnErrors"

var _RenewBehaviorIndex = [...]uint8{0, 12, 25, 38}

func (i RenewBehavior) String() string {
	if i >= RenewBehavior(len(_RenewBehaviorIndex)-1) {
		return fmt.Sprintf("RenewBehavior(%d)", i)
	}
	return _RenewBehaviorName[_RenewBehaviorIndex[i]:_RenewBehaviorIndex[i+1]]
}

var _RenewBehaviorValues = []RenewBehavior{0, 1, 2}

var _RenewBehaviorNameToValueMap = map[string]RenewBehavior{
	_RenewBehaviorName[0:12]:  0,
	_RenewBehaviorName[12:25]: 1,
	_RenewBehaviorName[25:38]: 2,
}

// RenewBehaviorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RenewBehaviorString(s string) (RenewBehavior, error) {
	if val, ok := _RenewBehaviorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RenewBehavior values", s)
}

// RenewBehaviorValues returns all values of the enum
func RenewBehaviorValues() []RenewBehavior {
	return _RenewBehaviorValues
}

// IsARenewBehavior returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RenewBehavior) IsARenewBehavior() bool {
	for _, v := range _RenewBehaviorValues {
		if i == v {
			return true
		}
	}
	return false
}
