// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudResourcemanagerResourceSetIamPolicyRequest ResourceSetIamPolicyRequest see ResourceService.SetIamPolicy
//
// swagger:model hashicorp.cloud.resourcemanager.ResourceSetIamPolicyRequest
type HashicorpCloudResourcemanagerResourceSetIamPolicyRequest struct {

	// Policy is the IAM policy to be updated for the resource. The policy
	// will be completely replaced and therefore Policy.Etag must be specified
	// in order to prevent concurrent updates.
	Policy *HashicorpCloudResourcemanagerPolicy `json:"policy,omitempty"`

	// ResourceId is the resource name of the resource. Either this or the ResourceName needs to be provided.
	ResourceID string `json:"resource_id,omitempty"`

	// ResourceName is the resource name of the resource. Either this or the ResourceId needs to be provided.
	ResourceName string `json:"resource_name,omitempty"`
}

// Validate validates this hashicorp cloud resourcemanager resource set iam policy request
func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud resourcemanager resource set iam policy request based on the context it is used
func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if swag.IsZero(m.Policy) { // not required
			return nil
		}

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudResourcemanagerResourceSetIamPolicyRequest) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudResourcemanagerResourceSetIamPolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
