package ram

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetAccessKeyLastUsed invokes the ram.GetAccessKeyLastUsed API synchronously
func (client *Client) GetAccessKeyLastUsed(request *GetAccessKeyLastUsedRequest) (response *GetAccessKeyLastUsedResponse, err error) {
	response = CreateGetAccessKeyLastUsedResponse()
	err = client.DoAction(request, response)
	return
}

// GetAccessKeyLastUsedWithChan invokes the ram.GetAccessKeyLastUsed API asynchronously
func (client *Client) GetAccessKeyLastUsedWithChan(request *GetAccessKeyLastUsedRequest) (<-chan *GetAccessKeyLastUsedResponse, <-chan error) {
	responseChan := make(chan *GetAccessKeyLastUsedResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetAccessKeyLastUsed(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetAccessKeyLastUsedWithCallback invokes the ram.GetAccessKeyLastUsed API asynchronously
func (client *Client) GetAccessKeyLastUsedWithCallback(request *GetAccessKeyLastUsedRequest, callback func(response *GetAccessKeyLastUsedResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetAccessKeyLastUsedResponse
		var err error
		defer close(result)
		response, err = client.GetAccessKeyLastUsed(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetAccessKeyLastUsedRequest is the request struct for api GetAccessKeyLastUsed
type GetAccessKeyLastUsedRequest struct {
	*requests.RpcRequest
	UserAccessKeyId string `position:"Query" name:"UserAccessKeyId"`
	UserName        string `position:"Query" name:"UserName"`
}

// GetAccessKeyLastUsedResponse is the response struct for api GetAccessKeyLastUsed
type GetAccessKeyLastUsedResponse struct {
	*responses.BaseResponse
	RequestId         string            `json:"RequestId" xml:"RequestId"`
	AccessKeyLastUsed AccessKeyLastUsed `json:"AccessKeyLastUsed" xml:"AccessKeyLastUsed"`
}

// CreateGetAccessKeyLastUsedRequest creates a request to invoke GetAccessKeyLastUsed API
func CreateGetAccessKeyLastUsedRequest() (request *GetAccessKeyLastUsedRequest) {
	request = &GetAccessKeyLastUsedRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ram", "2015-05-01", "GetAccessKeyLastUsed", "Ram", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetAccessKeyLastUsedResponse creates a response to parse from GetAccessKeyLastUsed response
func CreateGetAccessKeyLastUsedResponse() (response *GetAccessKeyLastUsedResponse) {
	response = &GetAccessKeyLastUsedResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
