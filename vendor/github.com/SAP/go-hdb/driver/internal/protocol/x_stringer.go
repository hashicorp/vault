// Code generated by "stringer -type=typeCode,MessageType,clientContextOption,connectOption,dbConnectInfoType,DataType,FunctionCode,PartKind,Cdm,endianess,segmentKind,statementContextType,topologyOption,ServiceType,transactionFlagType,dpv,lobTypecode -output=x_stringer.go"; DO NOT EDIT.

package protocol

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tcNull-0]
	_ = x[tcTinyint-1]
	_ = x[tcSmallint-2]
	_ = x[tcInteger-3]
	_ = x[tcBigint-4]
	_ = x[tcDecimal-5]
	_ = x[tcReal-6]
	_ = x[tcDouble-7]
	_ = x[tcChar-8]
	_ = x[tcVarchar-9]
	_ = x[tcNchar-10]
	_ = x[tcNvarchar-11]
	_ = x[tcBinary-12]
	_ = x[tcVarbinary-13]
	_ = x[tcDate-14]
	_ = x[tcTime-15]
	_ = x[tcTimestamp-16]
	_ = x[tcTimetz-17]
	_ = x[tcTimeltz-18]
	_ = x[tcTimestampTz-19]
	_ = x[tcTimestampLtz-20]
	_ = x[tcIntervalYm-21]
	_ = x[tcIntervalDs-22]
	_ = x[tcRowid-23]
	_ = x[tcUrowid-24]
	_ = x[tcClob-25]
	_ = x[tcNclob-26]
	_ = x[tcBlob-27]
	_ = x[tcBoolean-28]
	_ = x[tcString-29]
	_ = x[tcNstring-30]
	_ = x[tcLocator-31]
	_ = x[tcNlocator-32]
	_ = x[tcBstring-33]
	_ = x[tcDecimalDigitArray-34]
	_ = x[tcVarchar2-35]
	_ = x[tcTable-45]
	_ = x[tcSmalldecimal-47]
	_ = x[tcAbapstream-48]
	_ = x[tcAbapstruct-49]
	_ = x[tcAarray-50]
	_ = x[tcText-51]
	_ = x[tcShorttext-52]
	_ = x[tcBintext-53]
	_ = x[tcAlphanum-55]
	_ = x[tcLongdate-61]
	_ = x[tcSeconddate-62]
	_ = x[tcDaydate-63]
	_ = x[tcSecondtime-64]
	_ = x[tcClocator-70]
	_ = x[tcBlobDiskReserved-71]
	_ = x[tcClobDiskReserved-72]
	_ = x[tcNclobDiskReserved-73]
	_ = x[tcStGeometry-74]
	_ = x[tcStPoint-75]
	_ = x[tcFixed16-76]
	_ = x[tcAbapItab-77]
	_ = x[tcRecordRowStore-78]
	_ = x[tcRecordColumnStore-79]
	_ = x[tcFixed8-81]
	_ = x[tcFixed12-82]
	_ = x[tcCiphertext-90]
	_ = x[tcSecondtimeNull-176]
	_ = x[TcTableRows-127]
}

const (
	_typeCode_name_0 = "tcNulltcTinyinttcSmallinttcIntegertcBiginttcDecimaltcRealtcDoubletcChartcVarchartcNchartcNvarchartcBinarytcVarbinarytcDatetcTimetcTimestamptcTimetztcTimeltztcTimestampTztcTimestampLtztcIntervalYmtcIntervalDstcRowidtcUrowidtcClobtcNclobtcBlobtcBooleantcStringtcNstringtcLocatortcNlocatortcBstringtcDecimalDigitArraytcVarchar2"
	_typeCode_name_1 = "tcTable"
	_typeCode_name_2 = "tcSmalldecimaltcAbapstreamtcAbapstructtcAarraytcTexttcShorttexttcBintext"
	_typeCode_name_3 = "tcAlphanum"
	_typeCode_name_4 = "tcLongdatetcSeconddatetcDaydatetcSecondtime"
	_typeCode_name_5 = "tcClocatortcBlobDiskReservedtcClobDiskReservedtcNclobDiskReservedtcStGeometrytcStPointtcFixed16tcAbapItabtcRecordRowStoretcRecordColumnStore"
	_typeCode_name_6 = "tcFixed8tcFixed12"
	_typeCode_name_7 = "tcCiphertext"
	_typeCode_name_8 = "TcTableRows"
	_typeCode_name_9 = "tcSecondtimeNull"
)

var (
	_typeCode_index_0 = [...]uint16{0, 6, 15, 25, 34, 42, 51, 57, 65, 71, 80, 87, 97, 105, 116, 122, 128, 139, 147, 156, 169, 183, 195, 207, 214, 222, 228, 235, 241, 250, 258, 267, 276, 286, 295, 314, 324}
	_typeCode_index_2 = [...]uint8{0, 14, 26, 38, 46, 52, 63, 72}
	_typeCode_index_4 = [...]uint8{0, 10, 22, 31, 43}
	_typeCode_index_5 = [...]uint8{0, 10, 28, 46, 65, 77, 86, 95, 105, 121, 140}
	_typeCode_index_6 = [...]uint8{0, 8, 17}
)

func (i typeCode) String() string {
	switch {
	case i <= 35:
		return _typeCode_name_0[_typeCode_index_0[i]:_typeCode_index_0[i+1]]
	case i == 45:
		return _typeCode_name_1
	case 47 <= i && i <= 53:
		i -= 47
		return _typeCode_name_2[_typeCode_index_2[i]:_typeCode_index_2[i+1]]
	case i == 55:
		return _typeCode_name_3
	case 61 <= i && i <= 64:
		i -= 61
		return _typeCode_name_4[_typeCode_index_4[i]:_typeCode_index_4[i+1]]
	case 70 <= i && i <= 79:
		i -= 70
		return _typeCode_name_5[_typeCode_index_5[i]:_typeCode_index_5[i+1]]
	case 81 <= i && i <= 82:
		i -= 81
		return _typeCode_name_6[_typeCode_index_6[i]:_typeCode_index_6[i+1]]
	case i == 90:
		return _typeCode_name_7
	case i == 127:
		return _typeCode_name_8
	case i == 176:
		return _typeCode_name_9
	default:
		return "typeCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[mtNil-0]
	_ = x[MtExecuteDirect-2]
	_ = x[MtPrepare-3]
	_ = x[mtAbapStream-4]
	_ = x[mtXAStart-5]
	_ = x[mtXAJoin-6]
	_ = x[MtExecute-13]
	_ = x[MtWriteLob-16]
	_ = x[MtReadLob-17]
	_ = x[mtFindLob-18]
	_ = x[MtAuthenticate-65]
	_ = x[MtConnect-66]
	_ = x[MtCommit-67]
	_ = x[MtRollback-68]
	_ = x[MtCloseResultset-69]
	_ = x[MtDropStatementID-70]
	_ = x[MtFetchNext-71]
	_ = x[mtFetchAbsolute-72]
	_ = x[mtFetchRelative-73]
	_ = x[mtFetchFirst-74]
	_ = x[mtFetchLast-75]
	_ = x[MtDisconnect-77]
	_ = x[mtExecuteITab-78]
	_ = x[mtFetchNextITab-79]
	_ = x[mtInsertNextITab-80]
	_ = x[mtBatchPrepare-81]
	_ = x[MtDBConnectInfo-82]
	_ = x[mtXopenXAStart-83]
	_ = x[mtXopenXAEnd-84]
	_ = x[mtXopenXAPrepare-85]
	_ = x[mtXopenXACommit-86]
	_ = x[mtXopenXARollback-87]
	_ = x[mtXopenXARecover-88]
	_ = x[mtXopenXAForget-89]
}

const (
	_MessageType_name_0 = "mtNil"
	_MessageType_name_1 = "MtExecuteDirectMtPreparemtAbapStreammtXAStartmtXAJoin"
	_MessageType_name_2 = "MtExecute"
	_MessageType_name_3 = "MtWriteLobMtReadLobmtFindLob"
	_MessageType_name_4 = "MtAuthenticateMtConnectMtCommitMtRollbackMtCloseResultsetMtDropStatementIDMtFetchNextmtFetchAbsolutemtFetchRelativemtFetchFirstmtFetchLast"
	_MessageType_name_5 = "MtDisconnectmtExecuteITabmtFetchNextITabmtInsertNextITabmtBatchPrepareMtDBConnectInfomtXopenXAStartmtXopenXAEndmtXopenXAPreparemtXopenXACommitmtXopenXARollbackmtXopenXARecovermtXopenXAForget"
)

var (
	_MessageType_index_1 = [...]uint8{0, 15, 24, 36, 45, 53}
	_MessageType_index_3 = [...]uint8{0, 10, 19, 28}
	_MessageType_index_4 = [...]uint8{0, 14, 23, 31, 41, 57, 74, 85, 100, 115, 127, 138}
	_MessageType_index_5 = [...]uint8{0, 12, 25, 40, 56, 70, 85, 99, 111, 127, 142, 159, 175, 190}
)

func (i MessageType) String() string {
	switch {
	case i == 0:
		return _MessageType_name_0
	case 2 <= i && i <= 6:
		i -= 2
		return _MessageType_name_1[_MessageType_index_1[i]:_MessageType_index_1[i+1]]
	case i == 13:
		return _MessageType_name_2
	case 16 <= i && i <= 18:
		i -= 16
		return _MessageType_name_3[_MessageType_index_3[i]:_MessageType_index_3[i+1]]
	case 65 <= i && i <= 75:
		i -= 65
		return _MessageType_name_4[_MessageType_index_4[i]:_MessageType_index_4[i+1]]
	case 77 <= i && i <= 89:
		i -= 77
		return _MessageType_name_5[_MessageType_index_5[i]:_MessageType_index_5[i+1]]
	default:
		return "MessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ccoVersion-1]
	_ = x[ccoType-2]
	_ = x[ccoApplicationProgram-3]
}

const _clientContextOption_name = "ccoVersionccoTypeccoApplicationProgram"

var _clientContextOption_index = [...]uint8{0, 10, 17, 38}

func (i clientContextOption) String() string {
	i -= 1
	if i < 0 || i >= clientContextOption(len(_clientContextOption_index)-1) {
		return "clientContextOption(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _clientContextOption_name[_clientContextOption_index[i]:_clientContextOption_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[coConnectionID-1]
	_ = x[coCompleteArrayExecution-2]
	_ = x[coClientLocale-3]
	_ = x[coSupportsLargeBulkOperations-4]
	_ = x[coDistributionEnabled-5]
	_ = x[coPrimaryConnectionID-6]
	_ = x[coPrimaryConnectionHost-7]
	_ = x[coPrimaryConnectionPort-8]
	_ = x[coCompleteDatatypeSupport-9]
	_ = x[coLargeNumberOfParametersSupport-10]
	_ = x[coSystemID-11]
	_ = x[coDataFormatVersion-12]
	_ = x[coAbapVarcharMode-13]
	_ = x[coSelectForUpdateSupported-14]
	_ = x[coClientDistributionMode-15]
	_ = x[coEngineDataFormatVersion-16]
	_ = x[coDistributionProtocolVersion-17]
	_ = x[coSplitBatchCommands-18]
	_ = x[coUseTransactionFlagsOnly-19]
	_ = x[coRowSlotImageParameter-20]
	_ = x[coIgnoreUnknownParts-21]
	_ = x[coTableOutputParameterMetadataSupport-22]
	_ = x[coDataFormatVersion2-23]
	_ = x[coItabParameter-24]
	_ = x[coDescribeTableOutputParameter-25]
	_ = x[coColumnarResultSet-26]
	_ = x[coScrollableResultSet-27]
	_ = x[coClientInfoNullValueSupported-28]
	_ = x[coAssociatedConnectionID-29]
	_ = x[coNonTransactionalPrepare-30]
	_ = x[coFdaEnabled-31]
	_ = x[coOSUser-32]
	_ = x[coRowSlotImageResultSet-33]
	_ = x[coEndianness-34]
	_ = x[coUpdateTopologyAnwhere-35]
	_ = x[coEnableArrayType-36]
	_ = x[coImplicitLobStreaming-37]
	_ = x[coCachedViewProperty-38]
	_ = x[coXOpenXAProtocolSupported-39]
	_ = x[coPrimaryCommitRedirectionSupported-40]
	_ = x[coActiveActiveProtocolVersion-41]
	_ = x[coActiveActiveConnectionOriginSite-42]
	_ = x[coQueryTimeoutSupported-43]
	_ = x[coFullVersionString-44]
	_ = x[coDatabaseName-45]
	_ = x[coBuildPlatform-46]
	_ = x[coImplicitXASessionSupported-47]
	_ = x[coClientSideColumnEncryptionVersion-48]
	_ = x[coCompressionLevelAndFlags-49]
	_ = x[coClientSideReExecutionSupported-50]
	_ = x[coClientReconnectWaitTimeout-51]
	_ = x[coOriginalAnchorConnectionID-52]
	_ = x[coFlagSet1-53]
	_ = x[coTopologyNetworkGroup-54]
	_ = x[coIPAddress-55]
	_ = x[coLRRPingTime-56]
}

const _connectOption_name = "coConnectionIDcoCompleteArrayExecutioncoClientLocalecoSupportsLargeBulkOperationscoDistributionEnabledcoPrimaryConnectionIDcoPrimaryConnectionHostcoPrimaryConnectionPortcoCompleteDatatypeSupportcoLargeNumberOfParametersSupportcoSystemIDcoDataFormatVersioncoAbapVarcharModecoSelectForUpdateSupportedcoClientDistributionModecoEngineDataFormatVersioncoDistributionProtocolVersioncoSplitBatchCommandscoUseTransactionFlagsOnlycoRowSlotImageParametercoIgnoreUnknownPartscoTableOutputParameterMetadataSupportcoDataFormatVersion2coItabParametercoDescribeTableOutputParametercoColumnarResultSetcoScrollableResultSetcoClientInfoNullValueSupportedcoAssociatedConnectionIDcoNonTransactionalPreparecoFdaEnabledcoOSUsercoRowSlotImageResultSetcoEndiannesscoUpdateTopologyAnwherecoEnableArrayTypecoImplicitLobStreamingcoCachedViewPropertycoXOpenXAProtocolSupportedcoPrimaryCommitRedirectionSupportedcoActiveActiveProtocolVersioncoActiveActiveConnectionOriginSitecoQueryTimeoutSupportedcoFullVersionStringcoDatabaseNamecoBuildPlatformcoImplicitXASessionSupportedcoClientSideColumnEncryptionVersioncoCompressionLevelAndFlagscoClientSideReExecutionSupportedcoClientReconnectWaitTimeoutcoOriginalAnchorConnectionIDcoFlagSet1coTopologyNetworkGroupcoIPAddresscoLRRPingTime"

var _connectOption_index = [...]uint16{0, 14, 38, 52, 81, 102, 123, 146, 169, 194, 226, 236, 255, 272, 298, 322, 347, 376, 396, 421, 444, 464, 501, 521, 536, 566, 585, 606, 636, 660, 685, 697, 705, 728, 740, 763, 780, 802, 822, 848, 883, 912, 946, 969, 988, 1002, 1017, 1045, 1080, 1106, 1138, 1166, 1194, 1204, 1226, 1237, 1250}

func (i connectOption) String() string {
	i -= 1
	if i < 0 || i >= connectOption(len(_connectOption_index)-1) {
		return "connectOption(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _connectOption_name[_connectOption_index[i]:_connectOption_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ciDatabaseName-1]
	_ = x[ciHost-2]
	_ = x[ciPort-3]
	_ = x[ciIsConnected-4]
}

const _dbConnectInfoType_name = "ciDatabaseNameciHostciPortciIsConnected"

var _dbConnectInfoType_index = [...]uint8{0, 14, 20, 26, 39}

func (i dbConnectInfoType) String() string {
	i -= 1
	if i < 0 || i >= dbConnectInfoType(len(_dbConnectInfoType_index)-1) {
		return "dbConnectInfoType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _dbConnectInfoType_name[_dbConnectInfoType_index[i]:_dbConnectInfoType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DtUnknown-0]
	_ = x[DtBoolean-1]
	_ = x[DtTinyint-2]
	_ = x[DtSmallint-3]
	_ = x[DtInteger-4]
	_ = x[DtBigint-5]
	_ = x[DtReal-6]
	_ = x[DtDouble-7]
	_ = x[DtDecimal-8]
	_ = x[DtTime-9]
	_ = x[DtString-10]
	_ = x[DtBytes-11]
	_ = x[DtLob-12]
	_ = x[DtRows-13]
}

const _DataType_name = "DtUnknownDtBooleanDtTinyintDtSmallintDtIntegerDtBigintDtRealDtDoubleDtDecimalDtTimeDtStringDtBytesDtLobDtRows"

var _DataType_index = [...]uint8{0, 9, 18, 27, 37, 46, 54, 60, 68, 77, 83, 91, 98, 103, 109}

func (i DataType) String() string {
	if i >= DataType(len(_DataType_index)-1) {
		return "DataType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DataType_name[_DataType_index[i]:_DataType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[fcNil-0]
	_ = x[FcDDL-1]
	_ = x[fcInsert-2]
	_ = x[fcUpdate-3]
	_ = x[fcDelete-4]
	_ = x[fcSelect-5]
	_ = x[fcSelectForUpdate-6]
	_ = x[fcExplain-7]
	_ = x[fcDBProcedureCall-8]
	_ = x[fcDBProcedureCallWithResult-9]
	_ = x[fcFetch-10]
	_ = x[fcCommit-11]
	_ = x[fcRollback-12]
	_ = x[fcSavepoint-13]
	_ = x[fcConnect-14]
	_ = x[fcWriteLob-15]
	_ = x[fcReadLob-16]
	_ = x[fcPing-17]
	_ = x[fcDisconnect-18]
	_ = x[fcCloseCursor-19]
	_ = x[fcFindLob-20]
	_ = x[fcAbapStream-21]
	_ = x[fcXAStart-22]
	_ = x[fcXAJoin-23]
}

const _FunctionCode_name = "fcNilFcDDLfcInsertfcUpdatefcDeletefcSelectfcSelectForUpdatefcExplainfcDBProcedureCallfcDBProcedureCallWithResultfcFetchfcCommitfcRollbackfcSavepointfcConnectfcWriteLobfcReadLobfcPingfcDisconnectfcCloseCursorfcFindLobfcAbapStreamfcXAStartfcXAJoin"

var _FunctionCode_index = [...]uint8{0, 5, 10, 18, 26, 34, 42, 59, 68, 85, 112, 119, 127, 137, 148, 157, 167, 176, 182, 194, 207, 216, 228, 237, 245}

func (i FunctionCode) String() string {
	if i < 0 || i >= FunctionCode(len(_FunctionCode_index)-1) {
		return "FunctionCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FunctionCode_name[_FunctionCode_index[i]:_FunctionCode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[pkNil-0]
	_ = x[PkCommand-3]
	_ = x[PkResultset-5]
	_ = x[pkError-6]
	_ = x[PkStatementID-10]
	_ = x[pkTransactionID-11]
	_ = x[pkRowsAffected-12]
	_ = x[PkResultsetID-13]
	_ = x[PkTopologyInformation-15]
	_ = x[pkTableLocation-16]
	_ = x[PkReadLobRequest-17]
	_ = x[PkReadLobReply-18]
	_ = x[pkAbapIStream-25]
	_ = x[pkAbapOStream-26]
	_ = x[pkCommandInfo-27]
	_ = x[PkWriteLobRequest-28]
	_ = x[PkClientContext-29]
	_ = x[PkWriteLobReply-30]
	_ = x[PkParameters-32]
	_ = x[PkAuthentication-33]
	_ = x[pkSessionContext-34]
	_ = x[PkClientID-35]
	_ = x[pkProfile-38]
	_ = x[PkStatementContext-39]
	_ = x[pkPartitionInformation-40]
	_ = x[PkOutputParameters-41]
	_ = x[PkConnectOptions-42]
	_ = x[pkCommitOptions-43]
	_ = x[pkFetchOptions-44]
	_ = x[PkFetchSize-45]
	_ = x[PkParameterMetadata-47]
	_ = x[PkResultMetadata-48]
	_ = x[pkFindLobRequest-49]
	_ = x[pkFindLobReply-50]
	_ = x[pkItabSHM-51]
	_ = x[pkItabChunkMetadata-53]
	_ = x[pkItabMetadata-55]
	_ = x[pkItabResultChunk-56]
	_ = x[PkClientInfo-57]
	_ = x[pkStreamData-58]
	_ = x[pkOStreamResult-59]
	_ = x[pkFDARequestMetadata-60]
	_ = x[pkFDAReplyMetadata-61]
	_ = x[pkBatchPrepare-62]
	_ = x[pkBatchExecute-63]
	_ = x[PkTransactionFlags-64]
	_ = x[pkRowSlotImageParamMetadata-65]
	_ = x[pkRowSlotImageResultset-66]
	_ = x[PkDBConnectInfo-67]
	_ = x[pkLobFlags-68]
	_ = x[pkResultsetOptions-69]
	_ = x[pkXATransactionInfo-70]
	_ = x[pkSessionVariable-71]
	_ = x[pkWorkLoadReplayContext-72]
	_ = x[pkSQLReplyOptions-73]
}

const _PartKind_name = "pkNilPkCommandPkResultsetpkErrorPkStatementIDpkTransactionIDpkRowsAffectedPkResultsetIDPkTopologyInformationpkTableLocationPkReadLobRequestPkReadLobReplypkAbapIStreampkAbapOStreampkCommandInfoPkWriteLobRequestPkClientContextPkWriteLobReplyPkParametersPkAuthenticationpkSessionContextPkClientIDpkProfilePkStatementContextpkPartitionInformationPkOutputParametersPkConnectOptionspkCommitOptionspkFetchOptionsPkFetchSizePkParameterMetadataPkResultMetadatapkFindLobRequestpkFindLobReplypkItabSHMpkItabChunkMetadatapkItabMetadatapkItabResultChunkPkClientInfopkStreamDatapkOStreamResultpkFDARequestMetadatapkFDAReplyMetadatapkBatchPreparepkBatchExecutePkTransactionFlagspkRowSlotImageParamMetadatapkRowSlotImageResultsetPkDBConnectInfopkLobFlagspkResultsetOptionspkXATransactionInfopkSessionVariablepkWorkLoadReplayContextpkSQLReplyOptions"

var _PartKind_map = map[PartKind]string{
	0:  _PartKind_name[0:5],
	3:  _PartKind_name[5:14],
	5:  _PartKind_name[14:25],
	6:  _PartKind_name[25:32],
	10: _PartKind_name[32:45],
	11: _PartKind_name[45:60],
	12: _PartKind_name[60:74],
	13: _PartKind_name[74:87],
	15: _PartKind_name[87:108],
	16: _PartKind_name[108:123],
	17: _PartKind_name[123:139],
	18: _PartKind_name[139:153],
	25: _PartKind_name[153:166],
	26: _PartKind_name[166:179],
	27: _PartKind_name[179:192],
	28: _PartKind_name[192:209],
	29: _PartKind_name[209:224],
	30: _PartKind_name[224:239],
	32: _PartKind_name[239:251],
	33: _PartKind_name[251:267],
	34: _PartKind_name[267:283],
	35: _PartKind_name[283:293],
	38: _PartKind_name[293:302],
	39: _PartKind_name[302:320],
	40: _PartKind_name[320:342],
	41: _PartKind_name[342:360],
	42: _PartKind_name[360:376],
	43: _PartKind_name[376:391],
	44: _PartKind_name[391:405],
	45: _PartKind_name[405:416],
	47: _PartKind_name[416:435],
	48: _PartKind_name[435:451],
	49: _PartKind_name[451:467],
	50: _PartKind_name[467:481],
	51: _PartKind_name[481:490],
	53: _PartKind_name[490:509],
	55: _PartKind_name[509:523],
	56: _PartKind_name[523:540],
	57: _PartKind_name[540:552],
	58: _PartKind_name[552:564],
	59: _PartKind_name[564:579],
	60: _PartKind_name[579:599],
	61: _PartKind_name[599:617],
	62: _PartKind_name[617:631],
	63: _PartKind_name[631:645],
	64: _PartKind_name[645:663],
	65: _PartKind_name[663:690],
	66: _PartKind_name[690:713],
	67: _PartKind_name[713:728],
	68: _PartKind_name[728:738],
	69: _PartKind_name[738:756],
	70: _PartKind_name[756:775],
	71: _PartKind_name[775:792],
	72: _PartKind_name[792:815],
	73: _PartKind_name[815:832],
}

func (i PartKind) String() string {
	if str, ok := _PartKind_map[i]; ok {
		return str
	}
	return "PartKind(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CdmOff-0]
	_ = x[CdmConnection-1]
	_ = x[CdmStatement-2]
	_ = x[CdmConnectionStatement-3]
}

const _Cdm_name = "CdmOffCdmConnectionCdmStatementCdmConnectionStatement"

var _Cdm_index = [...]uint8{0, 6, 19, 31, 53}

func (i Cdm) String() string {
	if i >= Cdm(len(_Cdm_index)-1) {
		return "Cdm(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Cdm_name[_Cdm_index[i]:_Cdm_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[bigEndian-0]
	_ = x[littleEndian-1]
}

const _endianess_name = "bigEndianlittleEndian"

var _endianess_index = [...]uint8{0, 9, 21}

func (i endianess) String() string {
	if i < 0 || i >= endianess(len(_endianess_index)-1) {
		return "endianess(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _endianess_name[_endianess_index[i]:_endianess_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[skInvalid-0]
	_ = x[skRequest-1]
	_ = x[skReply-2]
	_ = x[skError-5]
}

const (
	_segmentKind_name_0 = "skInvalidskRequestskReply"
	_segmentKind_name_1 = "skError"
)

var (
	_segmentKind_index_0 = [...]uint8{0, 9, 18, 25}
)

func (i segmentKind) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _segmentKind_name_0[_segmentKind_index_0[i]:_segmentKind_index_0[i+1]]
	case i == 5:
		return _segmentKind_name_1
	default:
		return "segmentKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[scStatementSequenceInfo-1]
	_ = x[scServerProcessingTime-2]
	_ = x[scSchemaName-3]
	_ = x[scFlagSet-4]
	_ = x[scQueryTimeout-5]
	_ = x[scClientReconnectionWaitTimeout-6]
	_ = x[scServerCPUTime-7]
	_ = x[scServerMemoryUsage-8]
}

const _statementContextType_name = "scStatementSequenceInfoscServerProcessingTimescSchemaNamescFlagSetscQueryTimeoutscClientReconnectionWaitTimeoutscServerCPUTimescServerMemoryUsage"

var _statementContextType_index = [...]uint8{0, 23, 45, 57, 66, 80, 111, 126, 145}

func (i statementContextType) String() string {
	i -= 1
	if i < 0 || i >= statementContextType(len(_statementContextType_index)-1) {
		return "statementContextType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _statementContextType_name[_statementContextType_index[i]:_statementContextType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[toHostName-1]
	_ = x[toHostPortnumber-2]
	_ = x[toTenantName-3]
	_ = x[toLoadfactor-4]
	_ = x[toVolumeID-5]
	_ = x[toIsPrimary-6]
	_ = x[toIsCurrentSession-7]
	_ = x[toServiceType-8]
	_ = x[toNetworkDomain-9]
	_ = x[toIsStandby-10]
	_ = x[toAllIPAddresses-11]
	_ = x[toAllHostNames-12]
	_ = x[toSiteType-13]
}

const _topologyOption_name = "toHostNametoHostPortnumbertoTenantNametoLoadfactortoVolumeIDtoIsPrimarytoIsCurrentSessiontoServiceTypetoNetworkDomaintoIsStandbytoAllIPAddressestoAllHostNamestoSiteType"

var _topologyOption_index = [...]uint8{0, 10, 26, 38, 50, 60, 71, 89, 102, 117, 128, 144, 158, 168}

func (i topologyOption) String() string {
	i -= 1
	if i < 0 || i >= topologyOption(len(_topologyOption_index)-1) {
		return "topologyOption(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _topologyOption_name[_topologyOption_index[i]:_topologyOption_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StOther-0]
	_ = x[StNameServer-1]
	_ = x[StPreprocessor-2]
	_ = x[StIndexServer-3]
	_ = x[StStatisticsServer-4]
	_ = x[StXSEngine-5]
	_ = x[StReserved6-6]
	_ = x[StCompileServer-7]
	_ = x[StDPServer-8]
	_ = x[StDIServer-9]
	_ = x[StComputeServer-10]
	_ = x[StScriptServer-11]
}

const _ServiceType_name = "StOtherStNameServerStPreprocessorStIndexServerStStatisticsServerStXSEngineStReserved6StCompileServerStDPServerStDIServerStComputeServerStScriptServer"

var _ServiceType_index = [...]uint8{0, 7, 19, 33, 46, 64, 74, 85, 100, 110, 120, 135, 149}

func (i ServiceType) String() string {
	if i < 0 || i >= ServiceType(len(_ServiceType_index)-1) {
		return "ServiceType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ServiceType_name[_ServiceType_index[i]:_ServiceType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tfRolledback-0]
	_ = x[tfCommited-1]
	_ = x[tfNewIsolationLevel-2]
	_ = x[tfDDLCommitmodeChanged-3]
	_ = x[tfWriteTransactionStarted-4]
	_ = x[tfNowriteTransactionStarted-5]
	_ = x[tfSessionClosingTransactionError-6]
	_ = x[tfSessionClosingTransactionErrror-7]
	_ = x[tfReadOnlyMode-8]
}

const _transactionFlagType_name = "tfRolledbacktfCommitedtfNewIsolationLeveltfDDLCommitmodeChangedtfWriteTransactionStartedtfNowriteTransactionStartedtfSessionClosingTransactionErrortfSessionClosingTransactionErrrortfReadOnlyMode"

var _transactionFlagType_index = [...]uint8{0, 12, 22, 41, 63, 88, 115, 147, 180, 194}

func (i transactionFlagType) String() string {
	if i < 0 || i >= transactionFlagType(len(_transactionFlagType_index)-1) {
		return "transactionFlagType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _transactionFlagType_name[_transactionFlagType_index[i]:_transactionFlagType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[dpvBaseline-0]
	_ = x[dpvClientHandlesStatementSequence-1]
}

const _dpv_name = "dpvBaselinedpvClientHandlesStatementSequence"

var _dpv_index = [...]uint8{0, 11, 44}

func (i dpv) String() string {
	if i >= dpv(len(_dpv_index)-1) {
		return "dpv(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _dpv_name[_dpv_index[i]:_dpv_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ltcUndefined-0]
	_ = x[ltcBlob-1]
	_ = x[ltcClob-2]
	_ = x[ltcNclob-3]
}

const _lobTypecode_name = "ltcUndefinedltcBlobltcClobltcNclob"

var _lobTypecode_index = [...]uint8{0, 12, 19, 26, 34}

func (i lobTypecode) String() string {
	if i < 0 || i >= lobTypecode(len(_lobTypecode_index)-1) {
		return "lobTypecode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _lobTypecode_name[_lobTypecode_index[i]:_lobTypecode_index[i+1]]
}
