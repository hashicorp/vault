// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package arrow

{{range .In}}
type {{.Name}}Type struct {}

func (t *{{.Name}}Type) ID() Type            { return {{.Name|upper}} }
func (t *{{.Name}}Type) Name() string        { return "{{.Name|lower}}" }
func (t *{{.Name}}Type) String() string      { return "{{.Name|lower}}" }
func (t *{{.Name}}Type) BitWidth() int       { return {{.Size}} }
func (t *{{.Name}}Type) Bytes() int      { return {{.Name}}SizeBytes }
func (t *{{.Name}}Type) Fingerprint() string { return typeFingerprint(t) }
func (t *{{.Name}}Type) Layout() DataTypeLayout { 
        return DataTypeLayout{Buffers: []BufferSpec{
                SpecBitmap(), SpecFixedWidth({{.Name}}SizeBytes)}}
}

{{end}}

var (
        PrimitiveTypes = struct {
{{range .In}}
                {{.Name}} DataType
{{- end}}
        }{
{{range .In}}
                {{.Name}}: &{{.Name}}Type{},
{{- end}}
        }
)
