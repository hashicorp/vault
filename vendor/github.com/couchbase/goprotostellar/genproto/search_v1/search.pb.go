// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: couchbase/search/v1/search.proto

package search_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchQuery_Operator int32

const (
	MatchQuery_OPERATOR_OR  MatchQuery_Operator = 0
	MatchQuery_OPERATOR_AND MatchQuery_Operator = 1
)

// Enum value maps for MatchQuery_Operator.
var (
	MatchQuery_Operator_name = map[int32]string{
		0: "OPERATOR_OR",
		1: "OPERATOR_AND",
	}
	MatchQuery_Operator_value = map[string]int32{
		"OPERATOR_OR":  0,
		"OPERATOR_AND": 1,
	}
)

func (x MatchQuery_Operator) Enum() *MatchQuery_Operator {
	p := new(MatchQuery_Operator)
	*p = x
	return p
}

func (x MatchQuery_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchQuery_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_search_v1_search_proto_enumTypes[0].Descriptor()
}

func (MatchQuery_Operator) Type() protoreflect.EnumType {
	return &file_couchbase_search_v1_search_proto_enumTypes[0]
}

func (x MatchQuery_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchQuery_Operator.Descriptor instead.
func (MatchQuery_Operator) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{13, 0}
}

type SearchQueryRequest_ScanConsistency int32

const (
	SearchQueryRequest_SCAN_CONSISTENCY_NOT_BOUNDED SearchQueryRequest_ScanConsistency = 0
)

// Enum value maps for SearchQueryRequest_ScanConsistency.
var (
	SearchQueryRequest_ScanConsistency_name = map[int32]string{
		0: "SCAN_CONSISTENCY_NOT_BOUNDED",
	}
	SearchQueryRequest_ScanConsistency_value = map[string]int32{
		"SCAN_CONSISTENCY_NOT_BOUNDED": 0,
	}
)

func (x SearchQueryRequest_ScanConsistency) Enum() *SearchQueryRequest_ScanConsistency {
	p := new(SearchQueryRequest_ScanConsistency)
	*p = x
	return p
}

func (x SearchQueryRequest_ScanConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchQueryRequest_ScanConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_search_v1_search_proto_enumTypes[1].Descriptor()
}

func (SearchQueryRequest_ScanConsistency) Type() protoreflect.EnumType {
	return &file_couchbase_search_v1_search_proto_enumTypes[1]
}

func (x SearchQueryRequest_ScanConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchQueryRequest_ScanConsistency.Descriptor instead.
func (SearchQueryRequest_ScanConsistency) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{34, 0}
}

type SearchQueryRequest_HighlightStyle int32

const (
	SearchQueryRequest_HIGHLIGHT_STYLE_DEFAULT SearchQueryRequest_HighlightStyle = 0
	SearchQueryRequest_HIGHLIGHT_STYLE_HTML    SearchQueryRequest_HighlightStyle = 1
	SearchQueryRequest_HIGHLIGHT_STYLE_ANSI    SearchQueryRequest_HighlightStyle = 2
)

// Enum value maps for SearchQueryRequest_HighlightStyle.
var (
	SearchQueryRequest_HighlightStyle_name = map[int32]string{
		0: "HIGHLIGHT_STYLE_DEFAULT",
		1: "HIGHLIGHT_STYLE_HTML",
		2: "HIGHLIGHT_STYLE_ANSI",
	}
	SearchQueryRequest_HighlightStyle_value = map[string]int32{
		"HIGHLIGHT_STYLE_DEFAULT": 0,
		"HIGHLIGHT_STYLE_HTML":    1,
		"HIGHLIGHT_STYLE_ANSI":    2,
	}
)

func (x SearchQueryRequest_HighlightStyle) Enum() *SearchQueryRequest_HighlightStyle {
	p := new(SearchQueryRequest_HighlightStyle)
	*p = x
	return p
}

func (x SearchQueryRequest_HighlightStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchQueryRequest_HighlightStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_search_v1_search_proto_enumTypes[2].Descriptor()
}

func (SearchQueryRequest_HighlightStyle) Type() protoreflect.EnumType {
	return &file_couchbase_search_v1_search_proto_enumTypes[2]
}

func (x SearchQueryRequest_HighlightStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchQueryRequest_HighlightStyle.Descriptor instead.
func (SearchQueryRequest_HighlightStyle) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{34, 1}
}

type BooleanFieldQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Value bool     `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanFieldQuery) Reset() {
	*x = BooleanFieldQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanFieldQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanFieldQuery) ProtoMessage() {}

func (x *BooleanFieldQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanFieldQuery.ProtoReflect.Descriptor instead.
func (*BooleanFieldQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{0}
}

func (x *BooleanFieldQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *BooleanFieldQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *BooleanFieldQuery) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost   *float32          `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Must    *ConjunctionQuery `protobuf:"bytes,2,opt,name=must,proto3,oneof" json:"must,omitempty"`
	MustNot *DisjunctionQuery `protobuf:"bytes,3,opt,name=must_not,json=mustNot,proto3,oneof" json:"must_not,omitempty"`
	Should  *DisjunctionQuery `protobuf:"bytes,4,opt,name=should,proto3,oneof" json:"should,omitempty"`
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{1}
}

func (x *BooleanQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *BooleanQuery) GetMust() *ConjunctionQuery {
	if x != nil {
		return x.Must
	}
	return nil
}

func (x *BooleanQuery) GetMustNot() *DisjunctionQuery {
	if x != nil {
		return x.MustNot
	}
	return nil
}

func (x *BooleanQuery) GetShould() *DisjunctionQuery {
	if x != nil {
		return x.Should
	}
	return nil
}

type ConjunctionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost   *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Queries []*Query `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ConjunctionQuery) Reset() {
	*x = ConjunctionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConjunctionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConjunctionQuery) ProtoMessage() {}

func (x *ConjunctionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConjunctionQuery.ProtoReflect.Descriptor instead.
func (*ConjunctionQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{2}
}

func (x *ConjunctionQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *ConjunctionQuery) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type DateRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost          *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field          *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	DateTimeParser *string  `protobuf:"bytes,3,opt,name=date_time_parser,json=dateTimeParser,proto3,oneof" json:"date_time_parser,omitempty"`
	StartDate      *string  `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate        *string  `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
}

func (x *DateRangeQuery) Reset() {
	*x = DateRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRangeQuery) ProtoMessage() {}

func (x *DateRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRangeQuery.ProtoReflect.Descriptor instead.
func (*DateRangeQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{3}
}

func (x *DateRangeQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *DateRangeQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *DateRangeQuery) GetDateTimeParser() string {
	if x != nil && x.DateTimeParser != nil {
		return *x.DateTimeParser
	}
	return ""
}

func (x *DateRangeQuery) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *DateRangeQuery) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

type DisjunctionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost   *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Queries []*Query `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	Minimum *uint32  `protobuf:"varint,3,opt,name=minimum,proto3,oneof" json:"minimum,omitempty"`
}

func (x *DisjunctionQuery) Reset() {
	*x = DisjunctionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisjunctionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisjunctionQuery) ProtoMessage() {}

func (x *DisjunctionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisjunctionQuery.ProtoReflect.Descriptor instead.
func (*DisjunctionQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{4}
}

func (x *DisjunctionQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *DisjunctionQuery) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *DisjunctionQuery) GetMinimum() uint32 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

type DocIdQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Ids   []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DocIdQuery) Reset() {
	*x = DocIdQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocIdQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocIdQuery) ProtoMessage() {}

func (x *DocIdQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocIdQuery.ProtoReflect.Descriptor instead.
func (*DocIdQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{5}
}

func (x *DocIdQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *DocIdQuery) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type LatLng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LatLng) Reset() {
	*x = LatLng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLng) ProtoMessage() {}

func (x *LatLng) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLng.ProtoReflect.Descriptor instead.
func (*LatLng) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{6}
}

func (x *LatLng) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLng) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GeoBoundingBoxQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost       *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field       *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	TopLeft     *LatLng  `protobuf:"bytes,3,opt,name=top_left,json=topLeft,proto3" json:"top_left,omitempty"`
	BottomRight *LatLng  `protobuf:"bytes,4,opt,name=bottom_right,json=bottomRight,proto3" json:"bottom_right,omitempty"`
}

func (x *GeoBoundingBoxQuery) Reset() {
	*x = GeoBoundingBoxQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingBoxQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingBoxQuery) ProtoMessage() {}

func (x *GeoBoundingBoxQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingBoxQuery.ProtoReflect.Descriptor instead.
func (*GeoBoundingBoxQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{7}
}

func (x *GeoBoundingBoxQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *GeoBoundingBoxQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *GeoBoundingBoxQuery) GetTopLeft() *LatLng {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *GeoBoundingBoxQuery) GetBottomRight() *LatLng {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

type GeoDistanceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost    *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field    *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Center   *LatLng  `protobuf:"bytes,3,opt,name=center,proto3" json:"center,omitempty"`
	Distance string   `protobuf:"bytes,4,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *GeoDistanceQuery) Reset() {
	*x = GeoDistanceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoDistanceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDistanceQuery) ProtoMessage() {}

func (x *GeoDistanceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDistanceQuery.ProtoReflect.Descriptor instead.
func (*GeoDistanceQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{8}
}

func (x *GeoDistanceQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *GeoDistanceQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *GeoDistanceQuery) GetCenter() *LatLng {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoDistanceQuery) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

type GeoPolygonQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost    *float32  `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field    *string   `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Vertices []*LatLng `protobuf:"bytes,3,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *GeoPolygonQuery) Reset() {
	*x = GeoPolygonQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPolygonQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygonQuery) ProtoMessage() {}

func (x *GeoPolygonQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygonQuery.ProtoReflect.Descriptor instead.
func (*GeoPolygonQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{9}
}

func (x *GeoPolygonQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *GeoPolygonQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *GeoPolygonQuery) GetVertices() []*LatLng {
	if x != nil {
		return x.Vertices
	}
	return nil
}

type MatchAllQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchAllQuery) Reset() {
	*x = MatchAllQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAllQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAllQuery) ProtoMessage() {}

func (x *MatchAllQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAllQuery.ProtoReflect.Descriptor instead.
func (*MatchAllQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{10}
}

type MatchNoneQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchNoneQuery) Reset() {
	*x = MatchNoneQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchNoneQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNoneQuery) ProtoMessage() {}

func (x *MatchNoneQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNoneQuery.ProtoReflect.Descriptor instead.
func (*MatchNoneQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{11}
}

type MatchPhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost    *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field    *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Phrase   string   `protobuf:"bytes,3,opt,name=phrase,proto3" json:"phrase,omitempty"`
	Analyzer *string  `protobuf:"bytes,4,opt,name=analyzer,proto3,oneof" json:"analyzer,omitempty"`
}

func (x *MatchPhraseQuery) Reset() {
	*x = MatchPhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPhraseQuery) ProtoMessage() {}

func (x *MatchPhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPhraseQuery.ProtoReflect.Descriptor instead.
func (*MatchPhraseQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{12}
}

func (x *MatchPhraseQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *MatchPhraseQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MatchPhraseQuery) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

func (x *MatchPhraseQuery) GetAnalyzer() string {
	if x != nil && x.Analyzer != nil {
		return *x.Analyzer
	}
	return ""
}

type MatchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost        *float32             `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field        *string              `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Value        string               `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Analyzer     *string              `protobuf:"bytes,4,opt,name=analyzer,proto3,oneof" json:"analyzer,omitempty"`
	Fuzziness    *uint64              `protobuf:"varint,5,opt,name=fuzziness,proto3,oneof" json:"fuzziness,omitempty"`
	Operator     *MatchQuery_Operator `protobuf:"varint,6,opt,name=operator,proto3,enum=couchbase.search.v1.MatchQuery_Operator,oneof" json:"operator,omitempty"`
	PrefixLength *uint64              `protobuf:"varint,7,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
}

func (x *MatchQuery) Reset() {
	*x = MatchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchQuery) ProtoMessage() {}

func (x *MatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchQuery.ProtoReflect.Descriptor instead.
func (*MatchQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{13}
}

func (x *MatchQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *MatchQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MatchQuery) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MatchQuery) GetAnalyzer() string {
	if x != nil && x.Analyzer != nil {
		return *x.Analyzer
	}
	return ""
}

func (x *MatchQuery) GetFuzziness() uint64 {
	if x != nil && x.Fuzziness != nil {
		return *x.Fuzziness
	}
	return 0
}

func (x *MatchQuery) GetOperator() MatchQuery_Operator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return MatchQuery_OPERATOR_OR
}

func (x *MatchQuery) GetPrefixLength() uint64 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

type NumericRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost        *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field        *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Min          *float32 `protobuf:"fixed32,3,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max          *float32 `protobuf:"fixed32,4,opt,name=max,proto3,oneof" json:"max,omitempty"`
	InclusiveMin *bool    `protobuf:"varint,5,opt,name=inclusive_min,json=inclusiveMin,proto3,oneof" json:"inclusive_min,omitempty"`
	InclusiveMax *bool    `protobuf:"varint,6,opt,name=inclusive_max,json=inclusiveMax,proto3,oneof" json:"inclusive_max,omitempty"`
}

func (x *NumericRangeQuery) Reset() {
	*x = NumericRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRangeQuery) ProtoMessage() {}

func (x *NumericRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRangeQuery.ProtoReflect.Descriptor instead.
func (*NumericRangeQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{14}
}

func (x *NumericRangeQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *NumericRangeQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *NumericRangeQuery) GetMin() float32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *NumericRangeQuery) GetMax() float32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *NumericRangeQuery) GetInclusiveMin() bool {
	if x != nil && x.InclusiveMin != nil {
		return *x.InclusiveMin
	}
	return false
}

func (x *NumericRangeQuery) GetInclusiveMax() bool {
	if x != nil && x.InclusiveMax != nil {
		return *x.InclusiveMax
	}
	return false
}

type PhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Terms []string `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *PhraseQuery) Reset() {
	*x = PhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhraseQuery) ProtoMessage() {}

func (x *PhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhraseQuery.ProtoReflect.Descriptor instead.
func (*PhraseQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{15}
}

func (x *PhraseQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *PhraseQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *PhraseQuery) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

type PrefixQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost  *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field  *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Prefix string   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *PrefixQuery) Reset() {
	*x = PrefixQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixQuery) ProtoMessage() {}

func (x *PrefixQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixQuery.ProtoReflect.Descriptor instead.
func (*PrefixQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{16}
}

func (x *PrefixQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *PrefixQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *PrefixQuery) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type QueryStringQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost       *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	QueryString string   `protobuf:"bytes,3,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
}

func (x *QueryStringQuery) Reset() {
	*x = QueryStringQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStringQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStringQuery) ProtoMessage() {}

func (x *QueryStringQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStringQuery.ProtoReflect.Descriptor instead.
func (*QueryStringQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{17}
}

func (x *QueryStringQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *QueryStringQuery) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

type RegexpQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost  *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field  *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Regexp string   `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *RegexpQuery) Reset() {
	*x = RegexpQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexpQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexpQuery) ProtoMessage() {}

func (x *RegexpQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexpQuery.ProtoReflect.Descriptor instead.
func (*RegexpQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{18}
}

func (x *RegexpQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *RegexpQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *RegexpQuery) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type TermQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost        *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field        *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Term         string   `protobuf:"bytes,3,opt,name=term,proto3" json:"term,omitempty"`
	Fuzziness    *uint64  `protobuf:"varint,4,opt,name=fuzziness,proto3,oneof" json:"fuzziness,omitempty"`
	PrefixLength *uint64  `protobuf:"varint,5,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
}

func (x *TermQuery) Reset() {
	*x = TermQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQuery) ProtoMessage() {}

func (x *TermQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQuery.ProtoReflect.Descriptor instead.
func (*TermQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{19}
}

func (x *TermQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *TermQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *TermQuery) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *TermQuery) GetFuzziness() uint64 {
	if x != nil && x.Fuzziness != nil {
		return *x.Fuzziness
	}
	return 0
}

func (x *TermQuery) GetPrefixLength() uint64 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

type TermRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost        *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field        *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Min          *string  `protobuf:"bytes,5,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max          *string  `protobuf:"bytes,6,opt,name=max,proto3,oneof" json:"max,omitempty"`
	InclusiveMin *bool    `protobuf:"varint,7,opt,name=inclusive_min,json=inclusiveMin,proto3,oneof" json:"inclusive_min,omitempty"`
	InclusiveMax *bool    `protobuf:"varint,8,opt,name=inclusive_max,json=inclusiveMax,proto3,oneof" json:"inclusive_max,omitempty"`
}

func (x *TermRangeQuery) Reset() {
	*x = TermRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermRangeQuery) ProtoMessage() {}

func (x *TermRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermRangeQuery.ProtoReflect.Descriptor instead.
func (*TermRangeQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{20}
}

func (x *TermRangeQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *TermRangeQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *TermRangeQuery) GetMin() string {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return ""
}

func (x *TermRangeQuery) GetMax() string {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return ""
}

func (x *TermRangeQuery) GetInclusiveMin() bool {
	if x != nil && x.InclusiveMin != nil {
		return *x.InclusiveMin
	}
	return false
}

func (x *TermRangeQuery) GetInclusiveMax() bool {
	if x != nil && x.InclusiveMax != nil {
		return *x.InclusiveMax
	}
	return false
}

type WildcardQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost    *float32 `protobuf:"fixed32,1,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	Field    *string  `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	Wildcard string   `protobuf:"bytes,3,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
}

func (x *WildcardQuery) Reset() {
	*x = WildcardQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildcardQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildcardQuery) ProtoMessage() {}

func (x *WildcardQuery) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildcardQuery.ProtoReflect.Descriptor instead.
func (*WildcardQuery) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{21}
}

func (x *WildcardQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *WildcardQuery) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *WildcardQuery) GetWildcard() string {
	if x != nil {
		return x.Wildcard
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*Query_BooleanFieldQuery
	//	*Query_BooleanQuery
	//	*Query_ConjunctionQuery
	//	*Query_DateRangeQuery
	//	*Query_DisjunctionQuery
	//	*Query_DocIdQuery
	//	*Query_GeoBoundingBoxQuery
	//	*Query_GeoDistanceQuery
	//	*Query_GeoPolygonQuery
	//	*Query_MatchAllQuery
	//	*Query_MatchNoneQuery
	//	*Query_MatchPhraseQuery
	//	*Query_MatchQuery
	//	*Query_NumericRangeQuery
	//	*Query_PhraseQuery
	//	*Query_PrefixQuery
	//	*Query_QueryStringQuery
	//	*Query_RegexpQuery
	//	*Query_TermQuery
	//	*Query_TermRangeQuery
	//	*Query_WildcardQuery
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{22}
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetBooleanFieldQuery() *BooleanFieldQuery {
	if x, ok := x.GetQuery().(*Query_BooleanFieldQuery); ok {
		return x.BooleanFieldQuery
	}
	return nil
}

func (x *Query) GetBooleanQuery() *BooleanQuery {
	if x, ok := x.GetQuery().(*Query_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (x *Query) GetConjunctionQuery() *ConjunctionQuery {
	if x, ok := x.GetQuery().(*Query_ConjunctionQuery); ok {
		return x.ConjunctionQuery
	}
	return nil
}

func (x *Query) GetDateRangeQuery() *DateRangeQuery {
	if x, ok := x.GetQuery().(*Query_DateRangeQuery); ok {
		return x.DateRangeQuery
	}
	return nil
}

func (x *Query) GetDisjunctionQuery() *DisjunctionQuery {
	if x, ok := x.GetQuery().(*Query_DisjunctionQuery); ok {
		return x.DisjunctionQuery
	}
	return nil
}

func (x *Query) GetDocIdQuery() *DocIdQuery {
	if x, ok := x.GetQuery().(*Query_DocIdQuery); ok {
		return x.DocIdQuery
	}
	return nil
}

func (x *Query) GetGeoBoundingBoxQuery() *GeoBoundingBoxQuery {
	if x, ok := x.GetQuery().(*Query_GeoBoundingBoxQuery); ok {
		return x.GeoBoundingBoxQuery
	}
	return nil
}

func (x *Query) GetGeoDistanceQuery() *GeoDistanceQuery {
	if x, ok := x.GetQuery().(*Query_GeoDistanceQuery); ok {
		return x.GeoDistanceQuery
	}
	return nil
}

func (x *Query) GetGeoPolygonQuery() *GeoPolygonQuery {
	if x, ok := x.GetQuery().(*Query_GeoPolygonQuery); ok {
		return x.GeoPolygonQuery
	}
	return nil
}

func (x *Query) GetMatchAllQuery() *MatchAllQuery {
	if x, ok := x.GetQuery().(*Query_MatchAllQuery); ok {
		return x.MatchAllQuery
	}
	return nil
}

func (x *Query) GetMatchNoneQuery() *MatchNoneQuery {
	if x, ok := x.GetQuery().(*Query_MatchNoneQuery); ok {
		return x.MatchNoneQuery
	}
	return nil
}

func (x *Query) GetMatchPhraseQuery() *MatchPhraseQuery {
	if x, ok := x.GetQuery().(*Query_MatchPhraseQuery); ok {
		return x.MatchPhraseQuery
	}
	return nil
}

func (x *Query) GetMatchQuery() *MatchQuery {
	if x, ok := x.GetQuery().(*Query_MatchQuery); ok {
		return x.MatchQuery
	}
	return nil
}

func (x *Query) GetNumericRangeQuery() *NumericRangeQuery {
	if x, ok := x.GetQuery().(*Query_NumericRangeQuery); ok {
		return x.NumericRangeQuery
	}
	return nil
}

func (x *Query) GetPhraseQuery() *PhraseQuery {
	if x, ok := x.GetQuery().(*Query_PhraseQuery); ok {
		return x.PhraseQuery
	}
	return nil
}

func (x *Query) GetPrefixQuery() *PrefixQuery {
	if x, ok := x.GetQuery().(*Query_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (x *Query) GetQueryStringQuery() *QueryStringQuery {
	if x, ok := x.GetQuery().(*Query_QueryStringQuery); ok {
		return x.QueryStringQuery
	}
	return nil
}

func (x *Query) GetRegexpQuery() *RegexpQuery {
	if x, ok := x.GetQuery().(*Query_RegexpQuery); ok {
		return x.RegexpQuery
	}
	return nil
}

func (x *Query) GetTermQuery() *TermQuery {
	if x, ok := x.GetQuery().(*Query_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (x *Query) GetTermRangeQuery() *TermRangeQuery {
	if x, ok := x.GetQuery().(*Query_TermRangeQuery); ok {
		return x.TermRangeQuery
	}
	return nil
}

func (x *Query) GetWildcardQuery() *WildcardQuery {
	if x, ok := x.GetQuery().(*Query_WildcardQuery); ok {
		return x.WildcardQuery
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_BooleanFieldQuery struct {
	BooleanFieldQuery *BooleanFieldQuery `protobuf:"bytes,1,opt,name=boolean_field_query,json=booleanFieldQuery,proto3,oneof"`
}

type Query_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,2,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

type Query_ConjunctionQuery struct {
	ConjunctionQuery *ConjunctionQuery `protobuf:"bytes,3,opt,name=conjunction_query,json=conjunctionQuery,proto3,oneof"`
}

type Query_DateRangeQuery struct {
	DateRangeQuery *DateRangeQuery `protobuf:"bytes,4,opt,name=date_range_query,json=dateRangeQuery,proto3,oneof"`
}

type Query_DisjunctionQuery struct {
	DisjunctionQuery *DisjunctionQuery `protobuf:"bytes,5,opt,name=disjunction_query,json=disjunctionQuery,proto3,oneof"`
}

type Query_DocIdQuery struct {
	DocIdQuery *DocIdQuery `protobuf:"bytes,6,opt,name=doc_id_query,json=docIdQuery,proto3,oneof"`
}

type Query_GeoBoundingBoxQuery struct {
	GeoBoundingBoxQuery *GeoBoundingBoxQuery `protobuf:"bytes,7,opt,name=geo_bounding_box_query,json=geoBoundingBoxQuery,proto3,oneof"`
}

type Query_GeoDistanceQuery struct {
	GeoDistanceQuery *GeoDistanceQuery `protobuf:"bytes,8,opt,name=geo_distance_query,json=geoDistanceQuery,proto3,oneof"`
}

type Query_GeoPolygonQuery struct {
	GeoPolygonQuery *GeoPolygonQuery `protobuf:"bytes,9,opt,name=geo_polygon_query,json=geoPolygonQuery,proto3,oneof"`
}

type Query_MatchAllQuery struct {
	MatchAllQuery *MatchAllQuery `protobuf:"bytes,10,opt,name=match_all_query,json=matchAllQuery,proto3,oneof"`
}

type Query_MatchNoneQuery struct {
	MatchNoneQuery *MatchNoneQuery `protobuf:"bytes,11,opt,name=match_none_query,json=matchNoneQuery,proto3,oneof"`
}

type Query_MatchPhraseQuery struct {
	MatchPhraseQuery *MatchPhraseQuery `protobuf:"bytes,12,opt,name=match_phrase_query,json=matchPhraseQuery,proto3,oneof"`
}

type Query_MatchQuery struct {
	MatchQuery *MatchQuery `protobuf:"bytes,13,opt,name=match_query,json=matchQuery,proto3,oneof"`
}

type Query_NumericRangeQuery struct {
	NumericRangeQuery *NumericRangeQuery `protobuf:"bytes,14,opt,name=numeric_range_query,json=numericRangeQuery,proto3,oneof"`
}

type Query_PhraseQuery struct {
	PhraseQuery *PhraseQuery `protobuf:"bytes,15,opt,name=phrase_query,json=phraseQuery,proto3,oneof"`
}

type Query_PrefixQuery struct {
	PrefixQuery *PrefixQuery `protobuf:"bytes,16,opt,name=prefix_query,json=prefixQuery,proto3,oneof"`
}

type Query_QueryStringQuery struct {
	QueryStringQuery *QueryStringQuery `protobuf:"bytes,17,opt,name=query_string_query,json=queryStringQuery,proto3,oneof"`
}

type Query_RegexpQuery struct {
	RegexpQuery *RegexpQuery `protobuf:"bytes,18,opt,name=regexp_query,json=regexpQuery,proto3,oneof"`
}

type Query_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,19,opt,name=term_query,json=termQuery,proto3,oneof"`
}

type Query_TermRangeQuery struct {
	TermRangeQuery *TermRangeQuery `protobuf:"bytes,20,opt,name=term_range_query,json=termRangeQuery,proto3,oneof"`
}

type Query_WildcardQuery struct {
	WildcardQuery *WildcardQuery `protobuf:"bytes,21,opt,name=wildcard_query,json=wildcardQuery,proto3,oneof"`
}

func (*Query_BooleanFieldQuery) isQuery_Query() {}

func (*Query_BooleanQuery) isQuery_Query() {}

func (*Query_ConjunctionQuery) isQuery_Query() {}

func (*Query_DateRangeQuery) isQuery_Query() {}

func (*Query_DisjunctionQuery) isQuery_Query() {}

func (*Query_DocIdQuery) isQuery_Query() {}

func (*Query_GeoBoundingBoxQuery) isQuery_Query() {}

func (*Query_GeoDistanceQuery) isQuery_Query() {}

func (*Query_GeoPolygonQuery) isQuery_Query() {}

func (*Query_MatchAllQuery) isQuery_Query() {}

func (*Query_MatchNoneQuery) isQuery_Query() {}

func (*Query_MatchPhraseQuery) isQuery_Query() {}

func (*Query_MatchQuery) isQuery_Query() {}

func (*Query_NumericRangeQuery) isQuery_Query() {}

func (*Query_PhraseQuery) isQuery_Query() {}

func (*Query_PrefixQuery) isQuery_Query() {}

func (*Query_QueryStringQuery) isQuery_Query() {}

func (*Query_RegexpQuery) isQuery_Query() {}

func (*Query_TermQuery) isQuery_Query() {}

func (*Query_TermRangeQuery) isQuery_Query() {}

func (*Query_WildcardQuery) isQuery_Query() {}

type FieldSorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Descending bool   `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
	Missing    string `protobuf:"bytes,3,opt,name=missing,proto3" json:"missing,omitempty"`
	Mode       string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Type       string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FieldSorting) Reset() {
	*x = FieldSorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSorting) ProtoMessage() {}

func (x *FieldSorting) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSorting.ProtoReflect.Descriptor instead.
func (*FieldSorting) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{23}
}

func (x *FieldSorting) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldSorting) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *FieldSorting) GetMissing() string {
	if x != nil {
		return x.Missing
	}
	return ""
}

func (x *FieldSorting) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *FieldSorting) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GeoDistanceSorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string  `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Descending bool    `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
	Center     *LatLng `protobuf:"bytes,3,opt,name=center,proto3" json:"center,omitempty"`
	Unit       string  `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *GeoDistanceSorting) Reset() {
	*x = GeoDistanceSorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoDistanceSorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDistanceSorting) ProtoMessage() {}

func (x *GeoDistanceSorting) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDistanceSorting.ProtoReflect.Descriptor instead.
func (*GeoDistanceSorting) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{24}
}

func (x *GeoDistanceSorting) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoDistanceSorting) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *GeoDistanceSorting) GetCenter() *LatLng {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoDistanceSorting) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type IdSorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descending bool `protobuf:"varint,1,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *IdSorting) Reset() {
	*x = IdSorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdSorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdSorting) ProtoMessage() {}

func (x *IdSorting) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdSorting.ProtoReflect.Descriptor instead.
func (*IdSorting) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{25}
}

func (x *IdSorting) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

type ScoreSorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descending bool `protobuf:"varint,1,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *ScoreSorting) Reset() {
	*x = ScoreSorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreSorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreSorting) ProtoMessage() {}

func (x *ScoreSorting) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreSorting.ProtoReflect.Descriptor instead.
func (*ScoreSorting) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{26}
}

func (x *ScoreSorting) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

type Sorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sorting:
	//
	//	*Sorting_FieldSorting
	//	*Sorting_GeoDistanceSorting
	//	*Sorting_IdSorting
	//	*Sorting_ScoreSorting
	Sorting isSorting_Sorting `protobuf_oneof:"sorting"`
}

func (x *Sorting) Reset() {
	*x = Sorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sorting) ProtoMessage() {}

func (x *Sorting) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sorting.ProtoReflect.Descriptor instead.
func (*Sorting) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{27}
}

func (m *Sorting) GetSorting() isSorting_Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

func (x *Sorting) GetFieldSorting() *FieldSorting {
	if x, ok := x.GetSorting().(*Sorting_FieldSorting); ok {
		return x.FieldSorting
	}
	return nil
}

func (x *Sorting) GetGeoDistanceSorting() *GeoDistanceSorting {
	if x, ok := x.GetSorting().(*Sorting_GeoDistanceSorting); ok {
		return x.GeoDistanceSorting
	}
	return nil
}

func (x *Sorting) GetIdSorting() *IdSorting {
	if x, ok := x.GetSorting().(*Sorting_IdSorting); ok {
		return x.IdSorting
	}
	return nil
}

func (x *Sorting) GetScoreSorting() *ScoreSorting {
	if x, ok := x.GetSorting().(*Sorting_ScoreSorting); ok {
		return x.ScoreSorting
	}
	return nil
}

type isSorting_Sorting interface {
	isSorting_Sorting()
}

type Sorting_FieldSorting struct {
	FieldSorting *FieldSorting `protobuf:"bytes,1,opt,name=field_sorting,json=fieldSorting,proto3,oneof"`
}

type Sorting_GeoDistanceSorting struct {
	GeoDistanceSorting *GeoDistanceSorting `protobuf:"bytes,2,opt,name=geo_distance_sorting,json=geoDistanceSorting,proto3,oneof"`
}

type Sorting_IdSorting struct {
	IdSorting *IdSorting `protobuf:"bytes,3,opt,name=id_sorting,json=idSorting,proto3,oneof"`
}

type Sorting_ScoreSorting struct {
	ScoreSorting *ScoreSorting `protobuf:"bytes,4,opt,name=score_sorting,json=scoreSorting,proto3,oneof"`
}

func (*Sorting_FieldSorting) isSorting_Sorting() {}

func (*Sorting_GeoDistanceSorting) isSorting_Sorting() {}

func (*Sorting_IdSorting) isSorting_Sorting() {}

func (*Sorting_ScoreSorting) isSorting_Sorting() {}

type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Start *string `protobuf:"bytes,2,opt,name=start,proto3,oneof" json:"start,omitempty"`
	End   *string `protobuf:"bytes,3,opt,name=end,proto3,oneof" json:"end,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{28}
}

func (x *DateRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DateRange) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *DateRange) GetEnd() string {
	if x != nil && x.End != nil {
		return *x.End
	}
	return ""
}

type DateRangeFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string       `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Size       uint32       `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	DateRanges []*DateRange `protobuf:"bytes,3,rep,name=date_ranges,json=dateRanges,proto3" json:"date_ranges,omitempty"`
}

func (x *DateRangeFacet) Reset() {
	*x = DateRangeFacet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRangeFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRangeFacet) ProtoMessage() {}

func (x *DateRangeFacet) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRangeFacet.ProtoReflect.Descriptor instead.
func (*DateRangeFacet) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{29}
}

func (x *DateRangeFacet) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DateRangeFacet) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DateRangeFacet) GetDateRanges() []*DateRange {
	if x != nil {
		return x.DateRanges
	}
	return nil
}

type NumericRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Min  *float32 `protobuf:"fixed32,2,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max  *float32 `protobuf:"fixed32,3,opt,name=max,proto3,oneof" json:"max,omitempty"`
}

func (x *NumericRange) Reset() {
	*x = NumericRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRange) ProtoMessage() {}

func (x *NumericRange) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRange.ProtoReflect.Descriptor instead.
func (*NumericRange) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{30}
}

func (x *NumericRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NumericRange) GetMin() float32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *NumericRange) GetMax() float32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type NumericRangeFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field         string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Size          uint32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	NumericRanges []*NumericRange `protobuf:"bytes,3,rep,name=numeric_ranges,json=numericRanges,proto3" json:"numeric_ranges,omitempty"`
}

func (x *NumericRangeFacet) Reset() {
	*x = NumericRangeFacet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRangeFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRangeFacet) ProtoMessage() {}

func (x *NumericRangeFacet) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRangeFacet.ProtoReflect.Descriptor instead.
func (*NumericRangeFacet) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{31}
}

func (x *NumericRangeFacet) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *NumericRangeFacet) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NumericRangeFacet) GetNumericRanges() []*NumericRange {
	if x != nil {
		return x.NumericRanges
	}
	return nil
}

type TermFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Size  uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *TermFacet) Reset() {
	*x = TermFacet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermFacet) ProtoMessage() {}

func (x *TermFacet) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermFacet.ProtoReflect.Descriptor instead.
func (*TermFacet) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{32}
}

func (x *TermFacet) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermFacet) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Facet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Facet:
	//
	//	*Facet_DateRangeFacet
	//	*Facet_NumericRangeFacet
	//	*Facet_TermFacet
	Facet isFacet_Facet `protobuf_oneof:"facet"`
}

func (x *Facet) Reset() {
	*x = Facet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{33}
}

func (m *Facet) GetFacet() isFacet_Facet {
	if m != nil {
		return m.Facet
	}
	return nil
}

func (x *Facet) GetDateRangeFacet() *DateRangeFacet {
	if x, ok := x.GetFacet().(*Facet_DateRangeFacet); ok {
		return x.DateRangeFacet
	}
	return nil
}

func (x *Facet) GetNumericRangeFacet() *NumericRangeFacet {
	if x, ok := x.GetFacet().(*Facet_NumericRangeFacet); ok {
		return x.NumericRangeFacet
	}
	return nil
}

func (x *Facet) GetTermFacet() *TermFacet {
	if x, ok := x.GetFacet().(*Facet_TermFacet); ok {
		return x.TermFacet
	}
	return nil
}

type isFacet_Facet interface {
	isFacet_Facet()
}

type Facet_DateRangeFacet struct {
	DateRangeFacet *DateRangeFacet `protobuf:"bytes,1,opt,name=date_range_facet,json=dateRangeFacet,proto3,oneof"`
}

type Facet_NumericRangeFacet struct {
	NumericRangeFacet *NumericRangeFacet `protobuf:"bytes,2,opt,name=numeric_range_facet,json=numericRangeFacet,proto3,oneof"`
}

type Facet_TermFacet struct {
	TermFacet *TermFacet `protobuf:"bytes,3,opt,name=term_facet,json=termFacet,proto3,oneof"`
}

func (*Facet_DateRangeFacet) isFacet_Facet() {}

func (*Facet_NumericRangeFacet) isFacet_Facet() {}

func (*Facet_TermFacet) isFacet_Facet() {}

type SearchQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName          string                             `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Query              *Query                             `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	ScanConsistency    SearchQueryRequest_ScanConsistency `protobuf:"varint,3,opt,name=scan_consistency,json=scanConsistency,proto3,enum=couchbase.search.v1.SearchQueryRequest_ScanConsistency" json:"scan_consistency,omitempty"`
	Limit              uint32                             `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Skip               uint32                             `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
	IncludeExplanation bool                               `protobuf:"varint,6,opt,name=include_explanation,json=includeExplanation,proto3" json:"include_explanation,omitempty"`
	HighlightStyle     SearchQueryRequest_HighlightStyle  `protobuf:"varint,7,opt,name=highlight_style,json=highlightStyle,proto3,enum=couchbase.search.v1.SearchQueryRequest_HighlightStyle" json:"highlight_style,omitempty"`
	HighlightFields    []string                           `protobuf:"bytes,8,rep,name=highlight_fields,json=highlightFields,proto3" json:"highlight_fields,omitempty"`
	Fields             []string                           `protobuf:"bytes,9,rep,name=fields,proto3" json:"fields,omitempty"`
	Sort               []*Sorting                         `protobuf:"bytes,10,rep,name=sort,proto3" json:"sort,omitempty"`
	DisableScoring     bool                               `protobuf:"varint,11,opt,name=disable_scoring,json=disableScoring,proto3" json:"disable_scoring,omitempty"`
	Collections        []string                           `protobuf:"bytes,12,rep,name=collections,proto3" json:"collections,omitempty"`
	IncludeLocations   bool                               `protobuf:"varint,13,opt,name=include_locations,json=includeLocations,proto3" json:"include_locations,omitempty"`
	Facets             map[string]*Facet                  `protobuf:"bytes,14,rep,name=facets,proto3" json:"facets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BucketName         *string                            `protobuf:"bytes,15,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName          *string                            `protobuf:"bytes,16,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *SearchQueryRequest) Reset() {
	*x = SearchQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryRequest) ProtoMessage() {}

func (x *SearchQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryRequest.ProtoReflect.Descriptor instead.
func (*SearchQueryRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{34}
}

func (x *SearchQueryRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SearchQueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchQueryRequest) GetScanConsistency() SearchQueryRequest_ScanConsistency {
	if x != nil {
		return x.ScanConsistency
	}
	return SearchQueryRequest_SCAN_CONSISTENCY_NOT_BOUNDED
}

func (x *SearchQueryRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchQueryRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *SearchQueryRequest) GetIncludeExplanation() bool {
	if x != nil {
		return x.IncludeExplanation
	}
	return false
}

func (x *SearchQueryRequest) GetHighlightStyle() SearchQueryRequest_HighlightStyle {
	if x != nil {
		return x.HighlightStyle
	}
	return SearchQueryRequest_HIGHLIGHT_STYLE_DEFAULT
}

func (x *SearchQueryRequest) GetHighlightFields() []string {
	if x != nil {
		return x.HighlightFields
	}
	return nil
}

func (x *SearchQueryRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchQueryRequest) GetSort() []*Sorting {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchQueryRequest) GetDisableScoring() bool {
	if x != nil {
		return x.DisableScoring
	}
	return false
}

func (x *SearchQueryRequest) GetCollections() []string {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *SearchQueryRequest) GetIncludeLocations() bool {
	if x != nil {
		return x.IncludeLocations
	}
	return false
}

func (x *SearchQueryRequest) GetFacets() map[string]*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *SearchQueryRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *SearchQueryRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type SearchQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits     []*SearchQueryResponse_SearchQueryRow       `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Facets   map[string]*SearchQueryResponse_FacetResult `protobuf:"bytes,2,rep,name=facets,proto3" json:"facets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetaData *SearchQueryResponse_MetaData               `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
}

func (x *SearchQueryResponse) Reset() {
	*x = SearchQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse) ProtoMessage() {}

func (x *SearchQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35}
}

func (x *SearchQueryResponse) GetHits() []*SearchQueryResponse_SearchQueryRow {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchQueryResponse) GetFacets() map[string]*SearchQueryResponse_FacetResult {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *SearchQueryResponse) GetMetaData() *SearchQueryResponse_MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type SearchQueryResponse_SearchQueryRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score       float64                                  `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Index       string                                   `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	Explanation []byte                                   `protobuf:"bytes,4,opt,name=explanation,proto3" json:"explanation,omitempty"`
	Locations   []*SearchQueryResponse_Location          `protobuf:"bytes,5,rep,name=locations,proto3" json:"locations,omitempty"`
	Fragments   map[string]*SearchQueryResponse_Fragment `protobuf:"bytes,6,rep,name=fragments,proto3" json:"fragments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fields      map[string][]byte                        `protobuf:"bytes,7,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchQueryResponse_SearchQueryRow) Reset() {
	*x = SearchQueryResponse_SearchQueryRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_SearchQueryRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_SearchQueryRow) ProtoMessage() {}

func (x *SearchQueryResponse_SearchQueryRow) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_SearchQueryRow.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_SearchQueryRow) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 0}
}

func (x *SearchQueryResponse_SearchQueryRow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchQueryResponse_SearchQueryRow) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SearchQueryResponse_SearchQueryRow) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *SearchQueryResponse_SearchQueryRow) GetExplanation() []byte {
	if x != nil {
		return x.Explanation
	}
	return nil
}

func (x *SearchQueryResponse_SearchQueryRow) GetLocations() []*SearchQueryResponse_Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *SearchQueryResponse_SearchQueryRow) GetFragments() map[string]*SearchQueryResponse_Fragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *SearchQueryResponse_SearchQueryRow) GetFields() map[string][]byte {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SearchQueryResponse_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field          string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Term           string   `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	Position       uint32   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Start          uint32   `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End            uint32   `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	ArrayPositions []uint32 `protobuf:"varint,6,rep,packed,name=array_positions,json=arrayPositions,proto3" json:"array_positions,omitempty"`
}

func (x *SearchQueryResponse_Location) Reset() {
	*x = SearchQueryResponse_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_Location) ProtoMessage() {}

func (x *SearchQueryResponse_Location) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_Location.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_Location) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 1}
}

func (x *SearchQueryResponse_Location) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchQueryResponse_Location) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SearchQueryResponse_Location) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SearchQueryResponse_Location) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SearchQueryResponse_Location) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SearchQueryResponse_Location) GetArrayPositions() []uint32 {
	if x != nil {
		return x.ArrayPositions
	}
	return nil
}

type SearchQueryResponse_Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []string `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *SearchQueryResponse_Fragment) Reset() {
	*x = SearchQueryResponse_Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_Fragment) ProtoMessage() {}

func (x *SearchQueryResponse_Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_Fragment.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_Fragment) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 2}
}

func (x *SearchQueryResponse_Fragment) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

type SearchQueryResponse_FacetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SearchFacet:
	//
	//	*SearchQueryResponse_FacetResult_TermFacet
	//	*SearchQueryResponse_FacetResult_DateRangeFacet
	//	*SearchQueryResponse_FacetResult_NumericRangeFacet
	SearchFacet isSearchQueryResponse_FacetResult_SearchFacet `protobuf_oneof:"search_facet"`
}

func (x *SearchQueryResponse_FacetResult) Reset() {
	*x = SearchQueryResponse_FacetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_FacetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_FacetResult) ProtoMessage() {}

func (x *SearchQueryResponse_FacetResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_FacetResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_FacetResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 3}
}

func (m *SearchQueryResponse_FacetResult) GetSearchFacet() isSearchQueryResponse_FacetResult_SearchFacet {
	if m != nil {
		return m.SearchFacet
	}
	return nil
}

func (x *SearchQueryResponse_FacetResult) GetTermFacet() *SearchQueryResponse_TermFacetResult {
	if x, ok := x.GetSearchFacet().(*SearchQueryResponse_FacetResult_TermFacet); ok {
		return x.TermFacet
	}
	return nil
}

func (x *SearchQueryResponse_FacetResult) GetDateRangeFacet() *SearchQueryResponse_DateRangeFacetResult {
	if x, ok := x.GetSearchFacet().(*SearchQueryResponse_FacetResult_DateRangeFacet); ok {
		return x.DateRangeFacet
	}
	return nil
}

func (x *SearchQueryResponse_FacetResult) GetNumericRangeFacet() *SearchQueryResponse_NumericRangeFacetResult {
	if x, ok := x.GetSearchFacet().(*SearchQueryResponse_FacetResult_NumericRangeFacet); ok {
		return x.NumericRangeFacet
	}
	return nil
}

type isSearchQueryResponse_FacetResult_SearchFacet interface {
	isSearchQueryResponse_FacetResult_SearchFacet()
}

type SearchQueryResponse_FacetResult_TermFacet struct {
	TermFacet *SearchQueryResponse_TermFacetResult `protobuf:"bytes,1,opt,name=term_facet,json=termFacet,proto3,oneof"`
}

type SearchQueryResponse_FacetResult_DateRangeFacet struct {
	DateRangeFacet *SearchQueryResponse_DateRangeFacetResult `protobuf:"bytes,2,opt,name=date_range_facet,json=dateRangeFacet,proto3,oneof"`
}

type SearchQueryResponse_FacetResult_NumericRangeFacet struct {
	NumericRangeFacet *SearchQueryResponse_NumericRangeFacetResult `protobuf:"bytes,3,opt,name=numeric_range_facet,json=numericRangeFacet,proto3,oneof"`
}

func (*SearchQueryResponse_FacetResult_TermFacet) isSearchQueryResponse_FacetResult_SearchFacet() {}

func (*SearchQueryResponse_FacetResult_DateRangeFacet) isSearchQueryResponse_FacetResult_SearchFacet() {
}

func (*SearchQueryResponse_FacetResult_NumericRangeFacet) isSearchQueryResponse_FacetResult_SearchFacet() {
}

type SearchQueryResponse_TermResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Size  uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SearchQueryResponse_TermResult) Reset() {
	*x = SearchQueryResponse_TermResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_TermResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_TermResult) ProtoMessage() {}

func (x *SearchQueryResponse_TermResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_TermResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_TermResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 4}
}

func (x *SearchQueryResponse_TermResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchQueryResponse_TermResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchQueryResponse_TermResult) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SearchQueryResponse_TermFacetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   string                            `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Total   int64                             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Missing int64                             `protobuf:"varint,4,opt,name=missing,proto3" json:"missing,omitempty"`
	Other   int64                             `protobuf:"varint,5,opt,name=other,proto3" json:"other,omitempty"`
	Terms   []*SearchQueryResponse_TermResult `protobuf:"bytes,6,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *SearchQueryResponse_TermFacetResult) Reset() {
	*x = SearchQueryResponse_TermFacetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_TermFacetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_TermFacetResult) ProtoMessage() {}

func (x *SearchQueryResponse_TermFacetResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_TermFacetResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_TermFacetResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 5}
}

func (x *SearchQueryResponse_TermFacetResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchQueryResponse_TermFacetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchQueryResponse_TermFacetResult) GetMissing() int64 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *SearchQueryResponse_TermFacetResult) GetOther() int64 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *SearchQueryResponse_TermFacetResult) GetTerms() []*SearchQueryResponse_TermResult {
	if x != nil {
		return x.Terms
	}
	return nil
}

type SearchQueryResponse_DateRangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size  uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SearchQueryResponse_DateRangeResult) Reset() {
	*x = SearchQueryResponse_DateRangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_DateRangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_DateRangeResult) ProtoMessage() {}

func (x *SearchQueryResponse_DateRangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_DateRangeResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_DateRangeResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 6}
}

func (x *SearchQueryResponse_DateRangeResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchQueryResponse_DateRangeResult) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQueryResponse_DateRangeResult) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SearchQueryResponse_DateRangeResult) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type SearchQueryResponse_DateRangeFacetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string                                 `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Total      int64                                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Missing    int64                                  `protobuf:"varint,4,opt,name=missing,proto3" json:"missing,omitempty"`
	Other      int64                                  `protobuf:"varint,5,opt,name=other,proto3" json:"other,omitempty"`
	DateRanges []*SearchQueryResponse_DateRangeResult `protobuf:"bytes,6,rep,name=date_ranges,json=dateRanges,proto3" json:"date_ranges,omitempty"`
}

func (x *SearchQueryResponse_DateRangeFacetResult) Reset() {
	*x = SearchQueryResponse_DateRangeFacetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_DateRangeFacetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_DateRangeFacetResult) ProtoMessage() {}

func (x *SearchQueryResponse_DateRangeFacetResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_DateRangeFacetResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_DateRangeFacetResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 7}
}

func (x *SearchQueryResponse_DateRangeFacetResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchQueryResponse_DateRangeFacetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchQueryResponse_DateRangeFacetResult) GetMissing() int64 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *SearchQueryResponse_DateRangeFacetResult) GetOther() int64 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *SearchQueryResponse_DateRangeFacetResult) GetDateRanges() []*SearchQueryResponse_DateRangeResult {
	if x != nil {
		return x.DateRanges
	}
	return nil
}

type SearchQueryResponse_NumericRangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Min  uint64 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  uint64 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *SearchQueryResponse_NumericRangeResult) Reset() {
	*x = SearchQueryResponse_NumericRangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_NumericRangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_NumericRangeResult) ProtoMessage() {}

func (x *SearchQueryResponse_NumericRangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_NumericRangeResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_NumericRangeResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 8}
}

func (x *SearchQueryResponse_NumericRangeResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchQueryResponse_NumericRangeResult) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchQueryResponse_NumericRangeResult) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SearchQueryResponse_NumericRangeResult) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type SearchQueryResponse_NumericRangeFacetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field         string                                    `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Total         int64                                     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Missing       int64                                     `protobuf:"varint,4,opt,name=missing,proto3" json:"missing,omitempty"`
	Other         int64                                     `protobuf:"varint,5,opt,name=other,proto3" json:"other,omitempty"`
	NumericRanges []*SearchQueryResponse_NumericRangeResult `protobuf:"bytes,6,rep,name=numeric_ranges,json=numericRanges,proto3" json:"numeric_ranges,omitempty"`
}

func (x *SearchQueryResponse_NumericRangeFacetResult) Reset() {
	*x = SearchQueryResponse_NumericRangeFacetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_NumericRangeFacetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_NumericRangeFacetResult) ProtoMessage() {}

func (x *SearchQueryResponse_NumericRangeFacetResult) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_NumericRangeFacetResult.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_NumericRangeFacetResult) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 9}
}

func (x *SearchQueryResponse_NumericRangeFacetResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchQueryResponse_NumericRangeFacetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchQueryResponse_NumericRangeFacetResult) GetMissing() int64 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *SearchQueryResponse_NumericRangeFacetResult) GetOther() int64 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *SearchQueryResponse_NumericRangeFacetResult) GetNumericRanges() []*SearchQueryResponse_NumericRangeResult {
	if x != nil {
		return x.NumericRanges
	}
	return nil
}

type SearchQueryResponse_MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *SearchQueryResponse_SearchMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Errors  map[string]string                  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchQueryResponse_MetaData) Reset() {
	*x = SearchQueryResponse_MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_MetaData) ProtoMessage() {}

func (x *SearchQueryResponse_MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_MetaData.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_MetaData) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 10}
}

func (x *SearchQueryResponse_MetaData) GetMetrics() *SearchQueryResponse_SearchMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SearchQueryResponse_MetaData) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SearchQueryResponse_SearchMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionTime         *durationpb.Duration `protobuf:"bytes,1,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	TotalRows             uint64               `protobuf:"varint,2,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	MaxScore              float64              `protobuf:"fixed64,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	TotalPartitionCount   uint64               `protobuf:"varint,4,opt,name=total_partition_count,json=totalPartitionCount,proto3" json:"total_partition_count,omitempty"`
	SuccessPartitionCount uint64               `protobuf:"varint,5,opt,name=success_partition_count,json=successPartitionCount,proto3" json:"success_partition_count,omitempty"`
	ErrorPartitionCount   uint64               `protobuf:"varint,6,opt,name=error_partition_count,json=errorPartitionCount,proto3" json:"error_partition_count,omitempty"`
}

func (x *SearchQueryResponse_SearchMetrics) Reset() {
	*x = SearchQueryResponse_SearchMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_search_v1_search_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQueryResponse_SearchMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQueryResponse_SearchMetrics) ProtoMessage() {}

func (x *SearchQueryResponse_SearchMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_search_v1_search_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQueryResponse_SearchMetrics.ProtoReflect.Descriptor instead.
func (*SearchQueryResponse_SearchMetrics) Descriptor() ([]byte, []int) {
	return file_couchbase_search_v1_search_proto_rawDescGZIP(), []int{35, 11}
}

func (x *SearchQueryResponse_SearchMetrics) GetExecutionTime() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTime
	}
	return nil
}

func (x *SearchQueryResponse_SearchMetrics) GetTotalRows() uint64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *SearchQueryResponse_SearchMetrics) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SearchQueryResponse_SearchMetrics) GetTotalPartitionCount() uint64 {
	if x != nil {
		return x.TotalPartitionCount
	}
	return 0
}

func (x *SearchQueryResponse_SearchMetrics) GetSuccessPartitionCount() uint64 {
	if x != nil {
		return x.SuccessPartitionCount
	}
	return 0
}

func (x *SearchQueryResponse_SearchMetrics) GetErrorPartitionCount() uint64 {
	if x != nil {
		return x.ErrorPartitionCount
	}
	return 0
}

var File_couchbase_search_v1_search_proto protoreflect.FileDescriptor

var file_couchbase_search_v1_search_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9f, 0x02,
	0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x75, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x01,
	0x52, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x75, 0x73, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x22,
	0x6d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xfe,
	0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x43, 0x0a, 0x0a, 0x44, 0x6f,
	0x63, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xad, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x94, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0x8e, 0x03, 0x0a,
	0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x09, 0x66,
	0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x04, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x22, 0x2d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x93, 0x02,
	0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x22, 0x6d, 0x0a, 0x0b, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x5a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22,
	0x6f, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0xd6, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x09, 0x66,
	0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x75,
	0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x54, 0x65,
	0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x78, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x75, 0x0a, 0x0d,
	0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0xa1, 0x0d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a,
	0x13, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6a,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x16, 0x67, 0x65, 0x6f, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x13, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x12, 0x67, 0x65, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x67,
	0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f,
	0x67, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55,
	0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x55, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3f, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x4f, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0d, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a,
	0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2b, 0x0a, 0x09, 0x49, 0x64, 0x53, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xc6, 0x02, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x48, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x14, 0x67, 0x65, 0x6f,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x69, 0x64,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x63, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e,
	0x64, 0x22, 0x7b, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78,
	0x22, 0x87, 0x01, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x65,
	0x72, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65,
	0x72, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74,
	0x22, 0x97, 0x08, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x55, 0x0a, 0x0b,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x00, 0x22, 0x61, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x49,
	0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x49, 0x47, 0x48, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x49, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x17, 0x0a, 0x13, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x1a, 0xae, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77,
	0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x6f, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xa1, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xd7, 0x02,
	0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a,
	0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x65, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x12, 0x72, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x1a, 0x4a, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x1a, 0x99, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x1a, 0xd3, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x60, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0xdf, 0x01, 0x0a, 0x17, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x62, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xee, 0x01, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xad, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x6f, 0x0a, 0x0b, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32, 0x75, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x42, 0xf2, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x76, 0x31, 0xaa, 0x02, 0x20, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2a, 0x43, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x5c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x2e, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x3a,
	0x3a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_couchbase_search_v1_search_proto_rawDescOnce sync.Once
	file_couchbase_search_v1_search_proto_rawDescData = file_couchbase_search_v1_search_proto_rawDesc
)

func file_couchbase_search_v1_search_proto_rawDescGZIP() []byte {
	file_couchbase_search_v1_search_proto_rawDescOnce.Do(func() {
		file_couchbase_search_v1_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_couchbase_search_v1_search_proto_rawDescData)
	})
	return file_couchbase_search_v1_search_proto_rawDescData
}

var file_couchbase_search_v1_search_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_couchbase_search_v1_search_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_couchbase_search_v1_search_proto_goTypes = []interface{}{
	(MatchQuery_Operator)(0),                            // 0: couchbase.search.v1.MatchQuery.Operator
	(SearchQueryRequest_ScanConsistency)(0),             // 1: couchbase.search.v1.SearchQueryRequest.ScanConsistency
	(SearchQueryRequest_HighlightStyle)(0),              // 2: couchbase.search.v1.SearchQueryRequest.HighlightStyle
	(*BooleanFieldQuery)(nil),                           // 3: couchbase.search.v1.BooleanFieldQuery
	(*BooleanQuery)(nil),                                // 4: couchbase.search.v1.BooleanQuery
	(*ConjunctionQuery)(nil),                            // 5: couchbase.search.v1.ConjunctionQuery
	(*DateRangeQuery)(nil),                              // 6: couchbase.search.v1.DateRangeQuery
	(*DisjunctionQuery)(nil),                            // 7: couchbase.search.v1.DisjunctionQuery
	(*DocIdQuery)(nil),                                  // 8: couchbase.search.v1.DocIdQuery
	(*LatLng)(nil),                                      // 9: couchbase.search.v1.LatLng
	(*GeoBoundingBoxQuery)(nil),                         // 10: couchbase.search.v1.GeoBoundingBoxQuery
	(*GeoDistanceQuery)(nil),                            // 11: couchbase.search.v1.GeoDistanceQuery
	(*GeoPolygonQuery)(nil),                             // 12: couchbase.search.v1.GeoPolygonQuery
	(*MatchAllQuery)(nil),                               // 13: couchbase.search.v1.MatchAllQuery
	(*MatchNoneQuery)(nil),                              // 14: couchbase.search.v1.MatchNoneQuery
	(*MatchPhraseQuery)(nil),                            // 15: couchbase.search.v1.MatchPhraseQuery
	(*MatchQuery)(nil),                                  // 16: couchbase.search.v1.MatchQuery
	(*NumericRangeQuery)(nil),                           // 17: couchbase.search.v1.NumericRangeQuery
	(*PhraseQuery)(nil),                                 // 18: couchbase.search.v1.PhraseQuery
	(*PrefixQuery)(nil),                                 // 19: couchbase.search.v1.PrefixQuery
	(*QueryStringQuery)(nil),                            // 20: couchbase.search.v1.QueryStringQuery
	(*RegexpQuery)(nil),                                 // 21: couchbase.search.v1.RegexpQuery
	(*TermQuery)(nil),                                   // 22: couchbase.search.v1.TermQuery
	(*TermRangeQuery)(nil),                              // 23: couchbase.search.v1.TermRangeQuery
	(*WildcardQuery)(nil),                               // 24: couchbase.search.v1.WildcardQuery
	(*Query)(nil),                                       // 25: couchbase.search.v1.Query
	(*FieldSorting)(nil),                                // 26: couchbase.search.v1.FieldSorting
	(*GeoDistanceSorting)(nil),                          // 27: couchbase.search.v1.GeoDistanceSorting
	(*IdSorting)(nil),                                   // 28: couchbase.search.v1.IdSorting
	(*ScoreSorting)(nil),                                // 29: couchbase.search.v1.ScoreSorting
	(*Sorting)(nil),                                     // 30: couchbase.search.v1.Sorting
	(*DateRange)(nil),                                   // 31: couchbase.search.v1.DateRange
	(*DateRangeFacet)(nil),                              // 32: couchbase.search.v1.DateRangeFacet
	(*NumericRange)(nil),                                // 33: couchbase.search.v1.NumericRange
	(*NumericRangeFacet)(nil),                           // 34: couchbase.search.v1.NumericRangeFacet
	(*TermFacet)(nil),                                   // 35: couchbase.search.v1.TermFacet
	(*Facet)(nil),                                       // 36: couchbase.search.v1.Facet
	(*SearchQueryRequest)(nil),                          // 37: couchbase.search.v1.SearchQueryRequest
	(*SearchQueryResponse)(nil),                         // 38: couchbase.search.v1.SearchQueryResponse
	nil,                                                 // 39: couchbase.search.v1.SearchQueryRequest.FacetsEntry
	(*SearchQueryResponse_SearchQueryRow)(nil),          // 40: couchbase.search.v1.SearchQueryResponse.SearchQueryRow
	(*SearchQueryResponse_Location)(nil),                // 41: couchbase.search.v1.SearchQueryResponse.Location
	(*SearchQueryResponse_Fragment)(nil),                // 42: couchbase.search.v1.SearchQueryResponse.Fragment
	(*SearchQueryResponse_FacetResult)(nil),             // 43: couchbase.search.v1.SearchQueryResponse.FacetResult
	(*SearchQueryResponse_TermResult)(nil),              // 44: couchbase.search.v1.SearchQueryResponse.TermResult
	(*SearchQueryResponse_TermFacetResult)(nil),         // 45: couchbase.search.v1.SearchQueryResponse.TermFacetResult
	(*SearchQueryResponse_DateRangeResult)(nil),         // 46: couchbase.search.v1.SearchQueryResponse.DateRangeResult
	(*SearchQueryResponse_DateRangeFacetResult)(nil),    // 47: couchbase.search.v1.SearchQueryResponse.DateRangeFacetResult
	(*SearchQueryResponse_NumericRangeResult)(nil),      // 48: couchbase.search.v1.SearchQueryResponse.NumericRangeResult
	(*SearchQueryResponse_NumericRangeFacetResult)(nil), // 49: couchbase.search.v1.SearchQueryResponse.NumericRangeFacetResult
	(*SearchQueryResponse_MetaData)(nil),                // 50: couchbase.search.v1.SearchQueryResponse.MetaData
	(*SearchQueryResponse_SearchMetrics)(nil),           // 51: couchbase.search.v1.SearchQueryResponse.SearchMetrics
	nil,                           // 52: couchbase.search.v1.SearchQueryResponse.FacetsEntry
	nil,                           // 53: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.FragmentsEntry
	nil,                           // 54: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.FieldsEntry
	nil,                           // 55: couchbase.search.v1.SearchQueryResponse.MetaData.ErrorsEntry
	(*timestamppb.Timestamp)(nil), // 56: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 57: google.protobuf.Duration
}
var file_couchbase_search_v1_search_proto_depIdxs = []int32{
	5,  // 0: couchbase.search.v1.BooleanQuery.must:type_name -> couchbase.search.v1.ConjunctionQuery
	7,  // 1: couchbase.search.v1.BooleanQuery.must_not:type_name -> couchbase.search.v1.DisjunctionQuery
	7,  // 2: couchbase.search.v1.BooleanQuery.should:type_name -> couchbase.search.v1.DisjunctionQuery
	25, // 3: couchbase.search.v1.ConjunctionQuery.queries:type_name -> couchbase.search.v1.Query
	25, // 4: couchbase.search.v1.DisjunctionQuery.queries:type_name -> couchbase.search.v1.Query
	9,  // 5: couchbase.search.v1.GeoBoundingBoxQuery.top_left:type_name -> couchbase.search.v1.LatLng
	9,  // 6: couchbase.search.v1.GeoBoundingBoxQuery.bottom_right:type_name -> couchbase.search.v1.LatLng
	9,  // 7: couchbase.search.v1.GeoDistanceQuery.center:type_name -> couchbase.search.v1.LatLng
	9,  // 8: couchbase.search.v1.GeoPolygonQuery.vertices:type_name -> couchbase.search.v1.LatLng
	0,  // 9: couchbase.search.v1.MatchQuery.operator:type_name -> couchbase.search.v1.MatchQuery.Operator
	3,  // 10: couchbase.search.v1.Query.boolean_field_query:type_name -> couchbase.search.v1.BooleanFieldQuery
	4,  // 11: couchbase.search.v1.Query.boolean_query:type_name -> couchbase.search.v1.BooleanQuery
	5,  // 12: couchbase.search.v1.Query.conjunction_query:type_name -> couchbase.search.v1.ConjunctionQuery
	6,  // 13: couchbase.search.v1.Query.date_range_query:type_name -> couchbase.search.v1.DateRangeQuery
	7,  // 14: couchbase.search.v1.Query.disjunction_query:type_name -> couchbase.search.v1.DisjunctionQuery
	8,  // 15: couchbase.search.v1.Query.doc_id_query:type_name -> couchbase.search.v1.DocIdQuery
	10, // 16: couchbase.search.v1.Query.geo_bounding_box_query:type_name -> couchbase.search.v1.GeoBoundingBoxQuery
	11, // 17: couchbase.search.v1.Query.geo_distance_query:type_name -> couchbase.search.v1.GeoDistanceQuery
	12, // 18: couchbase.search.v1.Query.geo_polygon_query:type_name -> couchbase.search.v1.GeoPolygonQuery
	13, // 19: couchbase.search.v1.Query.match_all_query:type_name -> couchbase.search.v1.MatchAllQuery
	14, // 20: couchbase.search.v1.Query.match_none_query:type_name -> couchbase.search.v1.MatchNoneQuery
	15, // 21: couchbase.search.v1.Query.match_phrase_query:type_name -> couchbase.search.v1.MatchPhraseQuery
	16, // 22: couchbase.search.v1.Query.match_query:type_name -> couchbase.search.v1.MatchQuery
	17, // 23: couchbase.search.v1.Query.numeric_range_query:type_name -> couchbase.search.v1.NumericRangeQuery
	18, // 24: couchbase.search.v1.Query.phrase_query:type_name -> couchbase.search.v1.PhraseQuery
	19, // 25: couchbase.search.v1.Query.prefix_query:type_name -> couchbase.search.v1.PrefixQuery
	20, // 26: couchbase.search.v1.Query.query_string_query:type_name -> couchbase.search.v1.QueryStringQuery
	21, // 27: couchbase.search.v1.Query.regexp_query:type_name -> couchbase.search.v1.RegexpQuery
	22, // 28: couchbase.search.v1.Query.term_query:type_name -> couchbase.search.v1.TermQuery
	23, // 29: couchbase.search.v1.Query.term_range_query:type_name -> couchbase.search.v1.TermRangeQuery
	24, // 30: couchbase.search.v1.Query.wildcard_query:type_name -> couchbase.search.v1.WildcardQuery
	9,  // 31: couchbase.search.v1.GeoDistanceSorting.center:type_name -> couchbase.search.v1.LatLng
	26, // 32: couchbase.search.v1.Sorting.field_sorting:type_name -> couchbase.search.v1.FieldSorting
	27, // 33: couchbase.search.v1.Sorting.geo_distance_sorting:type_name -> couchbase.search.v1.GeoDistanceSorting
	28, // 34: couchbase.search.v1.Sorting.id_sorting:type_name -> couchbase.search.v1.IdSorting
	29, // 35: couchbase.search.v1.Sorting.score_sorting:type_name -> couchbase.search.v1.ScoreSorting
	31, // 36: couchbase.search.v1.DateRangeFacet.date_ranges:type_name -> couchbase.search.v1.DateRange
	33, // 37: couchbase.search.v1.NumericRangeFacet.numeric_ranges:type_name -> couchbase.search.v1.NumericRange
	32, // 38: couchbase.search.v1.Facet.date_range_facet:type_name -> couchbase.search.v1.DateRangeFacet
	34, // 39: couchbase.search.v1.Facet.numeric_range_facet:type_name -> couchbase.search.v1.NumericRangeFacet
	35, // 40: couchbase.search.v1.Facet.term_facet:type_name -> couchbase.search.v1.TermFacet
	25, // 41: couchbase.search.v1.SearchQueryRequest.query:type_name -> couchbase.search.v1.Query
	1,  // 42: couchbase.search.v1.SearchQueryRequest.scan_consistency:type_name -> couchbase.search.v1.SearchQueryRequest.ScanConsistency
	2,  // 43: couchbase.search.v1.SearchQueryRequest.highlight_style:type_name -> couchbase.search.v1.SearchQueryRequest.HighlightStyle
	30, // 44: couchbase.search.v1.SearchQueryRequest.sort:type_name -> couchbase.search.v1.Sorting
	39, // 45: couchbase.search.v1.SearchQueryRequest.facets:type_name -> couchbase.search.v1.SearchQueryRequest.FacetsEntry
	40, // 46: couchbase.search.v1.SearchQueryResponse.hits:type_name -> couchbase.search.v1.SearchQueryResponse.SearchQueryRow
	52, // 47: couchbase.search.v1.SearchQueryResponse.facets:type_name -> couchbase.search.v1.SearchQueryResponse.FacetsEntry
	50, // 48: couchbase.search.v1.SearchQueryResponse.meta_data:type_name -> couchbase.search.v1.SearchQueryResponse.MetaData
	36, // 49: couchbase.search.v1.SearchQueryRequest.FacetsEntry.value:type_name -> couchbase.search.v1.Facet
	41, // 50: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.locations:type_name -> couchbase.search.v1.SearchQueryResponse.Location
	53, // 51: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.fragments:type_name -> couchbase.search.v1.SearchQueryResponse.SearchQueryRow.FragmentsEntry
	54, // 52: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.fields:type_name -> couchbase.search.v1.SearchQueryResponse.SearchQueryRow.FieldsEntry
	45, // 53: couchbase.search.v1.SearchQueryResponse.FacetResult.term_facet:type_name -> couchbase.search.v1.SearchQueryResponse.TermFacetResult
	47, // 54: couchbase.search.v1.SearchQueryResponse.FacetResult.date_range_facet:type_name -> couchbase.search.v1.SearchQueryResponse.DateRangeFacetResult
	49, // 55: couchbase.search.v1.SearchQueryResponse.FacetResult.numeric_range_facet:type_name -> couchbase.search.v1.SearchQueryResponse.NumericRangeFacetResult
	44, // 56: couchbase.search.v1.SearchQueryResponse.TermFacetResult.terms:type_name -> couchbase.search.v1.SearchQueryResponse.TermResult
	56, // 57: couchbase.search.v1.SearchQueryResponse.DateRangeResult.start:type_name -> google.protobuf.Timestamp
	56, // 58: couchbase.search.v1.SearchQueryResponse.DateRangeResult.end:type_name -> google.protobuf.Timestamp
	46, // 59: couchbase.search.v1.SearchQueryResponse.DateRangeFacetResult.date_ranges:type_name -> couchbase.search.v1.SearchQueryResponse.DateRangeResult
	48, // 60: couchbase.search.v1.SearchQueryResponse.NumericRangeFacetResult.numeric_ranges:type_name -> couchbase.search.v1.SearchQueryResponse.NumericRangeResult
	51, // 61: couchbase.search.v1.SearchQueryResponse.MetaData.metrics:type_name -> couchbase.search.v1.SearchQueryResponse.SearchMetrics
	55, // 62: couchbase.search.v1.SearchQueryResponse.MetaData.errors:type_name -> couchbase.search.v1.SearchQueryResponse.MetaData.ErrorsEntry
	57, // 63: couchbase.search.v1.SearchQueryResponse.SearchMetrics.execution_time:type_name -> google.protobuf.Duration
	43, // 64: couchbase.search.v1.SearchQueryResponse.FacetsEntry.value:type_name -> couchbase.search.v1.SearchQueryResponse.FacetResult
	42, // 65: couchbase.search.v1.SearchQueryResponse.SearchQueryRow.FragmentsEntry.value:type_name -> couchbase.search.v1.SearchQueryResponse.Fragment
	37, // 66: couchbase.search.v1.SearchService.SearchQuery:input_type -> couchbase.search.v1.SearchQueryRequest
	38, // 67: couchbase.search.v1.SearchService.SearchQuery:output_type -> couchbase.search.v1.SearchQueryResponse
	67, // [67:68] is the sub-list for method output_type
	66, // [66:67] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_couchbase_search_v1_search_proto_init() }
func file_couchbase_search_v1_search_proto_init() {
	if File_couchbase_search_v1_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_couchbase_search_v1_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanFieldQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConjunctionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisjunctionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocIdQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundingBoxQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoDistanceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPolygonQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchAllQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchNoneQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStringQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexpQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildcardQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoDistanceSorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdSorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreSorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRangeFacet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRangeFacet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermFacet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_SearchQueryRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_FacetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_TermResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_TermFacetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_DateRangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_DateRangeFacetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_NumericRangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_NumericRangeFacetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_search_v1_search_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQueryResponse_SearchMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_couchbase_search_v1_search_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Query_BooleanFieldQuery)(nil),
		(*Query_BooleanQuery)(nil),
		(*Query_ConjunctionQuery)(nil),
		(*Query_DateRangeQuery)(nil),
		(*Query_DisjunctionQuery)(nil),
		(*Query_DocIdQuery)(nil),
		(*Query_GeoBoundingBoxQuery)(nil),
		(*Query_GeoDistanceQuery)(nil),
		(*Query_GeoPolygonQuery)(nil),
		(*Query_MatchAllQuery)(nil),
		(*Query_MatchNoneQuery)(nil),
		(*Query_MatchPhraseQuery)(nil),
		(*Query_MatchQuery)(nil),
		(*Query_NumericRangeQuery)(nil),
		(*Query_PhraseQuery)(nil),
		(*Query_PrefixQuery)(nil),
		(*Query_QueryStringQuery)(nil),
		(*Query_RegexpQuery)(nil),
		(*Query_TermQuery)(nil),
		(*Query_TermRangeQuery)(nil),
		(*Query_WildcardQuery)(nil),
	}
	file_couchbase_search_v1_search_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Sorting_FieldSorting)(nil),
		(*Sorting_GeoDistanceSorting)(nil),
		(*Sorting_IdSorting)(nil),
		(*Sorting_ScoreSorting)(nil),
	}
	file_couchbase_search_v1_search_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Facet_DateRangeFacet)(nil),
		(*Facet_NumericRangeFacet)(nil),
		(*Facet_TermFacet)(nil),
	}
	file_couchbase_search_v1_search_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_couchbase_search_v1_search_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*SearchQueryResponse_FacetResult_TermFacet)(nil),
		(*SearchQueryResponse_FacetResult_DateRangeFacet)(nil),
		(*SearchQueryResponse_FacetResult_NumericRangeFacet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_couchbase_search_v1_search_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_couchbase_search_v1_search_proto_goTypes,
		DependencyIndexes: file_couchbase_search_v1_search_proto_depIdxs,
		EnumInfos:         file_couchbase_search_v1_search_proto_enumTypes,
		MessageInfos:      file_couchbase_search_v1_search_proto_msgTypes,
	}.Build()
	File_couchbase_search_v1_search_proto = out.File
	file_couchbase_search_v1_search_proto_rawDesc = nil
	file_couchbase_search_v1_search_proto_goTypes = nil
	file_couchbase_search_v1_search_proto_depIdxs = nil
}
