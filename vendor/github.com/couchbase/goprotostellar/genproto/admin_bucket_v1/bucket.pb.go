// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: couchbase/admin/bucket/v1/bucket.proto

package admin_bucket_v1

import (
	kv_v1 "github.com/couchbase/goprotostellar/genproto/kv_v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BucketType int32

const (
	BucketType_BUCKET_TYPE_COUCHBASE BucketType = 0
	BucketType_BUCKET_TYPE_EPHEMERAL BucketType = 1
)

// Enum value maps for BucketType.
var (
	BucketType_name = map[int32]string{
		0: "BUCKET_TYPE_COUCHBASE",
		1: "BUCKET_TYPE_EPHEMERAL",
	}
	BucketType_value = map[string]int32{
		"BUCKET_TYPE_COUCHBASE": 0,
		"BUCKET_TYPE_EPHEMERAL": 1,
	}
)

func (x BucketType) Enum() *BucketType {
	p := new(BucketType)
	*p = x
	return p
}

func (x BucketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketType) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[0].Descriptor()
}

func (BucketType) Type() protoreflect.EnumType {
	return &file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[0]
}

func (x BucketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketType.Descriptor instead.
func (BucketType) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{0}
}

type EvictionMode int32

const (
	EvictionMode_EVICTION_MODE_FULL              EvictionMode = 0
	EvictionMode_EVICTION_MODE_NOT_RECENTLY_USED EvictionMode = 1
	EvictionMode_EVICTION_MODE_VALUE_ONLY        EvictionMode = 2
	EvictionMode_EVICTION_MODE_NONE              EvictionMode = 3
)

// Enum value maps for EvictionMode.
var (
	EvictionMode_name = map[int32]string{
		0: "EVICTION_MODE_FULL",
		1: "EVICTION_MODE_NOT_RECENTLY_USED",
		2: "EVICTION_MODE_VALUE_ONLY",
		3: "EVICTION_MODE_NONE",
	}
	EvictionMode_value = map[string]int32{
		"EVICTION_MODE_FULL":              0,
		"EVICTION_MODE_NOT_RECENTLY_USED": 1,
		"EVICTION_MODE_VALUE_ONLY":        2,
		"EVICTION_MODE_NONE":              3,
	}
)

func (x EvictionMode) Enum() *EvictionMode {
	p := new(EvictionMode)
	*p = x
	return p
}

func (x EvictionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvictionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[1].Descriptor()
}

func (EvictionMode) Type() protoreflect.EnumType {
	return &file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[1]
}

func (x EvictionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvictionMode.Descriptor instead.
func (EvictionMode) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{1}
}

type CompressionMode int32

const (
	CompressionMode_COMPRESSION_MODE_OFF     CompressionMode = 0
	CompressionMode_COMPRESSION_MODE_PASSIVE CompressionMode = 1
	CompressionMode_COMPRESSION_MODE_ACTIVE  CompressionMode = 2
)

// Enum value maps for CompressionMode.
var (
	CompressionMode_name = map[int32]string{
		0: "COMPRESSION_MODE_OFF",
		1: "COMPRESSION_MODE_PASSIVE",
		2: "COMPRESSION_MODE_ACTIVE",
	}
	CompressionMode_value = map[string]int32{
		"COMPRESSION_MODE_OFF":     0,
		"COMPRESSION_MODE_PASSIVE": 1,
		"COMPRESSION_MODE_ACTIVE":  2,
	}
)

func (x CompressionMode) Enum() *CompressionMode {
	p := new(CompressionMode)
	*p = x
	return p
}

func (x CompressionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[2].Descriptor()
}

func (CompressionMode) Type() protoreflect.EnumType {
	return &file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[2]
}

func (x CompressionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionMode.Descriptor instead.
func (CompressionMode) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{2}
}

type StorageBackend int32

const (
	StorageBackend_STORAGE_BACKEND_COUCHSTORE StorageBackend = 0
	StorageBackend_STORAGE_BACKEND_MAGMA      StorageBackend = 1
)

// Enum value maps for StorageBackend.
var (
	StorageBackend_name = map[int32]string{
		0: "STORAGE_BACKEND_COUCHSTORE",
		1: "STORAGE_BACKEND_MAGMA",
	}
	StorageBackend_value = map[string]int32{
		"STORAGE_BACKEND_COUCHSTORE": 0,
		"STORAGE_BACKEND_MAGMA":      1,
	}
)

func (x StorageBackend) Enum() *StorageBackend {
	p := new(StorageBackend)
	*p = x
	return p
}

func (x StorageBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[3].Descriptor()
}

func (StorageBackend) Type() protoreflect.EnumType {
	return &file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[3]
}

func (x StorageBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageBackend.Descriptor instead.
func (StorageBackend) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{3}
}

type ConflictResolutionType int32

const (
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_TIMESTAMP       ConflictResolutionType = 0
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER ConflictResolutionType = 1
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_CUSTOM          ConflictResolutionType = 2
)

// Enum value maps for ConflictResolutionType.
var (
	ConflictResolutionType_name = map[int32]string{
		0: "CONFLICT_RESOLUTION_TYPE_TIMESTAMP",
		1: "CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER",
		2: "CONFLICT_RESOLUTION_TYPE_CUSTOM",
	}
	ConflictResolutionType_value = map[string]int32{
		"CONFLICT_RESOLUTION_TYPE_TIMESTAMP":       0,
		"CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER": 1,
		"CONFLICT_RESOLUTION_TYPE_CUSTOM":          2,
	}
)

func (x ConflictResolutionType) Enum() *ConflictResolutionType {
	p := new(ConflictResolutionType)
	*p = x
	return p
}

func (x ConflictResolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConflictResolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[4].Descriptor()
}

func (ConflictResolutionType) Type() protoreflect.EnumType {
	return &file_couchbase_admin_bucket_v1_bucket_proto_enumTypes[4]
}

func (x ConflictResolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConflictResolutionType.Descriptor instead.
func (ConflictResolutionType) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{4}
}

type ListBucketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBucketsRequest) Reset() {
	*x = ListBucketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsRequest) ProtoMessage() {}

func (x *ListBucketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsRequest.ProtoReflect.Descriptor instead.
func (*ListBucketsRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{0}
}

type ListBucketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*ListBucketsResponse_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListBucketsResponse) Reset() {
	*x = ListBucketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsResponse) ProtoMessage() {}

func (x *ListBucketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsResponse.ProtoReflect.Descriptor instead.
func (*ListBucketsResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{1}
}

func (x *ListBucketsResponse) GetBuckets() []*ListBucketsResponse_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type CreateBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName                        string                  `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	BucketType                        BucketType              `protobuf:"varint,2,opt,name=bucket_type,json=bucketType,proto3,enum=couchbase.admin.bucket.v1.BucketType" json:"bucket_type,omitempty"`
	RamQuotaMb                        *uint64                 `protobuf:"varint,3,opt,name=ram_quota_mb,json=ramQuotaMb,proto3,oneof" json:"ram_quota_mb,omitempty"`
	NumReplicas                       *uint32                 `protobuf:"varint,4,opt,name=num_replicas,json=numReplicas,proto3,oneof" json:"num_replicas,omitempty"`
	FlushEnabled                      *bool                   `protobuf:"varint,5,opt,name=flush_enabled,json=flushEnabled,proto3,oneof" json:"flush_enabled,omitempty"`
	ReplicaIndexes                    *bool                   `protobuf:"varint,6,opt,name=replica_indexes,json=replicaIndexes,proto3,oneof" json:"replica_indexes,omitempty"`
	EvictionMode                      *EvictionMode           `protobuf:"varint,7,opt,name=eviction_mode,json=evictionMode,proto3,enum=couchbase.admin.bucket.v1.EvictionMode,oneof" json:"eviction_mode,omitempty"`
	MaxExpirySecs                     *uint32                 `protobuf:"varint,8,opt,name=max_expiry_secs,json=maxExpirySecs,proto3,oneof" json:"max_expiry_secs,omitempty"`
	CompressionMode                   *CompressionMode        `protobuf:"varint,9,opt,name=compression_mode,json=compressionMode,proto3,enum=couchbase.admin.bucket.v1.CompressionMode,oneof" json:"compression_mode,omitempty"`
	MinimumDurabilityLevel            *kv_v1.DurabilityLevel  `protobuf:"varint,10,opt,name=minimum_durability_level,json=minimumDurabilityLevel,proto3,enum=couchbase.kv.v1.DurabilityLevel,oneof" json:"minimum_durability_level,omitempty"`
	StorageBackend                    *StorageBackend         `protobuf:"varint,11,opt,name=storage_backend,json=storageBackend,proto3,enum=couchbase.admin.bucket.v1.StorageBackend,oneof" json:"storage_backend,omitempty"`
	ConflictResolutionType            *ConflictResolutionType `protobuf:"varint,12,opt,name=conflict_resolution_type,json=conflictResolutionType,proto3,enum=couchbase.admin.bucket.v1.ConflictResolutionType,oneof" json:"conflict_resolution_type,omitempty"`
	HistoryRetentionCollectionDefault *bool                   `protobuf:"varint,13,opt,name=history_retention_collection_default,json=historyRetentionCollectionDefault,proto3,oneof" json:"history_retention_collection_default,omitempty"`
	HistoryRetentionBytes             *uint64                 `protobuf:"varint,14,opt,name=history_retention_bytes,json=historyRetentionBytes,proto3,oneof" json:"history_retention_bytes,omitempty"`
	HistoryRetentionDurationSecs      *uint32                 `protobuf:"varint,15,opt,name=history_retention_duration_secs,json=historyRetentionDurationSecs,proto3,oneof" json:"history_retention_duration_secs,omitempty"`
}

func (x *CreateBucketRequest) Reset() {
	*x = CreateBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketRequest) ProtoMessage() {}

func (x *CreateBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketRequest.ProtoReflect.Descriptor instead.
func (*CreateBucketRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CreateBucketRequest) GetBucketType() BucketType {
	if x != nil {
		return x.BucketType
	}
	return BucketType_BUCKET_TYPE_COUCHBASE
}

func (x *CreateBucketRequest) GetRamQuotaMb() uint64 {
	if x != nil && x.RamQuotaMb != nil {
		return *x.RamQuotaMb
	}
	return 0
}

func (x *CreateBucketRequest) GetNumReplicas() uint32 {
	if x != nil && x.NumReplicas != nil {
		return *x.NumReplicas
	}
	return 0
}

func (x *CreateBucketRequest) GetFlushEnabled() bool {
	if x != nil && x.FlushEnabled != nil {
		return *x.FlushEnabled
	}
	return false
}

func (x *CreateBucketRequest) GetReplicaIndexes() bool {
	if x != nil && x.ReplicaIndexes != nil {
		return *x.ReplicaIndexes
	}
	return false
}

func (x *CreateBucketRequest) GetEvictionMode() EvictionMode {
	if x != nil && x.EvictionMode != nil {
		return *x.EvictionMode
	}
	return EvictionMode_EVICTION_MODE_FULL
}

func (x *CreateBucketRequest) GetMaxExpirySecs() uint32 {
	if x != nil && x.MaxExpirySecs != nil {
		return *x.MaxExpirySecs
	}
	return 0
}

func (x *CreateBucketRequest) GetCompressionMode() CompressionMode {
	if x != nil && x.CompressionMode != nil {
		return *x.CompressionMode
	}
	return CompressionMode_COMPRESSION_MODE_OFF
}

func (x *CreateBucketRequest) GetMinimumDurabilityLevel() kv_v1.DurabilityLevel {
	if x != nil && x.MinimumDurabilityLevel != nil {
		return *x.MinimumDurabilityLevel
	}
	return kv_v1.DurabilityLevel(0)
}

func (x *CreateBucketRequest) GetStorageBackend() StorageBackend {
	if x != nil && x.StorageBackend != nil {
		return *x.StorageBackend
	}
	return StorageBackend_STORAGE_BACKEND_COUCHSTORE
}

func (x *CreateBucketRequest) GetConflictResolutionType() ConflictResolutionType {
	if x != nil && x.ConflictResolutionType != nil {
		return *x.ConflictResolutionType
	}
	return ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_TIMESTAMP
}

func (x *CreateBucketRequest) GetHistoryRetentionCollectionDefault() bool {
	if x != nil && x.HistoryRetentionCollectionDefault != nil {
		return *x.HistoryRetentionCollectionDefault
	}
	return false
}

func (x *CreateBucketRequest) GetHistoryRetentionBytes() uint64 {
	if x != nil && x.HistoryRetentionBytes != nil {
		return *x.HistoryRetentionBytes
	}
	return 0
}

func (x *CreateBucketRequest) GetHistoryRetentionDurationSecs() uint32 {
	if x != nil && x.HistoryRetentionDurationSecs != nil {
		return *x.HistoryRetentionDurationSecs
	}
	return 0
}

type CreateBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketUuid string `protobuf:"bytes,1,opt,name=bucket_uuid,json=bucketUuid,proto3" json:"bucket_uuid,omitempty"`
}

func (x *CreateBucketResponse) Reset() {
	*x = CreateBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketResponse) ProtoMessage() {}

func (x *CreateBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketResponse.ProtoReflect.Descriptor instead.
func (*CreateBucketResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBucketResponse) GetBucketUuid() string {
	if x != nil {
		return x.BucketUuid
	}
	return ""
}

type UpdateBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName                        string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	RamQuotaMb                        *uint64                `protobuf:"varint,2,opt,name=ram_quota_mb,json=ramQuotaMb,proto3,oneof" json:"ram_quota_mb,omitempty"`
	NumReplicas                       *uint32                `protobuf:"varint,3,opt,name=num_replicas,json=numReplicas,proto3,oneof" json:"num_replicas,omitempty"`
	FlushEnabled                      *bool                  `protobuf:"varint,4,opt,name=flush_enabled,json=flushEnabled,proto3,oneof" json:"flush_enabled,omitempty"`
	EvictionMode                      *EvictionMode          `protobuf:"varint,5,opt,name=eviction_mode,json=evictionMode,proto3,enum=couchbase.admin.bucket.v1.EvictionMode,oneof" json:"eviction_mode,omitempty"`
	MaxExpirySecs                     *uint32                `protobuf:"varint,6,opt,name=max_expiry_secs,json=maxExpirySecs,proto3,oneof" json:"max_expiry_secs,omitempty"`
	CompressionMode                   *CompressionMode       `protobuf:"varint,7,opt,name=compression_mode,json=compressionMode,proto3,enum=couchbase.admin.bucket.v1.CompressionMode,oneof" json:"compression_mode,omitempty"`
	MinimumDurabilityLevel            *kv_v1.DurabilityLevel `protobuf:"varint,8,opt,name=minimum_durability_level,json=minimumDurabilityLevel,proto3,enum=couchbase.kv.v1.DurabilityLevel,oneof" json:"minimum_durability_level,omitempty"`
	HistoryRetentionCollectionDefault *bool                  `protobuf:"varint,10,opt,name=history_retention_collection_default,json=historyRetentionCollectionDefault,proto3,oneof" json:"history_retention_collection_default,omitempty"`
	HistoryRetentionBytes             *uint64                `protobuf:"varint,11,opt,name=history_retention_bytes,json=historyRetentionBytes,proto3,oneof" json:"history_retention_bytes,omitempty"`
	HistoryRetentionDurationSecs      *uint32                `protobuf:"varint,12,opt,name=history_retention_duration_secs,json=historyRetentionDurationSecs,proto3,oneof" json:"history_retention_duration_secs,omitempty"`
}

func (x *UpdateBucketRequest) Reset() {
	*x = UpdateBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketRequest) ProtoMessage() {}

func (x *UpdateBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketRequest.ProtoReflect.Descriptor instead.
func (*UpdateBucketRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *UpdateBucketRequest) GetRamQuotaMb() uint64 {
	if x != nil && x.RamQuotaMb != nil {
		return *x.RamQuotaMb
	}
	return 0
}

func (x *UpdateBucketRequest) GetNumReplicas() uint32 {
	if x != nil && x.NumReplicas != nil {
		return *x.NumReplicas
	}
	return 0
}

func (x *UpdateBucketRequest) GetFlushEnabled() bool {
	if x != nil && x.FlushEnabled != nil {
		return *x.FlushEnabled
	}
	return false
}

func (x *UpdateBucketRequest) GetEvictionMode() EvictionMode {
	if x != nil && x.EvictionMode != nil {
		return *x.EvictionMode
	}
	return EvictionMode_EVICTION_MODE_FULL
}

func (x *UpdateBucketRequest) GetMaxExpirySecs() uint32 {
	if x != nil && x.MaxExpirySecs != nil {
		return *x.MaxExpirySecs
	}
	return 0
}

func (x *UpdateBucketRequest) GetCompressionMode() CompressionMode {
	if x != nil && x.CompressionMode != nil {
		return *x.CompressionMode
	}
	return CompressionMode_COMPRESSION_MODE_OFF
}

func (x *UpdateBucketRequest) GetMinimumDurabilityLevel() kv_v1.DurabilityLevel {
	if x != nil && x.MinimumDurabilityLevel != nil {
		return *x.MinimumDurabilityLevel
	}
	return kv_v1.DurabilityLevel(0)
}

func (x *UpdateBucketRequest) GetHistoryRetentionCollectionDefault() bool {
	if x != nil && x.HistoryRetentionCollectionDefault != nil {
		return *x.HistoryRetentionCollectionDefault
	}
	return false
}

func (x *UpdateBucketRequest) GetHistoryRetentionBytes() uint64 {
	if x != nil && x.HistoryRetentionBytes != nil {
		return *x.HistoryRetentionBytes
	}
	return 0
}

func (x *UpdateBucketRequest) GetHistoryRetentionDurationSecs() uint32 {
	if x != nil && x.HistoryRetentionDurationSecs != nil {
		return *x.HistoryRetentionDurationSecs
	}
	return 0
}

type UpdateBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBucketResponse) Reset() {
	*x = UpdateBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketResponse) ProtoMessage() {}

func (x *UpdateBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketResponse.ProtoReflect.Descriptor instead.
func (*UpdateBucketResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{5}
}

type DeleteBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *DeleteBucketRequest) Reset() {
	*x = DeleteBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketRequest) ProtoMessage() {}

func (x *DeleteBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteBucketRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type DeleteBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBucketResponse) Reset() {
	*x = DeleteBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketResponse) ProtoMessage() {}

func (x *DeleteBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketResponse.ProtoReflect.Descriptor instead.
func (*DeleteBucketResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{7}
}

type FlushBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *FlushBucketRequest) Reset() {
	*x = FlushBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBucketRequest) ProtoMessage() {}

func (x *FlushBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBucketRequest.ProtoReflect.Descriptor instead.
func (*FlushBucketRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{8}
}

func (x *FlushBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type FlushBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushBucketResponse) Reset() {
	*x = FlushBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBucketResponse) ProtoMessage() {}

func (x *FlushBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBucketResponse.ProtoReflect.Descriptor instead.
func (*FlushBucketResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{9}
}

type ListBucketsResponse_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName                        string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	FlushEnabled                      bool                   `protobuf:"varint,2,opt,name=flush_enabled,json=flushEnabled,proto3" json:"flush_enabled,omitempty"`
	RamQuotaMb                        uint64                 `protobuf:"varint,3,opt,name=ram_quota_mb,json=ramQuotaMb,proto3" json:"ram_quota_mb,omitempty"`
	NumReplicas                       uint32                 `protobuf:"varint,4,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	ReplicaIndexes                    bool                   `protobuf:"varint,5,opt,name=replica_indexes,json=replicaIndexes,proto3" json:"replica_indexes,omitempty"`
	BucketType                        BucketType             `protobuf:"varint,6,opt,name=bucket_type,json=bucketType,proto3,enum=couchbase.admin.bucket.v1.BucketType" json:"bucket_type,omitempty"`
	EvictionMode                      EvictionMode           `protobuf:"varint,7,opt,name=eviction_mode,json=evictionMode,proto3,enum=couchbase.admin.bucket.v1.EvictionMode" json:"eviction_mode,omitempty"`
	MaxExpirySecs                     uint32                 `protobuf:"varint,8,opt,name=max_expiry_secs,json=maxExpirySecs,proto3" json:"max_expiry_secs,omitempty"`
	CompressionMode                   CompressionMode        `protobuf:"varint,9,opt,name=compression_mode,json=compressionMode,proto3,enum=couchbase.admin.bucket.v1.CompressionMode" json:"compression_mode,omitempty"`
	MinimumDurabilityLevel            *kv_v1.DurabilityLevel `protobuf:"varint,10,opt,name=minimum_durability_level,json=minimumDurabilityLevel,proto3,enum=couchbase.kv.v1.DurabilityLevel,oneof" json:"minimum_durability_level,omitempty"`
	StorageBackend                    *StorageBackend        `protobuf:"varint,11,opt,name=storage_backend,json=storageBackend,proto3,enum=couchbase.admin.bucket.v1.StorageBackend,oneof" json:"storage_backend,omitempty"`
	ConflictResolutionType            ConflictResolutionType `protobuf:"varint,12,opt,name=conflict_resolution_type,json=conflictResolutionType,proto3,enum=couchbase.admin.bucket.v1.ConflictResolutionType" json:"conflict_resolution_type,omitempty"`
	HistoryRetentionCollectionDefault *bool                  `protobuf:"varint,13,opt,name=history_retention_collection_default,json=historyRetentionCollectionDefault,proto3,oneof" json:"history_retention_collection_default,omitempty"`
	HistoryRetentionBytes             *uint64                `protobuf:"varint,14,opt,name=history_retention_bytes,json=historyRetentionBytes,proto3,oneof" json:"history_retention_bytes,omitempty"`
	HistoryRetentionDurationSecs      *uint32                `protobuf:"varint,15,opt,name=history_retention_duration_secs,json=historyRetentionDurationSecs,proto3,oneof" json:"history_retention_duration_secs,omitempty"`
}

func (x *ListBucketsResponse_Bucket) Reset() {
	*x = ListBucketsResponse_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsResponse_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsResponse_Bucket) ProtoMessage() {}

func (x *ListBucketsResponse_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsResponse_Bucket.ProtoReflect.Descriptor instead.
func (*ListBucketsResponse_Bucket) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListBucketsResponse_Bucket) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *ListBucketsResponse_Bucket) GetFlushEnabled() bool {
	if x != nil {
		return x.FlushEnabled
	}
	return false
}

func (x *ListBucketsResponse_Bucket) GetRamQuotaMb() uint64 {
	if x != nil {
		return x.RamQuotaMb
	}
	return 0
}

func (x *ListBucketsResponse_Bucket) GetNumReplicas() uint32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *ListBucketsResponse_Bucket) GetReplicaIndexes() bool {
	if x != nil {
		return x.ReplicaIndexes
	}
	return false
}

func (x *ListBucketsResponse_Bucket) GetBucketType() BucketType {
	if x != nil {
		return x.BucketType
	}
	return BucketType_BUCKET_TYPE_COUCHBASE
}

func (x *ListBucketsResponse_Bucket) GetEvictionMode() EvictionMode {
	if x != nil {
		return x.EvictionMode
	}
	return EvictionMode_EVICTION_MODE_FULL
}

func (x *ListBucketsResponse_Bucket) GetMaxExpirySecs() uint32 {
	if x != nil {
		return x.MaxExpirySecs
	}
	return 0
}

func (x *ListBucketsResponse_Bucket) GetCompressionMode() CompressionMode {
	if x != nil {
		return x.CompressionMode
	}
	return CompressionMode_COMPRESSION_MODE_OFF
}

func (x *ListBucketsResponse_Bucket) GetMinimumDurabilityLevel() kv_v1.DurabilityLevel {
	if x != nil && x.MinimumDurabilityLevel != nil {
		return *x.MinimumDurabilityLevel
	}
	return kv_v1.DurabilityLevel(0)
}

func (x *ListBucketsResponse_Bucket) GetStorageBackend() StorageBackend {
	if x != nil && x.StorageBackend != nil {
		return *x.StorageBackend
	}
	return StorageBackend_STORAGE_BACKEND_COUCHSTORE
}

func (x *ListBucketsResponse_Bucket) GetConflictResolutionType() ConflictResolutionType {
	if x != nil {
		return x.ConflictResolutionType
	}
	return ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_TIMESTAMP
}

func (x *ListBucketsResponse_Bucket) GetHistoryRetentionCollectionDefault() bool {
	if x != nil && x.HistoryRetentionCollectionDefault != nil {
		return *x.HistoryRetentionCollectionDefault
	}
	return false
}

func (x *ListBucketsResponse_Bucket) GetHistoryRetentionBytes() uint64 {
	if x != nil && x.HistoryRetentionBytes != nil {
		return *x.HistoryRetentionBytes
	}
	return 0
}

func (x *ListBucketsResponse_Bucket) GetHistoryRetentionDurationSecs() uint32 {
	if x != nil && x.HistoryRetentionDurationSecs != nil {
		return *x.HistoryRetentionDurationSecs
	}
	return 0
}

var File_couchbase_admin_bucket_v1_bucket_proto protoreflect.FileDescriptor

var file_couchbase_admin_bucket_v1_bucket_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6b,
	0x76, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xda, 0x09, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xf1, 0x08, 0x0a,
	0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x62, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6b,
	0x76, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44,
	0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x24, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x21, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03,
	0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x1c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73,
	0x22, 0xc6, 0x0a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x6d, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x4d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x06,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x6b, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x07, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x70,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x54, 0x0a, 0x24, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x21, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x1c,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x62,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x27, 0x0a, 0x25, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x22, 0xc0, 0x07, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x72,
	0x61, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x05, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6b,
	0x76, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x48, 0x06, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44,
	0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x24, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x21, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52,
	0x1c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d,
	0x62, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x27, 0x0a, 0x25,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a,
	0x12, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x42, 0x0a, 0x0a, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x43, 0x48, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x2a,
	0x81, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x49, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x56, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x56, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x0e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x5f, 0x43, 0x4f, 0x55, 0x43, 0x48, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x41, 0x47, 0x4d, 0x41, 0x10, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x32, 0xcd,
	0x04, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x0b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x97,
	0x02, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x76, 0x31, 0xaa, 0x02, 0x26, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x30,
	0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5c, 0x56, 0x31,
	0xea, 0x02, 0x35, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x3a, 0x3a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_couchbase_admin_bucket_v1_bucket_proto_rawDescOnce sync.Once
	file_couchbase_admin_bucket_v1_bucket_proto_rawDescData = file_couchbase_admin_bucket_v1_bucket_proto_rawDesc
)

func file_couchbase_admin_bucket_v1_bucket_proto_rawDescGZIP() []byte {
	file_couchbase_admin_bucket_v1_bucket_proto_rawDescOnce.Do(func() {
		file_couchbase_admin_bucket_v1_bucket_proto_rawDescData = protoimpl.X.CompressGZIP(file_couchbase_admin_bucket_v1_bucket_proto_rawDescData)
	})
	return file_couchbase_admin_bucket_v1_bucket_proto_rawDescData
}

var file_couchbase_admin_bucket_v1_bucket_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_couchbase_admin_bucket_v1_bucket_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_couchbase_admin_bucket_v1_bucket_proto_goTypes = []interface{}{
	(BucketType)(0),                    // 0: couchbase.admin.bucket.v1.BucketType
	(EvictionMode)(0),                  // 1: couchbase.admin.bucket.v1.EvictionMode
	(CompressionMode)(0),               // 2: couchbase.admin.bucket.v1.CompressionMode
	(StorageBackend)(0),                // 3: couchbase.admin.bucket.v1.StorageBackend
	(ConflictResolutionType)(0),        // 4: couchbase.admin.bucket.v1.ConflictResolutionType
	(*ListBucketsRequest)(nil),         // 5: couchbase.admin.bucket.v1.ListBucketsRequest
	(*ListBucketsResponse)(nil),        // 6: couchbase.admin.bucket.v1.ListBucketsResponse
	(*CreateBucketRequest)(nil),        // 7: couchbase.admin.bucket.v1.CreateBucketRequest
	(*CreateBucketResponse)(nil),       // 8: couchbase.admin.bucket.v1.CreateBucketResponse
	(*UpdateBucketRequest)(nil),        // 9: couchbase.admin.bucket.v1.UpdateBucketRequest
	(*UpdateBucketResponse)(nil),       // 10: couchbase.admin.bucket.v1.UpdateBucketResponse
	(*DeleteBucketRequest)(nil),        // 11: couchbase.admin.bucket.v1.DeleteBucketRequest
	(*DeleteBucketResponse)(nil),       // 12: couchbase.admin.bucket.v1.DeleteBucketResponse
	(*FlushBucketRequest)(nil),         // 13: couchbase.admin.bucket.v1.FlushBucketRequest
	(*FlushBucketResponse)(nil),        // 14: couchbase.admin.bucket.v1.FlushBucketResponse
	(*ListBucketsResponse_Bucket)(nil), // 15: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket
	(kv_v1.DurabilityLevel)(0),         // 16: couchbase.kv.v1.DurabilityLevel
}
var file_couchbase_admin_bucket_v1_bucket_proto_depIdxs = []int32{
	15, // 0: couchbase.admin.bucket.v1.ListBucketsResponse.buckets:type_name -> couchbase.admin.bucket.v1.ListBucketsResponse.Bucket
	0,  // 1: couchbase.admin.bucket.v1.CreateBucketRequest.bucket_type:type_name -> couchbase.admin.bucket.v1.BucketType
	1,  // 2: couchbase.admin.bucket.v1.CreateBucketRequest.eviction_mode:type_name -> couchbase.admin.bucket.v1.EvictionMode
	2,  // 3: couchbase.admin.bucket.v1.CreateBucketRequest.compression_mode:type_name -> couchbase.admin.bucket.v1.CompressionMode
	16, // 4: couchbase.admin.bucket.v1.CreateBucketRequest.minimum_durability_level:type_name -> couchbase.kv.v1.DurabilityLevel
	3,  // 5: couchbase.admin.bucket.v1.CreateBucketRequest.storage_backend:type_name -> couchbase.admin.bucket.v1.StorageBackend
	4,  // 6: couchbase.admin.bucket.v1.CreateBucketRequest.conflict_resolution_type:type_name -> couchbase.admin.bucket.v1.ConflictResolutionType
	1,  // 7: couchbase.admin.bucket.v1.UpdateBucketRequest.eviction_mode:type_name -> couchbase.admin.bucket.v1.EvictionMode
	2,  // 8: couchbase.admin.bucket.v1.UpdateBucketRequest.compression_mode:type_name -> couchbase.admin.bucket.v1.CompressionMode
	16, // 9: couchbase.admin.bucket.v1.UpdateBucketRequest.minimum_durability_level:type_name -> couchbase.kv.v1.DurabilityLevel
	0,  // 10: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.bucket_type:type_name -> couchbase.admin.bucket.v1.BucketType
	1,  // 11: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.eviction_mode:type_name -> couchbase.admin.bucket.v1.EvictionMode
	2,  // 12: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.compression_mode:type_name -> couchbase.admin.bucket.v1.CompressionMode
	16, // 13: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.minimum_durability_level:type_name -> couchbase.kv.v1.DurabilityLevel
	3,  // 14: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.storage_backend:type_name -> couchbase.admin.bucket.v1.StorageBackend
	4,  // 15: couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.conflict_resolution_type:type_name -> couchbase.admin.bucket.v1.ConflictResolutionType
	5,  // 16: couchbase.admin.bucket.v1.BucketAdminService.ListBuckets:input_type -> couchbase.admin.bucket.v1.ListBucketsRequest
	7,  // 17: couchbase.admin.bucket.v1.BucketAdminService.CreateBucket:input_type -> couchbase.admin.bucket.v1.CreateBucketRequest
	9,  // 18: couchbase.admin.bucket.v1.BucketAdminService.UpdateBucket:input_type -> couchbase.admin.bucket.v1.UpdateBucketRequest
	11, // 19: couchbase.admin.bucket.v1.BucketAdminService.DeleteBucket:input_type -> couchbase.admin.bucket.v1.DeleteBucketRequest
	13, // 20: couchbase.admin.bucket.v1.BucketAdminService.FlushBucket:input_type -> couchbase.admin.bucket.v1.FlushBucketRequest
	6,  // 21: couchbase.admin.bucket.v1.BucketAdminService.ListBuckets:output_type -> couchbase.admin.bucket.v1.ListBucketsResponse
	8,  // 22: couchbase.admin.bucket.v1.BucketAdminService.CreateBucket:output_type -> couchbase.admin.bucket.v1.CreateBucketResponse
	10, // 23: couchbase.admin.bucket.v1.BucketAdminService.UpdateBucket:output_type -> couchbase.admin.bucket.v1.UpdateBucketResponse
	12, // 24: couchbase.admin.bucket.v1.BucketAdminService.DeleteBucket:output_type -> couchbase.admin.bucket.v1.DeleteBucketResponse
	14, // 25: couchbase.admin.bucket.v1.BucketAdminService.FlushBucket:output_type -> couchbase.admin.bucket.v1.FlushBucketResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_couchbase_admin_bucket_v1_bucket_proto_init() }
func file_couchbase_admin_bucket_v1_bucket_proto_init() {
	if File_couchbase_admin_bucket_v1_bucket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsResponse_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_couchbase_admin_bucket_v1_bucket_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_couchbase_admin_bucket_v1_bucket_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_couchbase_admin_bucket_v1_bucket_proto_goTypes,
		DependencyIndexes: file_couchbase_admin_bucket_v1_bucket_proto_depIdxs,
		EnumInfos:         file_couchbase_admin_bucket_v1_bucket_proto_enumTypes,
		MessageInfos:      file_couchbase_admin_bucket_v1_bucket_proto_msgTypes,
	}.Build()
	File_couchbase_admin_bucket_v1_bucket_proto = out.File
	file_couchbase_admin_bucket_v1_bucket_proto_rawDesc = nil
	file_couchbase_admin_bucket_v1_bucket_proto_goTypes = nil
	file_couchbase_admin_bucket_v1_bucket_proto_depIdxs = nil
}
