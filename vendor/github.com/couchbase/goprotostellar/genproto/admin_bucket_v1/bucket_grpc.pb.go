// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: couchbase/admin/bucket/v1/bucket.proto

package admin_bucket_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BucketAdminServiceClient is the client API for BucketAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketAdminServiceClient interface {
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	FlushBucket(ctx context.Context, in *FlushBucketRequest, opts ...grpc.CallOption) (*FlushBucketResponse, error)
}

type bucketAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketAdminServiceClient(cc grpc.ClientConnInterface) BucketAdminServiceClient {
	return &bucketAdminServiceClient{cc}
}

func (c *bucketAdminServiceClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.bucket.v1.BucketAdminService/ListBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketAdminServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.bucket.v1.BucketAdminService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketAdminServiceClient) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error) {
	out := new(UpdateBucketResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.bucket.v1.BucketAdminService/UpdateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketAdminServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.bucket.v1.BucketAdminService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketAdminServiceClient) FlushBucket(ctx context.Context, in *FlushBucketRequest, opts ...grpc.CallOption) (*FlushBucketResponse, error) {
	out := new(FlushBucketResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.bucket.v1.BucketAdminService/FlushBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketAdminServiceServer is the server API for BucketAdminService service.
// All implementations must embed UnimplementedBucketAdminServiceServer
// for forward compatibility
type BucketAdminServiceServer interface {
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	FlushBucket(context.Context, *FlushBucketRequest) (*FlushBucketResponse, error)
	mustEmbedUnimplementedBucketAdminServiceServer()
}

// UnimplementedBucketAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketAdminServiceServer struct {
}

func (UnimplementedBucketAdminServiceServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedBucketAdminServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketAdminServiceServer) UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (UnimplementedBucketAdminServiceServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketAdminServiceServer) FlushBucket(context.Context, *FlushBucketRequest) (*FlushBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBucket not implemented")
}
func (UnimplementedBucketAdminServiceServer) mustEmbedUnimplementedBucketAdminServiceServer() {}

// UnsafeBucketAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketAdminServiceServer will
// result in compilation errors.
type UnsafeBucketAdminServiceServer interface {
	mustEmbedUnimplementedBucketAdminServiceServer()
}

func RegisterBucketAdminServiceServer(s grpc.ServiceRegistrar, srv BucketAdminServiceServer) {
	s.RegisterService(&BucketAdminService_ServiceDesc, srv)
}

func _BucketAdminService_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketAdminServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.bucket.v1.BucketAdminService/ListBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketAdminServiceServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketAdminService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketAdminServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.bucket.v1.BucketAdminService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketAdminServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketAdminService_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketAdminServiceServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.bucket.v1.BucketAdminService/UpdateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketAdminServiceServer).UpdateBucket(ctx, req.(*UpdateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketAdminService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketAdminServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.bucket.v1.BucketAdminService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketAdminServiceServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketAdminService_FlushBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketAdminServiceServer).FlushBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.bucket.v1.BucketAdminService/FlushBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketAdminServiceServer).FlushBucket(ctx, req.(*FlushBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketAdminService_ServiceDesc is the grpc.ServiceDesc for BucketAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.admin.bucket.v1.BucketAdminService",
	HandlerType: (*BucketAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _BucketAdminService_ListBuckets_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _BucketAdminService_CreateBucket_Handler,
		},
		{
			MethodName: "UpdateBucket",
			Handler:    _BucketAdminService_UpdateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _BucketAdminService_DeleteBucket_Handler,
		},
		{
			MethodName: "FlushBucket",
			Handler:    _BucketAdminService_FlushBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "couchbase/admin/bucket/v1/bucket.proto",
}
