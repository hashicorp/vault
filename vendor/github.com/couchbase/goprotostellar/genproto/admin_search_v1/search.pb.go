// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: couchbase/admin/search/v1/search.proto

package admin_search_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params       map[string][]byte `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlanParams   map[string][]byte `protobuf:"bytes,3,rep,name=plan_params,json=planParams,proto3" json:"plan_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SourceName   *string           `protobuf:"bytes,4,opt,name=source_name,json=sourceName,proto3,oneof" json:"source_name,omitempty"`
	SourceParams map[string][]byte `protobuf:"bytes,5,rep,name=source_params,json=sourceParams,proto3" json:"source_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SourceType   *string           `protobuf:"bytes,6,opt,name=source_type,json=sourceType,proto3,oneof" json:"source_type,omitempty"`
	SourceUuid   *string           `protobuf:"bytes,7,opt,name=source_uuid,json=sourceUuid,proto3,oneof" json:"source_uuid,omitempty"`
	Type         string            `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Uuid         string            `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{0}
}

func (x *Index) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Index) GetParams() map[string][]byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Index) GetPlanParams() map[string][]byte {
	if x != nil {
		return x.PlanParams
	}
	return nil
}

func (x *Index) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *Index) GetSourceParams() map[string][]byte {
	if x != nil {
		return x.SourceParams
	}
	return nil
}

func (x *Index) GetSourceType() string {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ""
}

func (x *Index) GetSourceUuid() string {
	if x != nil && x.SourceUuid != nil {
		return *x.SourceUuid
	}
	return ""
}

func (x *Index) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Index) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// CreateIndexRequest does not use Index because of the uuid field.
type CreateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params        map[string][]byte `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlanParams    map[string][]byte `protobuf:"bytes,3,rep,name=plan_params,json=planParams,proto3" json:"plan_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrevIndexUuid *string           `protobuf:"bytes,4,opt,name=prev_index_uuid,json=prevIndexUuid,proto3,oneof" json:"prev_index_uuid,omitempty"`
	SourceName    *string           `protobuf:"bytes,5,opt,name=source_name,json=sourceName,proto3,oneof" json:"source_name,omitempty"`
	SourceParams  map[string][]byte `protobuf:"bytes,6,rep,name=source_params,json=sourceParams,proto3" json:"source_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SourceType    *string           `protobuf:"bytes,7,opt,name=source_type,json=sourceType,proto3,oneof" json:"source_type,omitempty"`
	SourceUuid    *string           `protobuf:"bytes,8,opt,name=source_uuid,json=sourceUuid,proto3,oneof" json:"source_uuid,omitempty"`
	Type          string            `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	BucketName    *string           `protobuf:"bytes,10,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName     *string           `protobuf:"bytes,11,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIndexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateIndexRequest) GetParams() map[string][]byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateIndexRequest) GetPlanParams() map[string][]byte {
	if x != nil {
		return x.PlanParams
	}
	return nil
}

func (x *CreateIndexRequest) GetPrevIndexUuid() string {
	if x != nil && x.PrevIndexUuid != nil {
		return *x.PrevIndexUuid
	}
	return ""
}

func (x *CreateIndexRequest) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *CreateIndexRequest) GetSourceParams() map[string][]byte {
	if x != nil {
		return x.SourceParams
	}
	return nil
}

func (x *CreateIndexRequest) GetSourceType() string {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ""
}

func (x *CreateIndexRequest) GetSourceUuid() string {
	if x != nil && x.SourceUuid != nil {
		return *x.SourceUuid
	}
	return ""
}

func (x *CreateIndexRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateIndexRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *CreateIndexRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type CreateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{2}
}

type UpdateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *Index  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *UpdateIndexRequest) Reset() {
	*x = UpdateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIndexRequest) ProtoMessage() {}

func (x *UpdateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIndexRequest.ProtoReflect.Descriptor instead.
func (*UpdateIndexRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateIndexRequest) GetIndex() *Index {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *UpdateIndexRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *UpdateIndexRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type UpdateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIndexResponse) Reset() {
	*x = UpdateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIndexResponse) ProtoMessage() {}

func (x *UpdateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIndexResponse.ProtoReflect.Descriptor instead.
func (*UpdateIndexResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{4}
}

type GetIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *GetIndexRequest) Reset() {
	*x = GetIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexRequest) ProtoMessage() {}

func (x *GetIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexRequest.ProtoReflect.Descriptor instead.
func (*GetIndexRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{5}
}

func (x *GetIndexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetIndexRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *GetIndexRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type GetIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *Index `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetIndexResponse) Reset() {
	*x = GetIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexResponse) ProtoMessage() {}

func (x *GetIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexResponse.ProtoReflect.Descriptor instead.
func (*GetIndexResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{6}
}

func (x *GetIndexResponse) GetIndex() *Index {
	if x != nil {
		return x.Index
	}
	return nil
}

type ListIndexesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName *string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,2,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *ListIndexesRequest) Reset() {
	*x = ListIndexesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndexesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexesRequest) ProtoMessage() {}

func (x *ListIndexesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexesRequest.ProtoReflect.Descriptor instead.
func (*ListIndexesRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{7}
}

func (x *ListIndexesRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *ListIndexesRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type ListIndexesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*Index `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *ListIndexesResponse) Reset() {
	*x = ListIndexesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndexesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexesResponse) ProtoMessage() {}

func (x *ListIndexesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexesResponse.ProtoReflect.Descriptor instead.
func (*ListIndexesResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{8}
}

func (x *ListIndexesResponse) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type DeleteIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *DeleteIndexRequest) Reset() {
	*x = DeleteIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexRequest) ProtoMessage() {}

func (x *DeleteIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteIndexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteIndexRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *DeleteIndexRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type DeleteIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIndexResponse) Reset() {
	*x = DeleteIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexResponse) ProtoMessage() {}

func (x *DeleteIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{10}
}

type AnalyzeDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Doc        []byte  `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	BucketName *string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,4,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *AnalyzeDocumentRequest) Reset() {
	*x = AnalyzeDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeDocumentRequest) ProtoMessage() {}

func (x *AnalyzeDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeDocumentRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeDocumentRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{11}
}

func (x *AnalyzeDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalyzeDocumentRequest) GetDoc() []byte {
	if x != nil {
		return x.Doc
	}
	return nil
}

func (x *AnalyzeDocumentRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *AnalyzeDocumentRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type AnalyzeDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Analyzed []byte `protobuf:"bytes,2,opt,name=analyzed,proto3" json:"analyzed,omitempty"`
}

func (x *AnalyzeDocumentResponse) Reset() {
	*x = AnalyzeDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeDocumentResponse) ProtoMessage() {}

func (x *AnalyzeDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeDocumentResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeDocumentResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{12}
}

func (x *AnalyzeDocumentResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AnalyzeDocumentResponse) GetAnalyzed() []byte {
	if x != nil {
		return x.Analyzed
	}
	return nil
}

type GetIndexedDocumentsCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,4,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *GetIndexedDocumentsCountRequest) Reset() {
	*x = GetIndexedDocumentsCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexedDocumentsCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexedDocumentsCountRequest) ProtoMessage() {}

func (x *GetIndexedDocumentsCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexedDocumentsCountRequest.ProtoReflect.Descriptor instead.
func (*GetIndexedDocumentsCountRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{13}
}

func (x *GetIndexedDocumentsCountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetIndexedDocumentsCountRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *GetIndexedDocumentsCountRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type GetIndexedDocumentsCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetIndexedDocumentsCountResponse) Reset() {
	*x = GetIndexedDocumentsCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexedDocumentsCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexedDocumentsCountResponse) ProtoMessage() {}

func (x *GetIndexedDocumentsCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexedDocumentsCountResponse.ProtoReflect.Descriptor instead.
func (*GetIndexedDocumentsCountResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{14}
}

func (x *GetIndexedDocumentsCountResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PauseIndexIngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *PauseIndexIngestRequest) Reset() {
	*x = PauseIndexIngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseIndexIngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseIndexIngestRequest) ProtoMessage() {}

func (x *PauseIndexIngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseIndexIngestRequest.ProtoReflect.Descriptor instead.
func (*PauseIndexIngestRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{15}
}

func (x *PauseIndexIngestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PauseIndexIngestRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *PauseIndexIngestRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type PauseIndexIngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseIndexIngestResponse) Reset() {
	*x = PauseIndexIngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseIndexIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseIndexIngestResponse) ProtoMessage() {}

func (x *PauseIndexIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseIndexIngestResponse.ProtoReflect.Descriptor instead.
func (*PauseIndexIngestResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{16}
}

type ResumeIndexIngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *ResumeIndexIngestRequest) Reset() {
	*x = ResumeIndexIngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeIndexIngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeIndexIngestRequest) ProtoMessage() {}

func (x *ResumeIndexIngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeIndexIngestRequest.ProtoReflect.Descriptor instead.
func (*ResumeIndexIngestRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{17}
}

func (x *ResumeIndexIngestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResumeIndexIngestRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *ResumeIndexIngestRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type ResumeIndexIngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeIndexIngestResponse) Reset() {
	*x = ResumeIndexIngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeIndexIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeIndexIngestResponse) ProtoMessage() {}

func (x *ResumeIndexIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeIndexIngestResponse.ProtoReflect.Descriptor instead.
func (*ResumeIndexIngestResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{18}
}

type AllowIndexQueryingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *AllowIndexQueryingRequest) Reset() {
	*x = AllowIndexQueryingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowIndexQueryingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowIndexQueryingRequest) ProtoMessage() {}

func (x *AllowIndexQueryingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowIndexQueryingRequest.ProtoReflect.Descriptor instead.
func (*AllowIndexQueryingRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{19}
}

func (x *AllowIndexQueryingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllowIndexQueryingRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *AllowIndexQueryingRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type AllowIndexQueryingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllowIndexQueryingResponse) Reset() {
	*x = AllowIndexQueryingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowIndexQueryingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowIndexQueryingResponse) ProtoMessage() {}

func (x *AllowIndexQueryingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowIndexQueryingResponse.ProtoReflect.Descriptor instead.
func (*AllowIndexQueryingResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{20}
}

type DisallowIndexQueryingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *DisallowIndexQueryingRequest) Reset() {
	*x = DisallowIndexQueryingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowIndexQueryingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowIndexQueryingRequest) ProtoMessage() {}

func (x *DisallowIndexQueryingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowIndexQueryingRequest.ProtoReflect.Descriptor instead.
func (*DisallowIndexQueryingRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{21}
}

func (x *DisallowIndexQueryingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisallowIndexQueryingRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *DisallowIndexQueryingRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type DisallowIndexQueryingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisallowIndexQueryingResponse) Reset() {
	*x = DisallowIndexQueryingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowIndexQueryingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowIndexQueryingResponse) ProtoMessage() {}

func (x *DisallowIndexQueryingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowIndexQueryingResponse.ProtoReflect.Descriptor instead.
func (*DisallowIndexQueryingResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{22}
}

type FreezeIndexPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *FreezeIndexPlanRequest) Reset() {
	*x = FreezeIndexPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeIndexPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeIndexPlanRequest) ProtoMessage() {}

func (x *FreezeIndexPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeIndexPlanRequest.ProtoReflect.Descriptor instead.
func (*FreezeIndexPlanRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{23}
}

func (x *FreezeIndexPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FreezeIndexPlanRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *FreezeIndexPlanRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type FreezeIndexPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FreezeIndexPlanResponse) Reset() {
	*x = FreezeIndexPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeIndexPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeIndexPlanResponse) ProtoMessage() {}

func (x *FreezeIndexPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeIndexPlanResponse.ProtoReflect.Descriptor instead.
func (*FreezeIndexPlanResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{24}
}

type UnfreezeIndexPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BucketName *string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	ScopeName  *string `protobuf:"bytes,3,opt,name=scope_name,json=scopeName,proto3,oneof" json:"scope_name,omitempty"`
}

func (x *UnfreezeIndexPlanRequest) Reset() {
	*x = UnfreezeIndexPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfreezeIndexPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfreezeIndexPlanRequest) ProtoMessage() {}

func (x *UnfreezeIndexPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfreezeIndexPlanRequest.ProtoReflect.Descriptor instead.
func (*UnfreezeIndexPlanRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{25}
}

func (x *UnfreezeIndexPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnfreezeIndexPlanRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *UnfreezeIndexPlanRequest) GetScopeName() string {
	if x != nil && x.ScopeName != nil {
		return *x.ScopeName
	}
	return ""
}

type UnfreezeIndexPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnfreezeIndexPlanResponse) Reset() {
	*x = UnfreezeIndexPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfreezeIndexPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfreezeIndexPlanResponse) ProtoMessage() {}

func (x *UnfreezeIndexPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_admin_search_v1_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfreezeIndexPlanResponse.ProtoReflect.Descriptor instead.
func (*UnfreezeIndexPlanResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_admin_search_v1_search_proto_rawDescGZIP(), []int{26}
}

var File_couchbase_admin_search_v1_search_proto protoreflect.FileDescriptor

var file_couchbase_admin_search_v1_search_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x22, 0x92, 0x05, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x39, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xdc, 0x06, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7d, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4d, 0x0a, 0x17, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64,
	0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe5, 0x0c, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x65, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01,
	0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x75,
	0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x11, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x75, 0x63,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x97, 0x02, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x31, 0xaa, 0x02, 0x26, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x30, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5c, 0x56, 0x31, 0xea, 0x02, 0x35, 0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x3a,
	0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x3a, 0x3a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a,
	0x3a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_couchbase_admin_search_v1_search_proto_rawDescOnce sync.Once
	file_couchbase_admin_search_v1_search_proto_rawDescData = file_couchbase_admin_search_v1_search_proto_rawDesc
)

func file_couchbase_admin_search_v1_search_proto_rawDescGZIP() []byte {
	file_couchbase_admin_search_v1_search_proto_rawDescOnce.Do(func() {
		file_couchbase_admin_search_v1_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_couchbase_admin_search_v1_search_proto_rawDescData)
	})
	return file_couchbase_admin_search_v1_search_proto_rawDescData
}

var file_couchbase_admin_search_v1_search_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_couchbase_admin_search_v1_search_proto_goTypes = []interface{}{
	(*Index)(nil),                            // 0: couchbase.admin.search.v1.Index
	(*CreateIndexRequest)(nil),               // 1: couchbase.admin.search.v1.CreateIndexRequest
	(*CreateIndexResponse)(nil),              // 2: couchbase.admin.search.v1.CreateIndexResponse
	(*UpdateIndexRequest)(nil),               // 3: couchbase.admin.search.v1.UpdateIndexRequest
	(*UpdateIndexResponse)(nil),              // 4: couchbase.admin.search.v1.UpdateIndexResponse
	(*GetIndexRequest)(nil),                  // 5: couchbase.admin.search.v1.GetIndexRequest
	(*GetIndexResponse)(nil),                 // 6: couchbase.admin.search.v1.GetIndexResponse
	(*ListIndexesRequest)(nil),               // 7: couchbase.admin.search.v1.ListIndexesRequest
	(*ListIndexesResponse)(nil),              // 8: couchbase.admin.search.v1.ListIndexesResponse
	(*DeleteIndexRequest)(nil),               // 9: couchbase.admin.search.v1.DeleteIndexRequest
	(*DeleteIndexResponse)(nil),              // 10: couchbase.admin.search.v1.DeleteIndexResponse
	(*AnalyzeDocumentRequest)(nil),           // 11: couchbase.admin.search.v1.AnalyzeDocumentRequest
	(*AnalyzeDocumentResponse)(nil),          // 12: couchbase.admin.search.v1.AnalyzeDocumentResponse
	(*GetIndexedDocumentsCountRequest)(nil),  // 13: couchbase.admin.search.v1.GetIndexedDocumentsCountRequest
	(*GetIndexedDocumentsCountResponse)(nil), // 14: couchbase.admin.search.v1.GetIndexedDocumentsCountResponse
	(*PauseIndexIngestRequest)(nil),          // 15: couchbase.admin.search.v1.PauseIndexIngestRequest
	(*PauseIndexIngestResponse)(nil),         // 16: couchbase.admin.search.v1.PauseIndexIngestResponse
	(*ResumeIndexIngestRequest)(nil),         // 17: couchbase.admin.search.v1.ResumeIndexIngestRequest
	(*ResumeIndexIngestResponse)(nil),        // 18: couchbase.admin.search.v1.ResumeIndexIngestResponse
	(*AllowIndexQueryingRequest)(nil),        // 19: couchbase.admin.search.v1.AllowIndexQueryingRequest
	(*AllowIndexQueryingResponse)(nil),       // 20: couchbase.admin.search.v1.AllowIndexQueryingResponse
	(*DisallowIndexQueryingRequest)(nil),     // 21: couchbase.admin.search.v1.DisallowIndexQueryingRequest
	(*DisallowIndexQueryingResponse)(nil),    // 22: couchbase.admin.search.v1.DisallowIndexQueryingResponse
	(*FreezeIndexPlanRequest)(nil),           // 23: couchbase.admin.search.v1.FreezeIndexPlanRequest
	(*FreezeIndexPlanResponse)(nil),          // 24: couchbase.admin.search.v1.FreezeIndexPlanResponse
	(*UnfreezeIndexPlanRequest)(nil),         // 25: couchbase.admin.search.v1.UnfreezeIndexPlanRequest
	(*UnfreezeIndexPlanResponse)(nil),        // 26: couchbase.admin.search.v1.UnfreezeIndexPlanResponse
	nil,                                      // 27: couchbase.admin.search.v1.Index.ParamsEntry
	nil,                                      // 28: couchbase.admin.search.v1.Index.PlanParamsEntry
	nil,                                      // 29: couchbase.admin.search.v1.Index.SourceParamsEntry
	nil,                                      // 30: couchbase.admin.search.v1.CreateIndexRequest.ParamsEntry
	nil,                                      // 31: couchbase.admin.search.v1.CreateIndexRequest.PlanParamsEntry
	nil,                                      // 32: couchbase.admin.search.v1.CreateIndexRequest.SourceParamsEntry
}
var file_couchbase_admin_search_v1_search_proto_depIdxs = []int32{
	27, // 0: couchbase.admin.search.v1.Index.params:type_name -> couchbase.admin.search.v1.Index.ParamsEntry
	28, // 1: couchbase.admin.search.v1.Index.plan_params:type_name -> couchbase.admin.search.v1.Index.PlanParamsEntry
	29, // 2: couchbase.admin.search.v1.Index.source_params:type_name -> couchbase.admin.search.v1.Index.SourceParamsEntry
	30, // 3: couchbase.admin.search.v1.CreateIndexRequest.params:type_name -> couchbase.admin.search.v1.CreateIndexRequest.ParamsEntry
	31, // 4: couchbase.admin.search.v1.CreateIndexRequest.plan_params:type_name -> couchbase.admin.search.v1.CreateIndexRequest.PlanParamsEntry
	32, // 5: couchbase.admin.search.v1.CreateIndexRequest.source_params:type_name -> couchbase.admin.search.v1.CreateIndexRequest.SourceParamsEntry
	0,  // 6: couchbase.admin.search.v1.UpdateIndexRequest.index:type_name -> couchbase.admin.search.v1.Index
	0,  // 7: couchbase.admin.search.v1.GetIndexResponse.index:type_name -> couchbase.admin.search.v1.Index
	0,  // 8: couchbase.admin.search.v1.ListIndexesResponse.indexes:type_name -> couchbase.admin.search.v1.Index
	5,  // 9: couchbase.admin.search.v1.SearchAdminService.GetIndex:input_type -> couchbase.admin.search.v1.GetIndexRequest
	7,  // 10: couchbase.admin.search.v1.SearchAdminService.ListIndexes:input_type -> couchbase.admin.search.v1.ListIndexesRequest
	1,  // 11: couchbase.admin.search.v1.SearchAdminService.CreateIndex:input_type -> couchbase.admin.search.v1.CreateIndexRequest
	3,  // 12: couchbase.admin.search.v1.SearchAdminService.UpdateIndex:input_type -> couchbase.admin.search.v1.UpdateIndexRequest
	9,  // 13: couchbase.admin.search.v1.SearchAdminService.DeleteIndex:input_type -> couchbase.admin.search.v1.DeleteIndexRequest
	11, // 14: couchbase.admin.search.v1.SearchAdminService.AnalyzeDocument:input_type -> couchbase.admin.search.v1.AnalyzeDocumentRequest
	13, // 15: couchbase.admin.search.v1.SearchAdminService.GetIndexedDocumentsCount:input_type -> couchbase.admin.search.v1.GetIndexedDocumentsCountRequest
	15, // 16: couchbase.admin.search.v1.SearchAdminService.PauseIndexIngest:input_type -> couchbase.admin.search.v1.PauseIndexIngestRequest
	17, // 17: couchbase.admin.search.v1.SearchAdminService.ResumeIndexIngest:input_type -> couchbase.admin.search.v1.ResumeIndexIngestRequest
	19, // 18: couchbase.admin.search.v1.SearchAdminService.AllowIndexQuerying:input_type -> couchbase.admin.search.v1.AllowIndexQueryingRequest
	21, // 19: couchbase.admin.search.v1.SearchAdminService.DisallowIndexQuerying:input_type -> couchbase.admin.search.v1.DisallowIndexQueryingRequest
	23, // 20: couchbase.admin.search.v1.SearchAdminService.FreezeIndexPlan:input_type -> couchbase.admin.search.v1.FreezeIndexPlanRequest
	25, // 21: couchbase.admin.search.v1.SearchAdminService.UnfreezeIndexPlan:input_type -> couchbase.admin.search.v1.UnfreezeIndexPlanRequest
	6,  // 22: couchbase.admin.search.v1.SearchAdminService.GetIndex:output_type -> couchbase.admin.search.v1.GetIndexResponse
	8,  // 23: couchbase.admin.search.v1.SearchAdminService.ListIndexes:output_type -> couchbase.admin.search.v1.ListIndexesResponse
	2,  // 24: couchbase.admin.search.v1.SearchAdminService.CreateIndex:output_type -> couchbase.admin.search.v1.CreateIndexResponse
	4,  // 25: couchbase.admin.search.v1.SearchAdminService.UpdateIndex:output_type -> couchbase.admin.search.v1.UpdateIndexResponse
	10, // 26: couchbase.admin.search.v1.SearchAdminService.DeleteIndex:output_type -> couchbase.admin.search.v1.DeleteIndexResponse
	12, // 27: couchbase.admin.search.v1.SearchAdminService.AnalyzeDocument:output_type -> couchbase.admin.search.v1.AnalyzeDocumentResponse
	14, // 28: couchbase.admin.search.v1.SearchAdminService.GetIndexedDocumentsCount:output_type -> couchbase.admin.search.v1.GetIndexedDocumentsCountResponse
	16, // 29: couchbase.admin.search.v1.SearchAdminService.PauseIndexIngest:output_type -> couchbase.admin.search.v1.PauseIndexIngestResponse
	18, // 30: couchbase.admin.search.v1.SearchAdminService.ResumeIndexIngest:output_type -> couchbase.admin.search.v1.ResumeIndexIngestResponse
	20, // 31: couchbase.admin.search.v1.SearchAdminService.AllowIndexQuerying:output_type -> couchbase.admin.search.v1.AllowIndexQueryingResponse
	22, // 32: couchbase.admin.search.v1.SearchAdminService.DisallowIndexQuerying:output_type -> couchbase.admin.search.v1.DisallowIndexQueryingResponse
	24, // 33: couchbase.admin.search.v1.SearchAdminService.FreezeIndexPlan:output_type -> couchbase.admin.search.v1.FreezeIndexPlanResponse
	26, // 34: couchbase.admin.search.v1.SearchAdminService.UnfreezeIndexPlan:output_type -> couchbase.admin.search.v1.UnfreezeIndexPlanResponse
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_couchbase_admin_search_v1_search_proto_init() }
func file_couchbase_admin_search_v1_search_proto_init() {
	if File_couchbase_admin_search_v1_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_couchbase_admin_search_v1_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIndexesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIndexesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexedDocumentsCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexedDocumentsCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseIndexIngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseIndexIngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeIndexIngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeIndexIngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowIndexQueryingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowIndexQueryingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowIndexQueryingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowIndexQueryingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeIndexPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeIndexPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfreezeIndexPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_admin_search_v1_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfreezeIndexPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_couchbase_admin_search_v1_search_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_couchbase_admin_search_v1_search_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_couchbase_admin_search_v1_search_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_couchbase_admin_search_v1_search_proto_goTypes,
		DependencyIndexes: file_couchbase_admin_search_v1_search_proto_depIdxs,
		MessageInfos:      file_couchbase_admin_search_v1_search_proto_msgTypes,
	}.Build()
	File_couchbase_admin_search_v1_search_proto = out.File
	file_couchbase_admin_search_v1_search_proto_rawDesc = nil
	file_couchbase_admin_search_v1_search_proto_goTypes = nil
	file_couchbase_admin_search_v1_search_proto_depIdxs = nil
}
