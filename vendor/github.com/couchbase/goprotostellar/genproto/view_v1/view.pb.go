// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: couchbase/view/v1/view.proto

package view_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewQueryRequest_ScanConsistency int32

const (
	ViewQueryRequest_SCAN_CONSISTENCY_NOT_BOUNDED  ViewQueryRequest_ScanConsistency = 0
	ViewQueryRequest_SCAN_CONSISTENCY_REQUEST_PLUS ViewQueryRequest_ScanConsistency = 1
	ViewQueryRequest_SCAN_CONSISTENCY_UPDATE_AFTER ViewQueryRequest_ScanConsistency = 2
)

// Enum value maps for ViewQueryRequest_ScanConsistency.
var (
	ViewQueryRequest_ScanConsistency_name = map[int32]string{
		0: "SCAN_CONSISTENCY_NOT_BOUNDED",
		1: "SCAN_CONSISTENCY_REQUEST_PLUS",
		2: "SCAN_CONSISTENCY_UPDATE_AFTER",
	}
	ViewQueryRequest_ScanConsistency_value = map[string]int32{
		"SCAN_CONSISTENCY_NOT_BOUNDED":  0,
		"SCAN_CONSISTENCY_REQUEST_PLUS": 1,
		"SCAN_CONSISTENCY_UPDATE_AFTER": 2,
	}
)

func (x ViewQueryRequest_ScanConsistency) Enum() *ViewQueryRequest_ScanConsistency {
	p := new(ViewQueryRequest_ScanConsistency)
	*p = x
	return p
}

func (x ViewQueryRequest_ScanConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewQueryRequest_ScanConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_view_v1_view_proto_enumTypes[0].Descriptor()
}

func (ViewQueryRequest_ScanConsistency) Type() protoreflect.EnumType {
	return &file_couchbase_view_v1_view_proto_enumTypes[0]
}

func (x ViewQueryRequest_ScanConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewQueryRequest_ScanConsistency.Descriptor instead.
func (ViewQueryRequest_ScanConsistency) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{0, 0}
}

type ViewQueryRequest_ErrorMode int32

const (
	ViewQueryRequest_ERROR_MODE_CONTINUE ViewQueryRequest_ErrorMode = 0
	ViewQueryRequest_ERROR_MODE_STOP     ViewQueryRequest_ErrorMode = 1
)

// Enum value maps for ViewQueryRequest_ErrorMode.
var (
	ViewQueryRequest_ErrorMode_name = map[int32]string{
		0: "ERROR_MODE_CONTINUE",
		1: "ERROR_MODE_STOP",
	}
	ViewQueryRequest_ErrorMode_value = map[string]int32{
		"ERROR_MODE_CONTINUE": 0,
		"ERROR_MODE_STOP":     1,
	}
)

func (x ViewQueryRequest_ErrorMode) Enum() *ViewQueryRequest_ErrorMode {
	p := new(ViewQueryRequest_ErrorMode)
	*p = x
	return p
}

func (x ViewQueryRequest_ErrorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewQueryRequest_ErrorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_view_v1_view_proto_enumTypes[1].Descriptor()
}

func (ViewQueryRequest_ErrorMode) Type() protoreflect.EnumType {
	return &file_couchbase_view_v1_view_proto_enumTypes[1]
}

func (x ViewQueryRequest_ErrorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewQueryRequest_ErrorMode.Descriptor instead.
func (ViewQueryRequest_ErrorMode) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{0, 1}
}

type ViewQueryRequest_Namespace int32

const (
	ViewQueryRequest_NAMESPACE_PRODUCTION  ViewQueryRequest_Namespace = 0
	ViewQueryRequest_NAMESPACE_DEVELOPMENT ViewQueryRequest_Namespace = 1
)

// Enum value maps for ViewQueryRequest_Namespace.
var (
	ViewQueryRequest_Namespace_name = map[int32]string{
		0: "NAMESPACE_PRODUCTION",
		1: "NAMESPACE_DEVELOPMENT",
	}
	ViewQueryRequest_Namespace_value = map[string]int32{
		"NAMESPACE_PRODUCTION":  0,
		"NAMESPACE_DEVELOPMENT": 1,
	}
)

func (x ViewQueryRequest_Namespace) Enum() *ViewQueryRequest_Namespace {
	p := new(ViewQueryRequest_Namespace)
	*p = x
	return p
}

func (x ViewQueryRequest_Namespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewQueryRequest_Namespace) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_view_v1_view_proto_enumTypes[2].Descriptor()
}

func (ViewQueryRequest_Namespace) Type() protoreflect.EnumType {
	return &file_couchbase_view_v1_view_proto_enumTypes[2]
}

func (x ViewQueryRequest_Namespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewQueryRequest_Namespace.Descriptor instead.
func (ViewQueryRequest_Namespace) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{0, 2}
}

type ViewQueryRequest_Order int32

const (
	ViewQueryRequest_ORDER_ASCENDING  ViewQueryRequest_Order = 0
	ViewQueryRequest_ORDER_DESCENDING ViewQueryRequest_Order = 1
)

// Enum value maps for ViewQueryRequest_Order.
var (
	ViewQueryRequest_Order_name = map[int32]string{
		0: "ORDER_ASCENDING",
		1: "ORDER_DESCENDING",
	}
	ViewQueryRequest_Order_value = map[string]int32{
		"ORDER_ASCENDING":  0,
		"ORDER_DESCENDING": 1,
	}
)

func (x ViewQueryRequest_Order) Enum() *ViewQueryRequest_Order {
	p := new(ViewQueryRequest_Order)
	*p = x
	return p
}

func (x ViewQueryRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewQueryRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_view_v1_view_proto_enumTypes[3].Descriptor()
}

func (ViewQueryRequest_Order) Type() protoreflect.EnumType {
	return &file_couchbase_view_v1_view_proto_enumTypes[3]
}

func (x ViewQueryRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewQueryRequest_Order.Descriptor instead.
func (ViewQueryRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{0, 3}
}

type ViewQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName         string                            `protobuf:"bytes,8,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	DesignDocumentName string                            `protobuf:"bytes,1,opt,name=design_document_name,json=designDocumentName,proto3" json:"design_document_name,omitempty"`
	ViewName           string                            `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	Skip               *uint32                           `protobuf:"varint,3,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
	Limit              *uint32                           `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	ScanConsistency    *ViewQueryRequest_ScanConsistency `protobuf:"varint,5,opt,name=scan_consistency,json=scanConsistency,proto3,enum=couchbase.view.v1.ViewQueryRequest_ScanConsistency,oneof" json:"scan_consistency,omitempty"`
	Reduce             *bool                             `protobuf:"varint,6,opt,name=reduce,proto3,oneof" json:"reduce,omitempty"`
	Group              *bool                             `protobuf:"varint,7,opt,name=group,proto3,oneof" json:"group,omitempty"`
	GroupLevel         *uint32                           `protobuf:"varint,9,opt,name=group_level,json=groupLevel,proto3,oneof" json:"group_level,omitempty"`
	Key                []byte                            `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Keys               [][]byte                          `protobuf:"bytes,11,rep,name=keys,proto3" json:"keys,omitempty"`
	StartKey           []byte                            `protobuf:"bytes,12,opt,name=start_key,json=startKey,proto3,oneof" json:"start_key,omitempty"`
	EndKey             []byte                            `protobuf:"bytes,13,opt,name=end_key,json=endKey,proto3,oneof" json:"end_key,omitempty"`
	InclusiveEnd       *bool                             `protobuf:"varint,14,opt,name=inclusive_end,json=inclusiveEnd,proto3,oneof" json:"inclusive_end,omitempty"`
	StartKeyDocId      *string                           `protobuf:"bytes,15,opt,name=start_key_doc_id,json=startKeyDocId,proto3,oneof" json:"start_key_doc_id,omitempty"`
	EndKeyDocId        *string                           `protobuf:"bytes,16,opt,name=end_key_doc_id,json=endKeyDocId,proto3,oneof" json:"end_key_doc_id,omitempty"`
	OnError            *ViewQueryRequest_ErrorMode       `protobuf:"varint,17,opt,name=on_error,json=onError,proto3,enum=couchbase.view.v1.ViewQueryRequest_ErrorMode,oneof" json:"on_error,omitempty"`
	Debug              *bool                             `protobuf:"varint,18,opt,name=debug,proto3,oneof" json:"debug,omitempty"`
	Namespace          *ViewQueryRequest_Namespace       `protobuf:"varint,19,opt,name=namespace,proto3,enum=couchbase.view.v1.ViewQueryRequest_Namespace,oneof" json:"namespace,omitempty"`
	Order              *ViewQueryRequest_Order           `protobuf:"varint,20,opt,name=order,proto3,enum=couchbase.view.v1.ViewQueryRequest_Order,oneof" json:"order,omitempty"`
}

func (x *ViewQueryRequest) Reset() {
	*x = ViewQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_view_v1_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewQueryRequest) ProtoMessage() {}

func (x *ViewQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_view_v1_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewQueryRequest.ProtoReflect.Descriptor instead.
func (*ViewQueryRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{0}
}

func (x *ViewQueryRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *ViewQueryRequest) GetDesignDocumentName() string {
	if x != nil {
		return x.DesignDocumentName
	}
	return ""
}

func (x *ViewQueryRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *ViewQueryRequest) GetSkip() uint32 {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return 0
}

func (x *ViewQueryRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ViewQueryRequest) GetScanConsistency() ViewQueryRequest_ScanConsistency {
	if x != nil && x.ScanConsistency != nil {
		return *x.ScanConsistency
	}
	return ViewQueryRequest_SCAN_CONSISTENCY_NOT_BOUNDED
}

func (x *ViewQueryRequest) GetReduce() bool {
	if x != nil && x.Reduce != nil {
		return *x.Reduce
	}
	return false
}

func (x *ViewQueryRequest) GetGroup() bool {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return false
}

func (x *ViewQueryRequest) GetGroupLevel() uint32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

func (x *ViewQueryRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ViewQueryRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ViewQueryRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ViewQueryRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ViewQueryRequest) GetInclusiveEnd() bool {
	if x != nil && x.InclusiveEnd != nil {
		return *x.InclusiveEnd
	}
	return false
}

func (x *ViewQueryRequest) GetStartKeyDocId() string {
	if x != nil && x.StartKeyDocId != nil {
		return *x.StartKeyDocId
	}
	return ""
}

func (x *ViewQueryRequest) GetEndKeyDocId() string {
	if x != nil && x.EndKeyDocId != nil {
		return *x.EndKeyDocId
	}
	return ""
}

func (x *ViewQueryRequest) GetOnError() ViewQueryRequest_ErrorMode {
	if x != nil && x.OnError != nil {
		return *x.OnError
	}
	return ViewQueryRequest_ERROR_MODE_CONTINUE
}

func (x *ViewQueryRequest) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *ViewQueryRequest) GetNamespace() ViewQueryRequest_Namespace {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ViewQueryRequest_NAMESPACE_PRODUCTION
}

func (x *ViewQueryRequest) GetOrder() ViewQueryRequest_Order {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ViewQueryRequest_ORDER_ASCENDING
}

type ViewQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows     []*ViewQueryResponse_Row    `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	MetaData *ViewQueryResponse_MetaData `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
}

func (x *ViewQueryResponse) Reset() {
	*x = ViewQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_view_v1_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewQueryResponse) ProtoMessage() {}

func (x *ViewQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_view_v1_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewQueryResponse.ProtoReflect.Descriptor instead.
func (*ViewQueryResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{1}
}

func (x *ViewQueryResponse) GetRows() []*ViewQueryResponse_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ViewQueryResponse) GetMetaData() *ViewQueryResponse_MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type ViewQueryResponse_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ViewQueryResponse_Row) Reset() {
	*x = ViewQueryResponse_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_view_v1_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewQueryResponse_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewQueryResponse_Row) ProtoMessage() {}

func (x *ViewQueryResponse_Row) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_view_v1_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewQueryResponse_Row.ProtoReflect.Descriptor instead.
func (*ViewQueryResponse_Row) Descriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ViewQueryResponse_Row) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewQueryResponse_Row) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ViewQueryResponse_Row) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ViewQueryResponse_MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRows uint64 `protobuf:"varint,1,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	Debug     []byte `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ViewQueryResponse_MetaData) Reset() {
	*x = ViewQueryResponse_MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_couchbase_view_v1_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewQueryResponse_MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewQueryResponse_MetaData) ProtoMessage() {}

func (x *ViewQueryResponse_MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_view_v1_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewQueryResponse_MetaData.ProtoReflect.Descriptor instead.
func (*ViewQueryResponse_MetaData) Descriptor() ([]byte, []int) {
	return file_couchbase_view_v1_view_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ViewQueryResponse_MetaData) GetTotalRows() uint64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *ViewQueryResponse_MetaData) GetDebug() []byte {
	if x != nil {
		return x.Debug
	}
	return nil
}

var File_couchbase_view_v1_view_proto protoreflect.FileDescriptor

var file_couchbase_view_v1_view_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76,
	0x31, 0x22, 0xec, 0x0a, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4b,
	0x65, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0c, 0x52, 0x07, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x0e, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x0f, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x79, 0x0a, 0x0f,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4c,
	0x55, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0x39, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x22, 0x32, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xb0, 0x02, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3f, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x69, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x23, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0xe6,
	0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x76, 0x31, 0xaa, 0x02, 0x1e, 0x43,
	0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x28,
	0x43, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5c, 0x56, 0x69, 0x65, 0x77, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x2c, 0x43, 0x6f, 0x75, 0x63, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x3a, 0x3a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0x56,
	0x69, 0x65, 0x77, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_couchbase_view_v1_view_proto_rawDescOnce sync.Once
	file_couchbase_view_v1_view_proto_rawDescData = file_couchbase_view_v1_view_proto_rawDesc
)

func file_couchbase_view_v1_view_proto_rawDescGZIP() []byte {
	file_couchbase_view_v1_view_proto_rawDescOnce.Do(func() {
		file_couchbase_view_v1_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_couchbase_view_v1_view_proto_rawDescData)
	})
	return file_couchbase_view_v1_view_proto_rawDescData
}

var file_couchbase_view_v1_view_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_couchbase_view_v1_view_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_couchbase_view_v1_view_proto_goTypes = []interface{}{
	(ViewQueryRequest_ScanConsistency)(0), // 0: couchbase.view.v1.ViewQueryRequest.ScanConsistency
	(ViewQueryRequest_ErrorMode)(0),       // 1: couchbase.view.v1.ViewQueryRequest.ErrorMode
	(ViewQueryRequest_Namespace)(0),       // 2: couchbase.view.v1.ViewQueryRequest.Namespace
	(ViewQueryRequest_Order)(0),           // 3: couchbase.view.v1.ViewQueryRequest.Order
	(*ViewQueryRequest)(nil),              // 4: couchbase.view.v1.ViewQueryRequest
	(*ViewQueryResponse)(nil),             // 5: couchbase.view.v1.ViewQueryResponse
	(*ViewQueryResponse_Row)(nil),         // 6: couchbase.view.v1.ViewQueryResponse.Row
	(*ViewQueryResponse_MetaData)(nil),    // 7: couchbase.view.v1.ViewQueryResponse.MetaData
}
var file_couchbase_view_v1_view_proto_depIdxs = []int32{
	0, // 0: couchbase.view.v1.ViewQueryRequest.scan_consistency:type_name -> couchbase.view.v1.ViewQueryRequest.ScanConsistency
	1, // 1: couchbase.view.v1.ViewQueryRequest.on_error:type_name -> couchbase.view.v1.ViewQueryRequest.ErrorMode
	2, // 2: couchbase.view.v1.ViewQueryRequest.namespace:type_name -> couchbase.view.v1.ViewQueryRequest.Namespace
	3, // 3: couchbase.view.v1.ViewQueryRequest.order:type_name -> couchbase.view.v1.ViewQueryRequest.Order
	6, // 4: couchbase.view.v1.ViewQueryResponse.rows:type_name -> couchbase.view.v1.ViewQueryResponse.Row
	7, // 5: couchbase.view.v1.ViewQueryResponse.meta_data:type_name -> couchbase.view.v1.ViewQueryResponse.MetaData
	4, // 6: couchbase.view.v1.ViewService.ViewQuery:input_type -> couchbase.view.v1.ViewQueryRequest
	5, // 7: couchbase.view.v1.ViewService.ViewQuery:output_type -> couchbase.view.v1.ViewQueryResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_couchbase_view_v1_view_proto_init() }
func file_couchbase_view_v1_view_proto_init() {
	if File_couchbase_view_v1_view_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_couchbase_view_v1_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_view_v1_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_view_v1_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewQueryResponse_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_couchbase_view_v1_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewQueryResponse_MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_couchbase_view_v1_view_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_couchbase_view_v1_view_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_couchbase_view_v1_view_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_couchbase_view_v1_view_proto_goTypes,
		DependencyIndexes: file_couchbase_view_v1_view_proto_depIdxs,
		EnumInfos:         file_couchbase_view_v1_view_proto_enumTypes,
		MessageInfos:      file_couchbase_view_v1_view_proto_msgTypes,
	}.Build()
	File_couchbase_view_v1_view_proto = out.File
	file_couchbase_view_v1_view_proto_rawDesc = nil
	file_couchbase_view_v1_view_proto_goTypes = nil
	file_couchbase_view_v1_view_proto_depIdxs = nil
}
