/*
* Copyright 2018 - Present Okta, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

// Code generated by okta openapi generator. DO NOT EDIT.

package okta

import "encoding/json"

type InactivityPolicyRuleCondition struct {
	Number    int64  `json:"-"`
	NumberPtr *int64 `json:"number,omitempty"`
	Unit      string `json:"unit,omitempty"`
}

func NewInactivityPolicyRuleCondition() *InactivityPolicyRuleCondition {
	return &InactivityPolicyRuleCondition{}
}

func (a *InactivityPolicyRuleCondition) IsPolicyInstance() bool {
	return true
}

func (a *InactivityPolicyRuleCondition) MarshalJSON() ([]byte, error) {
	type Alias InactivityPolicyRuleCondition
	type local struct {
		*Alias
	}
	result := local{Alias: (*Alias)(a)}
	if a.Number != 0 {
		result.NumberPtr = Int64Ptr(a.Number)
	}
	return json.Marshal(&result)
}

func (a *InactivityPolicyRuleCondition) UnmarshalJSON(data []byte) error {
	type Alias InactivityPolicyRuleCondition

	result := &struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return err
	}
	if result.NumberPtr != nil {
		a.Number = *result.NumberPtr
		a.NumberPtr = result.NumberPtr
	}
	return nil
}
