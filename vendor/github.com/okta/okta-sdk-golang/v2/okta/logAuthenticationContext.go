/*
* Copyright 2018 - Present Okta, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

// Code generated by okta openapi generator. DO NOT EDIT.

package okta

import "encoding/json"

type LogAuthenticationContext struct {
	AuthenticationProvider string     `json:"authenticationProvider,omitempty"`
	AuthenticationStep     int64      `json:"-"`
	AuthenticationStepPtr  *int64     `json:"authenticationStep,omitempty"`
	CredentialProvider     string     `json:"credentialProvider,omitempty"`
	CredentialType         string     `json:"credentialType,omitempty"`
	ExternalSessionId      string     `json:"externalSessionId,omitempty"`
	Interface              string     `json:"interface,omitempty"`
	Issuer                 *LogIssuer `json:"issuer,omitempty"`
}

func (a *LogAuthenticationContext) MarshalJSON() ([]byte, error) {
	type Alias LogAuthenticationContext
	type local struct {
		*Alias
	}
	result := local{Alias: (*Alias)(a)}
	if a.AuthenticationStep != 0 {
		result.AuthenticationStepPtr = Int64Ptr(a.AuthenticationStep)
	}
	return json.Marshal(&result)
}

func (a *LogAuthenticationContext) UnmarshalJSON(data []byte) error {
	type Alias LogAuthenticationContext

	result := &struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return err
	}
	if result.AuthenticationStepPtr != nil {
		a.AuthenticationStep = *result.AuthenticationStepPtr
		a.AuthenticationStepPtr = result.AuthenticationStepPtr
	}
	return nil
}
