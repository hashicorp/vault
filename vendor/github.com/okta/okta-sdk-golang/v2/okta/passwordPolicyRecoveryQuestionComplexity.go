/*
* Copyright 2018 - Present Okta, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

// Code generated by okta openapi generator. DO NOT EDIT.

package okta

import "encoding/json"

type PasswordPolicyRecoveryQuestionComplexity struct {
	MinLength    int64  `json:"-"`
	MinLengthPtr *int64 `json:"minLength,omitempty"`
}

func NewPasswordPolicyRecoveryQuestionComplexity() *PasswordPolicyRecoveryQuestionComplexity {
	return &PasswordPolicyRecoveryQuestionComplexity{}
}

func (a *PasswordPolicyRecoveryQuestionComplexity) IsPolicyInstance() bool {
	return true
}

func (a *PasswordPolicyRecoveryQuestionComplexity) MarshalJSON() ([]byte, error) {
	type Alias PasswordPolicyRecoveryQuestionComplexity
	type local struct {
		*Alias
	}
	result := local{Alias: (*Alias)(a)}
	if a.MinLength != 0 {
		result.MinLengthPtr = Int64Ptr(a.MinLength)
	}
	return json.Marshal(&result)
}

func (a *PasswordPolicyRecoveryQuestionComplexity) UnmarshalJSON(data []byte) error {
	type Alias PasswordPolicyRecoveryQuestionComplexity

	result := &struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return err
	}
	if result.MinLengthPtr != nil {
		a.MinLength = *result.MinLengthPtr
		a.MinLengthPtr = result.MinLengthPtr
	}
	return nil
}
