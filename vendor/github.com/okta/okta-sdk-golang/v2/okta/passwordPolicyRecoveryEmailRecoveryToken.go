/*
* Copyright 2018 - Present Okta, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

// Code generated by okta openapi generator. DO NOT EDIT.

package okta

import "encoding/json"

type PasswordPolicyRecoveryEmailRecoveryToken struct {
	TokenLifetimeMinutes    int64  `json:"-"`
	TokenLifetimeMinutesPtr *int64 `json:"tokenLifetimeMinutes"`
}

func NewPasswordPolicyRecoveryEmailRecoveryToken() *PasswordPolicyRecoveryEmailRecoveryToken {
	return &PasswordPolicyRecoveryEmailRecoveryToken{
		TokenLifetimeMinutes:    10080,
		TokenLifetimeMinutesPtr: Int64Ptr(10080),
	}
}

func (a *PasswordPolicyRecoveryEmailRecoveryToken) IsPolicyInstance() bool {
	return true
}

func (a *PasswordPolicyRecoveryEmailRecoveryToken) MarshalJSON() ([]byte, error) {
	type Alias PasswordPolicyRecoveryEmailRecoveryToken
	type local struct {
		*Alias
	}
	result := local{Alias: (*Alias)(a)}
	if a.TokenLifetimeMinutes != 0 {
		result.TokenLifetimeMinutesPtr = Int64Ptr(a.TokenLifetimeMinutes)
	}
	return json.Marshal(&result)
}

func (a *PasswordPolicyRecoveryEmailRecoveryToken) UnmarshalJSON(data []byte) error {
	type Alias PasswordPolicyRecoveryEmailRecoveryToken

	result := &struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return err
	}
	if result.TokenLifetimeMinutesPtr != nil {
		a.TokenLifetimeMinutes = *result.TokenLifetimeMinutesPtr
		a.TokenLifetimeMinutesPtr = result.TokenLifetimeMinutesPtr
	}
	return nil
}
