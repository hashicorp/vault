package models
// Malware current status
type WindowsMalwareState int

const (
    // Unknown
    UNKNOWN_WINDOWSMALWARESTATE WindowsMalwareState = iota
    // Detected
    DETECTED_WINDOWSMALWARESTATE
    // Cleaned
    CLEANED_WINDOWSMALWARESTATE
    // Quarantined
    QUARANTINED_WINDOWSMALWARESTATE
    // Removed
    REMOVED_WINDOWSMALWARESTATE
    // Allowed
    ALLOWED_WINDOWSMALWARESTATE
    // Blocked
    BLOCKED_WINDOWSMALWARESTATE
    // Clean failed
    CLEANFAILED_WINDOWSMALWARESTATE
    // Quarantine failed
    QUARANTINEFAILED_WINDOWSMALWARESTATE
    // Remove failed
    REMOVEFAILED_WINDOWSMALWARESTATE
    // Allow failed
    ALLOWFAILED_WINDOWSMALWARESTATE
    // Abandoned
    ABANDONED_WINDOWSMALWARESTATE
    // Block failed
    BLOCKFAILED_WINDOWSMALWARESTATE
)

func (i WindowsMalwareState) String() string {
    return []string{"unknown", "detected", "cleaned", "quarantined", "removed", "allowed", "blocked", "cleanFailed", "quarantineFailed", "removeFailed", "allowFailed", "abandoned", "blockFailed"}[i]
}
func ParseWindowsMalwareState(v string) (any, error) {
    result := UNKNOWN_WINDOWSMALWARESTATE
    switch v {
        case "unknown":
            result = UNKNOWN_WINDOWSMALWARESTATE
        case "detected":
            result = DETECTED_WINDOWSMALWARESTATE
        case "cleaned":
            result = CLEANED_WINDOWSMALWARESTATE
        case "quarantined":
            result = QUARANTINED_WINDOWSMALWARESTATE
        case "removed":
            result = REMOVED_WINDOWSMALWARESTATE
        case "allowed":
            result = ALLOWED_WINDOWSMALWARESTATE
        case "blocked":
            result = BLOCKED_WINDOWSMALWARESTATE
        case "cleanFailed":
            result = CLEANFAILED_WINDOWSMALWARESTATE
        case "quarantineFailed":
            result = QUARANTINEFAILED_WINDOWSMALWARESTATE
        case "removeFailed":
            result = REMOVEFAILED_WINDOWSMALWARESTATE
        case "allowFailed":
            result = ALLOWFAILED_WINDOWSMALWARESTATE
        case "abandoned":
            result = ABANDONED_WINDOWSMALWARESTATE
        case "blockFailed":
            result = BLOCKFAILED_WINDOWSMALWARESTATE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeWindowsMalwareState(values []WindowsMalwareState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i WindowsMalwareState) isMultiValue() bool {
    return false
}
