// Code generated by "enumer -type=CaseOp -transform=snake"; DO NOT EDIT.

package credsutil

import (
	"fmt"
)

const _CaseOpName = "keep_caseuppercaselowercase"

var _CaseOpIndex = [...]uint8{0, 9, 18, 27}

func (i CaseOp) String() string {
	if i < 0 || i >= CaseOp(len(_CaseOpIndex)-1) {
		return fmt.Sprintf("CaseOp(%d)", i)
	}
	return _CaseOpName[_CaseOpIndex[i]:_CaseOpIndex[i+1]]
}

var _CaseOpValues = []CaseOp{0, 1, 2}

var _CaseOpNameToValueMap = map[string]CaseOp{
	_CaseOpName[0:9]:   0,
	_CaseOpName[9:18]:  1,
	_CaseOpName[18:27]: 2,
}

// CaseOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CaseOpString(s string) (CaseOp, error) {
	if val, ok := _CaseOpNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CaseOp values", s)
}

// CaseOpValues returns all values of the enum
func CaseOpValues() []CaseOp {
	return _CaseOpValues
}

// IsACaseOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CaseOp) IsACaseOp() bool {
	for _, v := range _CaseOpValues {
		if i == v {
			return true
		}
	}
	return false
}
