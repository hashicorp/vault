// Code generated by "enumer -type=PluginRuntimeType -trimprefix=PluginRuntimeType -transform=snake"; DO NOT EDIT.

package consts

import (
	"fmt"
)

const _PluginRuntimeTypeName = "unsupportedcontainer"

var _PluginRuntimeTypeIndex = [...]uint8{0, 11, 20}

func (i PluginRuntimeType) String() string {
	i -= 1
	if i >= PluginRuntimeType(len(_PluginRuntimeTypeIndex)-1) {
		return fmt.Sprintf("PluginRuntimeType(%d)", i+1)
	}
	return _PluginRuntimeTypeName[_PluginRuntimeTypeIndex[i]:_PluginRuntimeTypeIndex[i+1]]
}

var _PluginRuntimeTypeValues = []PluginRuntimeType{1, 2}

var _PluginRuntimeTypeNameToValueMap = map[string]PluginRuntimeType{
	_PluginRuntimeTypeName[0:11]:  1,
	_PluginRuntimeTypeName[11:20]: 2,
}

// PluginRuntimeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PluginRuntimeTypeString(s string) (PluginRuntimeType, error) {
	if val, ok := _PluginRuntimeTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PluginRuntimeType values", s)
}

// PluginRuntimeTypeValues returns all values of the enum
func PluginRuntimeTypeValues() []PluginRuntimeType {
	return _PluginRuntimeTypeValues
}

// IsAPluginRuntimeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PluginRuntimeType) IsAPluginRuntimeType() bool {
	for _, v := range _PluginRuntimeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
