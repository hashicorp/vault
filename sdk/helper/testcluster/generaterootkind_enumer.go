// Code generated by "enumer -type=GenerateRootKind -trimprefix=GenerateRoot"; DO NOT EDIT.

package testcluster

import (
	"fmt"
)

const _GenerateRootKindName = "RegularDRGenerateRecovery"

var _GenerateRootKindIndex = [...]uint8{0, 7, 9, 25}

func (i GenerateRootKind) String() string {
	if i < 0 || i >= GenerateRootKind(len(_GenerateRootKindIndex)-1) {
		return fmt.Sprintf("GenerateRootKind(%d)", i)
	}
	return _GenerateRootKindName[_GenerateRootKindIndex[i]:_GenerateRootKindIndex[i+1]]
}

var _GenerateRootKindValues = []GenerateRootKind{0, 1, 2}

var _GenerateRootKindNameToValueMap = map[string]GenerateRootKind{
	_GenerateRootKindName[0:7]:  0,
	_GenerateRootKindName[7:9]:  1,
	_GenerateRootKindName[9:25]: 2,
}

// GenerateRootKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GenerateRootKindString(s string) (GenerateRootKind, error) {
	if val, ok := _GenerateRootKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GenerateRootKind values", s)
}

// GenerateRootKindValues returns all values of the enum
func GenerateRootKindValues() []GenerateRootKind {
	return _GenerateRootKindValues
}

// IsAGenerateRootKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GenerateRootKind) IsAGenerateRootKind() bool {
	for _, v := range _GenerateRootKindValues {
		if i == v {
			return true
		}
	}
	return false
}
