// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vault/request_forwarding_service.proto

package vault

import (
	forwarding "github.com/hashicorp/vault/helper/forwarding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EchoRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Message string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// ClusterAddr is used to send up a standby node's address to the active
	// node upon heartbeat
	ClusterAddr string `protobuf:"bytes,2,opt,name=cluster_addr,json=clusterAddr,proto3" json:"cluster_addr,omitempty"`
	// ClusterAddrs is used to send up a list of cluster addresses to a dr
	// primary from a dr secondary
	ClusterAddrs        []string               `protobuf:"bytes,3,rep,name=cluster_addrs,json=clusterAddrs,proto3" json:"cluster_addrs,omitempty"`
	RaftAppliedIndex    uint64                 `protobuf:"varint,4,opt,name=raft_applied_index,json=raftAppliedIndex,proto3" json:"raft_applied_index,omitempty"`
	RaftNodeID          string                 `protobuf:"bytes,5,opt,name=raft_node_id,json=raftNodeId,proto3" json:"raft_node_id,omitempty"`
	NodeInfo            *NodeInformation       `protobuf:"bytes,6,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	RaftTerm            uint64                 `protobuf:"varint,7,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
	RaftDesiredSuffrage string                 `protobuf:"bytes,8,opt,name=raft_desired_suffrage,json=raftDesiredSuffrage,proto3" json:"raft_desired_suffrage,omitempty"`
	RaftUpgradeVersion  string                 `protobuf:"bytes,9,opt,name=raft_upgrade_version,json=raftUpgradeVersion,proto3" json:"raft_upgrade_version,omitempty"`
	RaftRedundancyZone  string                 `protobuf:"bytes,10,opt,name=raft_redundancy_zone,json=raftRedundancyZone,proto3" json:"raft_redundancy_zone,omitempty"`
	SdkVersion          string                 `protobuf:"bytes,11,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Now                 *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=now,proto3" json:"now,omitempty"`
	// last_roundtrip_time is the time taken for the last echo request
	LastRoundtripTime *durationpb.Duration `protobuf:"bytes,13,opt,name=last_roundtrip_time,json=lastRoundtripTime,proto3" json:"last_roundtrip_time,omitempty"`
	// clock_skew_millis is the server time minus the local time
	ClockSkewMillis                   int64 `protobuf:"varint,14,opt,name=clock_skew_millis,json=clockSkewMillis,proto3" json:"clock_skew_millis,omitempty"`
	ReplicationPrimaryCanaryAgeMillis int64 `protobuf:"varint,15,opt,name=replication_primary_canary_age_millis,json=replicationPrimaryCanaryAgeMillis,proto3" json:"replication_primary_canary_age_millis,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EchoRequest) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *EchoRequest) GetClusterAddrs() []string {
	if x != nil {
		return x.ClusterAddrs
	}
	return nil
}

func (x *EchoRequest) GetRaftAppliedIndex() uint64 {
	if x != nil {
		return x.RaftAppliedIndex
	}
	return 0
}

func (x *EchoRequest) GetRaftNodeID() string {
	if x != nil {
		return x.RaftNodeID
	}
	return ""
}

func (x *EchoRequest) GetNodeInfo() *NodeInformation {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *EchoRequest) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

func (x *EchoRequest) GetRaftDesiredSuffrage() string {
	if x != nil {
		return x.RaftDesiredSuffrage
	}
	return ""
}

func (x *EchoRequest) GetRaftUpgradeVersion() string {
	if x != nil {
		return x.RaftUpgradeVersion
	}
	return ""
}

func (x *EchoRequest) GetRaftRedundancyZone() string {
	if x != nil {
		return x.RaftRedundancyZone
	}
	return ""
}

func (x *EchoRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *EchoRequest) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *EchoRequest) GetLastRoundtripTime() *durationpb.Duration {
	if x != nil {
		return x.LastRoundtripTime
	}
	return nil
}

func (x *EchoRequest) GetClockSkewMillis() int64 {
	if x != nil {
		return x.ClockSkewMillis
	}
	return 0
}

func (x *EchoRequest) GetReplicationPrimaryCanaryAgeMillis() int64 {
	if x != nil {
		return x.ReplicationPrimaryCanaryAgeMillis
	}
	return 0
}

type EchoReply struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Message          string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ClusterAddrs     []string               `protobuf:"bytes,2,rep,name=cluster_addrs,json=clusterAddrs,proto3" json:"cluster_addrs,omitempty"`
	ReplicationState uint32                 `protobuf:"varint,3,opt,name=replication_state,json=replicationState,proto3" json:"replication_state,omitempty"`
	RaftAppliedIndex uint64                 `protobuf:"varint,4,opt,name=raft_applied_index,json=raftAppliedIndex,proto3" json:"raft_applied_index,omitempty"`
	RaftNodeID       string                 `protobuf:"bytes,5,opt,name=raft_node_id,json=raftNodeId,proto3" json:"raft_node_id,omitempty"`
	NodeInfo         *NodeInformation       `protobuf:"bytes,6,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	// now is the time on the server
	Now           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=now,proto3" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoReply) Reset() {
	*x = EchoReply{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoReply) ProtoMessage() {}

func (x *EchoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoReply.ProtoReflect.Descriptor instead.
func (*EchoReply) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{1}
}

func (x *EchoReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EchoReply) GetClusterAddrs() []string {
	if x != nil {
		return x.ClusterAddrs
	}
	return nil
}

func (x *EchoReply) GetReplicationState() uint32 {
	if x != nil {
		return x.ReplicationState
	}
	return 0
}

func (x *EchoReply) GetRaftAppliedIndex() uint64 {
	if x != nil {
		return x.RaftAppliedIndex
	}
	return 0
}

func (x *EchoReply) GetRaftNodeID() string {
	if x != nil {
		return x.RaftNodeID
	}
	return ""
}

func (x *EchoReply) GetNodeInfo() *NodeInformation {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *EchoReply) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

type NodeInformation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ClusterAddr      string                 `protobuf:"bytes,1,opt,name=cluster_addr,json=clusterAddr,proto3" json:"cluster_addr,omitempty"`
	ApiAddr          string                 `protobuf:"bytes,2,opt,name=api_addr,json=apiAddr,proto3" json:"api_addr,omitempty"`
	Mode             string                 `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	NodeID           string                 `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ReplicationState uint32                 `protobuf:"varint,5,opt,name=replication_state,json=replicationState,proto3" json:"replication_state,omitempty"`
	Hostname         string                 `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NodeInformation) Reset() {
	*x = NodeInformation{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInformation) ProtoMessage() {}

func (x *NodeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInformation.ProtoReflect.Descriptor instead.
func (*NodeInformation) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInformation) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *NodeInformation) GetApiAddr() string {
	if x != nil {
		return x.ApiAddr
	}
	return ""
}

func (x *NodeInformation) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NodeInformation) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeInformation) GetReplicationState() uint32 {
	if x != nil {
		return x.ReplicationState
	}
	return 0
}

func (x *NodeInformation) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ClientKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	X             []byte                 `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
	Y             []byte                 `protobuf:"bytes,3,opt,name=y,proto3" json:"y,omitempty"`
	D             []byte                 `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientKey) Reset() {
	*x = ClientKey{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientKey) ProtoMessage() {}

func (x *ClientKey) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientKey.ProtoReflect.Descriptor instead.
func (*ClientKey) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{3}
}

func (x *ClientKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClientKey) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *ClientKey) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *ClientKey) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

type PerfStandbyElectionInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerfStandbyElectionInput) Reset() {
	*x = PerfStandbyElectionInput{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerfStandbyElectionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfStandbyElectionInput) ProtoMessage() {}

func (x *PerfStandbyElectionInput) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfStandbyElectionInput.ProtoReflect.Descriptor instead.
func (*PerfStandbyElectionInput) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{4}
}

type PerfStandbyElectionResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ID                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterID          string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PrimaryClusterAddr string                 `protobuf:"bytes,3,opt,name=primary_cluster_addr,json=primaryClusterAddr,proto3" json:"primary_cluster_addr,omitempty"`
	CaCert             []byte                 `protobuf:"bytes,4,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	ClientCert         []byte                 `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ClientKey          *ClientKey             `protobuf:"bytes,6,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PerfStandbyElectionResponse) Reset() {
	*x = PerfStandbyElectionResponse{}
	mi := &file_vault_request_forwarding_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerfStandbyElectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfStandbyElectionResponse) ProtoMessage() {}

func (x *PerfStandbyElectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_request_forwarding_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfStandbyElectionResponse.ProtoReflect.Descriptor instead.
func (*PerfStandbyElectionResponse) Descriptor() ([]byte, []int) {
	return file_vault_request_forwarding_service_proto_rawDescGZIP(), []int{5}
}

func (x *PerfStandbyElectionResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PerfStandbyElectionResponse) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *PerfStandbyElectionResponse) GetPrimaryClusterAddr() string {
	if x != nil {
		return x.PrimaryClusterAddr
	}
	return ""
}

func (x *PerfStandbyElectionResponse) GetCaCert() []byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *PerfStandbyElectionResponse) GetClientCert() []byte {
	if x != nil {
		return x.ClientCert
	}
	return nil
}

func (x *PerfStandbyElectionResponse) GetClientKey() *ClientKey {
	if x != nil {
		return x.ClientKey
	}
	return nil
}

var File_vault_request_forwarding_service_proto protoreflect.FileDescriptor

const file_vault_request_forwarding_service_proto_rawDesc = "" +
	"\n" +
	"&vault/request_forwarding_service.proto\x12\x05vault\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dhelper/forwarding/types.proto\"\xc1\x05\n" +
	"\vEchoRequest\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12!\n" +
	"\fcluster_addr\x18\x02 \x01(\tR\vclusterAddr\x12#\n" +
	"\rcluster_addrs\x18\x03 \x03(\tR\fclusterAddrs\x12,\n" +
	"\x12raft_applied_index\x18\x04 \x01(\x04R\x10raftAppliedIndex\x12 \n" +
	"\fraft_node_id\x18\x05 \x01(\tR\n" +
	"raftNodeID\x123\n" +
	"\tnode_info\x18\x06 \x01(\v2\x16.vault.NodeInformationR\bnodeInfo\x12\x1b\n" +
	"\traft_term\x18\a \x01(\x04R\braftTerm\x122\n" +
	"\x15raft_desired_suffrage\x18\b \x01(\tR\x13raftDesiredSuffrage\x120\n" +
	"\x14raft_upgrade_version\x18\t \x01(\tR\x12raftUpgradeVersion\x120\n" +
	"\x14raft_redundancy_zone\x18\n" +
	" \x01(\tR\x12raftRedundancyZone\x12\x1f\n" +
	"\vsdk_version\x18\v \x01(\tR\n" +
	"sdkVersion\x12,\n" +
	"\x03now\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\x03now\x12I\n" +
	"\x13last_roundtrip_time\x18\r \x01(\v2\x19.google.protobuf.DurationR\x11lastRoundtripTime\x12*\n" +
	"\x11clock_skew_millis\x18\x0e \x01(\x03R\x0fclockSkewMillis\x12P\n" +
	"%replication_primary_canary_age_millis\x18\x0f \x01(\x03R!replicationPrimaryCanaryAgeMillis\"\xaa\x02\n" +
	"\tEchoReply\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12#\n" +
	"\rcluster_addrs\x18\x02 \x03(\tR\fclusterAddrs\x12+\n" +
	"\x11replication_state\x18\x03 \x01(\rR\x10replicationState\x12,\n" +
	"\x12raft_applied_index\x18\x04 \x01(\x04R\x10raftAppliedIndex\x12 \n" +
	"\fraft_node_id\x18\x05 \x01(\tR\n" +
	"raftNodeID\x123\n" +
	"\tnode_info\x18\x06 \x01(\v2\x16.vault.NodeInformationR\bnodeInfo\x12,\n" +
	"\x03now\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x03now\"\xc5\x01\n" +
	"\x0fNodeInformation\x12!\n" +
	"\fcluster_addr\x18\x01 \x01(\tR\vclusterAddr\x12\x19\n" +
	"\bapi_addr\x18\x02 \x01(\tR\aapiAddr\x12\x12\n" +
	"\x04mode\x18\x03 \x01(\tR\x04mode\x12\x17\n" +
	"\anode_id\x18\x04 \x01(\tR\x06nodeID\x12+\n" +
	"\x11replication_state\x18\x05 \x01(\rR\x10replicationState\x12\x1a\n" +
	"\bhostname\x18\x06 \x01(\tR\bhostname\"I\n" +
	"\tClientKey\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\f\n" +
	"\x01x\x18\x02 \x01(\fR\x01x\x12\f\n" +
	"\x01y\x18\x03 \x01(\fR\x01y\x12\f\n" +
	"\x01d\x18\x04 \x01(\fR\x01d\"\x1a\n" +
	"\x18PerfStandbyElectionInput\"\xe9\x01\n" +
	"\x1bPerfStandbyElectionResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterID\x120\n" +
	"\x14primary_cluster_addr\x18\x03 \x01(\tR\x12primaryClusterAddr\x12\x17\n" +
	"\aca_cert\x18\x04 \x01(\fR\x06caCert\x12\x1f\n" +
	"\vclient_cert\x18\x05 \x01(\fR\n" +
	"clientCert\x12/\n" +
	"\n" +
	"client_key\x18\x06 \x01(\v2\x10.vault.ClientKeyR\tclientKey2\xf0\x01\n" +
	"\x11RequestForwarding\x12=\n" +
	"\x0eForwardRequest\x12\x13.forwarding.Request\x1a\x14.forwarding.Response\"\x00\x12.\n" +
	"\x04Echo\x12\x12.vault.EchoRequest\x1a\x10.vault.EchoReply\"\x00\x12l\n" +
	"!PerformanceStandbyElectionRequest\x12\x1f.vault.PerfStandbyElectionInput\x1a\".vault.PerfStandbyElectionResponse\"\x000\x01B\"Z github.com/hashicorp/vault/vaultb\x06proto3"

var (
	file_vault_request_forwarding_service_proto_rawDescOnce sync.Once
	file_vault_request_forwarding_service_proto_rawDescData []byte
)

func file_vault_request_forwarding_service_proto_rawDescGZIP() []byte {
	file_vault_request_forwarding_service_proto_rawDescOnce.Do(func() {
		file_vault_request_forwarding_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vault_request_forwarding_service_proto_rawDesc), len(file_vault_request_forwarding_service_proto_rawDesc)))
	})
	return file_vault_request_forwarding_service_proto_rawDescData
}

var file_vault_request_forwarding_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_vault_request_forwarding_service_proto_goTypes = []any{
	(*EchoRequest)(nil),                 // 0: vault.EchoRequest
	(*EchoReply)(nil),                   // 1: vault.EchoReply
	(*NodeInformation)(nil),             // 2: vault.NodeInformation
	(*ClientKey)(nil),                   // 3: vault.ClientKey
	(*PerfStandbyElectionInput)(nil),    // 4: vault.PerfStandbyElectionInput
	(*PerfStandbyElectionResponse)(nil), // 5: vault.PerfStandbyElectionResponse
	(*timestamppb.Timestamp)(nil),       // 6: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 7: google.protobuf.Duration
	(*forwarding.Request)(nil),          // 8: forwarding.Request
	(*forwarding.Response)(nil),         // 9: forwarding.Response
}
var file_vault_request_forwarding_service_proto_depIDxs = []int32{
	2, // 0: vault.EchoRequest.node_info:type_name -> vault.NodeInformation
	6, // 1: vault.EchoRequest.now:type_name -> google.protobuf.Timestamp
	7, // 2: vault.EchoRequest.last_roundtrip_time:type_name -> google.protobuf.Duration
	2, // 3: vault.EchoReply.node_info:type_name -> vault.NodeInformation
	6, // 4: vault.EchoReply.now:type_name -> google.protobuf.Timestamp
	3, // 5: vault.PerfStandbyElectionResponse.client_key:type_name -> vault.ClientKey
	8, // 6: vault.RequestForwarding.ForwardRequest:input_type -> forwarding.Request
	0, // 7: vault.RequestForwarding.Echo:input_type -> vault.EchoRequest
	4, // 8: vault.RequestForwarding.PerformanceStandbyElectionRequest:input_type -> vault.PerfStandbyElectionInput
	9, // 9: vault.RequestForwarding.ForwardRequest:output_type -> forwarding.Response
	1, // 10: vault.RequestForwarding.Echo:output_type -> vault.EchoReply
	5, // 11: vault.RequestForwarding.PerformanceStandbyElectionRequest:output_type -> vault.PerfStandbyElectionResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_vault_request_forwarding_service_proto_init() }
func file_vault_request_forwarding_service_proto_init() {
	if File_vault_request_forwarding_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vault_request_forwarding_service_proto_rawDesc), len(file_vault_request_forwarding_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vault_request_forwarding_service_proto_goTypes,
		DependencyIndexes: file_vault_request_forwarding_service_proto_depIDxs,
		MessageInfos:      file_vault_request_forwarding_service_proto_msgTypes,
	}.Build()
	File_vault_request_forwarding_service_proto = out.File
	file_vault_request_forwarding_service_proto_goTypes = nil
	file_vault_request_forwarding_service_proto_depIDxs = nil
}
