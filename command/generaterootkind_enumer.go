// Code generated by "enumer -type=generateRootKind -trimprefix=generateRoot"; DO NOT EDIT.

package command

import (
	"fmt"
)

const _generateRootKindName = "RegularDRRecovery"

var _generateRootKindIndex = [...]uint8{0, 7, 9, 17}

func (i generateRootKind) String() string {
	if i < 0 || i >= generateRootKind(len(_generateRootKindIndex)-1) {
		return fmt.Sprintf("generateRootKind(%d)", i)
	}
	return _generateRootKindName[_generateRootKindIndex[i]:_generateRootKindIndex[i+1]]
}

var _generateRootKindValues = []generateRootKind{0, 1, 2}

var _generateRootKindNameToValueMap = map[string]generateRootKind{
	_generateRootKindName[0:7]:  0,
	_generateRootKindName[7:9]:  1,
	_generateRootKindName[9:17]: 2,
}

// generateRootKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func generateRootKindString(s string) (generateRootKind, error) {
	if val, ok := _generateRootKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to generateRootKind values", s)
}

// generateRootKindValues returns all values of the enum
func generateRootKindValues() []generateRootKind {
	return _generateRootKindValues
}

// IsAgenerateRootKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i generateRootKind) IsAgenerateRootKind() bool {
	for _, v := range _generateRootKindValues {
		if i == v {
			return true
		}
	}
	return false
}
